[
  {
    "instruction": "Is the following a way to mitigate Missing Authentication for Critical Function (CWE-306)?\nSpecify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Authentication for Critical Function (CWE-306)",
      "ddmyn_mitigation_detection": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)?\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Service (T1543.003)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Service (T1543.003)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Hardware Supply Chain (T1195.003)?\nSuspending a running process on a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Hardware Supply Chain (T1195.003)",
      "ddmyn_mitigation_detection": "Suspending a running process on a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Bluetooth (T1011.001) by using the strategy below?\nBlock users or groups from installing or using unapproved hardware on systems, including USB devices.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Bluetooth (T1011.001)",
      "ddmyn_mitigation_detection": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Altered Installed BIOS (CAPEC-532)?\nPerform input validation for all remote content.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Altered Installed BIOS (CAPEC-532)",
      "ddmyn_mitigation_detection": "Perform input validation for all remote content.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Internal Proxy (T1090.001) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Internal Proxy (T1090.001)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Network Boundary Bridging (T1599) by using the strategy below?\nSet and enforce secure password policies for accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Network Boundary Bridging (T1599)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Impair Command History Logging (T1562.003)?\nRestrict execution of code to a virtual environment on or in transit to an endpoint system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Impair Command History Logging (T1562.003)",
      "ddmyn_mitigation_detection": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Portable Executable Injection (T1055.002)?\nData inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Install Rootkit  (CAPEC-552) by using the strategy below?\nPrevent adversary access to privileged accounts necessary to install rootkits.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Rootkit  (CAPEC-552)",
      "ddmyn_mitigation_detection": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Rogue Domain Controller (T1207) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Application Access Token (T1528) by using the strategy below?\nExpiring an existing set of credentials and reissuing a new valid set?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Application Access Token (T1528)",
      "ddmyn_mitigation_detection": "Expiring an existing set of credentials and reissuing a new valid set",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Covert Storage Channel (CWE-515)?\nImplement password aging functionality that requires passwords be changed after a certain point.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Covert Storage Channel (CWE-515)",
      "ddmyn_mitigation_detection": "Implement password aging functionality that requires passwords be changed after a certain point.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1587.004 (Exploits) by using the strategy below?\nLook for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1587.004 (Exploits)",
      "ddmyn_mitigation_detection": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SSH (T1021.004)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SSH (T1021.004)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Develop Capabilities (T1587)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Develop Capabilities (T1587)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Inducing Account Lockout (CAPEC-2)?\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inducing Account Lockout (CAPEC-2)",
      "ddmyn_mitigation_detection": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Email Hiding Rules (T1564.008)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1056.004 (Credential API Hooking)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1056.004 (Credential API Hooking)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Access of Memory Location Before Start of Buffer (CWE-786) by using the strategy below?\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Access of Memory Location Before Start of Buffer (CWE-786)",
      "ddmyn_mitigation_detection": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Numeric Truncation Error (CWE-197)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Numeric Truncation Error (CWE-197)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Observable Behavioral Discrepancy (CWE-205)?\nUse spyware detection and removal software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Behavioral Discrepancy (CWE-205)",
      "ddmyn_mitigation_detection": "Use spyware detection and removal software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Incorrect Comparison Logic Granularity (CWE-1254)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Comparison Logic Granularity (CWE-1254)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Ownership Management (CWE-282)?\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Follow the principle of least privilege when assigning access rights to entities in a software system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Boot or Logon Initialization Scripts (T1037)?\nRestrict the ability to modify certain hives or keys in the Windows Registry.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Boot or Logon Initialization Scripts (T1037)",
      "ddmyn_mitigation_detection": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Access Control for Register Interface (CWE-1262)?\nDesign proper policies for hardware register access from software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Access Control for Register Interface (CWE-1262)",
      "ddmyn_mitigation_detection": "Design proper policies for hardware register access from software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Web Session Cookie (T1539) by using the strategy below?\nDeleting a set of credentials permanently to prevent them from being used to authenticate.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Deleting a set of credentials permanently to prevent them from being used to authenticate.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Insufficient Session Expiration (CWE-613) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficient Session Expiration (CWE-613)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Host Application Interface Scanner Cost effective for partial coverage: Fuzz Tester Framework-based Fuzzer Automated Monitored Execution Forced Path Execution",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Storage of File With Sensitive Data Under FTP Root (CWE-220)?\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Storage of File With Sensitive Data Under FTP Root (CWE-220)",
      "ddmyn_mitigation_detection": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unix Shell Configuration Modification (T1546.004)?\nRestrict access by setting directory and file permissions that are not specific to users or privileged accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Object Relational Mapping Injection (CAPEC-109) by using the strategy below?\nLeverage multi-factor authentication for all authentication services.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Object Relational Mapping Injection (CAPEC-109)",
      "ddmyn_mitigation_detection": "Leverage multi-factor authentication for all authentication services.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Control of Resource Identifiers ('Resource Injection') (CWE-99)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Race Condition within a Thread (CWE-366) by using the strategy below?\nUse locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Race Condition within a Thread (CWE-366)",
      "ddmyn_mitigation_detection": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Application Shimming (T1546.011)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Shimming (T1546.011)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1037.001 (Logon Script (Windows))?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Run Virtual Instance (T1564.006)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Run Virtual Instance (T1564.006)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1033 (System Owner/User Discovery)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lateral Tool Transfer (T1570) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Windows Admin Shares with Stolen Credentials (CAPEC-561)?\nThe client software should not install untrusted code from a non-authenticated server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Admin Shares with Stolen Credentials (CAPEC-561)",
      "ddmyn_mitigation_detection": "The client software should not install untrusted code from a non-authenticated server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Domain Accounts (T1078.002) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect LC_LOAD_DYLIB Addition (T1546.006)?\nHost data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "LC_LOAD_DYLIB Addition (T1546.006)",
      "ddmyn_mitigation_detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citations: University of Birmingham C2)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Local Accounts (T1078.003) by using the strategy below?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Accounts (T1078.003)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate VBA Stomping (T1564.007)?\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "VBA Stomping (T1564.007)",
      "ddmyn_mitigation_detection": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1606 (Forge Web Credentials)?\nDetecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1606 (Forge Web Credentials)",
      "ddmyn_mitigation_detection": "Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Execution After Redirect (EAR) (CWE-698)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Execution After Redirect (EAR) (CWE-698)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Data Staging (T1074.001)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1003.003 (NTDS)?\nUse capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1003.003 (NTDS)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Missing Lock Check (CWE-414)?\nImplement a reliable lock mechanism.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Lock Check (CWE-414)",
      "ddmyn_mitigation_detection": "Implement a reliable lock mechanism.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Port Knocking (T1205.001)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Knocking (T1205.001)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001) by using the strategy below?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Network Device CLI (T1059.008)?\nConsider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.(Citations: Cisco IOS Software Integrity Assurance - Command History)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Network Device CLI (T1059.008)",
      "ddmyn_mitigation_detection": "Consider reviewing command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Consider comparing a copy of the network device configuration against a known-good version to discover unauthorized changes to the command interpreter. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor.(Citations: Cisco IOS Software Integrity Assurance - Command History)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Scheduled Task (T1053.005)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Scheduled Task (T1053.005)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1104 (Multi-Stage Channels) by using the strategy below?\nSoftware inventorying identifies and records the software items in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1104 (Multi-Stage Channels)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1036.005 (Match Legitimate Name or Location) by using the strategy below?\nControlling access to local computer system resources with kernel-level capabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1036.005 (Match Legitimate Name or Location)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Content Spoofing (CAPEC-148)?\nImplementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Content Spoofing (CAPEC-148)",
      "ddmyn_mitigation_detection": "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-760 (Use of a One-Way Hash with a Predictable Salt)?\nPeriodically review the privileges and their owners.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-760 (Use of a One-Way Hash with a Predictable Salt)",
      "ddmyn_mitigation_detection": "Periodically review the privileges and their owners.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Lack of Administrator Control over Security (CWE-671) by using the strategy below?\nBreak up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lack of Administrator Control over Security (CWE-671)",
      "ddmyn_mitigation_detection": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Firmware (T1592.003)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Firmware (T1592.003)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))?\nUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))",
      "ddmyn_mitigation_detection": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Trusted Relationship (T1199)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Trusted Relationship (T1199)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reflection Amplification (T1498.002)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cleartext Storage in the Registry (CWE-314)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cleartext Storage in the Registry (CWE-314)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cloud Groups (T1069.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cloud Groups (T1069.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.(Citations: Harmj0y Domain Trusts, Microsoft GetAllTrustRelationships)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate TCP Null Scan (CAPEC-304) by using the strategy below?\nMaintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP Null Scan (CAPEC-304)",
      "ddmyn_mitigation_detection": "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Suspicious Comment (CWE-546) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Suspicious Comment (CWE-546)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Formal Methods / Correct-By-Construction Cost effective for partial coverage: Attack Modeling Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate IP Address Blocking (CAPEC-590) by using the strategy below?\nHave a large pool of backup IPs built into the application and support proxy capability in the application.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "IP Address Blocking (CAPEC-590)",
      "ddmyn_mitigation_detection": "Have a large pool of backup IPs built into the application and support proxy capability in the application.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate File and Directory Discovery (T1083) by using the strategy below?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "File and Directory Discovery (T1083)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Malicious Code Implanted During Chip Programming (CAPEC-672)?\nConduct detailed vendor assessment before acquiring COTS hardware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious Code Implanted During Chip Programming (CAPEC-672)",
      "ddmyn_mitigation_detection": "Conduct detailed vendor assessment before acquiring COTS hardware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Thread Execution Hijacking (T1055.003)?\nMonitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.010 (AppInit DLLs)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1548.003 (Sudo and Sudo Caching)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Owner/User Discovery (T1033)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Clear Linux or Mac System Logs (T1070.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Space after Filename (T1036.006)?\nControlling access to local computer system resources with kernel-level capabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "Controlling access to local computer system resources with kernel-level capabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1021 (Improper Restriction of Rendered UI Layers or Frames)?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1021 (Improper Restriction of Rendered UI Layers or Frames)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect XML Injection (CAPEC-250)?\nAuthentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "XML Injection (CAPEC-250)",
      "ddmyn_mitigation_detection": "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Hiding Rules (T1564.008)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Hiding Rules (T1564.008)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Modification of Registry Run Keys (CAPEC-270)?\nIdentify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Modification of Registry Run Keys (CAPEC-270)",
      "ddmyn_mitigation_detection": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Local Data Staging (T1074.001)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Permissive List of Allowed Inputs (CWE-183)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776) by using the strategy below?\nWith Struts, write all data from form beans with the bean's filter attribute set to true.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion') (CWE-776)",
      "ddmyn_mitigation_detection": "With Struts, write all data from form beans with the bean's filter attribute set to true.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.007 (Netsh Helper DLL) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect External Control of File Name or Path (CWE-73)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "External Control of File Name or Path (CWE-73)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1218.001 (Compiled HTML File)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1218.001 (Compiled HTML File)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disk Structure Wipe (T1561.002) by using the strategy below?\nTake and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disk Structure Wipe (T1561.002)",
      "ddmyn_mitigation_detection": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rootkit (T1014)?\nRestricting access to a local file by configuring operating system functionality.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Firmware Not Updateable (CWE-1277)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Thread Execution Hijacking (T1055.003)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Thread Execution Hijacking (T1055.003)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing Service (T1598.001)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing Service (T1598.001)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Ownership Management (CWE-282)?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Ownership Management (CWE-282)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reliance on a Single Factor in a Security Decision (CWE-654)?\nUse redundant access rules on different choke points (e.g., firewalls).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on a Single Factor in a Security Decision (CWE-654)",
      "ddmyn_mitigation_detection": "Use redundant access rules on different choke points (e.g., firewalls).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Developer Signing Maliciously Altered Software (CAPEC-673) by using the strategy below?\nHave a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Developer Signing Maliciously Altered Software (CAPEC-673)",
      "ddmyn_mitigation_detection": "Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Permissive List of Allowed Inputs (CWE-183)?\nPerform proper forward and reverse DNS lookups to detect DNS spoofing.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate HTML Smuggling (T1027.006)?\nUse signatures or heuristics to detect malicious software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "HTML Smuggling (T1027.006)",
      "ddmyn_mitigation_detection": "Use signatures or heuristics to detect malicious software.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Tool (T1588.002) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Tool (T1588.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1083 (File and Directory Discovery)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1083 (File and Directory Discovery)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1055.002 (Portable Executable Injection)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Transmitted Data Manipulation (T1565.002) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate J2EE Misconfiguration: Insufficient Session-ID Length (CWE-6)?\nOnly call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "J2EE Misconfiguration: Insufficient Session-ID Length (CWE-6)",
      "ddmyn_mitigation_detection": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-457 (Use of Uninitialized Variable)?\nMost compilers will complain about the use of uninitialized variables if warnings are turned on.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-457 (Use of Uninitialized Variable)",
      "ddmyn_mitigation_detection": "Most compilers will complain about the use of uninitialized variables if warnings are turned on.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Unverified Ownership (CWE-283)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unverified Ownership (CWE-283)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Fronting (T1090.004)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate DNS Cache Poisoning (CAPEC-142) by using the strategy below?\nConfiguration: Disable client side DNS caching.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS Cache Poisoning (CAPEC-142)",
      "ddmyn_mitigation_detection": "Configuration: Disable client side DNS caching.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Subvert Trust Controls (T1553) by using the strategy below?\nSet and enforce secure password policies for accounts.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Subvert Trust Controls (T1553)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Redirect Access to Libraries (CAPEC-159)?\nImplementation: Check the integrity of the dynamically linked libraries before use them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Redirect Access to Libraries (CAPEC-159)",
      "ddmyn_mitigation_detection": "Implementation: Check the integrity of the dynamically linked libraries before use them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.012 (Image File Execution Options Injection) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.012 (Image File Execution Options Injection)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CWE-706 (Use of Incorrectly-Resolved Name or Reference)?\nAutomated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-706 (Use of Incorrectly-Resolved Name or Reference)",
      "ddmyn_mitigation_detection": "Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1074.001 (Local Data Staging) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1074.001 (Local Data Staging)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1548.003 (Sudo and Sudo Caching)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Network Boundary Bridging (T1599)?\nUse network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Network Boundary Bridging (T1599)",
      "ddmyn_mitigation_detection": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Null Termination (CWE-170)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Null Termination (CWE-170)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-73 (User-Controlled Filename)?\nEnsure all content that is delivered to client is sanitized against an acceptable content specification.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-73 (User-Controlled Filename)",
      "ddmyn_mitigation_detection": "Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Determine Physical Locations (T1591.001)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Determine Physical Locations (T1591.001)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Non-Standard Port (T1571)?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate SIP and Trust Provider Hijacking (T1553.003) by using the strategy below?\nRestoring an software configuration.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SIP and Trust Provider Hijacking (T1553.003)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Web Cookies (T1606.001)?\nNetwork intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Web Cookies (T1606.001)",
      "ddmyn_mitigation_detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed. URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link. Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once User Execution occurs.(Citations: Microsoft Anti Spoofing, ACSC Email Spoofing)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Object Injection (CAPEC-586)?\nFrequently change the SSID to new and unrelated values\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Object Injection (CAPEC-586)",
      "ddmyn_mitigation_detection": "Frequently change the SSID to new and unrelated values",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71) by using the strategy below?\nImplementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Steal Web Session Cookie (T1539) by using the strategy below?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Steal Web Session Cookie (T1539)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exfiltration Over Alternative Protocol (T1048)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Multi-hop Proxy (T1090.003)?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1547.010 (Port Monitors)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.010 (Port Monitors)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Dictionary-based Password Attack (CAPEC-16)?\nYou are redirected to a website that instructs you to call the number on-screen to address the call-to-action.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dictionary-based Password Attack (CAPEC-16)",
      "ddmyn_mitigation_detection": "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Fronting (T1090.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Browser Extensions (T1176) by using the strategy below?\nAnalyzing a Container Image with respect to a set of policies.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Browser Extensions (T1176)",
      "ddmyn_mitigation_detection": "Analyzing a Container Image with respect to a set of policies.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect External Defacement (T1491.002)?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor for processes that can be used to enumerate user accounts, such as <code>net.exe</code> and <code>net1.exe</code>, especially when executed in quick succession.(Citations: Elastic - Koadiac Detection with EQL)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "External Defacement (T1491.002)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. Monitor for processes that can be used to enumerate user accounts, such as <code>net.exe</code> and <code>net1.exe</code>, especially when executed in quick succession.(Citations: Elastic - Koadiac Detection with EQL)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nUsing kernel-level capabilities to isolate processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate DTD Injection (CAPEC-228) by using the strategy below?\nUser input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DTD Injection (CAPEC-228)",
      "ddmyn_mitigation_detection": "User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Launch Agent (T1543.001)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Password Spraying (T1110.003) by using the strategy below?\nUse two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Spraying (T1110.003)",
      "ddmyn_mitigation_detection": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Client Execution (T1203)?\nThe operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Unsynchronized Access to Shared Data in a Multithreaded Context (CWE-567)?\nFuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unsynchronized Access to Shared Data in a Multithreaded Context (CWE-567)",
      "ddmyn_mitigation_detection": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Transmitted Data Manipulation (T1565.002) by using the strategy below?\nComparing the \"text\" or \"code\" memory segments to a source of truth.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Transmitted Data Manipulation (T1565.002)",
      "ddmyn_mitigation_detection": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Insufficiently Protected Credentials (CWE-522)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Insufficiently Protected Credentials (CWE-522)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nBlocking the execution of files on a host in accordance with defined application policy rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Blocking the execution of files on a host in accordance with defined application policy rules.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Traffic Signaling (T1205)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Traffic Signaling (T1205)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate SSH (T1021.004)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SSH (T1021.004)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-hop Proxy (T1090.003)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1205.001 (Port Knocking)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205.001 (Port Knocking)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Application Window Discovery (T1010)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Permissive List of Allowed Inputs (CWE-183)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1546.004 (Unix Shell Configuration Modification)?\nDetects processes that modify, change, or replace their own code at runtime.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.004 (Unix Shell Configuration Modification)",
      "ddmyn_mitigation_detection": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1123 (Audio Capture)?\nEmulating instructions in a file looking for specific patterns.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1123 (Audio Capture)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-643 (Identify Shared Files/Directories on System)?\nPurchase potential SoundSquatted domains and forward to legitimate domain.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-643 (Identify Shared Files/Directories on System)",
      "ddmyn_mitigation_detection": "Purchase potential SoundSquatted domains and forward to legitimate domain.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Process Discovery (T1057) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Discovery (T1057)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Software (T1592.002)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Software (T1592.002)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Command and Scripting Interpreter (T1059)?\nCommand-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Command and Scripting Interpreter (T1059)",
      "ddmyn_mitigation_detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate TCP RPC Scan (CAPEC-307)?\nDisable MSSQL xp_cmdshell directive on the database\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "TCP RPC Scan (CAPEC-307)",
      "ddmyn_mitigation_detection": "Disable MSSQL xp_cmdshell directive on the database",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.002 (Portable Executable Injection)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.002 (Portable Executable Injection)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nComparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rootkit (T1014)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Interception (CAPEC-117) by using the strategy below?\nLeverage encryption to encode the transmission of data thus making it accessible only to authorized parties.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Interception (CAPEC-117)",
      "ddmyn_mitigation_detection": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1095 (Non-Application Layer Protocol)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1095 (Non-Application Layer Protocol)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-hop Proxy (T1090.003) by using the strategy below?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Revert Cloud Instance (T1578.004) by using the strategy below?\nIdentify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration.(Citations: US-CERT TA18-068A 2018)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Revert Cloud Instance (T1578.004)",
      "ddmyn_mitigation_detection": "Identify network traffic sent or received by untrusted hosts or networks. Configure signatures to identify strings that may be found in a network device configuration.(Citations: US-CERT TA18-068A 2018)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1205.001 (Port Knocking) by using the strategy below?\nUsing kernel-level capabilities to isolate processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1205.001 (Port Knocking)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect CAPEC-600 (Credential Stuffing)?\nThe login attempts use passwords that have been used previously by the user account in question.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CAPEC-600 (Credential Stuffing)",
      "ddmyn_mitigation_detection": "The login attempts use passwords that have been used previously by the user account in question.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Content Spoofing (CAPEC-148)?\nImplementation: Reject HTTP request with a malicious Host header.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Content Spoofing (CAPEC-148)",
      "ddmyn_mitigation_detection": "Implementation: Reject HTTP request with a malicious Host header.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Lock Behavior After Power State Transition (CWE-1232)?\nSecurity Lock bit protections should be reviewed for behavior across supported power state transitions. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Lock Behavior After Power State Transition (CWE-1232)",
      "ddmyn_mitigation_detection": "Security Lock bit protections should be reviewed for behavior across supported power state transitions. Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Multi-hop Proxy (T1090.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-hop Proxy (T1090.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1564.008 (Email Hiding Rules)?\nModifying an application's configuration to reduce its attack surface.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1564.008 (Email Hiding Rules)",
      "ddmyn_mitigation_detection": "Modifying an application's configuration to reduce its attack surface.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Match Legitimate Name or Location (T1036.005)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1083 (File and Directory Discovery) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1083 (File and Directory Discovery)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.009 (Proc Memory)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Cloud Accounts (T1078.004) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.011 (Application Shimming)?\nPerform regular software updates to mitigate exploitation risk.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.011 (Application Shimming)",
      "ddmyn_mitigation_detection": "Perform regular software updates to mitigate exploitation risk.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Space after Filename (T1036.006)?\nUsing a digital signature to authenticate a file before opening.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "Using a digital signature to authenticate a file before opening.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Services File Permissions Weakness (T1574.010)?\nSoftware inventorying identifies and records the software items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Services File Permissions Weakness (T1574.010)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Spearphishing via Service (T1566.003)?\nTaking known malicious identifiers and determining if they are present in a system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Taking known malicious identifiers and determining if they are present in a system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Multi-Stage Channels (T1104)?\nMonitor cloud logs for modification or creation of new security groups or firewall rules.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Monitor cloud logs for modification or creation of new security groups or firewall rules.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Handling of Unexpected Data Type (CWE-241) by using the strategy below?\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Handling of Unexpected Data Type (CWE-241)",
      "ddmyn_mitigation_detection": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Operator Precedence Logic Error (CWE-783) by using the strategy below?\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Operator Precedence Logic Error (CWE-783)",
      "ddmyn_mitigation_detection": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over C2 Channel (T1041) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over C2 Channel (T1041)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Launch Agent (T1543.001)?\nTaking known malicious identifiers and determining if they are present in a system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Launch Agent (T1543.001)",
      "ddmyn_mitigation_detection": "Taking known malicious identifiers and determining if they are present in a system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Firmware Not Updateable (CWE-1277)?\nDesign the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Firmware Not Updateable (CWE-1277)",
      "ddmyn_mitigation_detection": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate LSASS Driver (T1547.008)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.007 (Netsh Helper DLL) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sensitive Cookie with Improper SameSite Attribute (CWE-1275) by using the strategy below?\nResolve all URIs to absolute or canonical representations before processing.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sensitive Cookie with Improper SameSite Attribute (CWE-1275)",
      "ddmyn_mitigation_detection": "Resolve all URIs to absolute or canonical representations before processing.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Web Services Protocol Manipulation (CAPEC-278) by using the strategy below?\nMonitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Services Protocol Manipulation (CAPEC-278)",
      "ddmyn_mitigation_detection": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Predictable Value Range from Previous Values (CWE-343)?\nNIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Predictable Value Range from Previous Values (CWE-343)",
      "ddmyn_mitigation_detection": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1558.003 (Kerberoasting)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.003 (Kerberoasting)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Forced Integer Overflow (CAPEC-92)?\nUse a language or compiler that performs automatic bounds checking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmyn_mitigation_detection": "Use a language or compiler that performs automatic bounds checking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Owner/User Discovery (T1033)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Relative Path Traversal (CWE-23)?\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Relative Path Traversal (CWE-23)",
      "ddmyn_mitigation_detection": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: realpath() in C getCanonicalPath() in Java GetFullPath() in ASP.NET realpath() or abs_path() in Perl realpath() in PHP",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443) by using the strategy below?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC-443)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate COR_PROFILER (T1574.012)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of Known Kerberos Credentials (CAPEC-652)?\nDo not allow Kerberos service accounts to be a local administrator on more than one system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Known Kerberos Credentials (CAPEC-652)",
      "ddmyn_mitigation_detection": "Do not allow Kerberos service accounts to be a local administrator on more than one system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1071.003 (Mail Protocols)?\nMonitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1071.003 (Mail Protocols)",
      "ddmyn_mitigation_detection": "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citations: CloudSploit - Unused AWS Regions)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1584.002 (DNS Server)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1584.002 (DNS Server)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1003.001 (LSASS Memory)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1003.001 (LSASS Memory)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Stored Data Manipulation (T1565.001) by using the strategy below?\nRemoving tokens or credentials from an authentication cache to prevent further user associated account accesses.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Observable Internal Behavioral Discrepancy (CWE-206) by using the strategy below?\nSetup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Internal Behavioral Discrepancy (CWE-206)",
      "ddmyn_mitigation_detection": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Code Repositories (T1213.003) by using the strategy below?\nData inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Code Repositories (T1213.003)",
      "ddmyn_mitigation_detection": "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-75 (Failure to Sanitize Special Elements into a Different Plane (Special Element Injection))",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate J2EE Bad Practices: Non-serializable Object Stored in Session (CWE-579) by using the strategy below?\nIn order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "J2EE Bad Practices: Non-serializable Object Stored in Session (CWE-579)",
      "ddmyn_mitigation_detection": "In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)?\nExecuting or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1048.001 (Exfiltration Over Symmetric Encrypted Non-C2 Protocol)",
      "ddmyn_mitigation_detection": "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exfiltration Over Alternative Protocol (T1048) by using the strategy below?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Alternative Protocol (T1048)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1195.003 (Compromise Hardware Supply Chain)?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1195.003 (Compromise Hardware Supply Chain)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-494 (Download of Code Without Integrity Check)?\nDebugging information should not make its way into a production release.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-494 (Download of Code Without Integrity Check)",
      "ddmyn_mitigation_detection": "Debugging information should not make its way into a production release.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1253 (Incorrect Selection of Fuse Values)?\nDo not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1253 (Incorrect Selection of Fuse Values)",
      "ddmyn_mitigation_detection": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nRestoring an entity's access to resources.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1585 (Establish Accounts)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1585 (Establish Accounts)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate NTDS (T1003.003)?\nProtect sensitive information with strong encryption.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "NTDS (T1003.003)",
      "ddmyn_mitigation_detection": "Protect sensitive information with strong encryption.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Service Discovery (T1007)?\nLimiting the transmission of a credential to a scoped set of relying parties.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1033 (System Owner/User Discovery) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1033 (System Owner/User Discovery)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1030 (Data Transfer Size Limits) by using the strategy below?\nCollecting network communication protocol metadata and identifying statistical outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1030 (Data Transfer Size Limits)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-520 (Counterfeit Hardware Component Inserted During Product Assembly)?\nImplementation: Validate object before deserialization process\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-520 (Counterfeit Hardware Component Inserted During Product Assembly)",
      "ddmyn_mitigation_detection": "Implementation: Validate object before deserialization process",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1585 (Establish Accounts)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1585 (Establish Accounts)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Service (T1102)?\nDetermining if a URL is benign or malicious by analyzing the URL or its components.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Determining if a URL is benign or malicious by analyzing the URL or its components.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cross-Site Request Forgery (CSRF) (CWE-352)?\nEnsure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "ddmyn_mitigation_detection": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Host Software Binary (T1554)?\nAnalyzing a Container Image with respect to a set of policies.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Analyzing a Container Image with respect to a set of policies.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Security Software Discovery (T1518.001) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CAPEC-271 (Schema Poisoning)?\nImplementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-271 (Schema Poisoning)",
      "ddmyn_mitigation_detection": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Missing Release of Resource after Effective Lifetime (CWE-772)?\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Release of Resource after Effective Lifetime (CWE-772)",
      "ddmyn_mitigation_detection": "Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Use of Uninitialized Variable (CWE-457) by using the strategy below?\nWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of Uninitialized Variable (CWE-457)",
      "ddmyn_mitigation_detection": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Client Execution (T1203)?\nComparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Client Execution (T1203)",
      "ddmyn_mitigation_detection": "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-442 (Infected Software)?\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-442 (Infected Software)",
      "ddmyn_mitigation_detection": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1554 (Compromise Host Software Binary)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1554 (Compromise Host Software Binary)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Privilege Context Switching Error (CWE-270)?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Privilege Context Switching Error (CWE-270)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Dictionary-based Password Attack (CAPEC-16)?\nMany invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Dictionary-based Password Attack (CAPEC-16)",
      "ddmyn_mitigation_detection": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Bash History (T1552.003)?\nDetecting any suspicious changes to files in a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bash History (T1552.003)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)?\nCredential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-1332 (Improper Handling of Faults that Lead to Instruction Skips)",
      "ddmyn_mitigation_detection": "Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Active Setup (T1547.014)?\nMonitor Registry key additions and/or modifications to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.(Citations: TechNet Autoruns)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Active Setup (T1547.014)",
      "ddmyn_mitigation_detection": "Monitor Registry key additions and/or modifications to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\</code>. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the Active Setup Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.(Citations: TechNet Autoruns)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-323 (Reusing a Nonce, Key Pair in Encryption) by using the strategy below?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-323 (Reusing a Nonce, Key Pair in Encryption)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Targeted Malware (CAPEC-542)?\nSoftware being run on a system matches a file signature found in a malware database\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Targeted Malware (CAPEC-542)",
      "ddmyn_mitigation_detection": "Software being run on a system matches a file signature found in a malware database",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Indirect Command Execution (T1202)?\nMonitor for execution of AppleScript through <code>osascript</code> and usage of the <code>NSAppleScript</code> and <code>OSAScript</code> APIs that may be related to other suspicious behavior occurring on the system. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Indirect Command Execution (T1202)",
      "ddmyn_mitigation_detection": "Monitor for execution of AppleScript through <code>osascript</code> and usage of the <code>NSAppleScript</code> and <code>OSAScript</code> APIs that may be related to other suspicious behavior occurring on the system. Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Stored Data Manipulation (T1565.001)?\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Stored Data Manipulation (T1565.001)",
      "ddmyn_mitigation_detection": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-220 (Storage of File With Sensitive Data Under FTP Root) by using the strategy below?\nAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-220 (Storage of File With Sensitive Data Under FTP Root)",
      "ddmyn_mitigation_detection": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cleartext Storage of Sensitive Information in a Cookie (CWE-315)?\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information in a Cookie (CWE-315)",
      "ddmyn_mitigation_detection": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Wordlist Scanning (T1595.003)?\nUse network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Wordlist Scanning (T1595.003)",
      "ddmyn_mitigation_detection": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Software Discovery (T1518.001)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Software Discovery (T1518.001)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Schema Poisoning (CAPEC-271)?\nAvoid emailing important documents and configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Schema Poisoning (CAPEC-271)",
      "ddmyn_mitigation_detection": "Avoid emailing important documents and configurations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Relative Path Traversal (CWE-23)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Relative Path Traversal (CWE-23)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Permissive List of Allowed Inputs (CWE-183) by using the strategy below?\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Permissive List of Allowed Inputs (CWE-183)",
      "ddmyn_mitigation_detection": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1204.002 (Malicious File) by using the strategy below?\nUse intrusion detection signatures to block traffic at network boundaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1204.002 (Malicious File)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Leveraging Race Conditions (CAPEC-26)?\nUse safe libraries to access resources such as files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmyn_mitigation_detection": "Use safe libraries to access resources such as files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-622 (Improper Validation of Function Hook Arguments) by using the strategy below?\nOnly free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-622 (Improper Validation of Function Hook Arguments)",
      "ddmyn_mitigation_detection": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Session Fixation (CAPEC-61)?\nAfter downloading open-source software, ensure integrity values have not changed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Session Fixation (CAPEC-61)",
      "ddmyn_mitigation_detection": "After downloading open-source software, ensure integrity values have not changed.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Dynamic Resolution (T1568)?\nDetects processes that modify, change, or replace their own code at runtime.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dynamic Resolution (T1568)",
      "ddmyn_mitigation_detection": "Detects processes that modify, change, or replace their own code at runtime.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components)?\nMake sure your web server is up-to-date with all patches to protect against known vulnerabilities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-702 (Exploiting Incorrect Chaining or Granularity of Hardware Debug Components)",
      "ddmyn_mitigation_detection": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-652 (Use of Known Kerberos Credentials) by using the strategy below?\nConfiguration: front-end HTTP agents notice ambiguous requests.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-652 (Use of Known Kerberos Credentials)",
      "ddmyn_mitigation_detection": "Configuration: front-end HTTP agents notice ambiguous requests.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-442 (Infected Software)?\nTo mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-442 (Infected Software)",
      "ddmyn_mitigation_detection": "To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Blind SQL Injection (CAPEC-7)?\nImplementation: remove debug information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Blind SQL Injection (CAPEC-7)",
      "ddmyn_mitigation_detection": "Implementation: remove debug information.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Application Window Discovery (T1010) by using the strategy below?\nNetwork node inventorying identifies and records all the network nodes (hosts, routers, switches, firewalls, etc.) in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Window Discovery (T1010)",
      "ddmyn_mitigation_detection": "Network node inventorying identifies and records all the network nodes (hosts, routers, switches, firewalls, etc.) in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cache Poisoning (CAPEC-141)?\nImplementation: Listens for query replies on a network, and sends a notification via email when an entry changes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cache Poisoning (CAPEC-141)",
      "ddmyn_mitigation_detection": "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Deployment of Wrong Handler (CWE-430) by using the strategy below?\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deployment of Wrong Handler (CWE-430)",
      "ddmyn_mitigation_detection": "Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Portable Executable Injection (T1055.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Portable Executable Injection (T1055.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Deobfuscate/Decode Files or Information (T1140)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Domain Fronting (T1090.004)?\nMonitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Domain Fronting (T1090.004)",
      "ddmyn_mitigation_detection": "Monitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used. Consider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citations: Wikipedia File Header Signatures)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Upload Tool (T1608.002) by using the strategy below?\nEnforce binary and application integrity with digital signature verification to prevent untrusted code from executing.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload Tool (T1608.002)",
      "ddmyn_mitigation_detection": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Application Layer Protocol (T1071) by using the strategy below?\nBlock execution of code on a system through application control, and/or script blocking.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Application Layer Protocol (T1071)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Software Supply Chain (T1195.002)?\nVulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Software Supply Chain (T1195.002)",
      "ddmyn_mitigation_detection": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Local Accounts (T1078.003)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Accounts (T1078.003)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect RDP Hijacking (T1563.002) by using the strategy below?\nConsider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "RDP Hijacking (T1563.002)",
      "ddmyn_mitigation_detection": "Consider monitoring processes for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to detect RDP session hijacking. Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Email Collection (T1114)?\nUse remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Collection (T1114)",
      "ddmyn_mitigation_detection": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Executable Installer File Permissions Weakness (T1574.005)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Executable Installer File Permissions Weakness (T1574.005)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Credential Stuffing (CAPEC-600)?\nMany invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Credential Stuffing (CAPEC-600)",
      "ddmyn_mitigation_detection": "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)?\nWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations (CWE-1252)",
      "ddmyn_mitigation_detection": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Incomplete Cleanup (CWE-459) by using the strategy below?\nUnwanted connections to the configured server may be denied through a firewall or other packet filtering measures.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incomplete Cleanup (CWE-459)",
      "ddmyn_mitigation_detection": "Unwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Email Forwarding Rule (T1114.003) by using the strategy below?\nInitiating a host's reboot sequence to terminate all running processes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Email Forwarding Rule (T1114.003)",
      "ddmyn_mitigation_detection": "Initiating a host's reboot sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)?\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-784 (Reliance on Cookies without Validation and Integrity Checking in a Security Decision)",
      "ddmyn_mitigation_detection": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Service Discovery (T1007)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1567 (Exfiltration Over Web Service)?\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1567 (Exfiltration Over Web Service)",
      "ddmyn_mitigation_detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Struts: Unvalidated Action Form (CWE-108)?\nMap every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Struts: Unvalidated Action Form (CWE-108)",
      "ddmyn_mitigation_detection": "Map every Action Form to a corresponding validation form. An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect System Network Configuration Discovery (T1016)?\nMonitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "System Network Configuration Discovery (T1016)",
      "ddmyn_mitigation_detection": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Add Malicious File to Shared Webroot (CAPEC-563) by using the strategy below?\nEnsure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Add Malicious File to Shared Webroot (CAPEC-563)",
      "ddmyn_mitigation_detection": "Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unverified Ownership (CWE-283) by using the strategy below?\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unverified Ownership (CWE-283)",
      "ddmyn_mitigation_detection": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Upload Tool (T1608.002)?\nIf SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Upload Tool (T1608.002)",
      "ddmyn_mitigation_detection": "If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citations: Fifield Blocking Resistent Communication through domain fronting 2015)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Mavinject (T1218.013)?\nAnalyzing failed connections in a network to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Analyzing failed connections in a network to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Local Data Staging (T1074.001)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Local Data Staging (T1074.001)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Password Managers (T1555.005)?\nUse intrusion detection signatures to block traffic at network boundaries.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Password Managers (T1555.005)",
      "ddmyn_mitigation_detection": "Use intrusion detection signatures to block traffic at network boundaries.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1606.001 (Web Cookies)?\nMonitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1606.001 (Web Cookies)",
      "ddmyn_mitigation_detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Privilege Context Switching Error (CWE-270)?\nDo not use Sockets when writing EJBs.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Privilege Context Switching Error (CWE-270)",
      "ddmyn_mitigation_detection": "Do not use Sockets when writing EJBs.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Data Transfer Size Limits (T1030)?\nHardware component inventorying identifies and records the hardware items in the organization's architecture.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Data Transfer Size Limits (T1030)",
      "ddmyn_mitigation_detection": "Hardware component inventorying identifies and records the hardware items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CMSTP (T1218.003) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Lock Behavior After Power State Transition (CWE-1232) by using the strategy below?\nPrevention schemes mirror that of hard-coded password storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Lock Behavior After Power State Transition (CWE-1232)",
      "ddmyn_mitigation_detection": "Prevention schemes mirror that of hard-coded password storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nSoftware inventorying identifies and records the software items in the organization's architecture.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Software inventorying identifies and records the software items in the organization's architecture.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Path Traversal: '/../filedir' (CWE-25)?\nEnsure that your code strictly conforms to specifications.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Path Traversal: '/../filedir' (CWE-25)",
      "ddmyn_mitigation_detection": "Ensure that your code strictly conforms to specifications.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1543.001 (Launch Agent)?\nA file created for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1543.001 (Launch Agent)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1325 (Improperly Controlled Sequential Memory Allocation)?\nUse a tool that dynamically detects memory management problems, such as valgrind.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1325 (Improperly Controlled Sequential Memory Allocation)",
      "ddmyn_mitigation_detection": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Logon Script (Windows) (T1037.001)?\nEmploying a pattern matching rule language to analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Logon Script (Windows) (T1037.001)",
      "ddmyn_mitigation_detection": "Employing a pattern matching rule language to analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Replicating Malicious Code (Virus or Worm) (CWE-509)?\nInner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Replicating Malicious Code (Virus or Worm) (CWE-509)",
      "ddmyn_mitigation_detection": "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Cloud Accounts (T1078.004)?\nCredential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Cloud Accounts (T1078.004)",
      "ddmyn_mitigation_detection": "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Non-Application Layer Protocol (T1095)?\nRequiring proof of two or more pieces of evidence in order to authenticate a user.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Application Layer Protocol (T1095)",
      "ddmyn_mitigation_detection": "Requiring proof of two or more pieces of evidence in order to authenticate a user.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1558.001 (Golden Ticket)?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1558.001 (Golden Ticket)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)?\nThis weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)",
      "ddmyn_mitigation_detection": "This weakness can be found using manual (static) analysis. The analyst has security objectives that are matched against the high-level code. This method is less precise than emulation, especially if the analysis is done at the higher level language rather than at assembly level.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Credential API Hooking (T1056.004) by using the strategy below?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Unchecked Input for Loop Condition (CWE-606)?\nWhen the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unchecked Input for Loop Condition (CWE-606)",
      "ddmyn_mitigation_detection": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Mavinject (T1218.013)?\nMonitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Monitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument <code>INJECTRUNNING</code> is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Run Software at Logon (CAPEC-564)?\nRestrict write access to logon scripts to necessary administrators.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Run Software at Logon (CAPEC-564)",
      "ddmyn_mitigation_detection": "Restrict write access to logon scripts to necessary administrators.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Owner/User Discovery (T1033)?\nApplication Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Owner/User Discovery (T1033)",
      "ddmyn_mitigation_detection": "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unprotected Windows Messaging Channel ('Shatter') (CWE-422) by using the strategy below?\nAlways verify and authenticate the source of the message.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unprotected Windows Messaging Channel ('Shatter') (CWE-422)",
      "ddmyn_mitigation_detection": "Always verify and authenticate the source of the message.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Windows Command Shell (T1059.003)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Windows Command Shell (T1059.003)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nMonitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect T1547.002 (Authentication Package) by using the strategy below?\nIdentify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.(Citations: Cisco Advisory SNMP v3 Authentication Vulnerabilities)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1547.002 (Authentication Package)",
      "ddmyn_mitigation_detection": "Identify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.(Citations: Cisco Advisory SNMP v3 Authentication Vulnerabilities)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Trust Discovery (T1482)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Trust Discovery (T1482)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1134.002 (Create Process with Token)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1134.002 (Create Process with Token)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Eavesdropping (CAPEC-651)?\nBe mindful of your surroundings when discussing sensitive information in public areas.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Eavesdropping (CAPEC-651)",
      "ddmyn_mitigation_detection": "Be mindful of your surroundings when discussing sensitive information in public areas.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1548.001 (Setuid and Setgid)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.001 (Setuid and Setgid)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate DNS Server (T1583.002)?\nSet and enforce secure password policies for accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS Server (T1583.002)",
      "ddmyn_mitigation_detection": "Set and enforce secure password policies for accounts.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.010 (AppInit DLLs) by using the strategy below?\nA file created for the purposes of deceiving an adversary.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "A file created for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LNK Icon Smuggling (T1027.012)?\nConfigure Active Directory to prevent use of certain techniques; use SID Filtering, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LNK Icon Smuggling (T1027.012)",
      "ddmyn_mitigation_detection": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)?\nURL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization (CWE-551)",
      "ddmyn_mitigation_detection": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nEmploying a pattern matching algorithm to statically analyze the content of files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1547.008 (LSASS Driver)?\nUsing kernel-level capabilities to isolate processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1547.008 (LSASS Driver)",
      "ddmyn_mitigation_detection": "Using kernel-level capabilities to isolate processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Impair Command History Logging (T1562.003)?\nMake configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Impair Command History Logging (T1562.003)",
      "ddmyn_mitigation_detection": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Declaration of Catch for Generic Exception (CWE-396)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Declaration of Catch for Generic Exception (CWE-396)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)?\nIf possible, ensure that all external commands called from the program are statically created.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "ddmyn_mitigation_detection": "If possible, ensure that all external commands called from the program are statically created.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-1247 (Improper Protection Against Voltage and Clock Glitches)?\nAt the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1247 (Improper Protection Against Voltage and Clock Glitches)",
      "ddmyn_mitigation_detection": "At the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Image File Execution Options Injection (T1546.012)?\nRestricting system configuration modifications to a specific user or group of users.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmyn_mitigation_detection": "Restricting system configuration modifications to a specific user or group of users.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Vulnerability Scanning (T1595.002) by using the strategy below?\nMonitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Vulnerability Scanning (T1595.002)",
      "ddmyn_mitigation_detection": "Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1518.001 (Security Software Discovery) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1518.001 (Security Software Discovery)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Dylib Hijacking (T1574.004) by using the strategy below?\nMonitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Dylib Hijacking (T1574.004)",
      "ddmyn_mitigation_detection": "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1573.001 (Symmetric Cryptography)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1573.001 (Symmetric Cryptography)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Validation of Function Hook Arguments (CWE-622)?\nMake all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Validation of Function Hook Arguments (CWE-622)",
      "ddmyn_mitigation_detection": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Signature Spoofing by Improper Validation (CAPEC-475)?\nDesign: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Signature Spoofing by Improper Validation (CAPEC-475)",
      "ddmyn_mitigation_detection": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nDetection of an unauthorized remote live terminal console session by examining network traffic to a network host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.005 (Executable Installer File Permissions Weakness)?\nCollecting network communication protocol metadata and identifying statistical outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.005 (Executable Installer File Permissions Weakness)",
      "ddmyn_mitigation_detection": "Collecting network communication protocol metadata and identifying statistical outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nRestricting network traffic originating from any location.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Restricting network traffic originating from any location.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Signature Spoofing by Improper Validation (CAPEC-475)?\nImplement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Signature Spoofing by Improper Validation (CAPEC-475)",
      "ddmyn_mitigation_detection": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unix Shell Configuration Modification (T1546.004) by using the strategy below?\nRestoring an entity's access to resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restoring an entity's access to resources.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Credential API Hooking (T1056.004)?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Credential API Hooking (T1056.004)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Service Execution (T1569.002)?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Service Execution (T1569.002)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Neutralization of Leading Special Elements (CWE-160)?\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Neutralization of Leading Special Elements (CWE-160)",
      "ddmyn_mitigation_detection": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Upload a Web Shell to a Web Server (CAPEC-650) by using the strategy below?\nMake sure your web server is up-to-date with all patches to protect against known vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Upload a Web Shell to a Web Server (CAPEC-650)",
      "ddmyn_mitigation_detection": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Restriction of Rendered UI Layers or Frames (CWE-1021)?\nThe use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Restriction of Rendered UI Layers or Frames (CWE-1021)",
      "ddmyn_mitigation_detection": "The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content. The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nEncrypting a file using a cryptographic key.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Encrypting a file using a cryptographic key.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Resource Shutdown or Release (CWE-404) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Resource Shutdown or Release (CWE-404)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Permission Manifest Analysis",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Missing Immutable Root of Trust in Hardware (CWE-1326) by using the strategy below?\nDuring implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Immutable Root of Trust in Hardware (CWE-1326)",
      "ddmyn_mitigation_detection": "During implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Domain Accounts (T1078.002)?\nThe process of temporarily disabling user accounts on a system or domain.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "The process of temporarily disabling user accounts on a system or domain.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Space after Filename (T1036.006) by using the strategy below?\nComparing client-server request and response payloads to a baseline profile to identify outliers.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Space after Filename (T1036.006)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1055.009 (Proc Memory)?\nUser behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1055.009 (Proc Memory)",
      "ddmyn_mitigation_detection": "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CMSTP (T1218.003)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CMSTP (T1218.003)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compiled HTML File (T1218.001)?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compiled HTML File (T1218.001)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Unchecked Error Condition (CWE-391)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Error Condition (CWE-391)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CWE-152 (Improper Neutralization of Macro Symbols)?\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-152 (Improper Neutralization of Macro Symbols)",
      "ddmyn_mitigation_detection": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Handling of Faults that Lead to Instruction Skips (CWE-1332)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Binary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Processor Optimization Removal or Modification of Security-critical Code (CWE-1037)?\nIn theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Processor Optimization Removal or Modification of Security-critical Code (CWE-1037)",
      "ddmyn_mitigation_detection": "In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate CWE-1314 (Missing Write Protection for Parametric Data Values)?\nAccess controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-1314 (Missing Write Protection for Parametric Data Values)",
      "ddmyn_mitigation_detection": "Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Disable Windows Event Logging (T1562.002) by using the strategy below?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Disable Windows Event Logging (T1562.002)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Exploitation for Defense Evasion (T1211)?\nRandomizing the base (start) address of one or more segments of memory during the initialization of a process.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Randomizing the base (start) address of one or more segments of memory during the initialization of a process.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Process Control (CWE-114)?\nThe Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Process Control (CWE-114)",
      "ddmyn_mitigation_detection": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Leveraging Race Conditions (CAPEC-26)?\nStrong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Leveraging Race Conditions (CAPEC-26)",
      "ddmyn_mitigation_detection": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nEmulating instructions in a file looking for specific patterns.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Emulating instructions in a file looking for specific patterns.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Malicious File (T1204.002)?\nMonitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Malicious File (T1204.002)",
      "ddmyn_mitigation_detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to Deobfuscate/Decode Files or Information in payloads. Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Unix Shell Configuration Modification (T1546.004) by using the strategy below?\nRestoring an object for an entity to access. This is the broadest class for object restoral.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Unix Shell Configuration Modification (T1546.004)?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Unix Shell Configuration Modification (T1546.004)",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Use of a One-Way Hash without a Salt (CWE-759)?\nWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Use of a One-Way Hash without a Salt (CWE-759)",
      "ddmyn_mitigation_detection": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1548.003 (Sudo and Sudo Caching) by using the strategy below?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1548.003 (Sudo and Sudo Caching)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Default Accounts (T1078.001)?\nMonitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Default Accounts (T1078.001)",
      "ddmyn_mitigation_detection": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rogue Domain Controller (T1207)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rogue Domain Controller (T1207)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Security Support Provider (T1547.005)?\nConfiguration inventory identifies and records the configuration of software and hardware and their components throughout the organization.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Support Provider (T1547.005)",
      "ddmyn_mitigation_detection": "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Poison Web Service Registry (CAPEC-51)?\nDesign: Enforce principle of least privilege\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Poison Web Service Registry (CAPEC-51)",
      "ddmyn_mitigation_detection": "Design: Enforce principle of least privilege",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Lateral Tool Transfer (T1570)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Lateral Tool Transfer (T1570)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Group Policy Discovery (T1615)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Group Policy Discovery (T1615)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Proc Memory (T1055.009)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Proc Memory (T1055.009)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Power Settings (T1653)?\nPerform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Power Settings (T1653)",
      "ddmyn_mitigation_detection": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Improper Protections Against Hardware Overheating (CWE-1338)?\nThe platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Protections Against Hardware Overheating (CWE-1338)",
      "ddmyn_mitigation_detection": "The platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Multi-Stage Channels (T1104) by using the strategy below?\nNetwork Isolation techniques prevent network hosts from accessing non-essential system network resources.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Multi-Stage Channels (T1104)",
      "ddmyn_mitigation_detection": "Network Isolation techniques prevent network hosts from accessing non-essential system network resources.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-141 (Cache Poisoning) by using the strategy below?\nConfiguration: Disable client side caching.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-141 (Cache Poisoning)",
      "ddmyn_mitigation_detection": "Configuration: Disable client side caching.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Missing Immutable Root of Trust in Hardware (CWE-1326) by using the strategy below?\nCreate resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Immutable Root of Trust in Hardware (CWE-1326)",
      "ddmyn_mitigation_detection": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Observable Discrepancy (CWE-203)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Discrepancy (CWE-203)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Security Version Number Mutable to Older Versions (CWE-1328)?\nUnderstand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Security Version Number Mutable to Older Versions (CWE-1328)",
      "ddmyn_mitigation_detection": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Reflection Amplification (T1498.002)?\nDetecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reflection Amplification (T1498.002)",
      "ddmyn_mitigation_detection": "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Delete Cloud Instance (T1578.003) by using the strategy below?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Delete Cloud Instance (T1578.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1546.010 (AppInit DLLs)?\nInitiating a host's shutdown sequence to terminate all running processes.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.010 (AppInit DLLs)",
      "ddmyn_mitigation_detection": "Initiating a host's shutdown sequence to terminate all running processes.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-825 (Expired Pointer Dereference) by using the strategy below?\nIf only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-825 (Expired Pointer Dereference)",
      "ddmyn_mitigation_detection": "If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Rootkit (T1014)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Improper Authorization of Index Containing Sensitive Information (CWE-612) by using the strategy below?\nWithin Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Authorization of Index Containing Sensitive Information (CWE-612)",
      "ddmyn_mitigation_detection": "Within Java, use .equals() to compare string values. Within JavaScript, use == to compare string values. Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Improper Output Neutralization for Logs (CWE-117)?\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Improper Output Neutralization for Logs (CWE-117)",
      "ddmyn_mitigation_detection": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1037.001 (Logon Script (Windows)) by using the strategy below?\nFile Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1037.001 (Logon Script (Windows))",
      "ddmyn_mitigation_detection": "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)?\nEnsure that filtering or input validation is applied to canonical data.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC-71)",
      "ddmyn_mitigation_detection": "Ensure that filtering or input validation is applied to canonical data.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate SOAP Array Blowup (CAPEC-493) by using the strategy below?\nEnforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "SOAP Array Blowup (CAPEC-493)",
      "ddmyn_mitigation_detection": "Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate AppInit DLLs (T1546.010)?\nThe file removal technique deletes malicious artifacts or programs from a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "The file removal technique deletes malicious artifacts or programs from a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Symmetric Cryptography (T1573.001)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1068 (Exploitation for Privilege Escalation)?\nComparing the \"text\" or \"code\" memory segments to a source of truth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1068 (Exploitation for Privilege Escalation)",
      "ddmyn_mitigation_detection": "Comparing the \"text\" or \"code\" memory segments to a source of truth.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Observable Internal Behavioral Discrepancy (CWE-206)?\nUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Internal Behavioral Discrepancy (CWE-206)",
      "ddmyn_mitigation_detection": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Additional Cloud Roles (T1098.003)?\nManage the creation, modification, use, and permissions associated to user accounts.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Additional Cloud Roles (T1098.003)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to user accounts.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Memory (T1003.001)?\nExecution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Memory (T1003.001)",
      "ddmyn_mitigation_detection": "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Static Member Data Element outside of a Singleton Class Element (CWE-1042) by using the strategy below?\nThe DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Static Member Data Element outside of a Singleton Class Element (CWE-1042)",
      "ddmyn_mitigation_detection": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Inclusion of Sensitive Information in Source Code Comments (CWE-615)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Source Code Comments (CWE-615)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-1119 (Excessive Use of Unconditional Branching)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-1119 (Excessive Use of Unconditional Branching)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1546.007 (Netsh Helper DLL) by using the strategy below?\nEmploying a pattern matching algorithm to statically analyze the content of files.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1546.007 (Netsh Helper DLL)",
      "ddmyn_mitigation_detection": "Employing a pattern matching algorithm to statically analyze the content of files.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate System Time Discovery (T1124) by using the strategy below?\nFile eviction techniques evict files from system storage.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Time Discovery (T1124)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Time Providers (T1547.003) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Time Providers (T1547.003)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exploitation for Privilege Escalation (T1068)?\nThe detection of an internal host relaying traffic between the internal network and the external network.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Privilege Escalation (T1068)",
      "ddmyn_mitigation_detection": "The detection of an internal host relaying traffic between the internal network and the external network.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect CWE-942 (Permissive Cross-domain Policy with Untrusted Domains) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-942 (Permissive Cross-domain Policy with Untrusted Domains)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Location Discovery (T1614)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Location Discovery (T1614)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate One-Way Communication (T1102.003) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "One-Way Communication (T1102.003)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1543.001 (Launch Agent)?\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1543.001 (Launch Agent)",
      "ddmyn_mitigation_detection": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1021.001 (Remote Desktop Protocol)?\nSuspending a running process on a computer system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1021.001 (Remote Desktop Protocol)",
      "ddmyn_mitigation_detection": "Suspending a running process on a computer system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Missing Validation of OpenSSL Certificate (CWE-599) by using the strategy below?\nUse well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Missing Validation of OpenSSL Certificate (CWE-599)",
      "ddmyn_mitigation_detection": "Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Filter Failure through Buffer Overflow (CAPEC-24)?\nUse endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Filter Failure through Buffer Overflow (CAPEC-24)",
      "ddmyn_mitigation_detection": "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Reliance on a Single Factor in a Security Decision (CWE-654)?\nUse a tool that dynamically detects memory management problems, such as valgrind.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Reliance on a Single Factor in a Security Decision (CWE-654)",
      "ddmyn_mitigation_detection": "Use a tool that dynamically detects memory management problems, such as valgrind.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Remote Email Collection (T1114.002) by using the strategy below?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Remote Email Collection (T1114.002)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Unrestricted Externally Accessible Lock (CWE-412)?\nSpecialized configuration or tuning may be required to train automated tools to recognize this weakness. Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unrestricted Externally Accessible Lock (CWE-412)",
      "ddmyn_mitigation_detection": "Specialized configuration or tuning may be required to train automated tools to recognize this weakness. Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value. Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Rootkit (T1014)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Rootkit (T1014)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate LSASS Driver (T1547.008) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-304 (TCP Null Scan) by using the strategy below?\nEmploy a robust network defensive posture that includes a managed IDS/IPS.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-304 (TCP Null Scan)",
      "ddmyn_mitigation_detection": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Spearphishing via Service (T1566.003)?\nProcess Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Spearphishing via Service (T1566.003)",
      "ddmyn_mitigation_detection": "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Add-ins (T1137.006)?\nMonitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior(Citations: GlobalDotName Jun 2019, MRWLabs Office Persistence Add-ins)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Add-ins (T1137.006)",
      "ddmyn_mitigation_detection": "Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior(Citations: GlobalDotName Jun 2019, MRWLabs Office Persistence Add-ins)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702) by using the strategy below?\nIf using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components (CAPEC-702)",
      "ddmyn_mitigation_detection": "If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect SAML Tokens (T1606.002) by using the strategy below?\nThis technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain. Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.(Citations: Microsoft SolarWinds Customer Guidance, Sygnia Golden SAML, Sygnia Golden SAML)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "SAML Tokens (T1606.002)",
      "ddmyn_mitigation_detection": "This technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain. Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.(Citations: Microsoft SolarWinds Customer Guidance, Sygnia Golden SAML, Sygnia Golden SAML)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate EJB Bad Practices: Use of Java I/O (CWE-576)?\nUse expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "EJB Bad Practices: Use of Java I/O (CWE-576)",
      "ddmyn_mitigation_detection": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Hardware Additions (T1200)?\nRestoring a file for an entity to access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Hardware Additions (T1200)",
      "ddmyn_mitigation_detection": "Restoring a file for an entity to access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Malicious File (T1204.002)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Malicious File (T1204.002)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Install Malicious Extension (CAPEC-698)?\nDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Install Malicious Extension (CAPEC-698)",
      "ddmyn_mitigation_detection": "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Network Share Connection Removal (T1070.005)?\nMonitor for calls to <code>OpenProcess</code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access).(Citations: Dell Skeleton, TechNet Audit Policy)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Network Share Connection Removal (T1070.005)",
      "ddmyn_mitigation_detection": "Monitor for calls to <code>OpenProcess</code> that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access).(Citations: Dell Skeleton, TechNet Audit Policy)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate System Script Proxy Execution (T1216)?\nBlock execution of code on a system through application control, and/or script blocking.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Script Proxy Execution (T1216)",
      "ddmyn_mitigation_detection": "Block execution of code on a system through application control, and/or script blocking.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Cloud Groups (T1069.003)?\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cloud Groups (T1069.003)",
      "ddmyn_mitigation_detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Activity and account logs for the cloud services can also be monitored for suspicious commands that are anomalous compared to a baseline of normal activity.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Cleartext Storage of Sensitive Information (CWE-312) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Cleartext Storage of Sensitive Information (CWE-312)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate DNS Cache Poisoning (CAPEC-142)?\nConfiguration: Make sure your DNS servers have been updated to the latest versions\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "DNS Cache Poisoning (CAPEC-142)",
      "ddmyn_mitigation_detection": "Configuration: Make sure your DNS servers have been updated to the latest versions",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Weak Password Requirements (CWE-521) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Weak Password Requirements (CWE-521)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Highly cost effective: Focused Manual Spotcheck - Focused manual analysis of source Manual Source Code Review (not inspections)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Mavinject (T1218.013) by using the strategy below?\nRemove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Mavinject (T1218.013)",
      "ddmyn_mitigation_detection": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1568 (Dynamic Resolution)?\nBlocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1568 (Dynamic Resolution)",
      "ddmyn_mitigation_detection": "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Traffic Signaling (T1205)?\nDetermining which credentials may have been compromised by analyzing the user logon history of a particular system.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Traffic Signaling (T1205)",
      "ddmyn_mitigation_detection": "Determining which credentials may have been compromised by analyzing the user logon history of a particular system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate AppInit DLLs (T1546.010) by using the strategy below?\nRestoring an software configuration.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "AppInit DLLs (T1546.010)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate System Service Discovery (T1007)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "System Service Discovery (T1007)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Exploitation for Defense Evasion (T1211) by using the strategy below?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exploitation for Defense Evasion (T1211)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Unchecked Return Value (CWE-252)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Unchecked Return Value (CWE-252)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect T1559.002 (Dynamic Data Exchange)?\nMuch of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1559.002 (Dynamic Data Exchange)",
      "ddmyn_mitigation_detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate T1014 (Rootkit) by using the strategy below?\nDetecting any suspicious changes to files in a computer system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1014 (Rootkit)",
      "ddmyn_mitigation_detection": "Detecting any suspicious changes to files in a computer system.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Botnet (T1583.005)?\nConsider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Botnet (T1583.005)",
      "ddmyn_mitigation_detection": "Consider monitoring social media activity related to your organization. Suspicious activity may include personas claiming to work for your organization or recently created/modified accounts making numerous connection requests to accounts affiliated with your organization. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Setuid and Setgid (T1548.001)?\nRestoring an software configuration.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Restoring an software configuration.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect CWE-426 (Untrusted Search Path)?\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "CWE-426 (Untrusted Search Path)",
      "ddmyn_mitigation_detection": "Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic. Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sudo and Sudo Caching (T1548.003)?\nLimiting the transmission of a credential to a scoped set of relying parties.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Limiting the transmission of a credential to a scoped set of relying parties.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Forced Integer Overflow (CAPEC-92) by using the strategy below?\nDo not allow accounts to be a local administrator on more than one system.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Forced Integer Overflow (CAPEC-92)",
      "ddmyn_mitigation_detection": "Do not allow accounts to be a local administrator on more than one system.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1207 (Rogue Domain Controller)?\nDetection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1207 (Rogue Domain Controller)",
      "ddmyn_mitigation_detection": "Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Archive via Utility (T1560.001) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Clear Linux or Mac System Logs (T1070.002)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Clear Linux or Mac System Logs (T1070.002)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Symmetric Cryptography (T1573.001) by using the strategy below?\nHardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Symmetric Cryptography (T1573.001)",
      "ddmyn_mitigation_detection": "Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms includes components such as: * BIOS UEFI Subsystems * Hardware security devices such as Trusted Platform Modules * Boot process logic or code * Kernel software components",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Expression is Always False (CWE-570)?\nUse Static Analysis tools to spot such conditions.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Expression is Always False (CWE-570)",
      "ddmyn_mitigation_detection": "Use Static Analysis tools to spot such conditions.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Control of Generation of Code ('Code Injection') (CWE-94) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Control of Generation of Code ('Code Injection') (CWE-94)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Design Alteration (CAPEC-447) by using the strategy below?\nTo limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Design Alteration (CAPEC-447)",
      "ddmyn_mitigation_detection": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Social Media Accounts (T1585.001) by using the strategy below?\nImplement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Social Media Accounts (T1585.001)",
      "ddmyn_mitigation_detection": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CAPEC-489 (SSL Flood) by using the strategy below?\nTo mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-489 (SSL Flood)",
      "ddmyn_mitigation_detection": "To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Incorrect Chaining or Granularity of Debug Components (CWE-1296)?\nEnsure that debug components are properly chained and their granularity is maintained at different authentication levels.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Incorrect Chaining or Granularity of Debug Components (CWE-1296)",
      "ddmyn_mitigation_detection": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Archive via Utility (T1560.001)?\nConfiguring a kernel to use an allow or deny list to filter kernel api calls.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Archive via Utility (T1560.001)",
      "ddmyn_mitigation_detection": "Configuring a kernel to use an allow or deny list to filter kernel api calls.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Port Monitors (T1547.010)?\nEmploying file hash comparisons to detect known malware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Port Monitors (T1547.010)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Pass the Hash (T1550.002)?\nMonitoring platform components such as operating systems software, hardware devices, or firmware.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Pass the Hash (T1550.002)",
      "ddmyn_mitigation_detection": "Monitoring platform components such as operating systems software, hardware devices, or firmware.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-117 (Improper Output Neutralization for Logs) by using the strategy below?\nCreate a strategy for presenting information, and plan for how to display unusual characters.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-117 (Improper Output Neutralization for Logs)",
      "ddmyn_mitigation_detection": "Create a strategy for presenting information, and plan for how to display unusual characters.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Security Support Provider (T1547.005) by using the strategy below?\nMonitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Security Support Provider (T1547.005)",
      "ddmyn_mitigation_detection": "Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe</code> with AuditLevel = 8.  (Citations: Graeber 2014, Microsoft Configure LSA)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate LSASS Driver (T1547.008)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "LSASS Driver (T1547.008)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Non-Standard Port (T1571) by using the strategy below?\nEstablishing baseline communities of network hosts and identifying statistically divergent inter-community communication.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Non-Standard Port (T1571)",
      "ddmyn_mitigation_detection": "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Web Service (T1102)?\nAnalyzing changes in service binary files by comparing to a source of truth.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Analyzing changes in service binary files by comparing to a source of truth.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Sudo and Sudo Caching (T1548.003) by using the strategy below?\nRestricting access to a local file by configuring operating system functionality.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sudo and Sudo Caching (T1548.003)",
      "ddmyn_mitigation_detection": "Restricting access to a local file by configuring operating system functionality.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Trust Discovery (T1482)?\nManage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Trust Discovery (T1482)",
      "ddmyn_mitigation_detection": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Inclusion of Sensitive Information in Test Code (CWE-531)?\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Inclusion of Sensitive Information in Test Code (CWE-531)",
      "ddmyn_mitigation_detection": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Gather Victim Org Information (T1591)?\nUse a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Gather Victim Org Information (T1591)",
      "ddmyn_mitigation_detection": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citations: PurpleSec Data Loss Prevention)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol (T1048.001)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Golden Ticket (T1558.001)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Golden Ticket (T1558.001)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Improper Restriction of Software Interfaces to Hardware Features (CWE-1256) by using the strategy below?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Improper Restriction of Software Interfaces to Hardware Features (CWE-1256)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1574.004 (Dylib Hijacking)?\nFile eviction techniques evict files from system storage.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1574.004 (Dylib Hijacking)",
      "ddmyn_mitigation_detection": "File eviction techniques evict files from system storage.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Kerberoasting (T1558.003)?\nComparing client-server request and response payloads to a baseline profile to identify outliers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Kerberoasting (T1558.003)",
      "ddmyn_mitigation_detection": "Comparing client-server request and response payloads to a baseline profile to identify outliers.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate T1591.003 (Identify Business Tempo)?\nThis category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1591.003 (Identify Business Tempo)",
      "ddmyn_mitigation_detection": "This category is used for any applicable mitigation activities that apply to techniques occurring before an adversary gains Initial Access, such as Reconnaissance and Resource Development techniques.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Bidirectional Communication (T1102.002)?\nPrevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Bidirectional Communication (T1102.002)",
      "ddmyn_mitigation_detection": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Web Service (T1102)?\nRestrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Web Service (T1102)",
      "ddmyn_mitigation_detection": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Port Knocking (T1205.001)?\nMonitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Port Knocking (T1205.001)",
      "ddmyn_mitigation_detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include <code>chmod +x</code>, <code>chmod -R 755</code>, and <code>chmod 777</code>. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.(Citations: 20 macOS Common Tools and Techniques)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Delete Cloud Instance (T1578.003)?\nThe deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity. In AWS, CloudTrail logs capture the deletion of an instance in the <code>TerminateInstances</code> event, and in Azure the deletion of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances delete</code> to delete a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Delete Cloud Instance (T1578.003)",
      "ddmyn_mitigation_detection": "The deletion of a new instance or virtual machine is a common part of operations within many cloud environments. Events should then not be viewed in isolation, but as part of a chain of behavior that could lead to other activities. For example, detecting a sequence of events such as the creation of an instance, mounting of a snapshot to that instance, and deletion of that instance by a new user account may indicate suspicious activity. In AWS, CloudTrail logs capture the deletion of an instance in the <code>TerminateInstances</code> event, and in Azure the deletion of a VM may be captured in Azure activity logs. Google's Admin Activity audit logs within their Cloud Audit logs can be used to detect the usage of <code>gcloud compute instances delete</code> to delete a VM.(Citations: AWS CloudTrail Search, Azure Activity Logs, Cloud Audit Logs)",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Image File Execution Options Injection (T1546.012) by using the strategy below?\nAsset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Image File Execution Options Injection (T1546.012)",
      "ddmyn_mitigation_detection": "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Observable Discrepancy (CWE-203) by using the strategy below?\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Observable Discrepancy (CWE-203)",
      "ddmyn_mitigation_detection": "Compartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. Ensure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Control Panel (T1218.002)?\nRestoring an object for an entity to access. This is the broadest class for object restoral.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Control Panel (T1218.002)",
      "ddmyn_mitigation_detection": "Restoring an object for an entity to access. This is the broadest class for object restoral.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Domain Accounts (T1078.002)?\nAnalyzing intercepted or summarized computer network traffic to detect unauthorized activity.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Domain Accounts (T1078.002)",
      "ddmyn_mitigation_detection": "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Safe Mode Boot (T1562.009) by using the strategy below?\nUse capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Safe Mode Boot (T1562.009)",
      "ddmyn_mitigation_detection": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Setuid and Setgid (T1548.001) by using the strategy below?\nNetwork traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Setuid and Setgid (T1548.001)",
      "ddmyn_mitigation_detection": "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate COR_PROFILER (T1574.012) by using the strategy below?\nEmploying file hash comparisons to detect known malware.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "COR_PROFILER (T1574.012)",
      "ddmyn_mitigation_detection": "Employing file hash comparisons to detect known malware.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Safe Mode Boot (T1562.009)?\nImplement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Safe Mode Boot (T1562.009)",
      "ddmyn_mitigation_detection": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-510 (SaaS User Request Forgery)?\nTo limit one's exposure to this type of attack, tunnel communications through a secure proxy service.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-510 (SaaS User Request Forgery)",
      "ddmyn_mitigation_detection": "To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate Compromise Host Software Binary (T1554)?\nAnalyzing a call stack for return addresses which point to unexpected memory locations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Compromise Host Software Binary (T1554)",
      "ddmyn_mitigation_detection": "Analyzing a call stack for return addresses which point to unexpected memory locations.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Match Legitimate Name or Location (T1036.005)?\nAnalyzing spawn arguments or attributes of a process to detect processes that are unauthorized.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Match Legitimate Name or Location (T1036.005)",
      "ddmyn_mitigation_detection": "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate Signature Spoofing by Improper Validation (CAPEC-475) by using the strategy below?\nThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Signature Spoofing by Improper Validation (CAPEC-475)",
      "ddmyn_mitigation_detection": "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you detect Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395) by using the strategy below?\nAccording to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Framework-based Fuzzer?\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference (CWE-395)",
      "ddmyn_mitigation_detection": "According to SOAR, the following detection techniques may be useful: Cost effective for partial coverage: Framework-based Fuzzer",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect T1596.005 (Scan Databases)?\nIf infrastructure or patterns in malicious web content have been previously identified, internet scanning may uncover when an adversary has staged web content to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on other phases of the adversary lifecycle, such as during Spearphishing Link, Spearphishing Link, or Malicious Link.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "T1596.005 (Scan Databases)",
      "ddmyn_mitigation_detection": "If infrastructure or patterns in malicious web content have been previously identified, internet scanning may uncover when an adversary has staged web content to make it accessible for targeting. Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on other phases of the adversary lifecycle, such as during Spearphishing Link, Spearphishing Link, or Malicious Link.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate User-Controlled Filename (CAPEC-73)?\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "User-Controlled Filename (CAPEC-73)",
      "ddmyn_mitigation_detection": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to mitigate CAPEC-274 (HTTP Verb Tampering)?\nUpgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CAPEC-274 (HTTP Verb Tampering)",
      "ddmyn_mitigation_detection": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Sharepoint (T1213.002)?\nDeploying a network resource for the purposes of deceiving an adversary.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Sharepoint (T1213.002)",
      "ddmyn_mitigation_detection": "Deploying a network resource for the purposes of deceiving an adversary.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate T1112 (Modify Registry)?\nA Decoy Object is created and deployed for the purposes of deceiving attackers.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "T1112 (Modify Registry)",
      "ddmyn_mitigation_detection": "A Decoy Object is created and deployed for the purposes of deceiving attackers.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate J2EE Misconfiguration: Entity Bean Declared Remote (CWE-8)?\nCarefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "J2EE Misconfiguration: Entity Bean Declared Remote (CWE-8)",
      "ddmyn_mitigation_detection": "Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to mitigate Deobfuscate/Decode Files or Information (T1140)?\nPreventing one process from writing to the memory space of another process through hardware based address manager implementations.\n\nAnswer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "Deobfuscate/Decode Files or Information (T1140)",
      "ddmyn_mitigation_detection": "Preventing one process from writing to the memory space of another process through hardware based address manager implementations.",
      "ddmyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a method to detect Time Based Evasion (T1497.003)?\nInternet scanners may be used to look for patterns associated with malicious content designed to collect host information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Time Based Evasion (T1497.003)",
      "ddmyn_mitigation_detection": "Internet scanners may be used to look for patterns associated with malicious content designed to collect host information from visitors. Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.(Citations: ThreatConnect Infrastructure Dec 2020, ATT ScanBox)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Can you mitigate CWE-760 (Use of a One-Way Hash with a Predictable Salt) by using the strategy below?\nInvalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.?\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "mitigate",
      "ddmyn_node_name": "CWE-760 (Use of a One-Way Hash with a Predictable Salt)",
      "ddmyn_mitigation_detection": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.",
      "ddmyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Is the following a way to detect Weak Encoding for Password (CWE-261)?\nAutomated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)\n\nAnswer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_dm_yes_no",
    "parsed_raw_data": {
      "ddmyn_mitigate_detect": "detect",
      "ddmyn_node_name": "Weak Encoding for Password (CWE-261)",
      "ddmyn_mitigation_detection": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)",
      "ddmyn_answer": "No",
      "prompts": []
    }
  }
]