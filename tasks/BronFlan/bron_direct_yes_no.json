[
  {
    "instruction": "Take a look at the descriptions of the given entities, CAPEC-186 (Malicious Software Update) and Excessive Platform Resource Consumption within a Loop (CWE-1050). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCAPEC-186 (Malicious Software Update) -\nAlthough there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.\n\nExcessive Platform Resource Consumption within a Loop (CWE-1050) -\nThe product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-186 (Malicious Software Update)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.",
      "dyn_dst_name": "Excessive Platform Resource Consumption within a Loop (CWE-1050)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware SYNful Knock (S0519):\nSYNful Knock is a stealthy modification of the operating system of network devices that can be used to maintain persistence within a victim's network and provide new capabilities to the adversary.(Citations: Mandiant - Synful Knock, Cisco Synful Knock Evolution)\n\nThe MITRE ATT&CK technique is Pre-OS Boot (T1542):\nAdversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control. Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.(Citations: Wikipedia Booting)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware SYNful Knock (S0519)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SYNful Knock is a stealthy modification of the operating system of network devices that can be used to maintain persistence within a victim's network and provide new capabilities to the adversary.(Citations: Mandiant - Synful Knock, Cisco Synful Knock Evolution)",
      "dyn_dst_name": "Pre-OS Boot (T1542)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control. Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.(Citations: Wikipedia Booting)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Crutch (S0538) and Gatekeeper Bypass (T1553.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Crutch (S0538) -\nCrutch is a backdoor designed for document theft that has been used by Turla since at least 2015.(Citations: ESET Crutch December 2020)\n\nGatekeeper Bypass (T1553.001) -\nAdversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications. Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions: 1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution. 2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers. 3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID. 4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified. Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks. Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.(Citations: TheEclecticLightCompany Quarantine and the flag, TheEclecticLightCompany apple notarization , OceanLotus for OS X, 20 macOS Common Tools and Techniques, theevilbit gatekeeper bypass 2021, Application Bundle Manipulation Brandon Dalton)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Crutch (S0538)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Crutch is a backdoor designed for document theft that has been used by Turla since at least 2015.(Citations: ESET Crutch December 2020)",
      "dyn_dst_name": "Gatekeeper Bypass (T1553.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications. Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions: 1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution. 2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers. 3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID. 4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified. Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks. Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.(Citations: TheEclecticLightCompany Quarantine and the flag, TheEclecticLightCompany apple notarization , OceanLotus for OS X, 20 macOS Common Tools and Techniques, theevilbit gatekeeper bypass 2021, Application Bundle Manipulation Brandon Dalton)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-28719 and application solidfire (by netapp) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-28719 -\nMissing authentication for critical function in AssetView prior to Ver.13.2.0 allows a remote unauthenticated attacker with some knowledge on the system configuration to upload a crafted configuration file to the managing server, which may result in the managed clients to execute arbitrary code with the administrative privilege.\n\napplication solidfire (by netapp) version - -\n\"solidfire\" is an application released by \"netapp\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28719",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Missing authentication for critical function in AssetView prior to Ver.13.2.0 allows a remote unauthenticated attacker with some knowledge on the system configuration to upload a crafted configuration file to the managing server, which may result in the managed clients to execute arbitrary code with the administrative privilege.",
      "dyn_dst_name": "application solidfire (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"solidfire\" is an application released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Matryoshka (S0167)\nMatryoshka is a malware framework used by CopyKittens that consists of a dropper, loader, and RAT. It has multiple versions; v1 was seen in the wild from July 2016 until January 2017. v2 has fewer commands and other minor differences.  (Citations: ClearSky Wilted Tulip July 2017, CopyKittens Nov 2015)\n\nThe MITRE ATT&CK sub-technique is Steganography (T1027.003)\nAdversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files. Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group used <code>Invoke-PSImage</code> to hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citations: Wikipedia Duqu, McAfee Malicious Doc Targets Pyeongchang Olympics)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Matryoshka (S0167)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Matryoshka is a malware framework used by CopyKittens that consists of a dropper, loader, and RAT. It has multiple versions; v1 was seen in the wild from July 2016 until January 2017. v2 has fewer commands and other minor differences.  (Citations: ClearSky Wilted Tulip July 2017, CopyKittens Nov 2015)",
      "dyn_dst_name": "Steganography (T1027.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files. Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group used <code>Invoke-PSImage</code> to hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citations: Wikipedia Duqu, McAfee Malicious Doc Targets Pyeongchang Olympics)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29328\nD-Link DAP-1330_OSS-firmware_1.00b21 was discovered to contain a stack overflow via the function checkvalidupgrade.\n\nThe CPE (Common Platform Enumeration) is application solidfire (by netapp) version -\n\"solidfire\" is an application released by \"netapp\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29328",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "D-Link DAP-1330_OSS-firmware_1.00b21 was discovered to contain a stack overflow via the function checkvalidupgrade.",
      "dyn_dst_name": "application solidfire (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"solidfire\" is an application released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and CAPEC (Common Attack Pattern Enumeration and Classification):\n\nThe MITRE ATT&CK sub-technique is AppCert DLLs (T1546.009)\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>.  Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.(Citations: Elastic Process Injection July 2017)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is CAPEC-39 (Manipulating Opaque Client-based Data Tokens)\nIn circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "AppCert DLLs (T1546.009)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>.  Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.(Citations: Elastic Process Injection July 2017)",
      "dyn_dst_name": "CAPEC-39 (Manipulating Opaque Client-based Data Tokens)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware ADVSTORESHELL (S0045):\nADVSTORESHELL is a spying backdoor that has been used by APT28 from at least 2012 to 2016. It is generally used for long-term espionage and is deployed on targets deemed interesting after a reconnaissance phase.  (Citations: Kaspersky Sofacy, ESET Sednit Part 2)\n\nThe MITRE ATT&CK sub-technique is T1553.001 (Gatekeeper Bypass):\nAdversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications. Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions: 1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution. 2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers. 3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID. 4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified. Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks. Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.(Citations: TheEclecticLightCompany Quarantine and the flag, TheEclecticLightCompany apple notarization , OceanLotus for OS X, 20 macOS Common Tools and Techniques, theevilbit gatekeeper bypass 2021, Application Bundle Manipulation Brandon Dalton)\n\nYour goal is to determine if malware ADVSTORESHELL (S0045) is related to T1553.001 (Gatekeeper Bypass), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware ADVSTORESHELL (S0045)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ADVSTORESHELL is a spying backdoor that has been used by APT28 from at least 2012 to 2016. It is generally used for long-term espionage and is deployed on targets deemed interesting after a reconnaissance phase.  (Citations: Kaspersky Sofacy, ESET Sednit Part 2)",
      "dyn_dst_name": "T1553.001 (Gatekeeper Bypass)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple\u2019s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications. Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions: 1. Checks extended attribute \u2013 Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution. 2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers. 3. Code Signing \u2013 Gatekeeper checks for a valid code signature from an Apple Developer ID. 4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an \u201cunauthorized app\u201d and the security policy will be modified. Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks. Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.(Citations: TheEclecticLightCompany Quarantine and the flag, TheEclecticLightCompany apple notarization , OceanLotus for OS X, 20 macOS Common Tools and Techniques, theevilbit gatekeeper bypass 2021, Application Bundle Manipulation Brandon Dalton)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, tool AsyncRAT (S1087) and Additional Email Delegate Permissions (T1098.002). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\ntool AsyncRAT (S1087) -\nAsyncRAT is an open-source remote access tool originally available through the NYANxCAT Github repository that has been used in malicious campaigns.(Citations: Morphisec Snip3 May 2021, Cisco Operation Layover September 2021, Telefonica Snip3 December 2021)\n\nAdditional Email Delegate Permissions (T1098.002) -\nAdversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the <code>Add-MailboxPermission</code> PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders. This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.(Citations: Microsoft - Add-MailboxPermission, FireEye APT35 2018, Crowdstrike Hiding in Plain Sight 2018, Gmail Delegation, Google Ensuring Your Information is Safe, Mandiant Defend UNC2452 White Paper, Bienstock, D. - Defending O365 - 2019)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool AsyncRAT (S1087)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "AsyncRAT is an open-source remote access tool originally available through the NYANxCAT Github repository that has been used in malicious campaigns.(Citations: Morphisec Snip3 May 2021, Cisco Operation Layover September 2021, Telefonica Snip3 December 2021)",
      "dyn_dst_name": "Additional Email Delegate Permissions (T1098.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the <code>Add-MailboxPermission</code> PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user\u2019s mail folders. This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.(Citations: Microsoft - Add-MailboxPermission, FireEye APT35 2018, Crowdstrike Hiding in Plain Sight 2018, Gmail Delegation, Google Ensuring Your Information is Safe, Mandiant Defend UNC2452 White Paper, Bienstock, D. - Defending O365 - 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK technique and CAPEC (Common Attack Pattern Enumeration and Classification) and their descriptions:\n\nThe MITRE ATT&CK technique is Endpoint Denial of Service (T1499):\nAdversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion. An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets. Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices. Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks. In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers. For attacks attempting to saturate the providing network, see Network Denial of Service.(Citations: FireEye OpPoisonedHandover February 2016, FSISAC FraudNetDoS September 2012, Symantec DDoS October 2014, USNYAG IranianBotnet March 2016, ArsTechnica Great Firewall of China)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Sustained Client Engagement (CAPEC-227):\nThe degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.\n\nYour goal is to determine if Endpoint Denial of Service (T1499) is related to Sustained Client Engagement (CAPEC-227), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Endpoint Denial of Service (T1499)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion. An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS). To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets. Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices. Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks. In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers. For attacks attempting to saturate the providing network, see Network Denial of Service.(Citations: FireEye OpPoisonedHandover February 2016, FSISAC FraudNetDoS September 2012, Symantec DDoS October 2014, USNYAG IranianBotnet March 2016, ArsTechnica Great Firewall of China)",
      "dyn_dst_name": "Sustained Client Engagement (CAPEC-227)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-1329:\nA potential security vulnerability has been identified for certain HP multifunction printers (MFPs). The vulnerability may lead to Buffer Overflow and/or Remote Code Execution when running HP Workpath solutions on potentially affected products.\n\nThe CPE (Common Platform Enumeration) is operating system laserjet_managed_flow_mfp_e82540_x3a69a_firmware (by hp) version -:\n\"laserjet_managed_flow_mfp_e82540_x3a69a_firmware\" is an operating system released by \"hp\".  This product version is -\n\nYour goal is to determine if CVE-2023-1329 is related to operating system laserjet_managed_flow_mfp_e82540_x3a69a_firmware (by hp) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-1329",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A potential security vulnerability has been identified for certain HP multifunction printers (MFPs). The vulnerability may lead to Buffer Overflow and/or Remote Code Execution when running HP Workpath solutions on potentially affected products.",
      "dyn_dst_name": "operating system laserjet_managed_flow_mfp_e82540_x3a69a_firmware (by hp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"laserjet_managed_flow_mfp_e82540_x3a69a_firmware\" is an operating system released by \"hp\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware Dridex (S0384):\nDridex is a prolific banking Trojan that first appeared in 2014. By December 2019, the US Treasury estimated Dridex had infected computers in hundreds of banks and financial institutions in over 40 countries, leading to more than $100 million in theft. Dridex was created from the source code of the Bugat banking Trojan (also known as Cridex).(Citations: Dell Dridex Oct 2015, Kaspersky Dridex May 2017, Treasury EvilCorp Dec 2019)\n\nThe MITRE ATT&CK sub-technique is Service Execution (T1569.002):\nAdversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net. PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution. Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.(Citations: Microsoft Service Control Manager, Russinovich Sysinternals)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Dridex (S0384)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Dridex is a prolific banking Trojan that first appeared in 2014. By December 2019, the US Treasury estimated Dridex had infected computers in hundreds of banks and financial institutions in over 40 countries, leading to more than $100 million in theft. Dridex was created from the source code of the Bugat banking Trojan (also known as Cridex).(Citations: Dell Dridex Oct 2015, Kaspersky Dridex May 2017, Treasury EvilCorp Dec 2019)",
      "dyn_dst_name": "Service Execution (T1569.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services. The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and Net. PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution. Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service during service persistence or privilege escalation.(Citations: Microsoft Service Control Manager, Russinovich Sysinternals)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CAPEC (Common Attack Pattern Enumeration and Classification) presented below:\n\nThe CWE (Common Weakness Enumeration) is Use of Cache Containing Sensitive Information (CWE-524):\nThe code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Altered Component Firmware (CAPEC-638):\nAn adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Use of Cache Containing Sensitive Information (CWE-524)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",
      "dyn_dst_name": "Altered Component Firmware (CAPEC-638)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and MITRE ATT&CK tactic:\n\nThe MITRE ATT&CK sub-technique is Rundll32 (T1218.011)\nAdversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>). Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute.  Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code> This behavior has been seen used by malware such as Poweliks.  Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>). Additionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citations: Trend Micro CPL, This is Security Command Line Confusion, Attackify Rundll32.exe Obscurity, Github NoRunDll, rundll32.exe defense evasion)\n\nThe MITRE ATT&CK tactic is defense-evasion (TA0005)\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Rundll32 (T1218.011)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>). Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute.  Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code> This behavior has been seen used by malware such as Poweliks.  Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>). Additionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citations: Trend Micro CPL, This is Security Command Line Confusion, Attackify Rundll32.exe Obscurity, Github NoRunDll, rundll32.exe defense evasion)",
      "dyn_dst_name": "defense-evasion (TA0005)",
      "dyn_dst_layer": "MITRE ATT&CK tactic",
      "dyn_dst_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK technique and CAPEC (Common Attack Pattern Enumeration and Classification) presented below:\n\nThe MITRE ATT&CK technique is T1599 (Network Boundary Bridging):\nAdversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks. Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks. They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections. Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications. To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised. When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance. By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals. In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.(Citations: Kaspersky ThreatNeedle Feb 2021)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is CAPEC-700 (Network Boundary Bridging):\nNetwork boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary\u2019s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1599 (Network Boundary Bridging)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks. Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks. They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections. Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications. To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised. When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance. By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals. In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.(Citations: Kaspersky ThreatNeedle Feb 2021)",
      "dyn_dst_name": "CAPEC-700 (Network Boundary Bridging)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "Network boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary\u2019s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (CWE-120) and CVE-2023-36239. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nBuffer Copy without Checking Size of Input ('Classic Buffer Overflow') (CWE-120) -\nThe product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nCVE-2023-36239 -\nlibming listswf 0.4.7 was discovered to contain a buffer overflow in the parseSWF_DEFINEFONTINFO() function at parser.c.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (CWE-120)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
      "dyn_dst_name": "CVE-2023-36239",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "libming listswf 0.4.7 was discovered to contain a buffer overflow in the parseSWF_DEFINEFONTINFO() function at parser.c.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware SLIGHTPULSE (S1110) and Deobfuscate/Decode Files or Information (T1140). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware SLIGHTPULSE (S1110) -\nSLIGHTPULSE is a web shell that was used by APT5 as early as 2020 including against Pulse Secure VPNs at US Defense Industrial Base (DIB) entities.(Citations: Mandiant Pulse Secure Zero-Day April 2021)\n\nDeobfuscate/Decode Files or Information (T1140) -\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware SLIGHTPULSE (S1110)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SLIGHTPULSE is a web shell that was used by APT5 as early as 2020 including against Pulse Secure VPNs at US Defense Industrial Base (DIB) entities.(Citations: Mandiant Pulse Secure Zero-Day April 2021)",
      "dyn_dst_name": "Deobfuscate/Decode Files or Information (T1140)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-25756 and operating system core_i9-10850k_firmware (by intel) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-25756 -\nOut-of-bounds read in the BIOS firmware for some Intel(R) Processors may allow an authenticated user to potentially enable escalation of privilege via adjacent access.\n\noperating system core_i9-10850k_firmware (by intel) version - -\n\"core_i9-10850k_firmware\" is an operating system released by \"intel\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-25756",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Out-of-bounds read in the BIOS firmware for some Intel(R) Processors may allow an authenticated user to potentially enable escalation of privilege via adjacent access.",
      "dyn_dst_name": "operating system core_i9-10850k_firmware (by intel) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"core_i9-10850k_firmware\" is an operating system released by \"intel\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-0863:\nImproper Authentication vulnerability in ABB Terra AC wallbox (UL40/80A), ABB Terra AC wallbox (UL32A), ABB Terra AC wallbox (CE) (Terra AC MID), ABB Terra AC wallbox (CE) Terra AC Juno CE, ABB Terra AC wallbox (CE) Terra AC PTB, ABB Terra AC wallbox (CE) Symbiosis, ABB Terra AC wallbox (JP).This issue affects Terra AC wallbox (UL40/80A): from 1.0;0 through 1.5.5; Terra AC wallbox (UL32A) : from 1.0;0 through 1.6.5; Terra AC wallbox (CE) (Terra AC MID): from 1.0;0 through 1.6.5; Terra AC wallbox (CE) Terra AC Juno CE: from 1.0;0 through 1.6.5; Terra AC wallbox (CE) Terra AC PTB : from 1.0;0 through 1.5.25; Terra AC wallbox (CE) Symbiosis: from 1.0;0 through 1.2.7; Terra AC wallbox (JP): from 1.0;0 through 1.6.5.\n\nThe CPE (Common Platform Enumeration) is operating system terra_ac_wallbox_jp_firmware (by abb) version *:\n\"terra_ac_wallbox_jp_firmware\" is an operating system released by \"abb\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-0863",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Improper Authentication vulnerability in ABB Terra AC wallbox (UL40/80A), ABB Terra AC wallbox (UL32A), ABB Terra AC wallbox (CE) (Terra AC MID), ABB Terra AC wallbox (CE) Terra AC Juno CE, ABB Terra AC wallbox (CE) Terra AC PTB, ABB Terra AC wallbox (CE) Symbiosis, ABB Terra AC wallbox (JP).This issue affects Terra AC wallbox (UL40/80A): from 1.0;0 through 1.5.5; Terra AC wallbox (UL32A) : from 1.0;0 through 1.6.5; Terra AC wallbox (CE) (Terra AC MID): from 1.0;0 through 1.6.5; Terra AC wallbox (CE) Terra AC Juno CE: from 1.0;0 through 1.6.5; Terra AC wallbox (CE) Terra AC PTB : from 1.0;0 through 1.5.25; Terra AC wallbox (CE) Symbiosis: from 1.0;0 through 1.2.7; Terra AC wallbox (JP): from 1.0;0 through 1.6.5.",
      "dyn_dst_name": "operating system terra_ac_wallbox_jp_firmware (by abb) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"terra_ac_wallbox_jp_firmware\" is an operating system released by \"abb\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CAPEC (Common Attack Pattern Enumeration and Classification) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Static Member Data Element outside of a Singleton Class Element (CWE-1042):\nThe code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Forceful Browsing (CAPEC-87):\nAn attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.\n\nYour goal is to determine if Static Member Data Element outside of a Singleton Class Element (CWE-1042) is related to Forceful Browsing (CAPEC-87), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Static Member Data Element outside of a Singleton Class Element (CWE-1042)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action.",
      "dyn_dst_name": "Forceful Browsing (CAPEC-87)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-46321:\niTermSessionLauncher.m in iTerm2 before 3.5.0beta12 does not sanitize paths in x-man-page URLs. They may have shell metacharacters for a /usr/bin/man command line.\n\nThe CPE (Common Platform Enumeration) is application iterm2 (by iterm2) version 3.5.0:\n\"iterm2\" is an application released by \"iterm2\".  This product version is 3.5.0 and minor version (point release) beta6\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-46321",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "iTermSessionLauncher.m in iTerm2 before 3.5.0beta12 does not sanitize paths in x-man-page URLs. They may have shell metacharacters for a /usr/bin/man command line.",
      "dyn_dst_name": "application iterm2 (by iterm2) version 3.5.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"iterm2\" is an application released by \"iterm2\".  This product version is 3.5.0 and minor version (point release) beta6",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-26836 and operating system windows_server_2022 (by microsoft) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-26836 -\nDelta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability that exists in HandlerExport.ashx/Calendar. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.\n\noperating system windows_server_2022 (by microsoft) version - -\n\"windows_server_2022\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-26836",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Delta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability that exists in HandlerExport.ashx/Calendar. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.",
      "dyn_dst_name": "operating system windows_server_2022 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2022\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-2068:\nIn addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).\n\nThe CPE (Common Platform Enumeration) is operating system qca6174a_firmware (by qualcomm) version -:\n\"qca6174a_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nYour goal is to determine if CVE-2022-2068 is related to operating system qca6174a_firmware (by qualcomm) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-2068",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
      "dyn_dst_name": "operating system qca6174a_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6174a_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and malicious software:\n\nThe MITRE ATT&CK sub-technique is Netsh Helper DLL (T1546.007)\nAdversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citations: TechNet Netsh, Github Netsh Helper CS Beacon, Demaske Netsh Persistence)\n\nThe malicious software is malware KARAE (S0215)\nKARAE is a backdoor typically used by APT37 as first-stage malware. (Citations: FireEye APT37 Feb 2018)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Netsh Helper DLL (T1546.007)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citations: TechNet Netsh, Github Netsh Helper CS Beacon, Demaske Netsh Persistence)",
      "dyn_dst_name": "malware KARAE (S0215)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "KARAE is a backdoor typically used by APT37 as first-stage malware. (Citations: FireEye APT37 Feb 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware NavRAT (S0247)\nNavRAT is a remote access tool designed to upload, download, and execute files. It has been observed in attacks targeting South Korea. (Citations: Talos NavRAT May 2018)\n\nThe MITRE ATT&CK sub-technique is T1547.001 (Registry Run Keys / Startup Folder)\nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. The following run keys are created by default on Windows systems: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> Run keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code>  Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>. The following Registry keys can be used to set startup folder items for persistence: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> The following Registry keys can control automatic startup of services during boot: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> Using policy settings to specify startup programs creates corresponding values in either of two Registry keys: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user. By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.(Citations: Microsoft Run Key, Microsoft Wow6432Node 2018, Malwarebytes Wow6432Node 2016, Microsoft Run Key, Oddvar Moe RunOnceEx Mar 2018)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware NavRAT (S0247)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "NavRAT is a remote access tool designed to upload, download, and execute files. It has been observed in attacks targeting South Korea. (Citations: Talos NavRAT May 2018)",
      "dyn_dst_name": "T1547.001 (Registry Run Keys / Startup Folder)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. The following run keys are created by default on Windows systems: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> Run keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code>  Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>. The following Registry keys can be used to set startup folder items for persistence: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> The following Registry keys can control automatic startup of services during boot: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> Using policy settings to specify startup programs creates corresponding values in either of two Registry keys: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user. By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.(Citations: Microsoft Run Key, Microsoft Wow6432Node 2018, Malwarebytes Wow6432Node 2016, Microsoft Run Key, Oddvar Moe RunOnceEx Mar 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29324:\nD-Link DIR-816 A2_v1.10CNB04 was discovered to contain a stack overflow via the proto parameter in /goform/form2IPQoSTcAdd.\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version -:\n\"android\" is an operating system released by \"google\".  This product version is -\n\nYour goal is to determine if CVE-2022-29324 is related to operating system android (by google) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29324",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "D-Link DIR-816 A2_v1.10CNB04 was discovered to contain a stack overflow via the proto parameter in /goform/form2IPQoSTcAdd.",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware FatDuke (S0512) and Time Based Evasion (T1497.003). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware FatDuke (S0512) -\nFatDuke is a backdoor used by APT29 since at least 2016.(Citations: ESET Dukes October 2019)\n\nTime Based Evasion (T1497.003) -\nAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny. Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data). Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citations: Deloitte Environment Awareness, Revil Independence Day, Netskope Nitol, Joe Sec Nymaim, Joe Sec Trickbot, ISACA Malware Tricks)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware FatDuke (S0512)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FatDuke is a backdoor used by APT29 since at least 2016.(Citations: ESET Dukes October 2019)",
      "dyn_dst_name": "Time Based Evasion (T1497.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny. Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data). Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citations: Deloitte Environment Awareness, Revil Independence Day, Netskope Nitol, Joe Sec Nymaim, Joe Sec Trickbot, ISACA Malware Tricks)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is S0116 (tool UACMe):\nUACMe is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. (Citations: Github UACMe)\n\nThe MITRE ATT&CK sub-technique is Security Account Manager (T1003.002):\nAdversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access. A number of tools can be used to retrieve the SAM file through in-memory techniques: * pwdumpx.exe * gsecdump * Mimikatz * secretsdump.py Alternatively, the SAM can be extracted from the Registry with Reg: * <code>reg save HKLM\\sam sam</code> * <code>reg save HKLM\\system system</code> Creddump7 can then be used to process the SAM database locally to retrieve hashes. Notes: * RID 500 account is the local, built-in administrator. * RID 501 is the guest account. * User accounts start with a RID of 1,000+.(Citations: GitHub Creddump7)\n\nYour goal is to determine if S0116 (tool UACMe) is related to Security Account Manager (T1003.002), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0116 (tool UACMe)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "UACMe is an open source assessment tool that contains many methods for bypassing Windows User Account Control on multiple versions of the operating system. (Citations: Github UACMe)",
      "dyn_dst_name": "Security Account Manager (T1003.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <code>net user</code> command. Enumerating the SAM database requires SYSTEM level access. A number of tools can be used to retrieve the SAM file through in-memory techniques: * pwdumpx.exe * gsecdump * Mimikatz * secretsdump.py Alternatively, the SAM can be extracted from the Registry with Reg: * <code>reg save HKLM\\sam sam</code> * <code>reg save HKLM\\system system</code> Creddump7 can then be used to process the SAM database locally to retrieve hashes. Notes: * RID 500 account is the local, built-in administrator. * RID 501 is the guest account. * User accounts start with a RID of 1,000+.(Citations: GitHub Creddump7)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Blind SQL Injection (CAPEC-7) and Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations (CWE-1039). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nBlind SQL Injection (CAPEC-7) -\nBlind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.\n\nAutomated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations (CWE-1039) -\nThe product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Blind SQL Injection (CAPEC-7)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
      "dyn_dst_name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations (CWE-1039)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK group and malicious software presented below:\n\nThe MITRE ATT&CK group is FIN7 (G0046):\nFIN7 is a financially-motivated threat group that has been active since 2013. FIN7 has primarily targeted the retail, restaurant, hospitality, software, consulting, financial services, medical equipment, cloud services, media, food and beverage, transportation, and utilities industries in the U.S. A portion of FIN7 was run out of a front company called Combi Security and often used point-of-sale malware for targeting efforts. Since 2020, FIN7 shifted operations to a big game hunting (BGH) approach including use of REvil ransomware and their own Ransomware as a Service (RaaS), Darkside. FIN7 may be linked to the Carbanak Group, but there appears to be several groups using Carbanak malware and are therefore tracked separately.(Citations: FireEye FIN7 March 2017, FireEye FIN7 April 2017, FireEye CARBANAK June 2017, FireEye FIN7 Aug 2018, CrowdStrike Carbon Spider August 2021, Mandiant FIN7 Apr 2022)\n\nThe malicious software is malware Cobalt Strike (S0154):\nCobalt Strike is a commercial, full-featured, remote access tool that bills itself as \u201cadversary simulation software designed to execute targeted attacks and emulate the post-exploitation actions of advanced threat actors\u201d. Cobalt Strike\u2019s interactive post-exploit capabilities cover the full range of ATT&CK tactics, all executed within a single, integrated system. In addition to its own capabilities, Cobalt Strike leverages the capabilities of other well-known tools such as Metasploit and Mimikatz.(Citations: cobaltstrike manual, cobaltstrike manual)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "FIN7 (G0046)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "FIN7 is a financially-motivated threat group that has been active since 2013. FIN7 has primarily targeted the retail, restaurant, hospitality, software, consulting, financial services, medical equipment, cloud services, media, food and beverage, transportation, and utilities industries in the U.S. A portion of FIN7 was run out of a front company called Combi Security and often used point-of-sale malware for targeting efforts. Since 2020, FIN7 shifted operations to a big game hunting (BGH) approach including use of REvil ransomware and their own Ransomware as a Service (RaaS), Darkside. FIN7 may be linked to the Carbanak Group, but there appears to be several groups using Carbanak malware and are therefore tracked separately.(Citations: FireEye FIN7 March 2017, FireEye FIN7 April 2017, FireEye CARBANAK June 2017, FireEye FIN7 Aug 2018, CrowdStrike Carbon Spider August 2021, Mandiant FIN7 Apr 2022)",
      "dyn_dst_name": "malware Cobalt Strike (S0154)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Cobalt Strike is a commercial, full-featured, remote access tool that bills itself as \u201cadversary simulation software designed to execute targeted attacks and emulate the post-exploitation actions of advanced threat actors\u201d. Cobalt Strike\u2019s interactive post-exploit capabilities cover the full range of ATT&CK tactics, all executed within a single, integrated system. In addition to its own capabilities, Cobalt Strike leverages the capabilities of other well-known tools such as Metasploit and Mimikatz.(Citations: cobaltstrike manual, cobaltstrike manual)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Metamorfo (S0455) and Keylogging (T1056.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Metamorfo (S0455) -\nMetamorfo is a Latin-American banking trojan operated by a Brazilian cybercrime group that has been active since at least April 2018. The group focuses on targeting banks and cryptocurrency services in Brazil and Mexico.(Citations: Medium Metamorfo Apr 2020, ESET Casbaneiro Oct 2019)\n\nKeylogging (T1056.001) -\nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Metamorfo (S0455)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Metamorfo is a Latin-American banking trojan operated by a Brazilian cybercrime group that has been active since at least April 2018. The group focuses on targeting banks and cryptocurrency services in Brazil and Mexico.(Citations: Medium Metamorfo Apr 2020, ESET Casbaneiro Oct 2019)",
      "dyn_dst_name": "Keylogging (T1056.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware HyperBro (S0398):\nHyperBro is a custom in-memory backdoor used by Threat Group-3390.(Citations: Unit42 Emissary Panda May 2019, Securelist LuckyMouse June 2018, Hacker News LuckyMouse June 2018)\n\nThe MITRE ATT&CK sub-technique is Software Packing (T1027.002):\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware HyperBro (S0398)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "HyperBro is a custom in-memory backdoor used by Threat Group-3390.(Citations: Unit42 Emissary Panda May 2019, Securelist LuckyMouse June 2018, Hacker News LuckyMouse June 2018)",
      "dyn_dst_name": "Software Packing (T1027.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-33082 and operating system qca9984_firmware (by qualcomm) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-33082 -\nMemory corruption while sending an Assoc Request having BTM Query or BTM Response containing MBO IE.\n\noperating system qca9984_firmware (by qualcomm) version - -\n\"qca9984_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33082",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory corruption while sending an Assoc Request having BTM Query or BTM Response containing MBO IE.",
      "dyn_dst_name": "operating system qca9984_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca9984_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29645\nTOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a hard coded password for root stored in the component /etc/shadow.sample.\n\nThe CPE (Common Platform Enumeration) is application snapcenter (by netapp) version -\n\"snapcenter\" is an application released by \"netapp\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29645",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a hard coded password for root stored in the component /etc/shadow.sample.",
      "dyn_dst_name": "application snapcenter (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"snapcenter\" is an application released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Micropsia (S0339):\nMicropsia is a remote access tool written in Delphi.(Citations: Talos Micropsia June 2017, Radware Micropsia July 2018)\n\nThe MITRE ATT&CK technique is Acquire Infrastructure (T1583):\nAdversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase. Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.(Citations: TrendmicroHideoutsLease, Free Trial PurpleUrchin, amnesty_nso_pegasus, FBI Proxies Credential Stuffing, Mandiant APT29 Microsoft 365 2022)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Micropsia (S0339)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Micropsia is a remote access tool written in Delphi.(Citations: Talos Micropsia June 2017, Radware Micropsia July 2018)",
      "dyn_dst_name": "Acquire Infrastructure (T1583)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may buy, lease, rent, or obtain infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Some infrastructure providers offer free trial periods, enabling infrastructure acquisition at limited to no cost. Additionally, botnets are available for rent or purchase. Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.(Citations: TrendmicroHideoutsLease, Free Trial PurpleUrchin, amnesty_nso_pegasus, FBI Proxies Credential Stuffing, Mandiant APT29 Microsoft 365 2022)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware WarzoneRAT (S0670) and Link Target (T1608.005). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware WarzoneRAT (S0670) -\nWarzoneRAT is a malware-as-a-service remote access tool (RAT) written in C++ that has been publicly available for purchase since at least late 2018.(Citations: Check Point Warzone Feb 2020, Uptycs Warzone UAC Bypass November 2020)\n\nLink Target (T1608.005) -\nAdversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user. Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link. Links can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing. Adversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.(Citations: Malwarebytes Silent Librarian October 2020, Proofpoint TA407 September 2019, Kaspersky-masking, mandiant-masking, Netskope GCP Redirection, Netskope Cloud Phishing, Intezer App Service Phishing, Cofense-redirect, iOS URL Scheme, URI, URI Use, URI Unique, Talos IPFS 2022)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WarzoneRAT (S0670)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WarzoneRAT is a malware-as-a-service remote access tool (RAT) written in C++ that has been publicly available for purchase since at least late 2018.(Citations: Check Point Warzone Feb 2020, Uptycs Warzone UAC Bypass November 2020)",
      "dyn_dst_name": "Link Target (T1608.005)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may put in place resources that are referenced by a link that can be used during targeting. An adversary may rely upon a user clicking a malicious link in order to divulge information (including credentials) or to gain execution, as in Malicious Link. Links can be used for spearphishing, such as sending an email accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser. Prior to a phish for information (as in Spearphishing Link) or a phish to gain initial access to a system (as in Spearphishing Link), an adversary must set up the resources for a link target for the spearphishing link. Typically, the resources for a link target will be an HTML page that may include some client-side script such as JavaScript to decide what content to serve to the user. Adversaries may clone legitimate sites to serve as the link target, this can include cloning of login pages of legitimate web services or organization login pages in an effort to harvest credentials during Spearphishing Link. Adversaries may also Upload Malware and have the link target point to malware for download/execution by the user. Adversaries may purchase domains similar to legitimate domains (ex: homoglyphs, typosquatting, different top-level domain, etc.) during acquisition of infrastructure (Domains) to help facilitate Malicious Link. Links can be written by adversaries to mask the true destination in order to deceive victims by abusing the URL schema and increasing the effectiveness of phishing. Adversaries may also use free or paid accounts on link shortening services and Platform-as-a-Service providers to host link targets while taking advantage of the widely trusted domains of those providers to avoid being blocked while redirecting victims to malicious pages. In addition, adversaries may serve a variety of malicious links through uniquely generated URIs/URLs (including one-time, single use links). Finally, adversaries may take advantage of the decentralized nature of the InterPlanetary File System (IPFS) to host link targets that are difficult to remove.(Citations: Malwarebytes Silent Librarian October 2020, Proofpoint TA407 September 2019, Kaspersky-masking, mandiant-masking, Netskope GCP Redirection, Netskope Cloud Phishing, Intezer App Service Phishing, Cofense-redirect, iOS URL Scheme, URI, URI Use, URI Unique, Talos IPFS 2022)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Squirrelwaffle (S1030) and Dynamic API Resolution (T1027.007). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Squirrelwaffle (S1030) -\nSquirrelwaffle is a loader that was first seen in September 2021. It has been used in spam email campaigns to deliver additional malware such as Cobalt Strike and the QakBot banking trojan.(Citations: ZScaler Squirrelwaffle Sep 2021, Netskope Squirrelwaffle Oct 2021)\n\nDynamic API Resolution (T1027.007) -\nAdversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts. API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions. To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime. Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).(Citations: Huntress API Hash, IRED API Hashing, BlackHat API Packers, Drakonia HInvoke, Huntress API Hash)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Squirrelwaffle (S1030)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Squirrelwaffle is a loader that was first seen in September 2021. It has been used in spam email campaigns to deliver additional malware such as Cobalt Strike and the QakBot banking trojan.(Citations: ZScaler Squirrelwaffle Sep 2021, Netskope Squirrelwaffle Oct 2021)",
      "dyn_dst_name": "Dynamic API Resolution (T1027.007)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts. API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions. To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime. Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).(Citations: Huntress API Hash, IRED API Hashing, BlackHat API Packers, Drakonia HInvoke, Huntress API Hash)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20186 and operating system ios (by cisco) version 15.1\\(1\\)s2. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20186 -\nA vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.\n\noperating system ios (by cisco) version 15.1\\(1\\)s2 -\n\"ios\" is an operating system released by \"cisco\".  This product version is 15.1\\(1\\)s2",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20186",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.",
      "dyn_dst_name": "operating system ios (by cisco) version 15.1\\(1\\)s2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"ios\" is an operating system released by \"cisco\".  This product version is 15.1\\(1\\)s2",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware ADVSTORESHELL (S0045) and Server Software Component (T1505). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware ADVSTORESHELL (S0045) -\nADVSTORESHELL is a spying backdoor that has been used by APT28 from at least 2012 to 2016. It is generally used for long-term espionage and is deployed on targets deemed interesting after a reconnaissance phase.  (Citations: Kaspersky Sofacy, ESET Sednit Part 2)\n\nServer Software Component (T1505) -\nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware ADVSTORESHELL (S0045)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ADVSTORESHELL is a spying backdoor that has been used by APT28 from at least 2012 to 2016. It is generally used for long-term espionage and is deployed on targets deemed interesting after a reconnaissance phase.  (Citations: Kaspersky Sofacy, ESET Sednit Part 2)",
      "dyn_dst_name": "Server Software Component (T1505)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Cross-Site Request Forgery (CSRF) (CWE-352):\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-28696:\nCross-Site Request Forgery (CSRF) vulnerability in Harish Chouhan, Themeist I Recommend Tplugin <= 3.9.0 versions.\n\nYour goal is to determine if Cross-Site Request Forgery (CSRF) (CWE-352) is related to CVE-2023-28696, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2023-28696",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross-Site Request Forgery (CSRF) vulnerability in Harish Chouhan, Themeist I Recommend Tplugin <= 3.9.0 versions.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Probe System Files (CAPEC-639)\nAn adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.\n\nThe CWE (Common Weakness Enumeration) is Incomplete List of Disallowed Inputs (CWE-184)\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Probe System Files (CAPEC-639)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",
      "dyn_dst_name": "Incomplete List of Disallowed Inputs (CWE-184)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, ICMP Flood (CAPEC-487) and Allocation of Resources Without Limits or Throttling (CWE-770). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nICMP Flood (CAPEC-487) -\nAn adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.\n\nAllocation of Resources Without Limits or Throttling (CWE-770) -\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "ICMP Flood (CAPEC-487)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",
      "dyn_dst_name": "Allocation of Resources Without Limits or Throttling (CWE-770)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique and their descriptions:\n\nThe MITRE ATT&CK tactic is command-and-control (TA0011):\nThe adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.\n\nThe MITRE ATT&CK sub-technique is AppleScript (T1059.002):\nAdversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file. AppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs <code>NSAppleScript</code> or <code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility. Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.(Citations: Apple AppleScript, SentinelOne AppleScript, SentinelOne macOS Red Team, Macro Malware Targets Macs)\n\nYour goal is to determine if command-and-control (TA0011) is related to AppleScript (T1059.002), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "command-and-control (TA0011)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.",
      "dyn_dst_name": "AppleScript (T1059.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents. These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e \"script here\"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file. AppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS Native APIs <code>NSAppleScript</code> or <code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility. Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute Native APIs, which otherwise would require compilation and execution in a mach-O binary file format. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via Python.(Citations: Apple AppleScript, SentinelOne AppleScript, SentinelOne macOS Red Team, Macro Malware Targets Macs)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and CAPEC (Common Attack Pattern Enumeration and Classification) presented below:\n\nThe MITRE ATT&CK sub-technique is T1558.003 (Kerberoasting):\nAdversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service). Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials.  This same behavior could be executed using service tickets captured from network traffic. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.(Citations: Empire InvokeKerberoast Oct 2016, AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft SPN, Microsoft SetSPN, SANS Attacking Kerberos Nov 2014, Harmj0y Kerberoast Nov 2016, Empire InvokeKerberoast Oct 2016, AdSecurity Cracking Kerberos Dec 2015, AdSecurity Cracking Kerberos Dec 2015, Empire InvokeKerberoast Oct 2016, Harmj0y Kerberoast Nov 2016, AdSecurity Cracking Kerberos Dec 2015, SANS Attacking Kerberos Nov 2014)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Kerberoasting (CAPEC-509):\nThrough the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1558.003 (Kerberoasting)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service). Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials.  This same behavior could be executed using service tickets captured from network traffic. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.(Citations: Empire InvokeKerberoast Oct 2016, AdSecurity Cracking Kerberos Dec 2015, Microsoft Detecting Kerberoasting Feb 2018, Microsoft SPN, Microsoft SetSPN, SANS Attacking Kerberos Nov 2014, Harmj0y Kerberoast Nov 2016, Empire InvokeKerberoast Oct 2016, AdSecurity Cracking Kerberos Dec 2015, AdSecurity Cracking Kerberos Dec 2015, Empire InvokeKerberoast Oct 2016, Harmj0y Kerberoast Nov 2016, AdSecurity Cracking Kerberos Dec 2015, SANS Attacking Kerberos Nov 2014)",
      "dyn_dst_name": "Kerberoasting (CAPEC-509)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-21215\nThis vulnerability could allow an attacker to force the server to create and execute a web request granting access to backend APIs that are only accessible to the Mimosa MMP server, or request pages that could perform some actions themselves. The attacker could force the server into accessing routes on those cloud-hosting platforms, accessing secret keys, changing configurations, etc. Affecting MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1.\n\nThe CPE (Common Platform Enumeration) is operating system windows_7 (by microsoft) version -\n\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-21215",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "This vulnerability could allow an attacker to force the server to create and execute a web request granting access to backend APIs that are only accessible to the Mimosa MMP server, or request pages that could perform some actions themselves. The attacker could force the server into accessing routes on those cloud-hosting platforms, accessing secret keys, changing configurations, etc. Affecting MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1.",
      "dyn_dst_name": "operating system windows_7 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is admin@338 (G0018)\nadmin@338 is a China-based cyber threat group. It has previously used newsworthy events as lures to deliver malware and has primarily targeted organizations involved in financial, economic, and trade policy, typically using publicly available RATs such as PoisonIvy, as well as some non-public backdoors. (Citations: FireEye admin@338)\n\nThe malicious software is S0145 (malware POWERSOURCE)\nPOWERSOURCE is a PowerShell backdoor that is a heavily obfuscated and modified version of the publicly available tool DNS_TXT_Pwnage. It was observed in February 2017 in spearphishing campaigns against personnel involved with United States Securities and Exchange Commission (SEC) filings at various organizations. The malware was delivered when macros were enabled by the victim and a VBS script was dropped.  (Citations: FireEye FIN7 March 2017, Cisco DNSMessenger March 2017)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "admin@338 (G0018)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "admin@338 is a China-based cyber threat group. It has previously used newsworthy events as lures to deliver malware and has primarily targeted organizations involved in financial, economic, and trade policy, typically using publicly available RATs such as PoisonIvy, as well as some non-public backdoors. (Citations: FireEye admin@338)",
      "dyn_dst_name": "S0145 (malware POWERSOURCE)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "POWERSOURCE is a PowerShell backdoor that is a heavily obfuscated and modified version of the publicly available tool DNS_TXT_Pwnage. It was observed in February 2017 in spearphishing campaigns against personnel involved with United States Securities and Exchange Commission (SEC) filings at various organizations. The malware was delivered when macros were enabled by the victim and a VBS script was dropped.  (Citations: FireEye FIN7 March 2017, Cisco DNSMessenger March 2017)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK technique and malicious software presented below:\n\nThe MITRE ATT&CK technique is Firmware Corruption (T1495):\nAdversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards. In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.(Citations: Symantec Chernobyl W95.CIH, dhs_threat_to_net_devices, cisa_malware_orgs_ukraine)\n\nThe malicious software is malware Hancitor (S0499):\nHancitor is a downloader that has been used by Pony and other information stealing malware.(Citations: Threatpost Hancitor, FireEye Hancitor)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Firmware Corruption (T1495)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards. In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.(Citations: Symantec Chernobyl W95.CIH, dhs_threat_to_net_devices, cisa_malware_orgs_ukraine)",
      "dyn_dst_name": "malware Hancitor (S0499)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Hancitor is a downloader that has been used by Pony and other information stealing malware.(Citations: Threatpost Hancitor, FireEye Hancitor)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Session Credential Falsification through Prediction (CAPEC-59) and Authentication Bypass by Spoofing (CWE-290). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nSession Credential Falsification through Prediction (CAPEC-59) -\nThis attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.\n\nAuthentication Bypass by Spoofing (CWE-290) -\nThis attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Session Credential Falsification through Prediction (CAPEC-59)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
      "dyn_dst_name": "Authentication Bypass by Spoofing (CWE-290)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-21215\nThis vulnerability could allow an attacker to force the server to create and execute a web request granting access to backend APIs that are only accessible to the Mimosa MMP server, or request pages that could perform some actions themselves. The attacker could force the server into accessing routes on those cloud-hosting platforms, accessing secret keys, changing configurations, etc. Affecting MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1.\n\nThe CPE (Common Platform Enumeration) is operating system debian_linux (by debian) version 9.0\n\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-21215",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "This vulnerability could allow an attacker to force the server to create and execute a web request granting access to backend APIs that are only accessible to the Mimosa MMP server, or request pages that could perform some actions themselves. The attacker could force the server into accessing routes on those cloud-hosting platforms, accessing secret keys, changing configurations, etc. Affecting MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1.",
      "dyn_dst_name": "operating system debian_linux (by debian) version 9.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is S0439 (malware Okrum):\nOkrum is a Windows backdoor that has been seen in use since December 2016 with strong links to Ke3chang.(Citations: ESET Okrum July 2019)\n\nThe MITRE ATT&CK technique is Server Software Component (T1505):\nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0439 (malware Okrum)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Okrum is a Windows backdoor that has been seen in use since December 2016 with strong links to Ke3chang.(Citations: ESET Okrum July 2019)",
      "dyn_dst_name": "Server Software Component (T1505)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-33127 and application .net (by microsoft) version *. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-33127 -\n.NET and Visual Studio Elevation of Privilege Vulnerability\n\napplication .net (by microsoft) version * -\n\".net\" is an application released by \"microsoft\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33127",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": ".NET and Visual Studio Elevation of Privilege Vulnerability",
      "dyn_dst_name": "application .net (by microsoft) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\".net\" is an application released by \"microsoft\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Ingress Tool Transfer (T1105) and malware RARSTONE (S0055). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nIngress Tool Transfer (T1105) -\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)\n\nmalware RARSTONE (S0055) -\nRARSTONE is malware used by the Naikon group that has some characteristics similar to PlugX. (Citations: Aquino RARSTONE)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Ingress Tool Transfer (T1105)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_dst_name": "malware RARSTONE (S0055)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "RARSTONE is malware used by the Naikon group that has some characteristics similar to PlugX. (Citations: Aquino RARSTONE)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware BADNEWS (S0128):\nBADNEWS is malware that has been used by the actors responsible for the Patchwork campaign. Its name was given due to its use of RSS feeds, forums, and blogs for command and control.  (Citations: Forcepoint Monsoon, TrendMicro Patchwork Dec 2017)\n\nThe MITRE ATT&CK sub-technique is AppDomainManager (T1574.014):\nAdversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citations: Microsoft App Domains, PenTestLabs AppDomainManagerInject, PwC Yellow Liderc, Rapid7 AppDomain Manager Injection)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware BADNEWS (S0128)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "BADNEWS is malware that has been used by the actors responsible for the Patchwork campaign. Its name was given due to its use of RSS feeds, forums, and blogs for command and control.  (Citations: Forcepoint Monsoon, TrendMicro Patchwork Dec 2017)",
      "dyn_dst_name": "AppDomainManager (T1574.014)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citations: Microsoft App Domains, PenTestLabs AppDomainManagerInject, PwC Yellow Liderc, Rapid7 AppDomain Manager Injection)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-23660 and operating system windows_server_2012 (by microsoft) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-23660 -\nA remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.\n\noperating system windows_server_2012 (by microsoft) version - -\n\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-23660",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.",
      "dyn_dst_name": "operating system windows_server_2012 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-4607\nAn authenticated XCC user can change permissions for any user through a crafted API command.\n\nThe CPE (Common Platform Enumeration) is operating system thinkagile_hx5521_firmware (by lenovo) version -\n\"thinkagile_hx5521_firmware\" is an operating system released by \"lenovo\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-4607",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An authenticated XCC user can change permissions for any user through a crafted API command.",
      "dyn_dst_name": "operating system thinkagile_hx5521_firmware (by lenovo) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"thinkagile_hx5521_firmware\" is an operating system released by \"lenovo\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-23623 and application electron (by electronjs) version 22.0.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-23623 -\nElectron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. A Content-Security-Policy that disables eval, specifically setting a `script-src` directive and _not_ providing `unsafe-eval` in that directive, is not respected in renderers that have sandbox disabled. i.e. `sandbox: false` in the `webPreferences` object. This allows usage of methods like `eval()` and `new Function` unexpectedly which can result in an expanded attack surface. This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes: 22.0.1 and 23.0.0-alpha.2 We recommend all apps upgrade to the latest stable version of Electron. If upgrading isn't possible, this issue can be addressed without upgrading by enabling `sandbox: true` on all renderers.\n\napplication electron (by electronjs) version 22.0.0 -\n\"electron\" is an application released by \"electronjs\".  This product version is 22.0.0 and minor version (point release) beta4",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-23623",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Electron is a framework which lets you write cross-platform desktop applications using JavaScript, HTML and CSS. A Content-Security-Policy that disables eval, specifically setting a `script-src` directive and _not_ providing `unsafe-eval` in that directive, is not respected in renderers that have sandbox disabled. i.e. `sandbox: false` in the `webPreferences` object. This allows usage of methods like `eval()` and `new Function` unexpectedly which can result in an expanded attack surface. This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes: 22.0.1 and 23.0.0-alpha.2 We recommend all apps upgrade to the latest stable version of Electron. If upgrading isn't possible, this issue can be addressed without upgrading by enabling `sandbox: true` on all renderers.",
      "dyn_dst_name": "application electron (by electronjs) version 22.0.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"electron\" is an application released by \"electronjs\".  This product version is 22.0.0 and minor version (point release) beta4",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Cloud Accounts (T1078.004) and tool NBTscan (S0590). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCloud Accounts (T1078.004) -\nValid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.  Service or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices. An adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. Cloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.(Citations: AWS Identity Federation, Google Federating GC, Microsoft Deploying AD Federation)\n\ntool NBTscan (S0590) -\nNBTscan is an open source tool that has been used by state groups to conduct internal reconnaissance within a compromised network.(Citations: Debian nbtscan Nov 2019, SecTools nbtscan June 2003, Symantec Waterbug Jun 2019, FireEye APT39 Jan 2019)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cloud Accounts (T1078.004)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory.  Service or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices. An adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. Cloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods.(Citations: AWS Identity Federation, Google Federating GC, Microsoft Deploying AD Federation)",
      "dyn_dst_name": "tool NBTscan (S0590)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "NBTscan is an open source tool that has been used by state groups to conduct internal reconnaissance within a compromised network.(Citations: Debian nbtscan Nov 2019, SecTools nbtscan June 2003, Symantec Waterbug Jun 2019, FireEye APT39 Jan 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20086 and operating system adaptive_security_appliance_software (by cisco) version 9.12.2. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20086 -\nA vulnerability in ICMPv6 processing of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. This vulnerability is due to improper processing of ICMPv6 messages. An attacker could exploit this vulnerability by sending crafted ICMPv6 messages to a targeted Cisco ASA or FTD system with IPv6 enabled. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.\n\noperating system adaptive_security_appliance_software (by cisco) version 9.12.2 -\n\"adaptive_security_appliance_software\" is an operating system released by \"cisco\".  This product version is 9.12.2",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20086",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in ICMPv6 processing of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. This vulnerability is due to improper processing of ICMPv6 messages. An attacker could exploit this vulnerability by sending crafted ICMPv6 messages to a targeted Cisco ASA or FTD system with IPv6 enabled. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.",
      "dyn_dst_name": "operating system adaptive_security_appliance_software (by cisco) version 9.12.2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"adaptive_security_appliance_software\" is an operating system released by \"cisco\".  This product version is 9.12.2",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-23658\nA remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.\n\nThe CPE (Common Platform Enumeration) is operating system fedora (by fedoraproject) version 36\n\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 36\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-23658",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.",
      "dyn_dst_name": "operating system fedora (by fedoraproject) version 36",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 36",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-29303 and operating system pagewide_377dw_j9v80a_firmware (by hp) version *. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-29303 -\nSolarView Compact ver.6.00 was discovered to contain a command injection vulnerability via conf_mail.php.\n\noperating system pagewide_377dw_j9v80a_firmware (by hp) version * -\n\"pagewide_377dw_j9v80a_firmware\" is an operating system released by \"hp\". ",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29303",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "SolarView Compact ver.6.00 was discovered to contain a command injection vulnerability via conf_mail.php.",
      "dyn_dst_name": "operating system pagewide_377dw_j9v80a_firmware (by hp) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"pagewide_377dw_j9v80a_firmware\" is an operating system released by \"hp\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Runtime Resource Management Control Element in a Component Built to Run on Application Servers (CWE-1065) and Hijacking a Privileged Thread of Execution (CAPEC-30). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nRuntime Resource Management Control Element in a Component Built to Run on Application Servers (CWE-1065) -\nThe product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.\n\nHijacking a Privileged Thread of Execution (CAPEC-30) -\nAn adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers (CWE-1065)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",
      "dyn_dst_name": "Hijacking a Privileged Thread of Execution (CAPEC-30)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware UBoatRAT (S0333) and T1001.001 (Junk Data). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware UBoatRAT (S0333) -\nUBoatRAT is a remote access tool that was identified in May 2017.(Citations: PaloAlto UBoatRAT Nov 2017)\n\nT1001.001 (Junk Data) -\nAdversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.(Citations: FireEye SUNBURST Backdoor December 2020)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware UBoatRAT (S0333)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "UBoatRAT is a remote access tool that was identified in May 2017.(Citations: PaloAlto UBoatRAT Nov 2017)",
      "dyn_dst_name": "T1001.001 (Junk Data)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.(Citations: FireEye SUNBURST Backdoor December 2020)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89):\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-2089:\nA vulnerability was found in SourceCodester Complaint Management System 1.0. It has been rated as critical. This issue affects some unknown processing of the file /admin/userprofile.php of the component GET Parameter Handler. The manipulation of the argument uid leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-226097 was assigned to this vulnerability.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-2089",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability was found in SourceCodester Complaint Management System 1.0. It has been rated as critical. This issue affects some unknown processing of the file /admin/userprofile.php of the component GET Parameter Handler. The manipulation of the argument uid leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-226097 was assigned to this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK group and malicious software and their descriptions:\n\nThe MITRE ATT&CK group is Lazarus Group (G0032):\nLazarus Group is a North Korean state-sponsored cyber threat group that has been attributed to the Reconnaissance General Bureau. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by Lazarus Group correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain. North Korean group definitions are known to have significant overlap, and some security researchers report all North Korean state-sponsored cyber activity under the name Lazarus Group instead of tracking clusters or subgroups, such as Andariel, APT37, APT38, and Kimsuky.(Citations: US-CERT HIDDEN COBRA June 2017, Treasury North Korean Cyber Groups September 2019, Novetta Blockbuster)\n\nThe malicious software is malware GLOOXMAIL (S0026):\nGLOOXMAIL is malware used by APT1 that mimics legitimate Jabber/XMPP traffic. (Citations: Mandiant APT1)\n\nYour goal is to determine if Lazarus Group (G0032) is related to malware GLOOXMAIL (S0026), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Lazarus Group (G0032)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Lazarus Group is a North Korean state-sponsored cyber threat group that has been attributed to the Reconnaissance General Bureau. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by Lazarus Group correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain. North Korean group definitions are known to have significant overlap, and some security researchers report all North Korean state-sponsored cyber activity under the name Lazarus Group instead of tracking clusters or subgroups, such as Andariel, APT37, APT38, and Kimsuky.(Citations: US-CERT HIDDEN COBRA June 2017, Treasury North Korean Cyber Groups September 2019, Novetta Blockbuster)",
      "dyn_dst_name": "malware GLOOXMAIL (S0026)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "GLOOXMAIL is malware used by APT1 that mimics legitimate Jabber/XMPP traffic. (Citations: Mandiant APT1)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-23770 and Use of Hard-coded Credentials (CWE-798). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-23770 -\nMotorola MBTS Site Controller accepts hard-coded backdoor password. The Motorola MBTS Site Controller Man Machine Interface (MMI), allowing for service technicians to diagnose and configure the device, accepts a hard-coded backdoor password that cannot be changed or disabled.\n\nUse of Hard-coded Credentials (CWE-798) -\nThe product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-23770",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Motorola MBTS Site Controller accepts hard-coded backdoor password. The Motorola MBTS Site Controller Man Machine Interface (MMI), allowing for service technicians to diagnose and configure the device, accepts a hard-coded backdoor password that cannot be changed or disabled.",
      "dyn_dst_name": "Use of Hard-coded Credentials (CWE-798)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-41137:\nSymmetric encryption used to protect messages between the AppsAnywhere server and client can be broken by reverse engineering the client and used to impersonate the AppsAnywhere server.\n\nThe CPE (Common Platform Enumeration) is application appsanywhere_client (by appsanywhere) version 1.5.1:\n\"appsanywhere_client\" is an application released by \"appsanywhere\".  This product version is 1.5.1\n\nYour goal is to determine if CVE-2023-41137 is related to application appsanywhere_client (by appsanywhere) version 1.5.1, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-41137",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Symmetric encryption used to protect messages between the AppsAnywhere server and client can be broken by reverse engineering the client and used to impersonate the AppsAnywhere server.",
      "dyn_dst_name": "application appsanywhere_client (by appsanywhere) version 1.5.1",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"appsanywhere_client\" is an application released by \"appsanywhere\".  This product version is 1.5.1",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is S0448 (malware Rising Sun):\nRising Sun is a modular backdoor that was used extensively in Operation Sharpshooter between 2017 and 2019. Rising Sun infected at least 87 organizations around the world, including nuclear, defense, energy, and financial service companies. Security researchers assessed Rising Sun included some source code from Lazarus Group's Trojan Duuzer.(Citations: McAfee Sharpshooter December 2018)\n\nThe MITRE ATT&CK technique is Process Discovery (T1057):\nAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0448 (malware Rising Sun)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Rising Sun is a modular backdoor that was used extensively in Operation Sharpshooter between 2017 and 2019. Rising Sun infected at least 87 organizations around the world, including nuclear, defense, energy, and financial service companies. Security researchers assessed Rising Sun included some source code from Lazarus Group's Trojan Duuzer.(Citations: McAfee Sharpshooter December 2018)",
      "dyn_dst_name": "Process Discovery (T1057)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78):\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33377:\nConnected IO v2.1.0 and prior has an OS command injection vulnerability in the set firewall command in part of its communication protocol, enabling attackers to execute arbitrary OS commands on devices.\n\nYour goal is to determine if Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78) is related to CVE-2023-33377, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-33377",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Connected IO v2.1.0 and prior has an OS command injection vulnerability in the set firewall command in part of its communication protocol, enabling attackers to execute arbitrary OS commands on devices.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-25447 and operating system windows_11 (by microsoft) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-25447 -\nTenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the schedendtime parameter in the openSchedWifi function.\n\noperating system windows_11 (by microsoft) version - -\n\"windows_11\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25447",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the schedendtime parameter in the openSchedWifi function.",
      "dyn_dst_name": "operating system windows_11 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_11\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33412\nThe web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.\n\nThe CPE (Common Platform Enumeration) is operating system x13seed-sf_firmware (by supermicro) version *\n\"x13seed-sf_firmware\" is an operating system released by \"supermicro\". \n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33412",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.",
      "dyn_dst_name": "operating system x13seed-sf_firmware (by supermicro) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"x13seed-sf_firmware\" is an operating system released by \"supermicro\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, S0238 (malware Proxysvc) and Windows Command Shell (T1059.003). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nS0238 (malware Proxysvc) -\nProxysvc is a malicious DLL used by Lazarus Group in a campaign known as Operation GhostSecret. It has appeared to be operating undetected since 2017 and was mostly observed in higher education organizations. The goal of Proxysvc is to deliver additional payloads to the target and to maintain control for the attacker. It is in the form of a DLL that can also be executed as a standalone process. (Citations: McAfee GhostSecret)\n\nWindows Command Shell (T1059.003) -\nAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.(Citations: SSH in Windows)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0238 (malware Proxysvc)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Proxysvc is a malicious DLL used by Lazarus Group in a campaign known as Operation GhostSecret. It has appeared to be operating undetected since 2017 and was mostly observed in higher education organizations. The goal of Proxysvc is to deliver additional payloads to the target and to maintain control for the attacker. It is in the form of a DLL that can also be executed as a standalone process. (Citations: McAfee GhostSecret)",
      "dyn_dst_name": "Windows Command Shell (T1059.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.(Citations: SSH in Windows)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-28572 and operating system qca6595au_firmware (by qualcomm) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-28572 -\nMemory corruption in WLAN HOST while processing the WLAN scan descriptor list.\n\noperating system qca6595au_firmware (by qualcomm) version - -\n\"qca6595au_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-28572",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory corruption in WLAN HOST while processing the WLAN scan descriptor list.",
      "dyn_dst_name": "operating system qca6595au_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6595au_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, TA0003 (persistence) and Windows Service (T1543.003). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nTA0003 (persistence) -\nThe adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.\n\nWindows Service (T1543.003) -\nAdversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citations: TechNet Services, Symantec W.32 Stuxnet Dossier, Crowdstrike DriveSlayer February 2022, Unit42 AcidBox June 2020, ESET InvisiMole June 2020, Unit42 AcidBox June 2020, SANS 1, SANS 2)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "TA0003 (persistence)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
      "dyn_dst_name": "Windows Service (T1543.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citations: TechNet Services, Symantec W.32 Stuxnet Dossier, Crowdstrike DriveSlayer February 2022, Unit42 AcidBox June 2020, ESET InvisiMole June 2020, Unit42 AcidBox June 2020, SANS 1, SANS 2)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CWE-284 (Improper Access Control) and CVE-2023-2429. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCWE-284 (Improper Access Control) -\nThe product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\nCVE-2023-2429 -\nImproper Access Control in GitHub repository thorsten/phpmyfaq prior to 3.1.13.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-284 (Improper Access Control)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
      "dyn_dst_name": "CVE-2023-2429",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Improper Access Control in GitHub repository thorsten/phpmyfaq prior to 3.1.13.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25446\nTenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the schedstarttime parameter in the openSchedWifi function.\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2008 (by microsoft) version r2\n\"windows_server_2008\" is an operating system released by \"microsoft\".  This product version is r2 and minor version (point release) sp1\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25446",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the schedstarttime parameter in the openSchedWifi function.",
      "dyn_dst_name": "operating system windows_server_2008 (by microsoft) version r2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2008\" is an operating system released by \"microsoft\".  This product version is r2 and minor version (point release) sp1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22):\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-45722:\nHCL DRYiCE MyXalytics is impacted by path traversal arbitrary file read vulnerability because it uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory. The product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Potential exploits can completely disrupt or take over the application.\n\nYour goal is to determine if Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22) is related to CVE-2023-45722, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
      "dyn_dst_name": "CVE-2023-45722",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "HCL DRYiCE MyXalytics is impacted by path traversal arbitrary file read vulnerability because it uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory. The product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Potential exploits can completely disrupt or take over the application.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK group:\n\nThe malicious software is tool Windows Credential Editor (S0005)\nWindows Credential Editor is a password dumping tool. (Citations: Amplia WCE)\n\nThe MITRE ATT&CK group is BRONZE BUTLER (G0060)\nBRONZE BUTLER is a cyber espionage group with likely Chinese origins that has been active since at least 2008. The group primarily targets Japanese organizations, particularly those in government, biotechnology, electronics manufacturing, and industrial chemistry.(Citations: Trend Micro Daserf Nov 2017, Secureworks BRONZE BUTLER Oct 2017, Trend Micro Tick November 2019)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Windows Credential Editor (S0005)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Windows Credential Editor is a password dumping tool. (Citations: Amplia WCE)",
      "dyn_dst_name": "BRONZE BUTLER (G0060)",
      "dyn_dst_layer": "MITRE ATT&CK group",
      "dyn_dst_description": "BRONZE BUTLER is a cyber espionage group with likely Chinese origins that has been active since at least 2008. The group primarily targets Japanese organizations, particularly those in government, biotechnology, electronics manufacturing, and industrial chemistry.(Citations: Trend Micro Daserf Nov 2017, Secureworks BRONZE BUTLER Oct 2017, Trend Micro Tick November 2019)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is tool sqlmap (S0225):\nsqlmap is an open source penetration testing tool that can be used to automate the process of detecting and exploiting SQL injection flaws. (Citations: sqlmap Introduction)\n\nThe MITRE ATT&CK technique is Data Obfuscation (T1001):\nAdversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.(Citations: Bitdefender FunnyDream Campaign November 2020)\n\nYour goal is to determine if tool sqlmap (S0225) is related to Data Obfuscation (T1001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool sqlmap (S0225)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "sqlmap is an open source penetration testing tool that can be used to automate the process of detecting and exploiting SQL injection flaws. (Citations: sqlmap Introduction)",
      "dyn_dst_name": "Data Obfuscation (T1001)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols.(Citations: Bitdefender FunnyDream Campaign November 2020)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware YAHOYAH (S0388)\nYAHOYAH is a Trojan used by Tropic Trooper as a second-stage backdoor.(Citations: TrendMicro TropicTrooper 2015)\n\nThe MITRE ATT&CK technique is Direct Volume Access (T1006)\nAdversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools.  Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.(Citations: Hakobyan 2009, Github PowerSploit Ninjacopy, LOLBAS Esentutl)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware YAHOYAH (S0388)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "YAHOYAH is a Trojan used by Tropic Trooper as a second-stage backdoor.(Citations: TrendMicro TropicTrooper 2015)",
      "dyn_dst_name": "Direct Volume Access (T1006)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools.  Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.(Citations: Hakobyan 2009, Github PowerSploit Ninjacopy, LOLBAS Esentutl)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Improper Control of Generation of Code ('Code Injection') (CWE-94) and CVE-2023-37909. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nImproper Control of Generation of Code ('Code Injection') (CWE-94) -\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nCVE-2023-37909 -\nXWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 5.1-rc-1 and prior to versions 14.10.8 and 15.3-rc-1, any user who can edit their own user profile can execute arbitrary script macros including Groovy and Python macros that allow remote code execution including unrestricted read and write access to all wiki contents. This has been patched in XWiki 14.10.8 and 15.3-rc-1 by adding proper escaping. As a workaround, the patch can be manually applied to the document `Menu.UIExtensionSheet`; only three lines need to be changed.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Control of Generation of Code ('Code Injection') (CWE-94)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "dyn_dst_name": "CVE-2023-37909",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Starting in version 5.1-rc-1 and prior to versions 14.10.8 and 15.3-rc-1, any user who can edit their own user profile can execute arbitrary script macros including Groovy and Python macros that allow remote code execution including unrestricted read and write access to all wiki contents. This has been patched in XWiki 14.10.8 and 15.3-rc-1 by adding proper escaping. As a workaround, the patch can be manually applied to the document `Menu.UIExtensionSheet`; only three lines need to be changed.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is G0002 (Moafee)\nMoafee is a threat group that appears to operate from the Guandong Province of China. Due to overlapping TTPs, including similar custom tools, Moafee is thought to have a direct or indirect relationship with the threat group DragonOK. (Citations: Haq 2014)\n\nThe malicious software is tool pwdump (S0006)\npwdump is a credential dumper. (Citations: Wikipedia pwdump)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "G0002 (Moafee)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Moafee is a threat group that appears to operate from the Guandong Province of China. Due to overlapping TTPs, including similar custom tools, Moafee is thought to have a direct or indirect relationship with the threat group DragonOK. (Citations: Haq 2014)",
      "dyn_dst_name": "tool pwdump (S0006)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "pwdump is a credential dumper. (Citations: Wikipedia pwdump)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Services Footprinting (CAPEC-574):\nAn adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include \"sc\" and \"tasklist/svc\" using Tasklist, and \"net start\" using Net.\n\nThe CWE (Common Weakness Enumeration) is Use of Web Link to Untrusted Target with window.opener Access (CWE-1022):\nThe web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Services Footprinting (CAPEC-574)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include \"sc\" and \"tasklist/svc\" using Tasklist, and \"net start\" using Net.",
      "dyn_dst_name": "Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-25459 and operating system h615c_firmware (by netapp) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-25459 -\nTenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the S1 parameter in the SetSysTimeCfg function.\n\noperating system h615c_firmware (by netapp) version - -\n\"h615c_firmware\" is an operating system released by \"netapp\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25459",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the S1 parameter in the SetSysTimeCfg function.",
      "dyn_dst_name": "operating system h615c_firmware (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"h615c_firmware\" is an operating system released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Cross-Site Request Forgery (CSRF) (CWE-352):\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-23680:\nCross-Site Request Forgery (CSRF) vulnerability in Bob Goetz WP-TopBar plugin <= 5.36 versions.\n\nYour goal is to determine if Cross-Site Request Forgery (CSRF) (CWE-352) is related to CVE-2023-23680, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2023-23680",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross-Site Request Forgery (CSRF) vulnerability in Bob Goetz WP-TopBar plugin <= 5.36 versions.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Insertion of Sensitive Information into Log File (CWE-532)\nInformation written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-46667\nAn issue was discovered in Fleet Server >= v8.10.0 and < v8.10.3 where Agent enrolment tokens are being inserted into the Fleet Server\u2019s log file in plain text. These enrolment tokens could allow someone to enrol an agent into an agent policy, and potentially use that to retrieve other secrets in the policy including for Elasticsearch and third-party services. Alternatively a threat actor could potentially enrol agents to the clusters and send arbitrary events to Elasticsearch.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Insertion of Sensitive Information into Log File (CWE-532)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.",
      "dyn_dst_name": "CVE-2023-46667",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "An issue was discovered in Fleet Server >= v8.10.0 and < v8.10.3 where Agent enrolment tokens are being inserted into the Fleet Server\u2019s log file in plain text. These enrolment tokens could allow someone to enrol an agent into an agent policy, and potentially use that to retrieve other secrets in the policy including for Elasticsearch and third-party services. Alternatively a threat actor could potentially enrol agents to the clusters and send arbitrary events to Elasticsearch.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is XPath Injection (CAPEC-83):\nAn attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.\n\nThe CWE (Common Weakness Enumeration) is Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004):\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "XPath Injection (CAPEC-83)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
      "dyn_dst_name": "Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) and CVE-2023-41724. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection')) -\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nCVE-2023-41724 -\nA command injection vulnerability in Ivanti Sentry prior to 9.19.0 allows unauthenticated threat actor to execute arbitrary commands on the underlying operating system of the appliance within the same physical or logical network.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-77 (Improper Neutralization of Special Elements used in a Command ('Command Injection'))",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-41724",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A command injection vulnerability in Ivanti Sentry prior to 9.19.0 allows unauthenticated threat actor to execute arbitrary commands on the underlying operating system of the appliance within the same physical or logical network.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Interception (CAPEC-117):\nAn adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\n\nThe CWE (Common Weakness Enumeration) is Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004):\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.\n\nYour goal is to determine if Interception (CAPEC-117) is related to Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Interception (CAPEC-117)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
      "dyn_dst_name": "Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware FLASHFLOOD (S0036) and Wi-Fi Discovery (T1016.002). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware FLASHFLOOD (S0036) -\nFLASHFLOOD is malware developed by APT30 that allows propagation and exfiltration of data over removable devices. APT30 may use this capability to exfiltrate data across air-gaps. (Citations: FireEye APT30)\n\nWi-Fi Discovery (T1016.002) -\nAdversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware FLASHFLOOD (S0036)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FLASHFLOOD is malware developed by APT30 that allows propagation and exfiltration of data over removable devices. APT30 may use this capability to exfiltrate data across air-gaps. (Citations: FireEye APT30)",
      "dyn_dst_name": "Wi-Fi Discovery (T1016.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware Turian (S0647):\nTurian is a backdoor that has been used by BackdoorDiplomacy to target Ministries of Foreign Affairs, telecommunication companies, and charities in Africa, Europe, the Middle East, and Asia. First reported in 2021, Turian is likely related to Quarian, an older backdoor that was last observed being used in 2013 against diplomatic targets in Syria and the United States.(Citations: ESET BackdoorDiplomacy Jun 2021)\n\nThe MITRE ATT&CK sub-technique is Add-ins (T1137.006):\nAdversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins.  Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.(Citations: Microsoft Office Add-ins, MRWLabs Office Persistence Add-ins, FireEye Mail CDS 2018)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Turian (S0647)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Turian is a backdoor that has been used by BackdoorDiplomacy to target Ministries of Foreign Affairs, telecommunication companies, and charities in Africa, Europe, the Middle East, and Asia. First reported in 2021, Turian is likely related to Quarian, an older backdoor that was last observed being used in 2013 against diplomatic targets in Syria and the United States.(Citations: ESET BackdoorDiplomacy Jun 2021)",
      "dyn_dst_name": "Add-ins (T1137.006)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs.  There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins.  Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.(Citations: Microsoft Office Add-ins, MRWLabs Office Persistence Add-ins, FireEye Mail CDS 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Transparent Tribe (G0134) and malware NetTraveler (S0033). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nTransparent Tribe (G0134) -\nTransparent Tribe is a suspected Pakistan-based threat group that has been active since at least 2013, primarily targeting diplomatic, defense, and research organizations in India and Afghanistan.(Citations: Proofpoint Operation Transparent Tribe March 2016, Kaspersky Transparent Tribe August 2020, Talos Transparent Tribe May 2021)\n\nmalware NetTraveler (S0033) -\nNetTraveler is malware that has been used in multiple cyber espionage campaigns for basic surveillance of victims. The earliest known samples have timestamps back to 2005, and the largest number of observed samples were created between 2010 and 2013. (Citations: Kaspersky NetTraveler)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Transparent Tribe (G0134)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Transparent Tribe is a suspected Pakistan-based threat group that has been active since at least 2013, primarily targeting diplomatic, defense, and research organizations in India and Afghanistan.(Citations: Proofpoint Operation Transparent Tribe March 2016, Kaspersky Transparent Tribe August 2020, Talos Transparent Tribe May 2021)",
      "dyn_dst_name": "malware NetTraveler (S0033)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "NetTraveler is malware that has been used in multiple cyber espionage campaigns for basic surveillance of victims. The earliest known samples have timestamps back to 2005, and the largest number of observed samples were created between 2010 and 2013. (Citations: Kaspersky NetTraveler)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware GoldenSpy (S0493):\nGoldenSpy is a backdoor malware which has been packaged with legitimate tax preparation software. GoldenSpy was discovered targeting organizations in China, being delivered with the \"Intelligent Tax\" software suite which is produced by the Golden Tax Department of Aisino Credit Information Co. and required to pay local taxes.(Citations: Trustwave GoldenSpy June 2020)\n\nThe MITRE ATT&CK technique is Server Software Component (T1505):\nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware GoldenSpy (S0493)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "GoldenSpy is a backdoor malware which has been packaged with legitimate tax preparation software. GoldenSpy was discovered targeting organizations in China, being delivered with the \"Intelligent Tax\" software suite which is produced by the Golden Tax Department of Aisino Credit Information Co. and required to pay local taxes.(Citations: Trustwave GoldenSpy June 2020)",
      "dyn_dst_name": "Server Software Component (T1505)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-20189:\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\nThe CPE (Common Platform Enumeration) is operating system sg500-28p_firmware (by cisco) version -:\n\"sg500-28p_firmware\" is an operating system released by \"cisco\".  This product version is -\n\nYour goal is to determine if CVE-2023-20189 is related to operating system sg500-28p_firmware (by cisco) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20189",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sg500-28p_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg500-28p_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is S0482 (malware Bundlore):\nBundlore is adware written for macOS that has been in use since at least 2015. Though categorized as adware, Bundlore has many features associated with more traditional backdoors.(Citations: MacKeeper Bundlore Apr 2019)\n\nThe MITRE ATT&CK sub-technique is T1071.001 (Web Protocols):\nAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0482 (malware Bundlore)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Bundlore is adware written for macOS that has been in use since at least 2015. Though categorized as adware, Bundlore has many features associated with more traditional backdoors.(Citations: MacKeeper Bundlore Apr 2019)",
      "dyn_dst_name": "T1071.001 (Web Protocols)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, reconnaissance (TA0043) and Spearphishing Attachment (T1598.002). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nreconnaissance (TA0043) -\nThe adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.\n\nSpearphishing Attachment (T1598.002) -\nAdversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.(Citations: Sophos Attachment, GitHub Phishery)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "reconnaissance (TA0043)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.",
      "dyn_dst_name": "Spearphishing Attachment (T1598.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file. The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: Search Open Websites/Domains or Search Victim-Owned Websites) to craft persuasive and believable lures.(Citations: Sophos Attachment, GitHub Phishery)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30422:\nProietti Tech srl Planet Time Enterprise 4.2.0.1,4.2.0.0,4.1.0.0,4.0.0.0,3.3.1.0,3.3.0.0 is vulnerable to Remote code execution via the Viewstate parameter.\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version 10.0:\n\"android\" is an operating system released by \"google\".  This product version is 10.0\n\nYour goal is to determine if CVE-2022-30422 is related to operating system android (by google) version 10.0, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30422",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Proietti Tech srl Planet Time Enterprise 4.2.0.1,4.2.0.0,4.1.0.0,4.0.0.0,3.3.1.0,3.3.0.0 is vulnerable to Remote code execution via the Viewstate parameter.",
      "dyn_dst_name": "operating system android (by google) version 10.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is 10.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware Amadey (S1025):\nAmadey is a Trojan bot that has been used since at least October 2018.(Citations: Korean FSI TA505 2020, BlackBerry Amadey 2020)\n\nThe MITRE ATT&CK sub-technique is Security Software Discovery (T1518.001):\nAdversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Example commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software. Adversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents may collect metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.\n\nYour goal is to determine if malware Amadey (S1025) is related to Security Software Discovery (T1518.001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Amadey (S1025)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Amadey is a Trojan bot that has been used since at least October 2018.(Citations: Korean FSI TA505 2020, BlackBerry Amadey 2020)",
      "dyn_dst_name": "Security Software Discovery (T1518.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Example commands that can be used to obtain security software information are netsh, <code>reg query</code> with Reg, <code>dir</code> with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software. Adversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents may collect metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Cross-Site Request Forgery (CSRF) (CWE-352) and CVE-2023-32745. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCross-Site Request Forgery (CSRF) (CWE-352) -\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nCVE-2023-32745 -\nCross-Site Request Forgery (CSRF) vulnerability in WooCommerce AutomateWoo plugin <= 5.7.1 versions.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2023-32745",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross-Site Request Forgery (CSRF) vulnerability in WooCommerce AutomateWoo plugin <= 5.7.1 versions.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and malicious software presented below:\n\nThe MITRE ATT&CK sub-technique is T1553.002 (Code Signing):\nAdversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature. Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform.  Code signing certificates may be used to bypass security policies that require signed code to execute on a system.(Citations: Wikipedia Code Signing, Securelist Digital Certificates, Symantec Digital Certificates, Wikipedia Code Signing, EclecticLightChecksonEXECodeSigning)\n\nThe malicious software is malware Nerex (S0210):\nNerex is a Trojan used by Elderwood to open a backdoor on compromised hosts.  (Citations: Symantec Elderwood Sept 2012, Symantec Nerex May 2012)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1553.002 (Code Signing)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with.  The certificates used during an operation may be created, acquired, or stolen by the adversary.   Unlike Invalid Code Signature, this activity will result in a valid signature. Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform.  Code signing certificates may be used to bypass security policies that require signed code to execute on a system.(Citations: Wikipedia Code Signing, Securelist Digital Certificates, Symantec Digital Certificates, Wikipedia Code Signing, EclecticLightChecksonEXECodeSigning)",
      "dyn_dst_name": "malware Nerex (S0210)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Nerex is a Trojan used by Elderwood to open a backdoor on compromised hosts.  (Citations: Symantec Elderwood Sept 2012, Symantec Nerex May 2012)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Seasalt (S0345) and T1036.006 (Space after Filename). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Seasalt (S0345) -\nSeasalt is malware that has been linked to APT1's 2010 operations. It shares some code similarities with OceanSalt.(Citations: Mandiant APT1 Appendix, McAfee Oceansalt Oct 2018)\n\nT1036.006 (Space after Filename) -\nAdversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed . Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.(Citations: Mac Backdoors are back)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Seasalt (S0345)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Seasalt is malware that has been linked to APT1's 2010 operations. It shares some code similarities with OceanSalt.(Citations: Mandiant APT1 Appendix, McAfee Oceansalt Oct 2018)",
      "dyn_dst_name": "T1036.006 (Space after Filename)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called <code>evil.bin</code>, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <code>evil.txt</code>, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <code>evil.txt </code> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed . Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.(Citations: Mac Backdoors are back)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CPE (Common Platform Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CPE (Common Platform Enumeration) is application kiwi_tcms (by kiwitcms) version *:\n\"kiwi_tcms\" is an application released by \"kiwitcms\". \n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-30628:\nKiwi TCMS is an open source test management system. In kiwitcms/Kiwi v12.2 and prior and kiwitcms/enterprise v12.2 and prior, the `changelog.yml` workflow is vulnerable to command injection attacks because of using an untrusted `github.head_ref` field. The `github.head_ref` value is an attacker-controlled value. Assigning the value to `zzz\";echo${IFS}\"hello\";#` can lead to command injection. Since the permission is not restricted, the attacker has a write-access to the repository. Commit 834c86dfd1b2492ccad7ebbfd6304bfec895fed2 of the kiwitcms/Kiwi repository and commit e39f7e156fdaf6fec09a15ea6f4e8fec8cdbf751 of the kiwitcms/enterprise repository contain a fix for this issue.\n\nYour goal is to determine if application kiwi_tcms (by kiwitcms) version * is related to CVE-2023-30628, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "application kiwi_tcms (by kiwitcms) version *",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"kiwi_tcms\" is an application released by \"kiwitcms\". ",
      "dyn_dst_name": "CVE-2023-30628",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Kiwi TCMS is an open source test management system. In kiwitcms/Kiwi v12.2 and prior and kiwitcms/enterprise v12.2 and prior, the `changelog.yml` workflow is vulnerable to command injection attacks because of using an untrusted `github.head_ref` field. The `github.head_ref` value is an attacker-controlled value. Assigning the value to `zzz\";echo${IFS}\"hello\";#` can lead to command injection. Since the permission is not restricted, the attacker has a write-access to the repository. Commit 834c86dfd1b2492ccad7ebbfd6304bfec895fed2 of the kiwitcms/Kiwi repository and commit e39f7e156fdaf6fec09a15ea6f4e8fec8cdbf751 of the kiwitcms/enterprise repository contain a fix for this issue.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique and their descriptions:\n\nThe MITRE ATT&CK tactic is persistence (TA0003):\nThe adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.\n\nThe MITRE ATT&CK sub-technique is Emond (T1546.014):\nAdversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the Launch Daemon configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.(Citations: xorrior emond Jan 2018, magnusviri emond Apr 2016, sentinelone macos persist Jun 2019, xorrior emond Jan 2018, magnusviri emond Apr 2016, sentinelone macos persist Jun 2019)\n\nYour goal is to determine if persistence (TA0003) is related to Emond (T1546.014), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "persistence (TA0003)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
      "dyn_dst_name": "Emond (T1546.014)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the Launch Daemon configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.(Citations: xorrior emond Jan 2018, magnusviri emond Apr 2016, sentinelone macos persist Jun 2019, xorrior emond Jan 2018, magnusviri emond Apr 2016, sentinelone macos persist Jun 2019)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-25414 and operating system fedora (by fedoraproject) version 35. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-25414 -\nTenda AC9 V15.03.2.21_cn was discovered to contain a stack overflow via the parameter NPTR.\n\noperating system fedora (by fedoraproject) version 35 -\n\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 35",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25414",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC9 V15.03.2.21_cn was discovered to contain a stack overflow via the parameter NPTR.",
      "dyn_dst_name": "operating system fedora (by fedoraproject) version 35",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 35",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is S0006 (tool pwdump):\npwdump is a credential dumper. (Citations: Wikipedia pwdump)\n\nThe MITRE ATT&CK sub-technique is Wi-Fi Discovery (T1016.002):\nAdversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0006 (tool pwdump)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "pwdump is a credential dumper. (Citations: Wikipedia pwdump)",
      "dyn_dst_name": "Wi-Fi Discovery (T1016.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK tactic and MITRE ATT&CK sub-technique presented below:\n\nThe MITRE ATT&CK tactic is defense-evasion (TA0005):\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nThe MITRE ATT&CK sub-technique is Portable Executable Injection (T1055.002):\nAdversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Elastic Process Injection July 2017)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "defense-evasion (TA0005)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_dst_name": "Portable Executable Injection (T1055.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references.  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Elastic Process Injection July 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Missing Authorization (CWE-862) and CVE-2023-2494. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nMissing Authorization (CWE-862) -\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\nCVE-2023-2494 -\nThe Go Pricing - WordPress Responsive Pricing Tables plugin for WordPress is vulnerable to unauthorized modification of data due to a missing capability check on the 'process_postdata' function in versions up to, and including, 3.3.19. This makes it possible for authenticated attackers with a role that the administrator previously granted access to the plugin to modify access to the plugin when it should only be the administrator's privilege.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Missing Authorization (CWE-862)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
      "dyn_dst_name": "CVE-2023-2494",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "The Go Pricing - WordPress Responsive Pricing Tables plugin for WordPress is vulnerable to unauthorized modification of data due to a missing capability check on the 'process_postdata' function in versions up to, and including, 3.3.19. This makes it possible for authenticated attackers with a role that the administrator previously granted access to the plugin to modify access to the plugin when it should only be the administrator's privilege.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware SysUpdate (S0663) and Symmetric Cryptography (T1573.001). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware SysUpdate (S0663) -\nSysUpdate is a backdoor written in C++ that has been used by Threat Group-3390 since at least 2020.(Citations: Trend Micro Iron Tiger April 2021)\n\nSymmetric Cryptography (T1573.001) -\nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware SysUpdate (S0663)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SysUpdate is a backdoor written in C++ that has been used by Threat Group-3390 since at least 2020.(Citations: Trend Micro Iron Tiger April 2021)",
      "dyn_dst_name": "Symmetric Cryptography (T1573.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is malware T9000 (S0098):\nT9000 is a backdoor that is a newer variant of the T5000 malware family, also known as Plat1. Its primary function is to gather information about the victim. It has been used in multiple targeted attacks against U.S.-based organizations.  (Citations: FireEye admin@338 March 2014, Palo Alto T9000 Feb 2016)\n\nThe MITRE ATT&CK technique is System Owner/User Discovery (T1033):\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information. On network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citations: show_ssh_users_cmd_cisco, US-CERT TA18-106A Network Infrastructure Devices 2018)\n\nYour goal is to determine if malware T9000 (S0098) is related to System Owner/User Discovery (T1033), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware T9000 (S0098)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "T9000 is a backdoor that is a newer variant of the T5000 malware family, also known as Plat1. Its primary function is to gather information about the victim. It has been used in multiple targeted attacks against U.S.-based organizations.  (Citations: FireEye admin@338 March 2014, Palo Alto T9000 Feb 2016)",
      "dyn_dst_name": "System Owner/User Discovery (T1033)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information. On network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citations: show_ssh_users_cmd_cisco, US-CERT TA18-106A Network Infrastructure Devices 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-27570 and operating system windows_8.1 (by microsoft) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-27570 -\nHeap-based buffer overflow vulnerability in parser_single_iref function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.\n\noperating system windows_8.1 (by microsoft) version - -\n\"windows_8.1\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-27570",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Heap-based buffer overflow vulnerability in parser_single_iref function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.",
      "dyn_dst_name": "operating system windows_8.1 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_8.1\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK technique and their descriptions:\n\nThe MITRE ATT&CK tactic is privilege-escalation (TA0004):\nThe adversary is trying to gain higher-level permissions. Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: * SYSTEM/root level * local administrator * user account with admin-like access * user accounts with access to specific system or perform specific function These techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.\n\nThe MITRE ATT&CK technique is Process Injection (T1055):\nAdversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.\n\nYour goal is to determine if privilege-escalation (TA0004) is related to Process Injection (T1055), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "privilege-escalation (TA0004)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gain higher-level permissions. Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: * SYSTEM/root level * local administrator * user account with admin-like access * user accounts with access to specific system or perform specific function These techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.",
      "dyn_dst_name": "Process Injection (T1055)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-26854\nDell PowerScale OneFS, versions 8.2.x-9.2.x, contain risky cryptographic algorithms. A remote unprivileged malicious attacker could potentially exploit this vulnerability, leading to full system access\n\nThe CPE (Common Platform Enumeration) is operating system windows_7 (by microsoft) version -\n\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-26854",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Dell PowerScale OneFS, versions 8.2.x-9.2.x, contain risky cryptographic algorithms. A remote unprivileged malicious attacker could potentially exploit this vulnerability, leading to full system access",
      "dyn_dst_name": "operating system windows_7 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-30493 and application openssl (by openssl) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-30493 -\nIn oretnom23 Automotive Shop Management System v1.0, the product id parameter suffers from a blind SQL Injection Vulnerability allowing remote attackers to dump all database credential and gain admin access(privilege escalation).\n\napplication openssl (by openssl) version * -\n\"openssl\" is an application released by \"openssl\". ",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30493",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "In oretnom23 Automotive Shop Management System v1.0, the product id parameter suffers from a blind SQL Injection Vulnerability allowing remote attackers to dump all database credential and gain admin access(privilege escalation).",
      "dyn_dst_name": "application openssl (by openssl) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"openssl\" is an application released by \"openssl\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30917\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddWlanMacList parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system mdm9206_firmware (by qualcomm) version -\n\"mdm9206_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30917",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddWlanMacList parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system mdm9206_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"mdm9206_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is HTTP DoS (CAPEC-469):\nAn attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.\n\nThe CWE (Common Weakness Enumeration) is CWE-770 (Allocation of Resources Without Limits or Throttling):\nThe product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nYour goal is to determine if HTTP DoS (CAPEC-469) is related to CWE-770 (Allocation of Resources Without Limits or Throttling), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "HTTP DoS (CAPEC-469)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.",
      "dyn_dst_name": "CWE-770 (Allocation of Resources Without Limits or Throttling)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK tactic and MITRE ATT&CK sub-technique presented below:\n\nThe MITRE ATT&CK tactic is TA0043 (reconnaissance):\nThe adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.\n\nThe MITRE ATT&CK sub-technique is Business Relationships (T1591.002):\nAdversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources. Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).(Citations: ThreatPost Broadvoice Leak)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "TA0043 (reconnaissance)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.",
      "dyn_dst_name": "Business Relationships (T1591.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may gather information about the victim's business relationships that can be used during targeting. Information about an organization\u2019s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim\u2019s hardware and software resources. Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Supply Chain Compromise, Drive-by Compromise, or Trusted Relationship).(Citations: ThreatPost Broadvoice Leak)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware YAHOYAH (S0388) and Web Protocols (T1071.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware YAHOYAH (S0388) -\nYAHOYAH is a Trojan used by Tropic Trooper as a second-stage backdoor.(Citations: TrendMicro TropicTrooper 2015)\n\nWeb Protocols (T1071.001) -\nAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware YAHOYAH (S0388)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "YAHOYAH is a Trojan used by Tropic Trooper as a second-stage backdoor.(Citations: TrendMicro TropicTrooper 2015)",
      "dyn_dst_name": "Web Protocols (T1071.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware GreyEnergy (S0342)\nGreyEnergy is a backdoor written in C and compiled in Visual Studio. GreyEnergy shares similarities with the BlackEnergy malware and is thought to be the successor of it.(Citations: ESET GreyEnergy Oct 2018)\n\nThe MITRE ATT&CK sub-technique is Software Packing (T1027.002)\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware GreyEnergy (S0342)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "GreyEnergy is a backdoor written in C and compiled in Visual Studio. GreyEnergy shares similarities with the BlackEnergy malware and is thought to be the successor of it.(Citations: ESET GreyEnergy Oct 2018)",
      "dyn_dst_name": "Software Packing (T1027.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-27417\nCross-Site Request Forgery (CSRF) vulnerability in Timo Reith Affiliate Super Assistent plugin <= 1.5.1 versions.\n\nThe CPE (Common Platform Enumeration) is application affiliate_super_assistent (by ifeelweb) version *\n\"affiliate_super_assistent\" is an application released by \"ifeelweb\". \n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-27417",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Cross-Site Request Forgery (CSRF) vulnerability in Timo Reith Affiliate Super Assistent plugin <= 1.5.1 versions.",
      "dyn_dst_name": "application affiliate_super_assistent (by ifeelweb) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"affiliate_super_assistent\" is an application released by \"ifeelweb\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, HTTP Request Splitting (CAPEC-105) and Use of Web Link to Untrusted Target with window.opener Access (CWE-1022). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nHTTP Request Splitting (CAPEC-105) -\nThis entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests. This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path. This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise avia HTTP Request messages. HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.\n\nUse of Web Link to Untrusted Target with window.opener Access (CWE-1022) -\nThe web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "HTTP Request Splitting (CAPEC-105)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests. This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path. This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise avia HTTP Request messages. HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.",
      "dyn_dst_name": "Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-28915:\nD-Link DIR-816 A2_v1.10CNB04 was discovered to contain a command injection vulnerability via the admuser and admpass parameters in /goform/setSysAdm.\n\nThe CPE (Common Platform Enumeration) is operating system qca6584_firmware (by qualcomm) version -:\n\"qca6584_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28915",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "D-Link DIR-816 A2_v1.10CNB04 was discovered to contain a command injection vulnerability via the admuser and admpass parameters in /goform/setSysAdm.",
      "dyn_dst_name": "operating system qca6584_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6584_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Magic Hound (G0059) and malware DownPaper (S0186). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nMagic Hound (G0059) -\nMagic Hound is an Iranian-sponsored threat group that conducts long term, resource-intensive cyber espionage operations, likely on behalf of the Islamic Revolutionary Guard Corps. They have targeted European, U.S., and Middle Eastern government and military personnel, academics, journalists, and organizations such as the World Health Organization (WHO), via complex social engineering campaigns since at least 2014.(Citations: FireEye APT35 2018, ClearSky Kittens Back 3 August 2020, Certfa Charming Kitten January 2021, Secureworks COBALT ILLUSION Threat Profile, Proofpoint TA453 July2021)\n\nmalware DownPaper (S0186) -\nDownPaper is a backdoor Trojan; its main functionality is to download and run second stage malware. (Citations: ClearSky Charming Kitten Dec 2017)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Magic Hound (G0059)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Magic Hound is an Iranian-sponsored threat group that conducts long term, resource-intensive cyber espionage operations, likely on behalf of the Islamic Revolutionary Guard Corps. They have targeted European, U.S., and Middle Eastern government and military personnel, academics, journalists, and organizations such as the World Health Organization (WHO), via complex social engineering campaigns since at least 2014.(Citations: FireEye APT35 2018, ClearSky Kittens Back 3 August 2020, Certfa Charming Kitten January 2021, Secureworks COBALT ILLUSION Threat Profile, Proofpoint TA453 July2021)",
      "dyn_dst_name": "malware DownPaper (S0186)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "DownPaper is a backdoor Trojan; its main functionality is to download and run second stage malware. (Citations: ClearSky Charming Kitten Dec 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-22388:\nMemory Corruption in Multi-mode Call Processor while processing bit mask API.\n\nThe CPE (Common Platform Enumeration) is operating system qcs6490_firmware (by qualcomm) version -:\n\"qcs6490_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-22388",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory Corruption in Multi-mode Call Processor while processing bit mask API.",
      "dyn_dst_name": "operating system qcs6490_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qcs6490_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Cross-Site Request Forgery (CSRF) (CWE-352):\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-27387:\nCross-site request forgery (CSRF) in T&D Corporation and ESPEC MIC CORP. data logger products allows a remote unauthenticated attacker to conduct an arbitrary operation by having a logged-in user view a malicious page. Affected products and versions are as follows: T&D Corporation data logger products (TR-71W/72W all firmware versions, RTR-5W all firmware versions, WDR-7 all firmware versions, WDR-3 all firmware versions, and WS-2 all firmware versions), and ESPEC MIC CORP. data logger products (RT-12N/RS-12N all firmware versions, RT-22BN all firmware versions, and TEU-12N all firmware versions).\n\nYour goal is to determine if Cross-Site Request Forgery (CSRF) (CWE-352) is related to CVE-2023-27387, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2023-27387",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross-site request forgery (CSRF) in T&D Corporation and ESPEC MIC CORP. data logger products allows a remote unauthenticated attacker to conduct an arbitrary operation by having a logged-in user view a malicious page. Affected products and versions are as follows: T&D Corporation data logger products (TR-71W/72W all firmware versions, RTR-5W all firmware versions, WDR-7 all firmware versions, WDR-3 all firmware versions, and WS-2 all firmware versions), and ESPEC MIC CORP. data logger products (RT-12N/RS-12N all firmware versions, RT-22BN all firmware versions, and TEU-12N all firmware versions).",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-1329:\nA potential security vulnerability has been identified for certain HP multifunction printers (MFPs). The vulnerability may lead to Buffer Overflow and/or Remote Code Execution when running HP Workpath solutions on potentially affected products.\n\nThe CPE (Common Platform Enumeration) is operating system laserjet_managed_mfp_e62555_j8j79a_firmware (by hp) version -:\n\"laserjet_managed_mfp_e62555_j8j79a_firmware\" is an operating system released by \"hp\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-1329",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A potential security vulnerability has been identified for certain HP multifunction printers (MFPs). The vulnerability may lead to Buffer Overflow and/or Remote Code Execution when running HP Workpath solutions on potentially affected products.",
      "dyn_dst_name": "operating system laserjet_managed_mfp_e62555_j8j79a_firmware (by hp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"laserjet_managed_mfp_e62555_j8j79a_firmware\" is an operating system released by \"hp\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-51023\nTOTOlink EX1800T v9.1.0cu.2112_B20220316 is vulnerable to arbitrary command execution in the \u2018host_time\u2019 parameter of the NTPSyncWithHost interface of the cstecgi .cgi.\n\nThe CPE (Common Platform Enumeration) is operating system ex1800t_firmware (by totolink) version 9.1.0cu.2112_b20220316\n\"ex1800t_firmware\" is an operating system released by \"totolink\".  This product version is 9.1.0cu.2112_b20220316\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-51023",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOlink EX1800T v9.1.0cu.2112_B20220316 is vulnerable to arbitrary command execution in the \u2018host_time\u2019 parameter of the NTPSyncWithHost interface of the cstecgi .cgi.",
      "dyn_dst_name": "operating system ex1800t_firmware (by totolink) version 9.1.0cu.2112_b20220316",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"ex1800t_firmware\" is an operating system released by \"totolink\".  This product version is 9.1.0cu.2112_b20220316",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware USBStealer (S0136):\nUSBStealer is malware that has been used by APT28 since at least 2005 to extract information from air-gapped networks. It does not have the capability to communicate over the Internet and has been used in conjunction with ADVSTORESHELL.  (Citations: ESET Sednit USBStealer 2014, Kaspersky Sofacy)\n\nThe MITRE ATT&CK technique is Peripheral Device Discovery (T1120):\nAdversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.(Citations: Peripheral Discovery Linux, Peripheral Discovery macOS)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware USBStealer (S0136)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "USBStealer is malware that has been used by APT28 since at least 2005 to extract information from air-gapped networks. It does not have the capability to communicate over the Internet and has been used in conjunction with ADVSTORESHELL.  (Citations: ESET Sednit USBStealer 2014, Kaspersky Sofacy)",
      "dyn_dst_name": "Peripheral Device Discovery (T1120)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.(Citations: Peripheral Discovery Linux, Peripheral Discovery macOS)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is CWE-434 (Unrestricted Upload of File with Dangerous Type)\nThe product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-27246\nAn arbitrary file upload vulnerability in the Virtual Disk of MK-Auth 23.01K4.9 allows attackers to execute arbitrary code via uploading a crafted .htaccess file.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-434 (Unrestricted Upload of File with Dangerous Type)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
      "dyn_dst_name": "CVE-2023-27246",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "An arbitrary file upload vulnerability in the Virtual Disk of MK-Auth 23.01K4.9 allows attackers to execute arbitrary code via uploading a crafted .htaccess file.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is CWE-434 (Unrestricted Upload of File with Dangerous Type)\nThe product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-4121\nA vulnerability was found in Byzoro Smart S85F Management Platform up to 20230722. It has been classified as critical. Affected is an unknown function. The manipulation of the argument file_upload leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-235968. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-434 (Unrestricted Upload of File with Dangerous Type)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
      "dyn_dst_name": "CVE-2023-4121",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability was found in Byzoro Smart S85F Management Platform up to 20230722. It has been classified as critical. Affected is an unknown function. The manipulation of the argument file_upload leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-235968. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-23560:\nIn certain Lexmark products through 2023-01-12, SSRF can occur because of a lack of input validation.\n\nThe CPE (Common Platform Enumeration) is operating system cx924_firmware (by lexmark) version *:\n\"cx924_firmware\" is an operating system released by \"lexmark\". \n\nYour goal is to determine if CVE-2023-23560 is related to operating system cx924_firmware (by lexmark) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-23560",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "In certain Lexmark products through 2023-01-12, SSRF can occur because of a lack of input validation.",
      "dyn_dst_name": "operating system cx924_firmware (by lexmark) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"cx924_firmware\" is an operating system released by \"lexmark\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-29543:\nAn attacker could have caused memory corruption and a potentially exploitable use-after-free of a pointer in a global object's debugger vector. This vulnerability affects Firefox for Android < 112, Firefox < 112, and Focus for Android < 112.\n\nThe CPE (Common Platform Enumeration) is application firefox (by mozilla) version *:\n\"firefox\" is an application released by \"mozilla\". \n\nYour goal is to determine if CVE-2023-29543 is related to application firefox (by mozilla) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-29543",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An attacker could have caused memory corruption and a potentially exploitable use-after-free of a pointer in a global object's debugger vector. This vulnerability affects Firefox for Android < 112, Firefox < 112, and Focus for Android < 112.",
      "dyn_dst_name": "application firefox (by mozilla) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"firefox\" is an application released by \"mozilla\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-22388 and operating system vision_intelligence_200_platform_firmware (by qualcomm) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-22388 -\nMemory Corruption in Multi-mode Call Processor while processing bit mask API.\n\noperating system vision_intelligence_200_platform_firmware (by qualcomm) version - -\n\"vision_intelligence_200_platform_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-22388",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory Corruption in Multi-mode Call Processor while processing bit mask API.",
      "dyn_dst_name": "operating system vision_intelligence_200_platform_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"vision_intelligence_200_platform_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Improper Input Validation (CWE-20)\nThe product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-20025\nA vulnerability in the web-based management interface of Cisco Small Business RV042 Series Routers could allow an unauthenticated, remote attacker to bypass authentication on the affected device. This vulnerability is due to incorrect user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending crafted requests to the web-based management interface. A successful exploit could allow the attacker to gain root privileges on the affected device.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Input Validation (CWE-20)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.",
      "dyn_dst_name": "CVE-2023-20025",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability in the web-based management interface of Cisco Small Business RV042 Series Routers could allow an unauthenticated, remote attacker to bypass authentication on the affected device. This vulnerability is due to incorrect user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending crafted requests to the web-based management interface. A successful exploit could allow the attacker to gain root privileges on the affected device.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CWE-306 (Missing Authentication for Critical Function) and CVE-2023-44116. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCWE-306 (Missing Authentication for Critical Function) -\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nCVE-2023-44116 -\nVulnerability of access permissions not being strictly verified in the APPWidget module.Successful exploitation of this vulnerability may cause some apps to run without being authorized.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-306 (Missing Authentication for Critical Function)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
      "dyn_dst_name": "CVE-2023-44116",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Vulnerability of access permissions not being strictly verified in the APPWidget module.Successful exploitation of this vulnerability may cause some apps to run without being authorized.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is S0044 (malware JHUHUGIT)\nJHUHUGIT is malware used by APT28. It is based on Carberp source code and serves as reconnaissance malware.    (Citations: Kaspersky Sofacy, F-Secure Sofacy 2015, ESET Sednit Part 1, FireEye APT28 January 2017)\n\nThe MITRE ATT&CK sub-technique is Serverless (T1584.007)\nAdversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. Once compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.(Citations: BlackWater Malware Cloudflare Workers, AWS Lambda Redirector, Detecting Command & Control in the Cloud, BlackWater Malware Cloudflare Workers)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0044 (malware JHUHUGIT)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "JHUHUGIT is malware used by APT28. It is based on Carberp source code and serves as reconnaissance malware.    (Citations: Kaspersky Sofacy, F-Secure Sofacy 2015, ESET Sednit Part 1, FireEye APT28 January 2017)",
      "dyn_dst_name": "Serverless (T1584.007)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may compromise serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them. Once compromised, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic to these providers.(Citations: BlackWater Malware Cloudflare Workers, AWS Lambda Redirector, Detecting Command & Control in the Cloud, BlackWater Malware Cloudflare Workers)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Sakula (S0074) and Bypass User Account Control (T1548.002). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Sakula (S0074) -\nSakula is a remote access tool (RAT) that first surfaced in 2012 and was used in intrusions throughout 2015. (Citations: Dell Sakula)\n\nBypass User Account Control (T1548.002) -\nAdversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as: * <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citations: TechNet How UAC Works, TechNet Inside UAC, MSDN COM Elevation, Davidson Windows, Github UACMe, enigma0x3 Fileless UAC Bypass, Fortinet Fareit, SANS UAC Bypass)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Sakula (S0074)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Sakula is a remote access tool (RAT) that first surfaced in 2012 and was used in intrusions throughout 2015. (Citations: Dell Sakula)",
      "dyn_dst_name": "Bypass User Account Control (T1548.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as: * <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script. Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citations: TechNet How UAC Works, TechNet Inside UAC, MSDN COM Elevation, Davidson Windows, Github UACMe, enigma0x3 Fileless UAC Bypass, Fortinet Fareit, SANS UAC Bypass)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is S1097 (malware HUI Loader)\nHUI Loader is a custom DLL loader that has been used since at least 2015 by China-based threat groups including Cinnamon Tempest and menuPass to deploy malware on compromised hosts. HUI Loader has been observed in campaigns loading SodaMaster, PlugX, Cobalt Strike, Komplex, and several strains of ransomware.(Citations: SecureWorks BRONZE STARLIGHT Ransomware Operations June 2022)\n\nThe MITRE ATT&CK technique is T1140 (Deobfuscate/Decode Files or Information)\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S1097 (malware HUI Loader)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "HUI Loader is a custom DLL loader that has been used since at least 2015 by China-based threat groups including Cinnamon Tempest and menuPass to deploy malware on compromised hosts. HUI Loader has been observed in campaigns loading SodaMaster, PlugX, Cobalt Strike, Komplex, and several strains of ransomware.(Citations: SecureWorks BRONZE STARLIGHT Ransomware Operations June 2022)",
      "dyn_dst_name": "T1140 (Deobfuscate/Decode Files or Information)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Force Use of Corrupted Files (CAPEC-263) and CWE-611 (Improper Restriction of XML External Entity Reference). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nForce Use of Corrupted Files (CAPEC-263) -\nThis describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.\n\nCWE-611 (Improper Restriction of XML External Entity Reference) -\nThe product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Force Use of Corrupted Files (CAPEC-263)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",
      "dyn_dst_name": "CWE-611 (Improper Restriction of XML External Entity Reference)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2024-23827 and application nginx_ui (by nginxui) version 2.0.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2024-23827 -\nNginx-UI is a web interface to manage Nginx configurations. The Import Certificate feature allows arbitrary write into the system. The feature does not check if the provided user input is a certification/key and allows to write into arbitrary paths in the system. It's possible to leverage the vulnerability into a remote code execution overwriting the config file app.ini. Version 2.0.0.beta.12 fixed the issue.\n\napplication nginx_ui (by nginxui) version 2.0.0 -\n\"nginx_ui\" is an application released by \"nginxui\".  This product version is 2.0.0 and minor version (point release) beta8",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-23827",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Nginx-UI is a web interface to manage Nginx configurations. The Import Certificate feature allows arbitrary write into the system. The feature does not check if the provided user input is a certification/key and allows to write into arbitrary paths in the system. It's possible to leverage the vulnerability into a remote code execution overwriting the config file app.ini. Version 2.0.0.beta.12 fixed the issue.",
      "dyn_dst_name": "application nginx_ui (by nginxui) version 2.0.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"nginx_ui\" is an application released by \"nginxui\".  This product version is 2.0.0 and minor version (point release) beta8",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, operating system windows_10 (by microsoft) version - and CVE-2022-0365. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\noperating system windows_10 (by microsoft) version - -\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is -\n\nCVE-2022-0365 -\nThe affected product is vulnerable to an authenticated OS command injection, which may allow an attacker to inject and execute arbitrary shell commands as the Admin (root) user.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system windows_10 (by microsoft) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_dst_name": "CVE-2022-0365",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "The affected product is vulnerable to an authenticated OS command injection, which may allow an attacker to inject and execute arbitrary shell commands as the Admin (root) user.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is APT33 (G0064)\nAPT33 is a suspected Iranian threat group that has carried out operations since at least 2013. The group has targeted organizations across multiple industries in the United States, Saudi Arabia, and South Korea, with a particular interest in the aviation and energy sectors.(Citations: FireEye APT33 Sept 2017, FireEye APT33 Webinar Sept 2017)\n\nThe malicious software is S0095 (tool ftp)\nftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "APT33 (G0064)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "APT33 is a suspected Iranian threat group that has carried out operations since at least 2013. The group has targeted organizations across multiple industries in the United States, Saudi Arabia, and South Korea, with a particular interest in the aviation and energy sectors.(Citations: FireEye APT33 Sept 2017, FireEye APT33 Webinar Sept 2017)",
      "dyn_dst_name": "S0095 (tool ftp)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "ftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-24292 and operating system android (by google) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-24292 -\nCertain HP Print devices may be vulnerable to potential information disclosure, denial of service, or remote code execution.\n\noperating system android (by google) version - -\n\"android\" is an operating system released by \"google\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-24292",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Certain HP Print devices may be vulnerable to potential information disclosure, denial of service, or remote code execution.",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-0845 and operating system qca9377_firmware (by qualcomm) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-0845 -\nCode Injection in GitHub repository pytorchlightning/pytorch-lightning prior to 1.6.0.\n\noperating system qca9377_firmware (by qualcomm) version - -\n\"qca9377_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-0845",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Code Injection in GitHub repository pytorchlightning/pytorch-lightning prior to 1.6.0.",
      "dyn_dst_name": "operating system qca9377_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca9377_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is S0374 (malware SpeakUp):\nSpeakUp is a Trojan backdoor that targets both Linux and OSX devices. It was first observed in January 2019. (Citations: CheckPoint SpeakUp Feb 2019)\n\nThe MITRE ATT&CK sub-technique is Shortcut Modification (T1547.009):\nAdversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program. Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.(Citations: Shortcut for Persistence )\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0374 (malware SpeakUp)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SpeakUp is a Trojan backdoor that targets both Linux and OSX devices. It was first observed in January 2019. (Citations: CheckPoint SpeakUp Feb 2019)",
      "dyn_dst_name": "Shortcut Modification (T1547.009)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program. Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.(Citations: Shortcut for Persistence )",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CWE (Common Weakness Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-6875\nThe POST SMTP Mailer \u2013 Email log, Delivery Failure Notifications and Best Mail SMTP for WordPress plugin for WordPress is vulnerable to unauthorized access of data and modification of data due to a type juggling issue on the connect-app REST endpoint in all versions up to, and including, 2.8.7. This makes it possible for unauthenticated attackers to reset the API key used to authenticate to the mailer and view logs, including password reset emails, allowing site takeover.\n\nThe CWE (Common Weakness Enumeration) is Missing Authorization (CWE-862)\nThe product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-6875",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The POST SMTP Mailer \u2013 Email log, Delivery Failure Notifications and Best Mail SMTP for WordPress plugin for WordPress is vulnerable to unauthorized access of data and modification of data due to a type juggling issue on the connect-app REST endpoint in all versions up to, and including, 2.8.7. This makes it possible for unauthenticated attackers to reset the API key used to authenticate to the mailer and view logs, including password reset emails, allowing site takeover.",
      "dyn_dst_name": "Missing Authorization (CWE-862)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK technique and malicious software:\n\nThe MITRE ATT&CK technique is System Owner/User Discovery (T1033)\nAdversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information. On network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citations: show_ssh_users_cmd_cisco, US-CERT TA18-106A Network Infrastructure Devices 2018)\n\nThe malicious software is S0559 (malware SUNBURST)\nSUNBURST is a trojanized DLL designed to fit within the SolarWinds Orion software update framework. It was used by APT29 since at least February 2020.(Citations: SolarWinds Sunburst Sunspot Update January 2021, Microsoft Deep Dive Solorigate January 2021)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "System Owner/User Discovery (T1033)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information. On network devices, Network Device CLI commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citations: show_ssh_users_cmd_cisco, US-CERT TA18-106A Network Infrastructure Devices 2018)",
      "dyn_dst_name": "S0559 (malware SUNBURST)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "SUNBURST is a trojanized DLL designed to fit within the SolarWinds Orion software update framework. It was used by APT29 since at least February 2020.(Citations: SolarWinds Sunburst Sunspot Update January 2021, Microsoft Deep Dive Solorigate January 2021)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, persistence (TA0003) and Accessibility Features (T1546.008). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\npersistence (TA0003) -\nThe adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.\n\nAccessibility Features (T1546.008) -\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.  Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.  Other accessibility features exist that may also be leveraged in a similar fashion:  * On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code> * Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code> * Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code> * Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code> * App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>(Citations: FireEye Hikit Rootkit, DEFCON2016 Sticky Keys, Tilbury 2014, DEFCON2016 Sticky Keys, Narrator Accessibility Abuse)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "persistence (TA0003)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
      "dyn_dst_name": "Accessibility Features (T1546.008)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. Two common accessibility programs are <code>C:\\Windows\\System32\\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\\Windows\\System32\\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen.  Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP).  The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\\Windows\\System32\\utilman.exe</code>) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges.  Other accessibility features exist that may also be leveraged in a similar fashion:  * On-Screen Keyboard: <code>C:\\Windows\\System32\\osk.exe</code> * Magnifier: <code>C:\\Windows\\System32\\Magnify.exe</code> * Narrator: <code>C:\\Windows\\System32\\Narrator.exe</code> * Display Switcher: <code>C:\\Windows\\System32\\DisplaySwitch.exe</code> * App Switcher: <code>C:\\Windows\\System32\\AtBroker.exe</code>(Citations: FireEye Hikit Rootkit, DEFCON2016 Sticky Keys, Tilbury 2014, DEFCON2016 Sticky Keys, Narrator Accessibility Abuse)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-21535 and operating system windows_rt_8.1 (by microsoft) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-21535 -\nWindows Secure Socket Tunneling Protocol (SSTP) Remote Code Execution Vulnerability\n\noperating system windows_rt_8.1 (by microsoft) version - -\n\"windows_rt_8.1\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-21535",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Windows Secure Socket Tunneling Protocol (SSTP) Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system windows_rt_8.1 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_rt_8.1\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Active OS Fingerprinting (CAPEC-312):\nAn adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\n\nThe CWE (Common Weakness Enumeration) is Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007):\nThe product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.\n\nYour goal is to determine if Active OS Fingerprinting (CAPEC-312) is related to Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Active OS Fingerprinting (CAPEC-312)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
      "dyn_dst_name": "Insufficient Visual Distinction of Homoglyphs Presented to User (CWE-1007)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is Akira (G1024)\nAkira is a ransomware variant and ransomware deployment entity active since at least March 2023. Akira uses compromised credentials to access single-factor external access mechanisms such as VPNs for initial access, then various publicly-available tools and techniques for lateral movement. Akira operations are associated with \"double extortion\" ransomware activity, where data is exfiltrated from victim environments prior to encryption, with threats to publish files if a ransom is not paid. Technical analysis of Akira ransomware indicates multiple overlaps with and similarities to Conti malware.(Citations: Arctic Wolf Akira 2023, Arctic Wolf Akira 2023, Secureworks GOLD SAHARA, BushidoToken Akira 2023)\n\nThe malicious software is S0029 (tool PsExec)\nPsExec is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.(Citations: Russinovich Sysinternals, SANS PsExec)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Akira (G1024)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Akira is a ransomware variant and ransomware deployment entity active since at least March 2023. Akira uses compromised credentials to access single-factor external access mechanisms such as VPNs for initial access, then various publicly-available tools and techniques for lateral movement. Akira operations are associated with \"double extortion\" ransomware activity, where data is exfiltrated from victim environments prior to encryption, with threats to publish files if a ransom is not paid. Technical analysis of Akira ransomware indicates multiple overlaps with and similarities to Conti malware.(Citations: Arctic Wolf Akira 2023, Arctic Wolf Akira 2023, Secureworks GOLD SAHARA, BushidoToken Akira 2023)",
      "dyn_dst_name": "S0029 (tool PsExec)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "PsExec is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.(Citations: Russinovich Sysinternals, SANS PsExec)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Stack-based Buffer Overflow (CWE-121):\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-0924:\nA vulnerability, which was classified as critical, was found in Tenda AC10U 15.03.06.49_multi_TDE01. This affects the function formSetPPTPServer. The manipulation of the argument startIp leads to stack-based buffer overflow. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-252129 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.\n\nYour goal is to determine if Stack-based Buffer Overflow (CWE-121) is related to CVE-2024-0924, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Stack-based Buffer Overflow (CWE-121)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
      "dyn_dst_name": "CVE-2024-0924",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability, which was classified as critical, was found in Tenda AC10U 15.03.06.49_multi_TDE01. This affects the function formSetPPTPServer. The manipulation of the argument startIp leads to stack-based buffer overflow. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-252129 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, S0330 (malware Zeus Panda) and Mark-of-the-Web Bypass (T1553.005). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nS0330 (malware Zeus Panda) -\nZeus Panda is a Trojan designed to steal banking information and other sensitive credentials for exfiltration. Zeus Panda\u2019s original source code was leaked in 2011, allowing threat actors to use its source code as a basis for new malware variants. It is mainly used to target Windows operating systems ranging from Windows XP through Windows 10.(Citations: Talos Zeus Panda Nov 2017, GDATA Zeus Panda June 2017)\n\nMark-of-the-Web Bypass (T1553.005) -\nAdversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it. Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citations: Microsoft Zone.Identifier 2020, Beek Use of VHD Dec 2020, Outflank MotW 2020, Intezer Russian APT Dec 2020, Beek Use of VHD Dec 2020, Outflank MotW 2020)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0330 (malware Zeus Panda)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Zeus Panda is a Trojan designed to steal banking information and other sensitive credentials for exfiltration. Zeus Panda\u2019s original source code was leaked in 2011, allowing threat actors to use its source code as a basis for new malware variants. It is mainly used to target Windows operating systems ranging from Windows XP through Windows 10.(Citations: Talos Zeus Panda Nov 2017, GDATA Zeus Panda June 2017)",
      "dyn_dst_name": "Mark-of-the-Web Bypass (T1553.005)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named <code>Zone.Identifier</code> with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it. Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.(Citations: Microsoft Zone.Identifier 2020, Beek Use of VHD Dec 2020, Outflank MotW 2020, Intezer Russian APT Dec 2020, Beek Use of VHD Dec 2020, Outflank MotW 2020)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware ANDROMEDA (S1074):\nANDROMEDA is commodity malware that was widespread in the early 2010's and continues to be observed in infections across a wide variety of industries. During the 2022 C0026 campaign, threat actors re-registered expired ANDROMEDA C2 domains to spread malware to select targets in Ukraine.(Citations: Mandiant Suspected Turla Campaign February 2023)\n\nThe MITRE ATT&CK sub-technique is T1036.005 (Match Legitimate Name or Location):\nAdversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous. Adversaries may also use the same icon of the file they are trying to mimic.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware ANDROMEDA (S1074)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ANDROMEDA is commodity malware that was widespread in the early 2010's and continues to be observed in infections across a wide variety of industries. During the 2022 C0026 campaign, threat actors re-registered expired ANDROMEDA C2 domains to spread malware to select targets in Ukraine.(Citations: Mandiant Suspected Turla Campaign February 2023)",
      "dyn_dst_name": "T1036.005 (Match Legitimate Name or Location)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous. Adversaries may also use the same icon of the file they are trying to mimic.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK group and malicious software presented below:\n\nThe MITRE ATT&CK group is APT41 (G0096):\nAPT41 is a threat group that researchers have assessed as Chinese state-sponsored espionage group that also conducts financially-motivated operations. Active since at least 2012, APT41 has been observed targeting healthcare, telecom, technology, and video game industries in 14 countries. APT41 overlaps at least partially with public reporting on groups including BARIUM and Winnti Group.(Citations: FireEye APT41 Aug 2019, Group IB APT 41 June 2021)\n\nThe malicious software is tool ftp (S0095):\nftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "APT41 (G0096)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "APT41 is a threat group that researchers have assessed as Chinese state-sponsored espionage group that also conducts financially-motivated operations. Active since at least 2012, APT41 has been observed targeting healthcare, telecom, technology, and video game industries in 14 countries. APT41 overlaps at least partially with public reporting on groups including BARIUM and Winnti Group.(Citations: FireEye APT41 Aug 2019, Group IB APT 41 June 2021)",
      "dyn_dst_name": "tool ftp (S0095)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "ftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Resource Forking (T1564.009) and malware BBSRAT (S0127). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nResource Forking (T1564.009) -\nAdversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using <code>ls -l@</code> or <code>xattr -l</code> commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the <code>/Resources</code> folder. Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.(Citations: macOS Hierarchical File System Overview, Resource and Data Forks, ELC Extended Attributes, sentinellabs resource named fork 2020, tau bundlore erika noerenberg 2020)\n\nmalware BBSRAT (S0127) -\nBBSRAT is malware with remote access tool functionality that has been used in targeted compromises. (Citations: Palo Alto Networks BBSRAT)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Resource Forking (T1564.009)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file\u2019s extended attributes, using <code>ls -l@</code> or <code>xattr -l</code> commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the <code>/Resources</code> folder. Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.(Citations: macOS Hierarchical File System Overview, Resource and Data Forks, ELC Extended Attributes, sentinellabs resource named fork 2020, tau bundlore erika noerenberg 2020)",
      "dyn_dst_name": "malware BBSRAT (S0127)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "BBSRAT is malware with remote access tool functionality that has been used in targeted compromises. (Citations: Palo Alto Networks BBSRAT)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, tool Wevtutil (S0645) and Command Obfuscation (T1027.010). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\ntool Wevtutil (S0645) -\nWevtutil is a Windows command-line utility that enables administrators to retrieve information about event logs and publishers.(Citations: Wevtutil Microsoft Documentation)\n\nCommand Obfuscation (T1027.010) -\nAdversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter. For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams. Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`). Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citations: Akamai JS, Malware Monday VBE, RC PowerShell, Microsoft PowerShellB64, Bashfuscator Command Obfuscators, FireEye Obfuscation June 2017, Twitter Richard WMIC, Invoke-DOSfuscation, Invoke-Obfuscation)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Wevtutil (S0645)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Wevtutil is a Windows command-line utility that enables administrators to retrieve information about event logs and publishers.(Citations: Wevtutil Microsoft Documentation)",
      "dyn_dst_name": "Command Obfuscation (T1027.010)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter. For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams. Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`). Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citations: Akamai JS, Malware Monday VBE, RC PowerShell, Microsoft PowerShellB64, Bashfuscator Command Obfuscators, FireEye Obfuscation June 2017, Twitter Richard WMIC, Invoke-DOSfuscation, Invoke-Obfuscation)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware MoonWind (S0149) and Login Items (T1547.015). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware MoonWind (S0149) -\nMoonWind is a remote access tool (RAT) that was used in 2016 to target organizations in Thailand. (Citations: Palo Alto MoonWind March 2017)\n\nLogin Items (T1547.015) -\nAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>. Login items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications. Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citations: Open Login Items Apple, Adding Login Items, Adding Login Items, SMLoginItemSetEnabled Schroeder 2013, Launch Services Apple Developer, ELC Running at startup, Login Items AE, Startup Items Eclectic, hexed osx.dok analysis 2019, Add List Remove Login Items Apple Script, Startup Items Eclectic, objsee mac malware 2017, CheckPoint Dok, objsee netwire backdoor 2019)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware MoonWind (S0149)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "MoonWind is a remote access tool (RAT) that was used in 2016 to target organizations in Thailand. (Citations: Palo Alto MoonWind March 2017)",
      "dyn_dst_name": "Login Items (T1547.015)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>. Login items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications. Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citations: Open Login Items Apple, Adding Login Items, Adding Login Items, SMLoginItemSetEnabled Schroeder 2013, Launch Services Apple Developer, ELC Running at startup, Login Items AE, Startup Items Eclectic, hexed osx.dok analysis 2019, Add List Remove Login Items Apple Script, Startup Items Eclectic, objsee mac malware 2017, CheckPoint Dok, objsee netwire backdoor 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22):\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-2909:\nEZ Sync service fails to adequately handle user input, allowing an attacker to navigate beyond the intended directory structure and delete files. Affected products and versions include: ADM 4.0.6.REG2, 4.1.0 and below as well as ADM 4.2.1.RGE2 and below.\n\nYour goal is to determine if Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22) is related to CVE-2023-2909, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
      "dyn_dst_name": "CVE-2023-2909",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "EZ Sync service fails to adequately handle user input, allowing an attacker to navigate beyond the intended directory structure and delete files. Affected products and versions include: ADM 4.0.6.REG2, 4.1.0 and below as well as ADM 4.2.1.RGE2 and below.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK group and malicious software and their descriptions:\n\nThe MITRE ATT&CK group is Silence (G0091):\nSilence is a financially motivated threat actor targeting financial institutions in different countries. The group was first seen in June 2016. Their main targets reside in Russia, Ukraine, Belarus, Azerbaijan, Poland and Kazakhstan. They compromised various banking systems, including the Russian Central Bank's Automated Workstation Client, ATMs, and card processing.(Citations: Cyber Forensicator Silence Jan 2019, SecureList Silence Nov 2017)\n\nThe malicious software is malware RIPTIDE (S0003):\nRIPTIDE is a proxy-aware backdoor used by APT12. (Citations: Moran 2014)\n\nYour goal is to determine if Silence (G0091) is related to malware RIPTIDE (S0003), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Silence (G0091)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Silence is a financially motivated threat actor targeting financial institutions in different countries. The group was first seen in June 2016. Their main targets reside in Russia, Ukraine, Belarus, Azerbaijan, Poland and Kazakhstan. They compromised various banking systems, including the Russian Central Bank's Automated Workstation Client, ATMs, and card processing.(Citations: Cyber Forensicator Silence Jan 2019, SecureList Silence Nov 2017)",
      "dyn_dst_name": "malware RIPTIDE (S0003)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "RIPTIDE is a proxy-aware backdoor used by APT12. (Citations: Moran 2014)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Double Encoding (CAPEC-120) and Sensitive Non-Volatile Information Not Protected During Debug (CWE-1243). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nDouble Encoding (CAPEC-120) -\nThe adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.\n\nSensitive Non-Volatile Information Not Protected During Debug (CWE-1243) -\nAccess to security-sensitive information stored in fuses is not limited during debug.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Double Encoding (CAPEC-120)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",
      "dyn_dst_name": "Sensitive Non-Volatile Information Not Protected During Debug (CWE-1243)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "Access to security-sensitive information stored in fuses is not limited during debug.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-50071 and application customer_support_system (by customer_support_system_project) version 1.0. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-50071 -\nSourcecodester Customer Support System 1.0 has multiple SQL injection vulnerabilities in /customer_support/ajax.php?action=save_department via id or name.\n\napplication customer_support_system (by customer_support_system_project) version 1.0 -\n\"customer_support_system\" is an application released by \"customer_support_system_project\".  This product version is 1.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-50071",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Sourcecodester Customer Support System 1.0 has multiple SQL injection vulnerabilities in /customer_support/ajax.php?action=save_department via id or name.",
      "dyn_dst_name": "application customer_support_system (by customer_support_system_project) version 1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"customer_support_system\" is an application released by \"customer_support_system_project\".  This product version is 1.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-36434\nWindows IIS Server Elevation of Privilege Vulnerability\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2012 (by microsoft) version -\n\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-36434",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Windows IIS Server Elevation of Privilege Vulnerability",
      "dyn_dst_name": "operating system windows_server_2012 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and malicious software:\n\nThe MITRE ATT&CK sub-technique is Credentials from Web Browsers (T1555.003)\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).(Citations: Talos Olympic Destroyer 2018, Microsoft CryptUnprotectData April 2018, Proofpoint Vega Credential Stealer May 2018, FireEye HawkEye Malware July 2017, GitHub Mimikittenz July 2016)\n\nThe malicious software is tool Empire (S0363)\nEmpire is an open source, cross-platform remote administration and post-exploitation framework that is publicly available on GitHub. While the tool itself is primarily written in Python, the post-exploitation agents are written in pure PowerShell for Windows and Python for Linux/macOS. Empire was one of five tools singled out by a joint report on public hacking tools being widely used by adversaries.(Citations: NCSC Joint Report Public Tools, Github PowerShell Empire, GitHub ATTACK Empire)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Credentials from Web Browsers (T1555.003)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).(Citations: Talos Olympic Destroyer 2018, Microsoft CryptUnprotectData April 2018, Proofpoint Vega Credential Stealer May 2018, FireEye HawkEye Malware July 2017, GitHub Mimikittenz July 2016)",
      "dyn_dst_name": "tool Empire (S0363)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Empire is an open source, cross-platform remote administration and post-exploitation framework that is publicly available on GitHub. While the tool itself is primarily written in Python, the post-exploitation agents are written in pure PowerShell for Windows and Python for Linux/macOS. Empire was one of five tools singled out by a joint report on public hacking tools being widely used by adversaries.(Citations: NCSC Joint Report Public Tools, Github PowerShell Empire, GitHub ATTACK Empire)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-20158:\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\nThe CPE (Common Platform Enumeration) is operating system sg250-10p_firmware (by cisco) version -:\n\"sg250-10p_firmware\" is an operating system released by \"cisco\".  This product version is -\n\nYour goal is to determine if CVE-2023-20158 is related to operating system sg250-10p_firmware (by cisco) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20158",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sg250-10p_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg250-10p_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Hi-Zor (S0087) and Login Items (T1547.015). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Hi-Zor (S0087) -\nHi-Zor is a remote access tool (RAT) that has characteristics similar to Sakula. It was used in a campaign named INOCNATION. (Citations: Fidelis Hi-Zor)\n\nLogin Items (T1547.015) -\nAdversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>. Login items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications. Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citations: Open Login Items Apple, Adding Login Items, Adding Login Items, SMLoginItemSetEnabled Schroeder 2013, Launch Services Apple Developer, ELC Running at startup, Login Items AE, Startup Items Eclectic, hexed osx.dok analysis 2019, Add List Remove Login Items Apple Script, Startup Items Eclectic, objsee mac malware 2017, CheckPoint Dok, objsee netwire backdoor 2019)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Hi-Zor (S0087)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Hi-Zor is a remote access tool (RAT) that has characteristics similar to Sakula. It was used in a campaign named INOCNATION. (Citations: Fidelis Hi-Zor)",
      "dyn_dst_name": "Login Items (T1547.015)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may add login items to execute upon user login to gain persistence or escalate privileges. Login items are applications, documents, folders, or server connections that are automatically launched when a user logs in. Login items can be added via a shared file list or Service Management Framework. Shared file list login items can be set using scripting languages such as AppleScript, whereas the Service Management Framework uses the API call <code>SMLoginItemSetEnabled</code>. Login items installed using the Service Management Framework leverage <code>launchd</code>, are not visible in the System Preferences, and can only be removed by the application that created them. Login items created using a shared file list are visible in System Preferences, can hide the application when it launches, and are executed through LaunchServices, not launchd, to open applications, documents, or URLs without using Finder. Users and applications use login items to configure their user environment to launch commonly used services or applications, such as email, chat, and music applications. Adversaries can utilize AppleScript and Native API calls to create a login item to spawn malicious executables. Prior to version 10.5 on macOS, adversaries can add login items by using AppleScript to send an Apple events to the \u201cSystem Events\u201d process, which has an AppleScript dictionary for manipulating login items. Adversaries can use a command such as <code>tell application \u201cSystem Events\u201d to make login item at end with properties /path/to/executable</code>. This command adds the path of the malicious executable to the login item file list located in <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>. Adversaries can also use login items to launch executables that can be used to control the victim system remotely or as a means to gain privilege escalation by prompting for user credentials.(Citations: Open Login Items Apple, Adding Login Items, Adding Login Items, SMLoginItemSetEnabled Schroeder 2013, Launch Services Apple Developer, ELC Running at startup, Login Items AE, Startup Items Eclectic, hexed osx.dok analysis 2019, Add List Remove Login Items Apple Script, Startup Items Eclectic, objsee mac malware 2017, CheckPoint Dok, objsee netwire backdoor 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Stack-based Buffer Overflow (CWE-121):\nA stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-0930:\nA vulnerability classified as critical has been found in Tenda AC10U 15.03.06.49_multi_TDE01. This affects the function fromSetWirelessRepeat. The manipulation of the argument wpapsk_crypto leads to stack-based buffer overflow. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-252135. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Stack-based Buffer Overflow (CWE-121)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
      "dyn_dst_name": "CVE-2024-0930",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability classified as critical has been found in Tenda AC10U 15.03.06.49_multi_TDE01. This affects the function fromSetWirelessRepeat. The manipulation of the argument wpapsk_crypto leads to stack-based buffer overflow. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-252135. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29539:\nresi-calltrace in RESI Gemini-Net 4.2 is affected by OS Command Injection. It does not properly check the parameters sent as input before they are processed on the server. Due to the lack of validation of user input, an unauthenticated attacker can bypass the syntax intended by the software (e.g., concatenate `&|;\\r\\ commands) and inject arbitrary system commands with the privileges of the application user.\n\nThe CPE (Common Platform Enumeration) is operating system sdx20_firmware (by qualcomm) version -:\n\"sdx20_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29539",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "resi-calltrace in RESI Gemini-Net 4.2 is affected by OS Command Injection. It does not properly check the parameters sent as input before they are processed on the server. Due to the lack of validation of user input, an unauthenticated attacker can bypass the syntax intended by the software (e.g., concatenate `&|;\\r\\ commands) and inject arbitrary system commands with the privileges of the application user.",
      "dyn_dst_name": "operating system sdx20_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sdx20_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CWE (Common Weakness Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-40150:\nSoftneta MedDream PACS does not perform an authentication check and performs some dangerous functionality, which could result in unauthenticated remote code execution.0\n\nThe CWE (Common Weakness Enumeration) is Exposed Dangerous Method or Function (CWE-749):\nThe product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-40150",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Softneta MedDream PACS does not perform an authentication check and performs some dangerous functionality, which could result in unauthenticated remote code execution.0",
      "dyn_dst_name": "Exposed Dangerous Method or Function (CWE-749)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Deserialization of Untrusted Data (CWE-502):\nThe product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-50252:\nphp-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when handling `<use>` tag that references an `<image>` tag, it merges the attributes from the `<use>` tag to the `<image>` tag. The problem pops up especially when the `href` attribute from the `<use>` tag has not been sanitized. This can lead to an unsafe file read that can cause PHAR Deserialization vulnerability in PHP prior to version 8. Version 0.5.1 contains a patch for this issue.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Deserialization of Untrusted Data (CWE-502)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
      "dyn_dst_name": "CVE-2023-50252",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "php-svg-lib is an SVG file parsing / rendering library. Prior to version 0.5.1, when handling `<use>` tag that references an `<image>` tag, it merges the attributes from the `<use>` tag to the `<image>` tag. The problem pops up especially when the `href` attribute from the `<use>` tag has not been sanitized. This can lead to an unsafe file read that can cause PHAR Deserialization vulnerability in PHP prior to version 8. Version 0.5.1 contains a patch for this issue.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware UBoatRAT (S0333) and Ingress Tool Transfer (T1105). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware UBoatRAT (S0333) -\nUBoatRAT is a remote access tool that was identified in May 2017.(Citations: PaloAlto UBoatRAT Nov 2017)\n\nIngress Tool Transfer (T1105) -\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware UBoatRAT (S0333)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "UBoatRAT is a remote access tool that was identified in May 2017.(Citations: PaloAlto UBoatRAT Nov 2017)",
      "dyn_dst_name": "Ingress Tool Transfer (T1105)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK group and malicious software and their descriptions:\n\nThe MITRE ATT&CK group is Wizard Spider (G0102):\nWizard Spider is a Russia-based financially motivated threat group originally known for the creation and deployment of TrickBot since at least 2016. Wizard Spider possesses a diverse aresenal of tools and has conducted ransomware campaigns against a variety of organizations, ranging from major corporations to hospitals.(Citations: CrowdStrike Ryuk January 2019, DHS/CISA Ransomware Targeting Healthcare October 2020, CrowdStrike Wizard Spider October 2020)\n\nThe malicious software is malware Xbash (S0341):\nXbash is a malware family that has targeted Linux and Microsoft Windows servers. The malware has been tied to the Iron Group, a threat actor group known for previous ransomware attacks. Xbash was developed in Python and then converted into a self-contained Linux ELF executable by using PyInstaller.(Citations: Unit42 Xbash Sept 2018)\n\nYour goal is to determine if Wizard Spider (G0102) is related to malware Xbash (S0341), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Wizard Spider (G0102)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Wizard Spider is a Russia-based financially motivated threat group originally known for the creation and deployment of TrickBot since at least 2016. Wizard Spider possesses a diverse aresenal of tools and has conducted ransomware campaigns against a variety of organizations, ranging from major corporations to hospitals.(Citations: CrowdStrike Ryuk January 2019, DHS/CISA Ransomware Targeting Healthcare October 2020, CrowdStrike Wizard Spider October 2020)",
      "dyn_dst_name": "malware Xbash (S0341)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Xbash is a malware family that has targeted Linux and Microsoft Windows servers. The malware has been tied to the Iron Group, a threat actor group known for previous ransomware attacks. Xbash was developed in Python and then converted into a self-contained Linux ELF executable by using PyInstaller.(Citations: Unit42 Xbash Sept 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware Zebrocy (S0251):\nZebrocy is a Trojan that has been used by APT28 since at least November 2015. The malware comes in several programming language variants, including C++, Delphi, AutoIt, C#, VB.NET, and Golang. (Citations: Palo Alto Sofacy 06-2018, Unit42 Cannon Nov 2018, Unit42 Sofacy Dec 2018, CISA Zebrocy Oct 2020)\n\nThe MITRE ATT&CK sub-technique is Web Protocols (T1071.001):\nAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Zebrocy (S0251)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Zebrocy is a Trojan that has been used by APT28 since at least November 2015. The malware comes in several programming language variants, including C++, Delphi, AutoIt, C#, VB.NET, and Golang. (Citations: Palo Alto Sofacy 06-2018, Unit42 Cannon Nov 2018, Unit42 Sofacy Dec 2018, CISA Zebrocy Oct 2020)",
      "dyn_dst_name": "Web Protocols (T1071.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Improper Control of Generation of Code ('Code Injection') (CWE-94)\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-21737\nIn SAP Application Interface Framework File Adapter - version 702, a high privilege user can use a function module to traverse through various layers and execute OS commands directly. By this, such user can control the behaviour of the application. This leads to considerable impact on confidentiality, integrity and availability.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Control of Generation of Code ('Code Injection') (CWE-94)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "dyn_dst_name": "CVE-2024-21737",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "In SAP Application Interface Framework File Adapter - version 702, a high privilege user can use a function module to traverse through various layers and execute OS commands directly. By this, such user can control the behaviour of the application. This leads to considerable impact on confidentiality, integrity and availability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and malicious software and their descriptions:\n\nThe MITRE ATT&CK sub-technique is Domain Controller Authentication (T1556.001):\nAdversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citations: Dell Skeleton)\n\nThe malicious software is malware Fysbis (S0410):\nFysbis is a Linux-based backdoor used by APT28 that dates back to at least 2014.(Citations: Fysbis Palo Alto Analysis)\n\nYour goal is to determine if Domain Controller Authentication (T1556.001) is related to malware Fysbis (S0410), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Domain Controller Authentication (T1556.001)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citations: Dell Skeleton)",
      "dyn_dst_name": "malware Fysbis (S0410)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Fysbis is a Linux-based backdoor used by APT28 that dates back to at least 2014.(Citations: Fysbis Palo Alto Analysis)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware WannaCry (S0366) and TeamTNT (G0139). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware WannaCry (S0366) -\nWannaCry is ransomware that was first seen in a global attack during May 2017, which affected more than 150 countries. It contains worm-like features to spread itself across a computer network using the SMBv1 exploit EternalBlue.(Citations: LogRhythm WannaCry, US-CERT WannaCry 2017, Washington Post WannaCry 2017, FireEye WannaCry 2017)\n\nTeamTNT (G0139) -\nTeamTNT is a threat group that has primarily targeted cloud and containerized environments. The group as been active since at least October 2019 and has mainly focused its efforts on leveraging cloud and container resources to deploy cryptocurrency miners in victim environments.(Citations: Palo Alto Black-T October 2020, Lacework TeamTNT May 2021, Intezer TeamTNT September 2020, Cado Security TeamTNT Worm August 2020, Unit 42 Hildegard Malware, Trend Micro TeamTNT, ATT TeamTNT Chimaera September 2020, Aqua TeamTNT August 2020, Intezer TeamTNT Explosion September 2021)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WannaCry (S0366)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WannaCry is ransomware that was first seen in a global attack during May 2017, which affected more than 150 countries. It contains worm-like features to spread itself across a computer network using the SMBv1 exploit EternalBlue.(Citations: LogRhythm WannaCry, US-CERT WannaCry 2017, Washington Post WannaCry 2017, FireEye WannaCry 2017)",
      "dyn_dst_name": "TeamTNT (G0139)",
      "dyn_dst_layer": "MITRE ATT&CK group",
      "dyn_dst_description": "TeamTNT is a threat group that has primarily targeted cloud and containerized environments. The group as been active since at least October 2019 and has mainly focused its efforts on leveraging cloud and container resources to deploy cryptocurrency miners in victim environments.(Citations: Palo Alto Black-T October 2020, Lacework TeamTNT May 2021, Intezer TeamTNT September 2020, Cado Security TeamTNT Worm August 2020, Unit 42 Hildegard Malware, Trend Micro TeamTNT, ATT TeamTNT Chimaera September 2020, Aqua TeamTNT August 2020, Intezer TeamTNT Explosion September 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-20695 and application identity_services_engine (by cisco) version 2.3. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-20695 -\nA vulnerability in the authentication functionality of Cisco Wireless LAN Controller (WLC) Software could allow an unauthenticated, remote attacker to bypass authentication controls and log in to the device through the management interface This vulnerability is due to the improper implementation of the password validation algorithm. An attacker could exploit this vulnerability by logging in to an affected device with crafted credentials. A successful exploit could allow the attacker to bypass authentication and log in to the device as an administrator. The attacker could obtain privileges that are the same level as an administrative user but it depends on the crafted credentials. Note: This vulnerability exists because of a non-default device configuration that must be present for it to be exploitable. For details about the vulnerable configuration, see the Vulnerable Products section of this advisory.\n\napplication identity_services_engine (by cisco) version 2.3 -\n\"identity_services_engine\" is an application released by \"cisco\".  This product version is 2.3 and minor version (point release) patch7",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-20695",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the authentication functionality of Cisco Wireless LAN Controller (WLC) Software could allow an unauthenticated, remote attacker to bypass authentication controls and log in to the device through the management interface This vulnerability is due to the improper implementation of the password validation algorithm. An attacker could exploit this vulnerability by logging in to an affected device with crafted credentials. A successful exploit could allow the attacker to bypass authentication and log in to the device as an administrator. The attacker could obtain privileges that are the same level as an administrative user but it depends on the crafted credentials. Note: This vulnerability exists because of a non-default device configuration that must be present for it to be exploitable. For details about the vulnerable configuration, see the Vulnerable Products section of this advisory.",
      "dyn_dst_name": "application identity_services_engine (by cisco) version 2.3",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"identity_services_engine\" is an application released by \"cisco\".  This product version is 2.3 and minor version (point release) patch7",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Duqu (S0038)\nDuqu is a malware platform that uses a modular approach to extend functionality after deployment within a target network. (Citations: Symantec W32.Duqu)\n\nThe MITRE ATT&CK technique is T1049 (System Network Connections Discovery)\nAdversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services. Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citations: Amazon AWS VPC Guide, Microsoft Azure Virtual Network Overview, Google VPC Overview, US-CERT-TA18-106A)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Duqu (S0038)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Duqu is a malware platform that uses a modular approach to extend functionality after deployment within a target network. (Citations: Symantec W32.Duqu)",
      "dyn_dst_name": "T1049 (System Network Connections Discovery)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services. Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citations: Amazon AWS VPC Guide, Microsoft Azure Virtual Network Overview, Google VPC Overview, US-CERT-TA18-106A)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique:\n\nThe MITRE ATT&CK tactic is TA0005 (defense-evasion)\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nThe MITRE ATT&CK sub-technique is HTML Smuggling (T1027.006)\nAdversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads. Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters. For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citations: HTML Smuggling Menlo Security 2020, Outlflank HTML Smuggling 2018, HTML Smuggling Menlo Security 2020, MSTIC NOBELIUM May 2021, Outlflank HTML Smuggling 2018, nccgroup Smuggling HTA 2017)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "TA0005 (defense-evasion)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_dst_name": "HTML Smuggling (T1027.006)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads. Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as <code>text/plain</code> and/or <code>text/html</code>. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters. For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as <code>msSaveBlob</code>.(Citations: HTML Smuggling Menlo Security 2020, Outlflank HTML Smuggling 2018, HTML Smuggling Menlo Security 2020, MSTIC NOBELIUM May 2021, Outlflank HTML Smuggling 2018, nccgroup Smuggling HTA 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Machete (S0409)\nMachete is a cyber espionage toolset used by Machete. It is a Python-based backdoor targeting Windows machines that was first observed in 2010.(Citations: ESET Machete July 2019, Securelist Machete Aug 2014, 360 Machete Sep 2020)\n\nThe MITRE ATT&CK technique is Process Discovery (T1057)\nAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Machete (S0409)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Machete is a cyber espionage toolset used by Machete. It is a Python-based backdoor targeting Windows machines that was first observed in 2010.(Citations: ESET Machete July 2019, Securelist Machete Aug 2014, 360 Machete Sep 2020)",
      "dyn_dst_name": "Process Discovery (T1057)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Conti (S0575)\nConti is a Ransomware-as-a-Service (RaaS) that was first observed in December 2019. Conti has been deployed via TrickBot and used against major corporations and government agencies, particularly those in North America. As with other ransomware families, actors using Conti steal sensitive files and information from compromised networks, and threaten to publish this data unless the ransom is paid.(Citations: Cybereason Conti Jan 2021, CarbonBlack Conti July 2020, Cybleinc Conti January 2020)\n\nThe MITRE ATT&CK technique is T1489 (Service Stop)\nAdversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. Adversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.(Citations: Talos Olympic Destroyer 2018, Novetta Blockbuster, Novetta Blockbuster, Talos Olympic Destroyer 2018, SecureWorks WannaCry Analysis)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Conti (S0575)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Conti is a Ransomware-as-a-Service (RaaS) that was first observed in December 2019. Conti has been deployed via TrickBot and used against major corporations and government agencies, particularly those in North America. As with other ransomware families, actors using Conti steal sensitive files and information from compromised networks, and threaten to publish this data unless the ransom is paid.(Citations: Cybereason Conti Jan 2021, CarbonBlack Conti July 2020, Cybleinc Conti January 2020)",
      "dyn_dst_name": "T1489 (Service Stop)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. Adversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server.(Citations: Talos Olympic Destroyer 2018, Novetta Blockbuster, Novetta Blockbuster, Talos Olympic Destroyer 2018, SecureWorks WannaCry Analysis)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware Bad Rabbit (S0606):\nBad Rabbit is a self-propagating ransomware that affected the Ukrainian transportation sector in 2017. Bad Rabbit has also targeted organizations and consumers in Russia. (Citations: Secure List Bad Rabbit, ESET Bad Rabbit, Dragos IT ICS Ransomware)\n\nThe MITRE ATT&CK sub-technique is Disable or Modify Tools (T1562.001):\nAdversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems. Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Adversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot. In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor. Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems. Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.(Citations: SCADAfence_ransomware, OutFlank System Calls, MDSec System Calls, disable_win_evt_logging, Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation, Analysis of FG-IR-22-369, chasing_avaddon_ransomware, dharma_ransomware, demystifying_ryuk, doppelpaymer_crowdstrike, demystifying_ryuk, avoslocker_ransomware)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Bad Rabbit (S0606)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Bad Rabbit is a self-propagating ransomware that affected the Ukrainian transportation sector in 2017. Bad Rabbit has also targeted organizations and consumers in Russia. (Citations: Secure List Bad Rabbit, ESET Bad Rabbit, Dragos IT ICS Ransomware)",
      "dyn_dst_name": "Disable or Modify Tools (T1562.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems. Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Adversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging. On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot. In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor. Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems. Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.(Citations: SCADAfence_ransomware, OutFlank System Calls, MDSec System Calls, disable_win_evt_logging, Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation, Analysis of FG-IR-22-369, chasing_avaddon_ransomware, dharma_ransomware, demystifying_ryuk, doppelpaymer_crowdstrike, demystifying_ryuk, avoslocker_ransomware)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-41678\nA double free in Fortinet FortiOS versions 7.0.0 through 7.0.5, FortiPAM version 1.0.0 through 1.0.3, 1.1.0 through 1.1.1 allows attacker to execute unauthorized code or commands via specifically crafted request.\n\nThe CPE (Common Platform Enumeration) is operating system fortios (by fortinet) version 7.0.4\n\"fortios\" is an operating system released by \"fortinet\".  This product version is 7.0.4\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-41678",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A double free in Fortinet FortiOS versions 7.0.0 through 7.0.5, FortiPAM version 1.0.0 through 1.0.3, 1.1.0 through 1.1.1 allows attacker to execute unauthorized code or commands via specifically crafted request.",
      "dyn_dst_name": "operating system fortios (by fortinet) version 7.0.4",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fortios\" is an operating system released by \"fortinet\".  This product version is 7.0.4",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-1666 and application automatic_question_paper_generator_system (by automatic_question_paper_generator_system_project) version 1.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-1666 -\nA vulnerability has been found in SourceCodester Automatic Question Paper Generator System 1.0 and classified as critical. This vulnerability affects unknown code of the file users/classes/view_class.php of the component GET Parameter Handler. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-224104.\n\napplication automatic_question_paper_generator_system (by automatic_question_paper_generator_system_project) version 1.0 -\n\"automatic_question_paper_generator_system\" is an application released by \"automatic_question_paper_generator_system_project\".  This product version is 1.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-1666",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability has been found in SourceCodester Automatic Question Paper Generator System 1.0 and classified as critical. This vulnerability affects unknown code of the file users/classes/view_class.php of the component GET Parameter Handler. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-224104.",
      "dyn_dst_name": "application automatic_question_paper_generator_system (by automatic_question_paper_generator_system_project) version 1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"automatic_question_paper_generator_system\" is an application released by \"automatic_question_paper_generator_system_project\".  This product version is 1.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30917:\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddWlanMacList parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system dir-890l_firmware (by dlink) version *:\n\"dir-890l_firmware\" is an operating system released by \"dlink\". \n\nYour goal is to determine if CVE-2022-30917 is related to operating system dir-890l_firmware (by dlink) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30917",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddWlanMacList parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system dir-890l_firmware (by dlink) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"dir-890l_firmware\" is an operating system released by \"dlink\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Application Fingerprinting (CAPEC-541)\nAn adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\n\nThe CWE (Common Weakness Enumeration) is Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations (CWE-1039)\nThe product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Application Fingerprinting (CAPEC-541)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.",
      "dyn_dst_name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations (CWE-1039)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Smoke Loader (S0226)\nSmoke Loader is a malicious bot application that can be used to load other malware. Smoke Loader has been seen in the wild since at least 2011 and has included a number of different payloads. It is notorious for its use of deception and self-protection. It also comes with several plug-ins.  (Citations: Malwarebytes SmokeLoader 2016, Microsoft Dofoil 2018)\n\nThe MITRE ATT&CK sub-technique is Command Obfuscation (T1027.010)\nAdversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter. For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams. Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`). Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citations: Akamai JS, Malware Monday VBE, RC PowerShell, Microsoft PowerShellB64, Bashfuscator Command Obfuscators, FireEye Obfuscation June 2017, Twitter Richard WMIC, Invoke-DOSfuscation, Invoke-Obfuscation)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Smoke Loader (S0226)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Smoke Loader is a malicious bot application that can be used to load other malware. Smoke Loader has been seen in the wild since at least 2011 and has included a number of different payloads. It is notorious for its use of deception and self-protection. It also comes with several plug-ins.  (Citations: Malwarebytes SmokeLoader 2016, Microsoft Dofoil 2018)",
      "dyn_dst_name": "Command Obfuscation (T1027.010)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter. For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`\u201cWor\u201d+\u201cd.Application\u201d`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams. Adversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`). Tools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citations: Akamai JS, Malware Monday VBE, RC PowerShell, Microsoft PowerShellB64, Bashfuscator Command Obfuscators, FireEye Obfuscation June 2017, Twitter Richard WMIC, Invoke-DOSfuscation, Invoke-Obfuscation)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique:\n\nThe MITRE ATT&CK tactic is resource-development (TA0042)\nThe adversary is trying to establish resources they can use to support operations. Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using purchased domains to support Command and Control, email accounts for phishing as a part of Initial Access, or stealing code signing certificates to help with Defense Evasion.\n\nThe MITRE ATT&CK sub-technique is Artificial Intelligence (T1588.007)\nAdversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads. For example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.(Citations: MSFT-AI, OpenAI-CTI)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "resource-development (TA0042)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to establish resources they can use to support operations. Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using purchased domains to support Command and Control, email accounts for phishing as a part of Initial Access, or stealing code signing certificates to help with Defense Evasion.",
      "dyn_dst_name": "Artificial Intelligence (T1588.007)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may obtain access to generative artificial intelligence tools, such as large language models (LLMs), to aid various techniques during targeting. These tools may be used to inform, bolster, and enable a variety of malicious tasks including conducting Reconnaissance, creating basic scripts, assisting social engineering, and even developing payloads. For example, by utilizing a publicly available LLM an adversary is essentially outsourcing or automating certain tasks to the tool. Using AI, the adversary may draft and generate content in a variety of written languages to be used in Phishing/Phishing for Information campaigns. The same publicly available tool may further enable vulnerability or other offensive research supporting Develop Capabilities. AI tools may also automate technical tasks by generating, refining, or otherwise enhancing (e.g., Obfuscated Files or Information) malicious scripts and payloads.(Citations: MSFT-AI, OpenAI-CTI)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK group and malicious software and their descriptions:\n\nThe MITRE ATT&CK group is Aquatic Panda (G0143):\nAquatic Panda is a suspected China-based threat group with a dual mission of intelligence collection and industrial espionage. Active since at least May 2020, Aquatic Panda has primarily targeted entities in the telecommunications, technology, and government sectors.(Citations: CrowdStrike AQUATIC PANDA December 2021)\n\nThe malicious software is malware pngdowner (S0067):\npngdowner is malware used by Putter Panda. It is a simple tool with limited functionality and no persistence mechanism, suggesting it is used only as a simple \"download-and- execute\" utility. (Citations: CrowdStrike Putter Panda)\n\nYour goal is to determine if Aquatic Panda (G0143) is related to malware pngdowner (S0067), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Aquatic Panda (G0143)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Aquatic Panda is a suspected China-based threat group with a dual mission of intelligence collection and industrial espionage. Active since at least May 2020, Aquatic Panda has primarily targeted entities in the telecommunications, technology, and government sectors.(Citations: CrowdStrike AQUATIC PANDA December 2021)",
      "dyn_dst_name": "malware pngdowner (S0067)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "pngdowner is malware used by Putter Panda. It is a simple tool with limited functionality and no persistence mechanism, suggesting it is used only as a simple \"download-and- execute\" utility. (Citations: CrowdStrike Putter Panda)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and malicious software presented below:\n\nThe MITRE ATT&CK sub-technique is Domain Controller Authentication (T1556.001):\nAdversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citations: Dell Skeleton)\n\nThe malicious software is malware Socksbot (S0273):\nSocksbot is a backdoor that abuses Socket Secure (SOCKS) proxies. (Citations: TrendMicro Patchwork Dec 2017)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Domain Controller Authentication (T1556.001)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user\u2019s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citations: Dell Skeleton)",
      "dyn_dst_name": "malware Socksbot (S0273)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Socksbot is a backdoor that abuses Socket Secure (SOCKS) proxies. (Citations: TrendMicro Patchwork Dec 2017)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CPE (Common Platform Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version -:\n\"android\" is an operating system released by \"google\".  This product version is -\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29130:\nWindows Lightweight Directory Access Protocol (LDAP) Remote Code Execution Vulnerability\n\nYour goal is to determine if operating system android (by google) version - is related to CVE-2022-29130, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system android (by google) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_dst_name": "CVE-2022-29130",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Windows Lightweight Directory Access Protocol (LDAP) Remote Code Execution Vulnerability",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20186 and operating system ios_xe (by cisco) version 17.8.1a. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20186 -\nA vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.\n\noperating system ios_xe (by cisco) version 17.8.1a -\n\"ios_xe\" is an operating system released by \"cisco\".  This product version is 17.8.1a",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20186",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.",
      "dyn_dst_name": "operating system ios_xe (by cisco) version 17.8.1a",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"ios_xe\" is an operating system released by \"cisco\".  This product version is 17.8.1a",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-35861:\nA shell-injection vulnerability in email notifications on Supermicro motherboards (such as H12DST-B before 03.10.35) allows remote attackers to inject execute arbitrary commands as root on the BMC.\n\nThe CPE (Common Platform Enumeration) is operating system x13sei-f_firmware (by supermicro) version -:\n\"x13sei-f_firmware\" is an operating system released by \"supermicro\".  This product version is -\n\nYour goal is to determine if CVE-2023-35861 is related to operating system x13sei-f_firmware (by supermicro) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-35861",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A shell-injection vulnerability in email notifications on Supermicro motherboards (such as H12DST-B before 03.10.35) allows remote attackers to inject execute arbitrary commands as root on the BMC.",
      "dyn_dst_name": "operating system x13sei-f_firmware (by supermicro) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"x13sei-f_firmware\" is an operating system released by \"supermicro\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and malicious software:\n\nThe MITRE ATT&CK sub-technique is Web Protocols (T1071.001)\nAdversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)\n\nThe malicious software is malware AppleSeed (S0622)\nAppleSeed is a backdoor that has been used by Kimsuky to target South Korean government, academic, and commercial targets since at least 2021.(Citations: Malwarebytes Kimsuky June 2021)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Web Protocols (T1071.001)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as HTTP/S and WebSocket that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: CrowdStrike Putter Panda, Brazking-Websockets)",
      "dyn_dst_name": "malware AppleSeed (S0622)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "AppleSeed is a backdoor that has been used by Kimsuky to target South Korean government, academic, and commercial targets since at least 2021.(Citations: Malwarebytes Kimsuky June 2021)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware CosmicDuke (S0050) and Automated Exfiltration (T1020). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware CosmicDuke (S0050) -\nCosmicDuke is malware that was used by APT29 from 2010 to 2015. (Citations: F-Secure The Dukes)\n\nAutomated Exfiltration (T1020) -\nAdversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.(Citations: ESET Gamaredon June 2020)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware CosmicDuke (S0050)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "CosmicDuke is malware that was used by APT29 from 2010 to 2015. (Citations: F-Secure The Dukes)",
      "dyn_dst_name": "Automated Exfiltration (T1020)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol.(Citations: ESET Gamaredon June 2020)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware ComRAT (S0126):\nComRAT is a second stage implant suspected of being a descendant of Agent.btz and used by Turla. The first version of ComRAT was identified in 2007, but the tool has undergone substantial development for many years since.(Citations: Symantec Waterbug, NorthSec 2015 GData Uroburos Tools, ESET ComRAT May 2020)\n\nThe MITRE ATT&CK sub-technique is Bidirectional Communication (T1102.002):\nAdversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nYour goal is to determine if malware ComRAT (S0126) is related to Bidirectional Communication (T1102.002), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware ComRAT (S0126)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ComRAT is a second stage implant suspected of being a descendant of Agent.btz and used by Turla. The first version of ComRAT was identified in 2007, but the tool has undergone substantial development for many years since.(Citations: Symantec Waterbug, NorthSec 2015 GData Uroburos Tools, ESET ComRAT May 2020)",
      "dyn_dst_name": "Bidirectional Communication (T1102.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and malicious software and their descriptions:\n\nThe MITRE ATT&CK sub-technique is IIS Components (T1505.004):\nAdversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers. Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts. Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citations: Microsoft ISAPI Extension Overview 2017, Microsoft ISAPI Filter Overview 2017, IIS Backdoor 2011, Trustwave IIS Module 2013, Microsoft ISAPI Filter Overview 2017, Microsoft ISAPI Extension Overview 2017, Microsoft ISAPI Extension All Incoming 2017, Dell TG-3390, Trustwave IIS Module 2013, MMPC ISAPI Filter 2012, Microsoft IIS Modules Overview 2007, Trustwave IIS Module 2013, ESET IIS Malware 2021)\n\nThe malicious software is malware Exaramel for Windows (S0343):\nExaramel for Windows is a backdoor used for targeting Windows systems. The Linux version is tracked separately under Exaramel for Linux.(Citations: ESET TeleBots Oct 2018)\n\nYour goal is to determine if IIS Components (T1505.004) is related to malware Exaramel for Windows (S0343), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "IIS Components (T1505.004)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may install malicious components that run on Internet Information Services (IIS) web servers to establish persistence. IIS provides several mechanisms to extend the functionality of the web servers. For example, Internet Server Application Programming Interface (ISAPI) extensions and filters can be installed to examine and/or modify incoming and outgoing IIS web requests. Extensions and filters are deployed as DLL files that export three functions: <code>Get{Extension/Filter}Version</code>, <code>Http{Extension/Filter}Proc</code>, and (optionally) <code>Terminate{Extension/Filter}</code>. IIS modules may also be installed to extend IIS web servers. Adversaries may install malicious ISAPI extensions and filters to observe and/or modify traffic, execute commands on compromised machines, or proxy command and control traffic. ISAPI extensions and filters may have access to all IIS web requests and responses. For example, an adversary may abuse these mechanisms to modify HTTP responses in order to distribute malicious commands/content to previously comprised hosts. Adversaries may also install malicious IIS modules to observe and/or modify traffic. IIS 7.0 introduced modules that provide the same unrestricted access to HTTP requests and responses as ISAPI extensions and filters. IIS modules can be written as a DLL that exports <code>RegisterModule</code>, or as a .NET application that interfaces with ASP.NET APIs to access IIS HTTP requests.(Citations: Microsoft ISAPI Extension Overview 2017, Microsoft ISAPI Filter Overview 2017, IIS Backdoor 2011, Trustwave IIS Module 2013, Microsoft ISAPI Filter Overview 2017, Microsoft ISAPI Extension Overview 2017, Microsoft ISAPI Extension All Incoming 2017, Dell TG-3390, Trustwave IIS Module 2013, MMPC ISAPI Filter 2012, Microsoft IIS Modules Overview 2007, Trustwave IIS Module 2013, ESET IIS Malware 2021)",
      "dyn_dst_name": "malware Exaramel for Windows (S0343)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Exaramel for Windows is a backdoor used for targeting Windows systems. The Linux version is tracked separately under Exaramel for Linux.(Citations: ESET TeleBots Oct 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-21505 and application samsung_core_services (by samsung) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-21505 -\nImproper access control in Samsung Core Service prior to version 2.1.00.36 allows attacker to write arbitrary file in sandbox.\n\napplication samsung_core_services (by samsung) version * -\n\"samsung_core_services\" is an application released by \"samsung\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-21505",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Improper access control in Samsung Core Service prior to version 2.1.00.36 allows attacker to write arbitrary file in sandbox.",
      "dyn_dst_name": "application samsung_core_services (by samsung) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"samsung_core_services\" is an application released by \"samsung\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-21849 and operating system android (by google) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-21849 -\nWindows Internet Key Exchange (IKE) Protocol Extensions Remote Code Execution Vulnerability\n\noperating system android (by google) version - -\n\"android\" is an operating system released by \"google\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-21849",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Windows Internet Key Exchange (IKE) Protocol Extensions Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is APT1 (G0006)\nAPT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People\u2019s Liberation Army (PLA) General Staff Department\u2019s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. (Citations: Mandiant APT1)\n\nThe malicious software is tool gsecdump (S0008)\ngsecdump is a publicly-available credential dumper used to obtain password hashes and LSA secrets from Windows operating systems. (Citations: TrueSec Gsecdump)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "APT1 (G0006)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "APT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People\u2019s Liberation Army (PLA) General Staff Department\u2019s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. (Citations: Mandiant APT1)",
      "dyn_dst_name": "tool gsecdump (S0008)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "gsecdump is a publicly-available credential dumper used to obtain password hashes and LSA secrets from Windows operating systems. (Citations: TrueSec Gsecdump)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware SHARPSTATS (S0450) and Windows Management Instrumentation Event Subscription (T1546.003). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware SHARPSTATS (S0450) -\nSHARPSTATS is a .NET backdoor used by MuddyWater since at least 2019.(Citations: TrendMicro POWERSTATS V3 June 2019)\n\nWindows Management Instrumentation Event Subscription (T1546.003) -\nAdversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe` \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.(Citations: Mandiant M-Trends 2015, FireEye WMI SANS 2015, FireEye WMI 2015, Dell WMI Persistence, Microsoft MOF May 2018)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware SHARPSTATS (S0450)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SHARPSTATS is a .NET backdoor used by MuddyWater since at least 2019.(Citations: TrendMicro POWERSTATS V3 June 2019)",
      "dyn_dst_name": "Windows Management Instrumentation Event Subscription (T1546.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe` \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.(Citations: Mandiant M-Trends 2015, FireEye WMI SANS 2015, FireEye WMI 2015, Dell WMI Persistence, Microsoft MOF May 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Inclusion of Functionality from Untrusted Control Sphere (CWE-829) and Force Use of Corrupted Files (CAPEC-263). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nInclusion of Functionality from Untrusted Control Sphere (CWE-829) -\nThe product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\nForce Use of Corrupted Files (CAPEC-263) -\nThis describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Inclusion of Functionality from Untrusted Control Sphere (CWE-829)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
      "dyn_dst_name": "Force Use of Corrupted Files (CAPEC-263)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is S0229 (malware Orz):\nOrz is a custom JavaScript backdoor used by Leviathan. It was observed being used in 2014 as well as in August 2017 when it was dropped by Microsoft Publisher files.  (Citations: Proofpoint Leviathan Oct 2017, FireEye Periscope March 2018)\n\nThe MITRE ATT&CK sub-technique is T1546.007 (Netsh Helper DLL):\nAdversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citations: TechNet Netsh, Github Netsh Helper CS Beacon, Demaske Netsh Persistence)\n\nYour goal is to determine if S0229 (malware Orz) is related to T1546.007 (Netsh Helper DLL), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0229 (malware Orz)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Orz is a custom JavaScript backdoor used by Leviathan. It was observed being used in 2014 as well as in August 2017 when it was dropped by Microsoft Publisher files.  (Citations: Proofpoint Leviathan Oct 2017, FireEye Periscope March 2018)",
      "dyn_dst_name": "T1546.007 (Netsh Helper DLL)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.(Citations: TechNet Netsh, Github Netsh Helper CS Beacon, Demaske Netsh Persistence)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Winnti for Windows (S0141) and APT41 (G0096). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Winnti for Windows (S0141) -\nWinnti for Windows is a modular remote access Trojan (RAT) that has been used likely by multiple groups to carry out intrusions in various regions since at least 2010, including by one group referred to as the same name, Winnti Group.. The Linux variant is tracked separately under Winnti for Linux.(Citations: Kaspersky Winnti April 2013, Microsoft Winnti Jan 2017, Novetta Winnti April 2015, 401 TRG Winnti Umbrella May 2018, Chronicle Winnti for Linux May 2019)\n\nAPT41 (G0096) -\nAPT41 is a threat group that researchers have assessed as Chinese state-sponsored espionage group that also conducts financially-motivated operations. Active since at least 2012, APT41 has been observed targeting healthcare, telecom, technology, and video game industries in 14 countries. APT41 overlaps at least partially with public reporting on groups including BARIUM and Winnti Group.(Citations: FireEye APT41 Aug 2019, Group IB APT 41 June 2021)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Winnti for Windows (S0141)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Winnti for Windows is a modular remote access Trojan (RAT) that has been used likely by multiple groups to carry out intrusions in various regions since at least 2010, including by one group referred to as the same name, Winnti Group.. The Linux variant is tracked separately under Winnti for Linux.(Citations: Kaspersky Winnti April 2013, Microsoft Winnti Jan 2017, Novetta Winnti April 2015, 401 TRG Winnti Umbrella May 2018, Chronicle Winnti for Linux May 2019)",
      "dyn_dst_name": "APT41 (G0096)",
      "dyn_dst_layer": "MITRE ATT&CK group",
      "dyn_dst_description": "APT41 is a threat group that researchers have assessed as Chinese state-sponsored espionage group that also conducts financially-motivated operations. Active since at least 2012, APT41 has been observed targeting healthcare, telecom, technology, and video game industries in 14 countries. APT41 overlaps at least partially with public reporting on groups including BARIUM and Winnti Group.(Citations: FireEye APT41 Aug 2019, Group IB APT 41 June 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-7037 and Server-Side Request Forgery (SSRF) (CWE-918). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-7037 -\nA vulnerability was found in automad up to 1.10.9. It has been declared as critical. This vulnerability affects the function import of the file FileController.php. The manipulation of the argument importUrl leads to server-side request forgery. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-248686 is the identifier assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.\n\nServer-Side Request Forgery (SSRF) (CWE-918) -\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-7037",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability was found in automad up to 1.10.9. It has been declared as critical. This vulnerability affects the function import of the file FileController.php. The manipulation of the argument importUrl leads to server-side request forgery. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-248686 is the identifier assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
      "dyn_dst_name": "Server-Side Request Forgery (SSRF) (CWE-918)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-28911 and application openssl (by openssl) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-28911 -\nTOTOLink N600R V5.3c.7159_B20190425 was discovered to contain a command injection vulnerability via the filename parameter in /setting/CloudACMunualUpdate.\n\napplication openssl (by openssl) version * -\n\"openssl\" is an application released by \"openssl\". ",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28911",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOLink N600R V5.3c.7159_B20190425 was discovered to contain a command injection vulnerability via the filename parameter in /setting/CloudACMunualUpdate.",
      "dyn_dst_name": "application openssl (by openssl) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"openssl\" is an application released by \"openssl\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Shamoon (S0140) and Firmware Corruption (T1495). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Shamoon (S0140) -\nShamoon is wiper malware that was first used by an Iranian group known as the \"Cutting Sword of Justice\" in 2012. Other versions known as Shamoon 2 and Shamoon 3 were observed in 2016 and 2018. Shamoon has also been seen leveraging RawDisk and Filerase to carry out data wiping tasks. The term Shamoon is sometimes used to refer to the group using the malware as well as the malware itself.(Citations: Palo Alto Shamoon Nov 2016, Unit 42 Shamoon3 2018, Symantec Shamoon 2012, FireEye Shamoon Nov 2016)\n\nFirmware Corruption (T1495) -\nAdversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards. In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.(Citations: Symantec Chernobyl W95.CIH, dhs_threat_to_net_devices, cisa_malware_orgs_ukraine)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Shamoon (S0140)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Shamoon is wiper malware that was first used by an Iranian group known as the \"Cutting Sword of Justice\" in 2012. Other versions known as Shamoon 2 and Shamoon 3 were observed in 2016 and 2018. Shamoon has also been seen leveraging RawDisk and Filerase to carry out data wiping tasks. The term Shamoon is sometimes used to refer to the group using the malware as well as the malware itself.(Citations: Palo Alto Shamoon Nov 2016, Unit 42 Shamoon3 2018, Symantec Shamoon 2012, FireEye Shamoon Nov 2016)",
      "dyn_dst_name": "Firmware Corruption (T1495)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards. In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction.(Citations: Symantec Chernobyl W95.CIH, dhs_threat_to_net_devices, cisa_malware_orgs_ukraine)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware BADNEWS (S0128) and Screen Capture (T1113). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware BADNEWS (S0128) -\nBADNEWS is malware that has been used by the actors responsible for the Patchwork campaign. Its name was given due to its use of RSS feeds, forums, and blogs for command and control.  (Citations: Forcepoint Monsoon, TrendMicro Patchwork Dec 2017)\n\nScreen Capture (T1113) -\nAdversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware BADNEWS (S0128)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "BADNEWS is malware that has been used by the actors responsible for the Patchwork campaign. Its name was given due to its use of RSS feeds, forums, and blogs for command and control.  (Citations: Forcepoint Monsoon, TrendMicro Patchwork Dec 2017)",
      "dyn_dst_name": "Screen Capture (T1113)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, operating system thinkagile_hx3521-g_firmware (by lenovo) version * and CVE-2023-29057. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\noperating system thinkagile_hx3521-g_firmware (by lenovo) version * -\n\"thinkagile_hx3521-g_firmware\" is an operating system released by \"lenovo\". \n\nCVE-2023-29057 -\nA valid XCC user's local account permissions overrides their active directory permissions under specific configurations. This could lead to a privilege escalation. To be vulnerable, LDAP must be configured for authentication/authorization and logins configured as \u201cLocal First, then LDAP\u201d.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system thinkagile_hx3521-g_firmware (by lenovo) version *",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"thinkagile_hx3521-g_firmware\" is an operating system released by \"lenovo\". ",
      "dyn_dst_name": "CVE-2023-29057",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A valid XCC user's local account permissions overrides their active directory permissions under specific configurations. This could lead to a privilege escalation. To be vulnerable, LDAP must be configured for authentication/authorization and logins configured as \u201cLocal First, then LDAP\u201d.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware RTM (S0148) and Registry Run Keys / Startup Folder (T1547.001). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware RTM (S0148) -\nRTM is custom malware written in Delphi. It is used by the group of the same name (RTM). Newer versions of the malware have been reported publicly as Redaman.(Citations: ESET RTM Feb 2017, Unit42 Redaman January 2019)\n\nRegistry Run Keys / Startup Folder (T1547.001) -\nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. The following run keys are created by default on Windows systems: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> Run keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code>  Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>. The following Registry keys can be used to set startup folder items for persistence: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> The following Registry keys can control automatic startup of services during boot: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> Using policy settings to specify startup programs creates corresponding values in either of two Registry keys: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user. By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.(Citations: Microsoft Run Key, Microsoft Wow6432Node 2018, Malwarebytes Wow6432Node 2016, Microsoft Run Key, Oddvar Moe RunOnceEx Mar 2018)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware RTM (S0148)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "RTM is custom malware written in Delphi. It is used by the group of the same name (RTM). Newer versions of the malware have been reported publicly as Redaman.(Citations: ESET RTM Feb 2017, Unit42 Redaman January 2019)",
      "dyn_dst_name": "Registry Run Keys / Startup Folder (T1547.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. The following run keys are created by default on Windows systems: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code> Run keys may exist under multiple hives. The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code>  Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>. The following Registry keys can be used to set startup folder items for persistence: * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code> * <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code> The following Registry keys can control automatic startup of services during boot: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code> * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code> Using policy settings to specify startup programs creates corresponding values in either of two Registry keys: * <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> * <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code> Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user. By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.(Citations: Microsoft Run Key, Microsoft Wow6432Node 2018, Malwarebytes Wow6432Node 2016, Microsoft Run Key, Oddvar Moe RunOnceEx Mar 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30493\nIn oretnom23 Automotive Shop Management System v1.0, the product id parameter suffers from a blind SQL Injection Vulnerability allowing remote attackers to dump all database credential and gain admin access(privilege escalation).\n\nThe CPE (Common Platform Enumeration) is operating system debian_linux (by debian) version 10.0\n\"debian_linux\" is an operating system released by \"debian\".  This product version is 10.0\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30493",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "In oretnom23 Automotive Shop Management System v1.0, the product id parameter suffers from a blind SQL Injection Vulnerability allowing remote attackers to dump all database credential and gain admin access(privilege escalation).",
      "dyn_dst_name": "operating system debian_linux (by debian) version 10.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"debian_linux\" is an operating system released by \"debian\".  This product version is 10.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Valak (S0476) and T1564.004 (NTFS File Attributes). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Valak (S0476) -\nValak is a multi-stage modular malware that can function as a standalone information stealer or downloader, first observed in 2019 targeting enterprises in the US and Germany.(Citations: Cybereason Valak May 2020, Unit 42 Valak July 2020)\n\nT1564.004 (NTFS File Attributes) -\nAdversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).     Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  (Citations: SpectorOps Host-Based Jul 2017, Microsoft NTFS File Attributes Aug 2010, SpectorOps Host-Based Jul 2017, Microsoft File Streams, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014, Journey into IR ZeroAccess NTFS EA, MalwareBytes ADS July 2015)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Valak (S0476)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Valak is a multi-stage modular malware that can function as a standalone information stealer or downloader, first observed in 2019 targeting enterprises in the US and Germany.(Citations: Cybereason Valak May 2020, Unit 42 Valak July 2020)",
      "dyn_dst_name": "T1564.004 (NTFS File Attributes)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition.  Within MFT entries are file attributes,  such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files).     Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.  (Citations: SpectorOps Host-Based Jul 2017, Microsoft NTFS File Attributes Aug 2010, SpectorOps Host-Based Jul 2017, Microsoft File Streams, MalwareBytes ADS July 2015, Microsoft ADS Mar 2014, Journey into IR ZeroAccess NTFS EA, MalwareBytes ADS July 2015)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is malware MacMa (S1016):\nMacMa is a macOS-based backdoor with a large set of functionalities to control and exfiltrate files from a compromised computer. MacMa has been observed in the wild since November 2021.(Citations: ESET DazzleSpy Jan 2022)\n\nThe MITRE ATT&CK technique is T1106 (Native API):\nAdversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)\n\nYour goal is to determine if malware MacMa (S1016) is related to T1106 (Native API), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware MacMa (S1016)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "MacMa is a macOS-based backdoor with a large set of functionalities to control and exfiltrate files from a compromised computer. MacMa has been observed in the wild since November 2021.(Citations: ESET DazzleSpy Jan 2022)",
      "dyn_dst_name": "T1106 (Native API)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and MITRE ATT&CK tactic presented below:\n\nThe MITRE ATT&CK sub-technique is T1564.012 (File/Path Exclusions):\nAdversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate. Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.(Citations: Microsoft File Folder Exclusions)\n\nThe MITRE ATT&CK tactic is defense-evasion (TA0005):\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1564.012 (File/Path Exclusions)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate. Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.(Citations: Microsoft File Folder Exclusions)",
      "dyn_dst_name": "defense-evasion (TA0005)",
      "dyn_dst_layer": "MITRE ATT&CK tactic",
      "dyn_dst_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Bisonal (S0268)\nBisonal is a remote access tool (RAT) that has been used by Tonto Team against public and private sector organizations in Russia, South Korea, and Japan since at least December 2010.(Citations: Unit 42 Bisonal July 2018, Talos Bisonal Mar 2020)\n\nThe MITRE ATT&CK technique is Multi-Factor Authentication Interception (T1111)\nAdversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.  Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).  Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citations: Mandiant M Trends 2011, GCN RSA June 2011, Okta Scatter Swine 2022)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Bisonal (S0268)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Bisonal is a remote access tool (RAT) that has been used by Tonto Team against public and private sector organizations in Russia, South Korea, and Japan since at least December 2010.(Citations: Unit 42 Bisonal July 2018, Talos Bisonal Mar 2020)",
      "dyn_dst_name": "Multi-Factor Authentication Interception (T1111)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.  Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).  Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citations: Mandiant M Trends 2011, GCN RSA June 2011, Okta Scatter Swine 2022)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-25072 and operating system android (by google) version 10.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-25072 -\nTP-Link Archer A54 Archer A54(US)_V1_210111 routers were discovered to contain a stack overflow in the function DM_ Fillobjbystr(). This vulnerability allows unauthenticated attackers to execute arbitrary code.\n\noperating system android (by google) version 10.0 -\n\"android\" is an operating system released by \"google\".  This product version is 10.0",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25072",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TP-Link Archer A54 Archer A54(US)_V1_210111 routers were discovered to contain a stack overflow in the function DM_ Fillobjbystr(). This vulnerability allows unauthenticated attackers to execute arbitrary code.",
      "dyn_dst_name": "operating system android (by google) version 10.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is 10.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and malicious software presented below:\n\nThe MITRE ATT&CK sub-technique is Asymmetric Cryptography (T1573.002):\nAdversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal. For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.\n\nThe malicious software is S0342 (malware GreyEnergy):\nGreyEnergy is a backdoor written in C and compiled in Visual Studio. GreyEnergy shares similarities with the BlackEnergy malware and is thought to be the successor of it.(Citations: ESET GreyEnergy Oct 2018)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Asymmetric Cryptography (T1573.002)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver\u2019s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal. For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.",
      "dyn_dst_name": "S0342 (malware GreyEnergy)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "GreyEnergy is a backdoor written in C and compiled in Visual Studio. GreyEnergy shares similarities with the BlackEnergy malware and is thought to be the successor of it.(Citations: ESET GreyEnergy Oct 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Cellular Traffic Intercept (CAPEC-609) and Missing Encryption of Sensitive Data (CWE-311). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCellular Traffic Intercept (CAPEC-609) -\nCellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.\n\nMissing Encryption of Sensitive Data (CWE-311) -\nThe product does not encrypt sensitive or critical information before storage or transmission.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cellular Traffic Intercept (CAPEC-609)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.",
      "dyn_dst_name": "Missing Encryption of Sensitive Data (CWE-311)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not encrypt sensitive or critical information before storage or transmission.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Use of Hard-coded Credentials (CWE-798) and CVE-2023-49253. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nUse of Hard-coded Credentials (CWE-798) -\nThe product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\nCVE-2023-49253 -\nRoot user password is hardcoded into the device and cannot be changed in the user interface.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Use of Hard-coded Credentials (CWE-798)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
      "dyn_dst_name": "CVE-2023-49253",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Root user password is hardcoded into the device and cannot be changed in the user interface.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware BadPatch (S0337):\nBadPatch is a Windows Trojan that was used in a Gaza Hackers-linked campaign.(Citations: Unit 42 BadPatch Oct 2017)\n\nThe MITRE ATT&CK sub-technique is Keylogging (T1056.001):\nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware BadPatch (S0337)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "BadPatch is a Windows Trojan that was used in a Gaza Hackers-linked campaign.(Citations: Unit 42 BadPatch Oct 2017)",
      "dyn_dst_name": "Keylogging (T1056.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CPE (Common Platform Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CPE (Common Platform Enumeration) is operating system wcd9371_firmware (by qualcomm) version -\n\"wcd9371_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30926\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the EditMacList parameter at /goform/aspForm.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system wcd9371_firmware (by qualcomm) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"wcd9371_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_dst_name": "CVE-2022-30926",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the EditMacList parameter at /goform/aspForm.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-41137 and application appsanywhere_client (by appsanywhere) version 1.6.0. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-41137 -\nSymmetric encryption used to protect messages between the AppsAnywhere server and client can be broken by reverse engineering the client and used to impersonate the AppsAnywhere server.\n\napplication appsanywhere_client (by appsanywhere) version 1.6.0 -\n\"appsanywhere_client\" is an application released by \"appsanywhere\".  This product version is 1.6.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-41137",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Symmetric encryption used to protect messages between the AppsAnywhere server and client can be broken by reverse engineering the client and used to impersonate the AppsAnywhere server.",
      "dyn_dst_name": "application appsanywhere_client (by appsanywhere) version 1.6.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"appsanywhere_client\" is an application released by \"appsanywhere\".  This product version is 1.6.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-30925 and operating system qca9377_firmware (by qualcomm) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-30925 -\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddMacList parameter at /goform/aspForm.\n\noperating system qca9377_firmware (by qualcomm) version - -\n\"qca9377_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30925",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the AddMacList parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system qca9377_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca9377_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-20162\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\nThe CPE (Common Platform Enumeration) is operating system sg200-08p_firmware (by cisco) version -\n\"sg200-08p_firmware\" is an operating system released by \"cisco\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20162",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sg200-08p_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg200-08p_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware KARAE (S0215) and Server Software Component (T1505). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware KARAE (S0215) -\nKARAE is a backdoor typically used by APT37 as first-stage malware. (Citations: FireEye APT37 Feb 2018)\n\nServer Software Component (T1505) -\nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware KARAE (S0215)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "KARAE is a backdoor typically used by APT37 as first-stage malware. (Citations: FireEye APT37 Feb 2018)",
      "dyn_dst_name": "Server Software Component (T1505)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware PowerLess (S1012):\nPowerLess is a PowerShell-based modular backdoor that has been used by Magic Hound since at least 2022.(Citations: Cybereason PowerLess February 2022)\n\nThe MITRE ATT&CK technique is Data from Local System (T1005):\nAdversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.(Citations: show_run_config_cmd_cisco)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware PowerLess (S1012)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "PowerLess is a PowerShell-based modular backdoor that has been used by Magic Hound since at least 2022.(Citations: Cybereason PowerLess February 2022)",
      "dyn_dst_name": "Data from Local System (T1005)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.(Citations: show_run_config_cmd_cisco)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CWE (Common Weakness Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-24777:\nFunadmin v3.2.0 was discovered to contain a SQL injection vulnerability via the id parameter at /databases/table/list.\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89):\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-24777",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Funadmin v3.2.0 was discovered to contain a SQL injection vulnerability via the id parameter at /databases/table/list.",
      "dyn_dst_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-21141\nMMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1 does not perform proper authorization checks on multiple API functions. An attacker may gain access to these functions and achieve remote code execution, create a denial-of-service condition, and obtain sensitive information.\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2008 (by microsoft) version *\n\"windows_server_2008\" is an operating system released by \"microsoft\".  and minor version (point release) sp2\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-21141",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1 does not perform proper authorization checks on multiple API functions. An attacker may gain access to these functions and achieve remote code execution, create a denial-of-service condition, and obtain sensitive information.",
      "dyn_dst_name": "operating system windows_server_2008 (by microsoft) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2008\" is an operating system released by \"microsoft\".  and minor version (point release) sp2",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK group:\n\nThe malicious software is malware Carbanak (S0030)\nCarbanak is a full-featured, remote backdoor used by a group of the same name (Carbanak). It is intended for espionage, data exfiltration, and providing remote access to infected machines.  (Citations: Kaspersky Carbanak, FireEye CARBANAK June 2017)\n\nThe MITRE ATT&CK group is Transparent Tribe (G0134)\nTransparent Tribe is a suspected Pakistan-based threat group that has been active since at least 2013, primarily targeting diplomatic, defense, and research organizations in India and Afghanistan.(Citations: Proofpoint Operation Transparent Tribe March 2016, Kaspersky Transparent Tribe August 2020, Talos Transparent Tribe May 2021)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Carbanak (S0030)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Carbanak is a full-featured, remote backdoor used by a group of the same name (Carbanak). It is intended for espionage, data exfiltration, and providing remote access to infected machines.  (Citations: Kaspersky Carbanak, FireEye CARBANAK June 2017)",
      "dyn_dst_name": "Transparent Tribe (G0134)",
      "dyn_dst_layer": "MITRE ATT&CK group",
      "dyn_dst_description": "Transparent Tribe is a suspected Pakistan-based threat group that has been active since at least 2013, primarily targeting diplomatic, defense, and research organizations in India and Afghanistan.(Citations: Proofpoint Operation Transparent Tribe March 2016, Kaspersky Transparent Tribe August 2020, Talos Transparent Tribe May 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20186 and operating system ios (by cisco) version 15.5\\(3\\)s5. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20186 -\nA vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.\n\noperating system ios (by cisco) version 15.5\\(3\\)s5 -\n\"ios\" is an operating system released by \"cisco\".  This product version is 15.5\\(3\\)s5",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20186",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the Authentication, Authorization, and Accounting (AAA) feature of Cisco IOS Software and Cisco IOS XE Software could allow an authenticated, remote attacker to bypass command authorization and copy files to or from the file system of an affected device using the Secure Copy Protocol (SCP). This vulnerability is due to incorrect processing of SCP commands in AAA command authorization checks. An attacker with valid credentials and level 15 privileges could exploit this vulnerability by using SCP to connect to an affected device from an external machine. A successful exploit could allow the attacker to obtain or change the configuration of the affected device and put files on or retrieve files from the affected device.",
      "dyn_dst_name": "operating system ios (by cisco) version 15.5\\(3\\)s5",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"ios\" is an operating system released by \"cisco\".  This product version is 15.5\\(3\\)s5",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Duqu (S0038)\nDuqu is a malware platform that uses a modular approach to extend functionality after deployment within a target network. (Citations: Symantec W32.Duqu)\n\nThe MITRE ATT&CK sub-technique is Dynamic-link Library Injection (T1055.001)\nAdversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Elastic Process Injection July 2017, Elastic HuntingNMemory June 2017, Elastic Process Injection July 2017, Module Stomping for Shellcode Injection, Hiding Malicious Code with Module Stomping)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Duqu (S0038)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Duqu is a malware platform that uses a modular approach to extend functionality after deployment within a target network. (Citations: Symantec W32.Duqu)",
      "dyn_dst_name": "Dynamic-link Library Injection (T1055.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL).  Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>). Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Elastic Process Injection July 2017, Elastic HuntingNMemory June 2017, Elastic Process Injection July 2017, Module Stomping for Shellcode Injection, Hiding Malicious Code with Module Stomping)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Pharming (CAPEC-89) and Creation of Immutable Text Using String Concatenation (CWE-1046). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nPharming (CAPEC-89) -\nA pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\n\nCreation of Immutable Text Using String Concatenation (CWE-1046) -\nThe product creates an immutable text string using string concatenation operations.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Pharming (CAPEC-89)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
      "dyn_dst_name": "Creation of Immutable Text Using String Concatenation (CWE-1046)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product creates an immutable text string using string concatenation operations.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware HALFBAKED (S0151):\nHALFBAKED is a malware family consisting of multiple components intended to establish persistence in victim networks. (Citations: FireEye FIN7 April 2017)\n\nThe MITRE ATT&CK technique is Process Discovery (T1057):\nAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware HALFBAKED (S0151)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "HALFBAKED is a malware family consisting of multiple components intended to establish persistence in victim networks. (Citations: FireEye FIN7 April 2017)",
      "dyn_dst_name": "Process Discovery (T1057)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is CAPEC-533 (Malicious Manual Software Update):\nAn attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.\n\nThe CWE (Common Weakness Enumeration) is Use of Web Link to Untrusted Target with window.opener Access (CWE-1022):\nThe web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.\n\nYour goal is to determine if CAPEC-533 (Malicious Manual Software Update) is related to Use of Web Link to Untrusted Target with window.opener Access (CWE-1022), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-533 (Malicious Manual Software Update)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",
      "dyn_dst_name": "Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-26999 and application big-ip_access_policy_manager (by f5) version 16.1.1. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-26999 -\nArris TR3300 v1.0.13 was discovered to contain a command injection vulnerability in the static ip settings function via the wan_ip_stat, wan_mask_stat, wan_gw_stat, and wan_dns1_stat parameters. This vulnerability allows attackers to execute arbitrary commands via a crafted request.\n\napplication big-ip_access_policy_manager (by f5) version 16.1.1 -\n\"big-ip_access_policy_manager\" is an application released by \"f5\".  This product version is 16.1.1",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-26999",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Arris TR3300 v1.0.13 was discovered to contain a command injection vulnerability in the static ip settings function via the wan_ip_stat, wan_mask_stat, wan_gw_stat, and wan_dns1_stat parameters. This vulnerability allows attackers to execute arbitrary commands via a crafted request.",
      "dyn_dst_name": "application big-ip_access_policy_manager (by f5) version 16.1.1",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"big-ip_access_policy_manager\" is an application released by \"f5\".  This product version is 16.1.1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware WhisperGate (S0689):\nWhisperGate is a multi-stage wiper designed to look like ransomware that has been used against multiple government, non-profit, and information technology organizations in Ukraine since at least January 2022.(Citations: Cybereason WhisperGate February 2022, Unit 42 WhisperGate January 2022, Microsoft WhisperGate January 2022)\n\nThe MITRE ATT&CK sub-technique is Disk Structure Wipe (T1561.002):\nAdversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped. On a network devices, adversaries may reformat the file system using Network Device CLI commands such as `format`. To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.(Citations: Symantec Shamoon 2012, FireEye Shamoon Nov 2016, Palo Alto Shamoon Nov 2016, Kaspersky StoneDrill 2017, Unit 42 Shamoon3 2018, format_cmd_cisco, Symantec Shamoon 2012, FireEye Shamoon Nov 2016, Palo Alto Shamoon Nov 2016, Kaspersky StoneDrill 2017)\n\nYour goal is to determine if malware WhisperGate (S0689) is related to Disk Structure Wipe (T1561.002), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WhisperGate (S0689)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WhisperGate is a multi-stage wiper designed to look like ransomware that has been used against multiple government, non-profit, and information technology organizations in Ukraine since at least January 2022.(Citations: Cybereason WhisperGate February 2022, Unit 42 WhisperGate January 2022, Microsoft WhisperGate January 2022)",
      "dyn_dst_name": "Disk Structure Wipe (T1561.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table. The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. Disk Structure Wipe may be performed in isolation, or along with Disk Content Wipe if all sectors of a disk are wiped. On a network devices, adversaries may reformat the file system using Network Device CLI commands such as `format`. To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.(Citations: Symantec Shamoon 2012, FireEye Shamoon Nov 2016, Palo Alto Shamoon Nov 2016, Kaspersky StoneDrill 2017, Unit 42 Shamoon3 2018, format_cmd_cisco, Symantec Shamoon 2012, FireEye Shamoon Nov 2016, Palo Alto Shamoon Nov 2016, Kaspersky StoneDrill 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is malware WellMess (S0514):\nWellMess is lightweight malware family with variants written in .NET and Golang that has been in use since at least 2018 by APT29.(Citations: CISA WellMess July 2020, PWC WellMess July 2020, NCSC APT29 July 2020)\n\nThe MITRE ATT&CK technique is Ingress Tool Transfer (T1105):\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)\n\nYour goal is to determine if malware WellMess (S0514) is related to Ingress Tool Transfer (T1105), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WellMess (S0514)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WellMess is lightweight malware family with variants written in .NET and Golang that has been in use since at least 2018 by APT29.(Citations: CISA WellMess July 2020, PWC WellMess July 2020, NCSC APT29 July 2020)",
      "dyn_dst_name": "Ingress Tool Transfer (T1105)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77):\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-26866:\nGreenPacket OH736's WR-1200 Indoor Unit, OT-235 with firmware versions M-IDU-1.6.0.3_V1.1 and MH-46360-2.0.3-R5-GP respectively are vulnerable to remote command injection. Commands are executed using pre-login execution and executed with root privileges allowing complete takeover.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-26866",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "GreenPacket OH736's WR-1200 Indoor Unit, OT-235 with firmware versions M-IDU-1.6.0.3_V1.1 and MH-46360-2.0.3-R5-GP respectively are vulnerable to remote command injection. Commands are executed using pre-login execution and executed with root privileges allowing complete takeover.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2024-24496 and application daily_habit_tracker (by remyandrade) version 1.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2024-24496 -\nAn issue in Daily Habit Tracker v.1.0 allows a remote attacker to manipulate trackers via the home.php, add-tracker.php, delete-tracker.php, update-tracker.php components.\n\napplication daily_habit_tracker (by remyandrade) version 1.0 -\n\"daily_habit_tracker\" is an application released by \"remyandrade\".  This product version is 1.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-24496",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An issue in Daily Habit Tracker v.1.0 allows a remote attacker to manipulate trackers via the home.php, add-tracker.php, delete-tracker.php, update-tracker.php components.",
      "dyn_dst_name": "application daily_habit_tracker (by remyandrade) version 1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"daily_habit_tracker\" is an application released by \"remyandrade\".  This product version is 1.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-30918 and operating system windows_server_2019 (by microsoft) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-30918 -\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the Asp_SetTelnet parameter at /goform/aspForm.\n\noperating system windows_server_2019 (by microsoft) version - -\n\"windows_server_2019\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30918",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the Asp_SetTelnet parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system windows_server_2019 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2019\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Use of Known Operating System Credentials (CAPEC-653) and Use of Password System for Primary Authentication (CWE-309). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nUse of Known Operating System Credentials (CAPEC-653) -\nThis attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network.\n\nUse of Password System for Primary Authentication (CWE-309) -\nThe use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Use of Known Operating System Credentials (CAPEC-653)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network.",
      "dyn_dst_name": "Use of Password System for Primary Authentication (CWE-309)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Out-of-bounds Write (CWE-787) and CVE-2024-21591. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nOut-of-bounds Write (CWE-787) -\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\nCVE-2024-21591 -\nAn Out-of-bounds Write vulnerability in J-Web of Juniper Networks Junos OS on SRX Series and EX Series allows an unauthenticated, network-based attacker to cause a Denial of Service (DoS), or Remote Code Execution (RCE) and obtain root privileges on the device. This issue is caused by use of an insecure function allowing an attacker to overwrite arbitrary memory. This issue affects Juniper Networks Junos OS SRX Series and EX Series: * Junos OS versions earlier than 20.4R3-S9; * Junos OS 21.2 versions earlier than 21.2R3-S7; * Junos OS 21.3 versions earlier than 21.3R3-S5; * Junos OS 21.4 versions earlier than 21.4R3-S5; * Junos OS 22.1 versions earlier than 22.1R3-S4; * Junos OS 22.2 versions earlier than 22.2R3-S3; * Junos OS 22.3 versions earlier than 22.3R3-S2; * Junos OS 22.4 versions earlier than 22.4R2-S2, 22.4R3.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Out-of-bounds Write (CWE-787)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
      "dyn_dst_name": "CVE-2024-21591",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "An Out-of-bounds Write vulnerability in J-Web of Juniper Networks Junos OS on SRX Series and EX Series allows an unauthenticated, network-based attacker to cause a Denial of Service (DoS), or Remote Code Execution (RCE) and obtain root privileges on the device. This issue is caused by use of an insecure function allowing an attacker to overwrite arbitrary memory. This issue affects Juniper Networks Junos OS SRX Series and EX Series: * Junos OS versions earlier than 20.4R3-S9; * Junos OS 21.2 versions earlier than 21.2R3-S7; * Junos OS 21.3 versions earlier than 21.3R3-S5; * Junos OS 21.4 versions earlier than 21.4R3-S5; * Junos OS 22.1 versions earlier than 22.1R3-S4; * Junos OS 22.2 versions earlier than 22.2R3-S3; * Junos OS 22.3 versions earlier than 22.3R3-S2; * Junos OS 22.4 versions earlier than 22.4R2-S2, 22.4R3.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is Inception (G0100)\nInception is a cyber espionage group active since at least 2014. The group has targeted multiple industries and governmental entities primarily in Russia, but has also been active in the United States and throughout Europe, Asia, Africa, and the Middle East.(Citations: Unit 42 Inception November 2018, Symantec Inception Framework March 2018, Kaspersky Cloud Atlas December 2014)\n\nThe malicious software is tool LaZagne (S0349)\nLaZagne is a post-exploitation, open-source tool used to recover stored passwords on a system. It has modules for Windows, Linux, and OSX, but is mainly focused on Windows systems. LaZagne is publicly available on GitHub.(Citations: GitHub LaZagne Dec 2018)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Inception (G0100)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Inception is a cyber espionage group active since at least 2014. The group has targeted multiple industries and governmental entities primarily in Russia, but has also been active in the United States and throughout Europe, Asia, Africa, and the Middle East.(Citations: Unit 42 Inception November 2018, Symantec Inception Framework March 2018, Kaspersky Cloud Atlas December 2014)",
      "dyn_dst_name": "tool LaZagne (S0349)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "LaZagne is a post-exploitation, open-source tool used to recover stored passwords on a system. It has modules for Windows, Linux, and OSX, but is mainly focused on Windows systems. LaZagne is publicly available on GitHub.(Citations: GitHub LaZagne Dec 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is S0192 (tool Pupy)\nPupy is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).  Pupy is publicly available on GitHub. (Citations: GitHub Pupy, GitHub Pupy, GitHub Pupy)\n\nThe MITRE ATT&CK technique is Process Discovery (T1057)\nAdversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0192 (tool Pupy)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Pupy is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).  Pupy is publicly available on GitHub. (Citations: GitHub Pupy, GitHub Pupy, GitHub Pupy)",
      "dyn_dst_name": "Process Discovery (T1057)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or <code>Get-Process</code> via PowerShell. Information about processes can also be extracted from the output of Native API calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via `/proc`. On network devices, Network Device CLI commands such as `show processes` can be used to display current running processes.(Citations: US-CERT-TA18-106A, show_processes_cisco_cmd)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CAPEC-653 (Use of Known Operating System Credentials) and Use of Single-factor Authentication (CWE-308). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCAPEC-653 (Use of Known Operating System Credentials) -\nThis attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network.\n\nUse of Single-factor Authentication (CWE-308) -\nThe use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-653 (Use of Known Operating System Credentials)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network.",
      "dyn_dst_name": "Use of Single-factor Authentication (CWE-308)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-28582 and operating system fas_8700_firmware (by netapp) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-28582 -\nIt is found that there is a command injection vulnerability in the setWiFiSignalCfg interface in TOTOlink A7100RU (v7.4cu.2313_b20191024) router, which allows an attacker to execute arbitrary commands through a carefully constructed payload.\n\noperating system fas_8700_firmware (by netapp) version - -\n\"fas_8700_firmware\" is an operating system released by \"netapp\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28582",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "It is found that there is a command injection vulnerability in the setWiFiSignalCfg interface in TOTOlink A7100RU (v7.4cu.2313_b20191024) router, which allows an attacker to execute arbitrary commands through a carefully constructed payload.",
      "dyn_dst_name": "operating system fas_8700_firmware (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fas_8700_firmware\" is an operating system released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33412\nThe web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.\n\nThe CPE (Common Platform Enumeration) is operating system x11scv-q_firmware (by supermicro) version *\n\"x11scv-q_firmware\" is an operating system released by \"supermicro\". \n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33412",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.",
      "dyn_dst_name": "operating system x11scv-q_firmware (by supermicro) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"x11scv-q_firmware\" is an operating system released by \"supermicro\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20231 and operating system ios_xe (by cisco) version 17.4.2. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20231 -\nA vulnerability in the web UI of Cisco IOS XE Software could allow an authenticated, remote attacker to perform an injection attack against an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by sending crafted input to the web UI. A successful exploit could allow the attacker to execute arbitrary Cisco IOS XE Software CLI commands with level 15 privileges. Note: This vulnerability is exploitable only if the attacker obtains the credentials for a Lobby Ambassador account. This account is not configured by default.\n\noperating system ios_xe (by cisco) version 17.4.2 -\n\"ios_xe\" is an operating system released by \"cisco\".  This product version is 17.4.2",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20231",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the web UI of Cisco IOS XE Software could allow an authenticated, remote attacker to perform an injection attack against an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by sending crafted input to the web UI. A successful exploit could allow the attacker to execute arbitrary Cisco IOS XE Software CLI commands with level 15 privileges. Note: This vulnerability is exploitable only if the attacker obtains the credentials for a Lobby Ambassador account. This account is not configured by default.",
      "dyn_dst_name": "operating system ios_xe (by cisco) version 17.4.2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"ios_xe\" is an operating system released by \"cisco\".  This product version is 17.4.2",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-38555:\nAuthentication bypass vulnerability in Fujitsu network devices Si-R series and SR-M series allows a network-adjacent unauthenticated attacker to obtain, change, and/or reset configuration settings of the affected products. Affected products and versions are as follows: Si-R 30B all versions, Si-R 130B all versions, Si-R 90brin all versions, Si-R570B all versions, Si-R370B all versions, Si-R220D all versions, Si-R G100 V02.54 and earlier, Si-R G200 V02.54 and earlier, Si-R G100B V04.12 and earlier, Si-R G110B V04.12 and earlier, Si-R G200B V04.12 and earlier, Si-R G210 V20.52 and earlier, Si-R G211 V20.52 and earlier, Si-R G120 V20.52 and earlier, Si-R G121 V20.52 and earlier, and SR-M 50AP1 all versions.\n\nThe CPE (Common Platform Enumeration) is operating system si-r_30b_firmware (by fujitsu) version *:\n\"si-r_30b_firmware\" is an operating system released by \"fujitsu\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-38555",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Authentication bypass vulnerability in Fujitsu network devices Si-R series and SR-M series allows a network-adjacent unauthenticated attacker to obtain, change, and/or reset configuration settings of the affected products. Affected products and versions are as follows: Si-R 30B all versions, Si-R 130B all versions, Si-R 90brin all versions, Si-R570B all versions, Si-R370B all versions, Si-R220D all versions, Si-R G100 V02.54 and earlier, Si-R G200 V02.54 and earlier, Si-R G100B V04.12 and earlier, Si-R G110B V04.12 and earlier, Si-R G200B V04.12 and earlier, Si-R G210 V20.52 and earlier, Si-R G211 V20.52 and earlier, Si-R G120 V20.52 and earlier, Si-R G121 V20.52 and earlier, and SR-M 50AP1 all versions.",
      "dyn_dst_name": "operating system si-r_30b_firmware (by fujitsu) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"si-r_30b_firmware\" is an operating system released by \"fujitsu\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and malicious software presented below:\n\nThe MITRE ATT&CK sub-technique is Malicious Link (T1204.001):\nAn adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.\n\nThe malicious software is malware GoldFinder (S0597):\nGoldFinder is a custom HTTP tracer tool written in Go that logs the route a packet takes between a compromised network and a C2 server. It can be used to inform threat actors of potential points of discovery or logging of their actions, including C2 related to other malware. GoldFinder was discovered in early 2021 during an investigation into the SolarWinds Compromise by APT29.(Citations: MSTIC NOBELIUM Mar 2021)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Malicious Link (T1204.001)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via Exploitation for Client Execution. Links may also lead users to download files that require execution via Malicious File.",
      "dyn_dst_name": "malware GoldFinder (S0597)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "GoldFinder is a custom HTTP tracer tool written in Go that logs the route a packet takes between a compromised network and a C2 server. It can be used to inform threat actors of potential points of discovery or logging of their actions, including C2 related to other malware. GoldFinder was discovered in early 2021 during an investigation into the SolarWinds Compromise by APT29.(Citations: MSTIC NOBELIUM Mar 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33413:\nThe configuration functionality in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions through 3.17.02, allows remote authenticated users to execute arbitrary commands.\n\nThe CPE (Common Platform Enumeration) is operating system x11ssh-ln4f_firmware (by supermicro) version *:\n\"x11ssh-ln4f_firmware\" is an operating system released by \"supermicro\". \n\nYour goal is to determine if CVE-2023-33413 is related to operating system x11ssh-ln4f_firmware (by supermicro) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33413",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The configuration functionality in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions through 3.17.02, allows remote authenticated users to execute arbitrary commands.",
      "dyn_dst_name": "operating system x11ssh-ln4f_firmware (by supermicro) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"x11ssh-ln4f_firmware\" is an operating system released by \"supermicro\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29398\nTOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the File parameter in the function FUN_0041309c.\n\nThe CPE (Common Platform Enumeration) is operating system fedora (by fedoraproject) version 35\n\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 35\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29398",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the File parameter in the function FUN_0041309c.",
      "dyn_dst_name": "operating system fedora (by fedoraproject) version 35",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 35",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, OilRig (G0049) and tool ftp (S0095). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nOilRig (G0049) -\nOilRig is a suspected Iranian threat group that has targeted Middle Eastern and international victims since at least 2014. The group has targeted a variety of sectors, including financial, government, energy, chemical, and telecommunications. It appears the group carries out supply chain attacks, leveraging the trust relationship between organizations to attack their primary targets. The group works on behalf of the Iranian government based on infrastructure details that contain references to Iran, use of Iranian infrastructure, and targeting that aligns with nation-state interests.(Citations: FireEye APT34 Dec 2017, Palo Alto OilRig April 2017, ClearSky OilRig Jan 2017, Palo Alto OilRig May 2016, Palo Alto OilRig Oct 2016, Unit42 OilRig Playbook 2023, Unit 42 QUADAGENT July 2018)\n\ntool ftp (S0095) -\nftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "OilRig (G0049)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "OilRig is a suspected Iranian threat group that has targeted Middle Eastern and international victims since at least 2014. The group has targeted a variety of sectors, including financial, government, energy, chemical, and telecommunications. It appears the group carries out supply chain attacks, leveraging the trust relationship between organizations to attack their primary targets. The group works on behalf of the Iranian government based on infrastructure details that contain references to Iran, use of Iranian infrastructure, and targeting that aligns with nation-state interests.(Citations: FireEye APT34 Dec 2017, Palo Alto OilRig April 2017, ClearSky OilRig Jan 2017, Palo Alto OilRig May 2016, Palo Alto OilRig Oct 2016, Unit42 OilRig Playbook 2023, Unit 42 QUADAGENT July 2018)",
      "dyn_dst_name": "tool ftp (S0095)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "ftp is a utility commonly available with operating systems to transfer information over the File Transfer Protocol (FTP). Adversaries can use it to transfer other tools onto a system or to exfiltrate data.(Citations: Microsoft FTP, Linux FTP)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20162 and operating system sg250x-24_firmware (by cisco) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20162 -\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\noperating system sg250x-24_firmware (by cisco) version - -\n\"sg250x-24_firmware\" is an operating system released by \"cisco\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20162",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sg250x-24_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg250x-24_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and malicious software:\n\nThe MITRE ATT&CK sub-technique is Spearphishing Link (T1566.002)\nAdversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`. Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.  Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL . Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citations: CISA IDN ST05-016, Mandiant URL Obfuscation 2023, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, SecureWorks Device Code Phishing 2021, Netskope Device Code Phishing 2021, Optiv Device Code Phishing 2021)\n\nThe malicious software is malware Industroyer (S0604)\nIndustroyer is a sophisticated malware framework designed to cause an impact to the working processes of Industrial Control Systems (ICS), specifically components used in electrical substations. Industroyer was used in the attacks on the Ukrainian power grid in December 2016. This is the first publicly known malware specifically designed to target and impact operations in the electric grid.(Citations: ESET Industroyer, Dragos Crashoverride 2017, Dragos Crashoverride 2018)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Spearphishing Link (T1566.002)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`. Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.  Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL . Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citations: CISA IDN ST05-016, Mandiant URL Obfuscation 2023, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, SecureWorks Device Code Phishing 2021, Netskope Device Code Phishing 2021, Optiv Device Code Phishing 2021)",
      "dyn_dst_name": "malware Industroyer (S0604)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Industroyer is a sophisticated malware framework designed to cause an impact to the working processes of Industrial Control Systems (ICS), specifically components used in electrical substations. Industroyer was used in the attacks on the Ukrainian power grid in December 2016. This is the first publicly known malware specifically designed to target and impact operations in the electric grid.(Citations: ESET Industroyer, Dragos Crashoverride 2017, Dragos Crashoverride 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-1440\nCommand Injection vulnerability in git-interface@2.1.1 in GitHub repository yarkeev/git-interface prior to 2.1.2. If both are provided by user input, then the use of a `--upload-pack` command-line argument feature of git is also supported for `git clone`, which would then allow for any operating system command to be spawned by the attacker.\n\nThe CPE (Common Platform Enumeration) is operating system windows_10 (by microsoft) version 1607\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-1440",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Command Injection vulnerability in git-interface@2.1.1 in GitHub repository yarkeev/git-interface prior to 2.1.2. If both are provided by user input, then the use of a `--upload-pack` command-line argument feature of git is also supported for `git clone`, which would then allow for any operating system command to be spawned by the attacker.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version 1607",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25433:\nTenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the urls parameter in the saveparentcontrolinfo function.\n\nThe CPE (Common Platform Enumeration) is operating system windows_10 (by microsoft) version 1607:\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607\n\nYour goal is to determine if CVE-2022-25433 is related to operating system windows_10 (by microsoft) version 1607, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25433",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the urls parameter in the saveparentcontrolinfo function.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version 1607",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Improper Control of Generation of Code ('Code Injection') (CWE-94):\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-49000:\nAn issue in ArtistScope ArtisBrowser v.34.1.5 and before allows an attacker to bypass intended access restrictions via interaction with the com.artis.browser.IntentReceiverActivity component.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Control of Generation of Code ('Code Injection') (CWE-94)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "dyn_dst_name": "CVE-2023-49000",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "An issue in ArtistScope ArtisBrowser v.34.1.5 and before allows an attacker to bypass intended access restrictions via interaction with the com.artis.browser.IntentReceiverActivity component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-29076 and application autocad (by autodesk) version *. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-29076 -\nA maliciously crafted MODEL, SLDASM, SAT or CATPART file when parsed through Autodesk AutoCAD 2024 and 2023 could cause memory corruption vulnerability. This vulnerability, along with other vulnerabilities, could lead to code execution in the current process.\n\napplication autocad (by autodesk) version * -\n\"autocad\" is an application released by \"autodesk\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-29076",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A maliciously crafted MODEL, SLDASM, SAT or CATPART file when parsed through Autodesk AutoCAD 2024 and 2023 could cause memory corruption vulnerability. This vulnerability, along with other vulnerabilities, could lead to code execution in the current process.",
      "dyn_dst_name": "application autocad (by autodesk) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"autocad\" is an application released by \"autodesk\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Saint Bot (S1018)\nSaint Bot is a .NET downloader that has been used by Ember Bear since at least March 2021.(Citations: Malwarebytes Saint Bot April 2021, Palo Alto Unit 42 OutSteel SaintBot February 2022 )\n\nThe MITRE ATT&CK sub-technique is Safe Mode Boot (T1562.009)\nAdversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot. Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings. Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.(Citations: Microsoft Safe Mode, Sophos Snatch Ransomware 2019, Microsoft bcdedit 2021, Sophos Snatch Ransomware 2019, CyberArk Labs Safe Mode 2016, Cybereason Nocturnus MedusaLocker 2020, BleepingComputer REvil 2021)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Saint Bot (S1018)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Saint Bot is a .NET downloader that has been used by Ember Bear since at least March 2021.(Citations: Malwarebytes Saint Bot April 2021, Palo Alto Unit 42 OutSteel SaintBot February 2022 )",
      "dyn_dst_name": "Safe Mode Boot (T1562.009)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot. Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings. Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.(Citations: Microsoft Safe Mode, Sophos Snatch Ransomware 2019, Microsoft bcdedit 2021, Sophos Snatch Ransomware 2019, CyberArk Labs Safe Mode 2016, Cybereason Nocturnus MedusaLocker 2020, BleepingComputer REvil 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities (CAPEC-682)\nWhen a vulnerability is found in a device that has no means of patching, the attack may be used against an entire class of devices. Devices from the same manufacturer often use similar or identical firmware, which could lead to widespread attacks. Devices of this nature are prime targets for botnet attacks. Consumer devices are frequently targeted for this attack due to the complexities of updating firmware once manufacturers no longer have physical access to a device. When exploiting a found vulnerability, adversaries often try to gain root access on a device. This allows them to use the device for any malicious purpose. Some example exploits are stealing device data, using the device for a ransomware attack, or recruiting the device for a botnet.\n\nThe CWE (Common Weakness Enumeration) is Improper Authentication (CWE-287)\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities (CAPEC-682)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "When a vulnerability is found in a device that has no means of patching, the attack may be used against an entire class of devices. Devices from the same manufacturer often use similar or identical firmware, which could lead to widespread attacks. Devices of this nature are prime targets for botnet attacks. Consumer devices are frequently targeted for this attack due to the complexities of updating firmware once manufacturers no longer have physical access to a device. When exploiting a found vulnerability, adversaries often try to gain root access on a device. This allows them to use the device for any malicious purpose. Some example exploits are stealing device data, using the device for a ransomware attack, or recruiting the device for a botnet.",
      "dyn_dst_name": "Improper Authentication (CWE-287)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and CAPEC (Common Attack Pattern Enumeration and Classification) presented below:\n\nThe MITRE ATT&CK sub-technique is Spearphishing Attachment (T1566.001):\nAdversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.(Citations: Unit 42 DarkHydrus July 2018)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Spear Phishing (CAPEC-163):\nAn adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Spearphishing Attachment (T1566.001)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon User Execution to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.(Citations: Unit 42 DarkHydrus July 2018)",
      "dyn_dst_name": "Spear Phishing (CAPEC-163)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, operating system sd845_firmware (by qualcomm) version - and CVE-2022-28583. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\noperating system sd845_firmware (by qualcomm) version - -\n\"sd845_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nCVE-2022-28583 -\nIt is found that there is a command injection vulnerability in the setWiFiWpsCfg interface in TOTOlink A7100RU (v7.4cu.2313_b20191024) router, which allows an attacker to execute arbitrary commands through a carefully constructed payload.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system sd845_firmware (by qualcomm) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"sd845_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_dst_name": "CVE-2022-28583",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "It is found that there is a command injection vulnerability in the setWiFiWpsCfg interface in TOTOlink A7100RU (v7.4cu.2313_b20191024) router, which allows an attacker to execute arbitrary commands through a carefully constructed payload.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-5176 and operating system debian_linux (by debian) version 12.0. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-5176 -\nMemory safety bugs present in Firefox 117, Firefox ESR 115.2, and Thunderbird 115.2. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 118, Firefox ESR < 115.3, and Thunderbird < 115.3.\n\noperating system debian_linux (by debian) version 12.0 -\n\"debian_linux\" is an operating system released by \"debian\".  This product version is 12.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-5176",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory safety bugs present in Firefox 117, Firefox ESR 115.2, and Thunderbird 115.2. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 118, Firefox ESR < 115.3, and Thunderbird < 115.3.",
      "dyn_dst_name": "operating system debian_linux (by debian) version 12.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"debian_linux\" is an operating system released by \"debian\".  This product version is 12.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is S0561 (malware GuLoader):\nGuLoader is a file downloader that has been used since at least December 2019 to distribute a variety of remote administration tool (RAT) malware, including NETWIRE, Agent Tesla, NanoCore, FormBook, and Parallax RAT.(Citations: Unit 42 NETWIRE April 2020, Medium Eli Salem GuLoader April 2021)\n\nThe MITRE ATT&CK technique is T1105 (Ingress Tool Transfer):\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0561 (malware GuLoader)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "GuLoader is a file downloader that has been used since at least December 2019 to distribute a variety of remote administration tool (RAT) malware, including NETWIRE, Agent Tesla, NanoCore, FormBook, and Parallax RAT.(Citations: Unit 42 NETWIRE April 2020, Medium Eli Salem GuLoader April 2021)",
      "dyn_dst_name": "T1105 (Ingress Tool Transfer)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Cardinal RAT (S0348) and T1113 (Screen Capture). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Cardinal RAT (S0348) -\nCardinal RAT is a potentially low volume remote access trojan (RAT) observed since December 2015. Cardinal RAT is notable for its unique utilization of uncompiled C# source code and the Microsoft Windows built-in csc.exe compiler.(Citations: PaloAlto CardinalRat Apr 2017)\n\nT1113 (Screen Capture) -\nAdversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Cardinal RAT (S0348)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Cardinal RAT is a potentially low volume remote access trojan (RAT) observed since December 2015. Cardinal RAT is notable for its unique utilization of uncompiled C# source code and the Microsoft Windows built-in csc.exe compiler.(Citations: PaloAlto CardinalRat Apr 2017)",
      "dyn_dst_name": "T1113 (Screen Capture)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25459\nTenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the S1 parameter in the SetSysTimeCfg function.\n\nThe CPE (Common Platform Enumeration) is operating system qca6574au_firmware (by qualcomm) version -\n\"qca6574au_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25459",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC6 v15.03.05.09_multi was discovered to contain a stack overflow via the S1 parameter in the SetSysTimeCfg function.",
      "dyn_dst_name": "operating system qca6574au_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6574au_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK group and malicious software presented below:\n\nThe MITRE ATT&CK group is Naikon (G0019):\nNaikon is assessed to be a state-sponsored cyber espionage group attributed to the Chinese People\u2019s Liberation Army\u2019s (PLA) Chengdu Military Region Second Technical Reconnaissance Bureau (Military Unit Cover Designator 78020). Active since at least 2010, Naikon has primarily conducted operations against government, military, and civil organizations in Southeast Asia, as well as against international bodies such as the United Nations Development Programme (UNDP) and the Association of Southeast Asian Nations (ASEAN). While Naikon shares some characteristics with APT30, the two groups do not appear to be exact matches.(Citations: CameraShy, CameraShy, Baumgartner Naikon 2015, Baumgartner Golovkin Naikon 2015)\n\nThe malicious software is tool PsExec (S0029):\nPsExec is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.(Citations: Russinovich Sysinternals, SANS PsExec)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Naikon (G0019)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Naikon is assessed to be a state-sponsored cyber espionage group attributed to the Chinese People\u2019s Liberation Army\u2019s (PLA) Chengdu Military Region Second Technical Reconnaissance Bureau (Military Unit Cover Designator 78020). Active since at least 2010, Naikon has primarily conducted operations against government, military, and civil organizations in Southeast Asia, as well as against international bodies such as the United Nations Development Programme (UNDP) and the Association of Southeast Asian Nations (ASEAN). While Naikon shares some characteristics with APT30, the two groups do not appear to be exact matches.(Citations: CameraShy, CameraShy, Baumgartner Naikon 2015, Baumgartner Golovkin Naikon 2015)",
      "dyn_dst_name": "tool PsExec (S0029)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "PsExec is a free Microsoft tool that can be used to execute a program on another computer. It is used by IT administrators and attackers.(Citations: Russinovich Sysinternals, SANS PsExec)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Small Sieve (S1035):\nSmall Sieve is a Telegram Bot API-based Python backdoor that has been distributed using a Nullsoft Scriptable Install System (NSIS) Installer; it has been used by MuddyWater since at least January 2022. Security researchers have also noted Small Sieve's use by UNC3313, which may be associated with MuddyWater.(Citations: DHS CISA AA22-055A MuddyWater February 2022, NCSC GCHQ Small Sieve Jan 2022, Mandiant UNC3313 Feb 2022)\n\nThe MITRE ATT&CK technique is Execution Guardrails (T1480):\nAdversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses. Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.(Citations: FireEye Kevin Mandia Guardrails, FireEye Outlook Dec 2019)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Small Sieve (S1035)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Small Sieve is a Telegram Bot API-based Python backdoor that has been distributed using a Nullsoft Scriptable Install System (NSIS) Installer; it has been used by MuddyWater since at least January 2022. Security researchers have also noted Small Sieve's use by UNC3313, which may be associated with MuddyWater.(Citations: DHS CISA AA22-055A MuddyWater February 2022, NCSC GCHQ Small Sieve Jan 2022, Mandiant UNC3313 Feb 2022)",
      "dyn_dst_name": "Execution Guardrails (T1480)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses. Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.(Citations: FireEye Kevin Mandia Guardrails, FireEye Outlook Dec 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is S0691 (malware Neoichor)\nNeoichor is C2 malware used by Ke3chang since at least 2019; similar malware families used by the group include Leeson and Numbldea.(Citations: Microsoft NICKEL December 2021)\n\nThe MITRE ATT&CK sub-technique is Internet Connection Discovery (T1016.001)\nAdversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites. Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0691 (malware Neoichor)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Neoichor is C2 malware used by Ke3chang since at least 2019; similar malware families used by the group include Leeson and Numbldea.(Citations: Microsoft NICKEL December 2021)",
      "dyn_dst_name": "Internet Connection Discovery (T1016.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using Ping, <code>tracert</code>, and GET requests to websites. Adversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Deserialization of Untrusted Data (CWE-502) and CVE-2023-32242. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nDeserialization of Untrusted Data (CWE-502) -\nThe product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\n\nCVE-2023-32242 -\nDeserialization of Untrusted Data vulnerability in xtemos WoodMart - Multipurpose WooCommerce Theme.This issue affects WoodMart - Multipurpose WooCommerce Theme: from n/a through 1.0.36.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Deserialization of Untrusted Data (CWE-502)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
      "dyn_dst_name": "CVE-2023-32242",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Deserialization of Untrusted Data vulnerability in xtemos WoodMart - Multipurpose WooCommerce Theme.This issue affects WoodMart - Multipurpose WooCommerce Theme: from n/a through 1.0.36.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-6885 and Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-6885 -\nA vulnerability was found in Tongda OA 2017 up to 11.10. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file general/vote/manage/delete.php. The manipulation of the argument DELETE_STR leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-248245 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.\n\nImproper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89) -\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-6885",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability was found in Tongda OA 2017 up to 11.10. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file general/vote/manage/delete.php. The manipulation of the argument DELETE_STR leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-248245 was assigned to this vulnerability. NOTE: The vendor was contacted early about this disclosure but did not respond in any way.",
      "dyn_dst_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30920:\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the Edit_BasicSSID parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system h610c_firmware (by netapp) version -:\n\"h610c_firmware\" is an operating system released by \"netapp\".  This product version is -\n\nYour goal is to determine if CVE-2022-30920 is related to operating system h610c_firmware (by netapp) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30920",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the Edit_BasicSSID parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system h610c_firmware (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"h610c_firmware\" is an operating system released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique and their descriptions:\n\nThe MITRE ATT&CK tactic is credential-access (TA0006):\nThe adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.\n\nThe MITRE ATT&CK sub-technique is T1556.005 (Reversible Encryption):\nAn adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it. If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components: 1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code> 2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code> 3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>) 4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>) With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value. An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.(Citations: store_pwd_rev_enc, how_pwd_rev_enc_1, how_pwd_rev_enc_2, dump_pwd_dcsync)\n\nYour goal is to determine if credential-access (TA0006) is related to T1556.005 (Reversible Encryption), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "credential-access (TA0006)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
      "dyn_dst_name": "T1556.005 (Reversible Encryption)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The <code>AllowReversiblePasswordEncryption</code> property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it. If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components: 1. Encrypted password (<code>G$RADIUSCHAP</code>) from the Active Directory user-structure <code>userParameters</code> 2. 16 byte randomly-generated value (<code>G$RADIUSCHAPKEY</code>) also from <code>userParameters</code> 3. Global LSA secret (<code>G$MSRADIUSCHAPKEY</code>) 4. Static key hardcoded in the Remote Access Subauthentication DLL (<code>RASSFM.DLL</code>) With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value. An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to <code>Set-ADUser -AllowReversiblePasswordEncryption $true</code>.(Citations: store_pwd_rev_enc, how_pwd_rev_enc_1, how_pwd_rev_enc_2, dump_pwd_dcsync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30136\nWindows Network File System Remote Code Execution Vulnerability\n\nThe CPE (Common Platform Enumeration) is operating system debian_linux (by debian) version 9.0\n\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30136",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Windows Network File System Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system debian_linux (by debian) version 9.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Using Leading 'Ghost' Character Sequences to Bypass Input Filters (CAPEC-3) and CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nUsing Leading 'Ghost' Character Sequences to Bypass Input Filters (CAPEC-3) -\nSome APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.\n\nCWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')) -\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters (CAPEC-3)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
      "dyn_dst_name": "CWE-74 (Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection'))",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, G0032 (Lazarus Group) and malware ECCENTRICBANDWAGON (S0593). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nG0032 (Lazarus Group) -\nLazarus Group is a North Korean state-sponsored cyber threat group that has been attributed to the Reconnaissance General Bureau. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by Lazarus Group correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain. North Korean group definitions are known to have significant overlap, and some security researchers report all North Korean state-sponsored cyber activity under the name Lazarus Group instead of tracking clusters or subgroups, such as Andariel, APT37, APT38, and Kimsuky.(Citations: US-CERT HIDDEN COBRA June 2017, Treasury North Korean Cyber Groups September 2019, Novetta Blockbuster)\n\nmalware ECCENTRICBANDWAGON (S0593) -\nECCENTRICBANDWAGON is a remote access Trojan (RAT) used by North Korean cyber actors that was first identified in August 2020. It is a reconnaissance tool--with keylogging and screen capture functionality--used for information gathering on compromised systems.(Citations: CISA EB Aug 2020)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "G0032 (Lazarus Group)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Lazarus Group is a North Korean state-sponsored cyber threat group that has been attributed to the Reconnaissance General Bureau. The group has been active since at least 2009 and was reportedly responsible for the November 2014 destructive wiper attack against Sony Pictures Entertainment as part of a campaign named Operation Blockbuster by Novetta. Malware used by Lazarus Group correlates to other reported campaigns, including Operation Flame, Operation 1Mission, Operation Troy, DarkSeoul, and Ten Days of Rain. North Korean group definitions are known to have significant overlap, and some security researchers report all North Korean state-sponsored cyber activity under the name Lazarus Group instead of tracking clusters or subgroups, such as Andariel, APT37, APT38, and Kimsuky.(Citations: US-CERT HIDDEN COBRA June 2017, Treasury North Korean Cyber Groups September 2019, Novetta Blockbuster)",
      "dyn_dst_name": "malware ECCENTRICBANDWAGON (S0593)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "ECCENTRICBANDWAGON is a remote access Trojan (RAT) used by North Korean cyber actors that was first identified in August 2020. It is a reconnaissance tool--with keylogging and screen capture functionality--used for information gathering on compromised systems.(Citations: CISA EB Aug 2020)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Out-of-bounds Write (CWE-787):\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-25564:\nGSS-NTLMSSP is a mechglue plugin for the GSSAPI library that implements NTLM authentication. Prior to version 1.2.0, memory corruption can be triggered when decoding UTF16 strings. The variable `outlen` was not initialized and could cause writing a zero to an arbitrary place in memory if `ntlm_str_convert()` were to fail, which would leave `outlen` uninitialized. This can lead to a denial of service if the write hits unmapped memory or randomly corrupts a byte in the application memory space. This vulnerability can trigger an out-of-bounds write, leading to memory corruption. This vulnerability can be triggered via the main `gss_accept_sec_context` entry point. This issue is fixed in version 1.2.0.\n\nYour goal is to determine if Out-of-bounds Write (CWE-787) is related to CVE-2023-25564, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Out-of-bounds Write (CWE-787)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
      "dyn_dst_name": "CVE-2023-25564",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "GSS-NTLMSSP is a mechglue plugin for the GSSAPI library that implements NTLM authentication. Prior to version 1.2.0, memory corruption can be triggered when decoding UTF16 strings. The variable `outlen` was not initialized and could cause writing a zero to an arbitrary place in memory if `ntlm_str_convert()` were to fail, which would leave `outlen` uninitialized. This can lead to a denial of service if the write hits unmapped memory or randomly corrupts a byte in the application memory space. This vulnerability can trigger an out-of-bounds write, leading to memory corruption. This vulnerability can be triggered via the main `gss_accept_sec_context` entry point. This issue is fixed in version 1.2.0.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, tool Forfiles (S0193) and Python (T1059.006). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\ntool Forfiles (S0193) -\nForfiles is a Windows utility commonly used in batch jobs to execute commands on one or more selected files or directories (ex: list all directories in a drive, read the first line of all files created yesterday, etc.). Forfiles can be executed from either the command line, Run window, or batch files/scripts. (Citations: Microsoft Forfiles Aug 2016)\n\nPython (T1059.006) -\nAdversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.(Citations: Zscaler APT31 Covid-19 October 2020)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Forfiles (S0193)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Forfiles is a Windows utility commonly used in batch jobs to execute commands on one or more selected files or directories (ex: list all directories in a drive, read the first line of all files created yesterday, etc.). Forfiles can be executed from either the command line, Run window, or batch files/scripts. (Citations: Microsoft Forfiles Aug 2016)",
      "dyn_dst_name": "Python (T1059.006)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables. Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.(Citations: Zscaler APT31 Covid-19 October 2020)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is XQuery Injection (CAPEC-84)\nThis attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.\n\nThe CWE (Common Weakness Enumeration) is Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)\nThe web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "XQuery Injection (CAPEC-84)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
      "dyn_dst_name": "Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK group and malicious software presented below:\n\nThe MITRE ATT&CK group is APT1 (G0006):\nAPT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People\u2019s Liberation Army (PLA) General Staff Department\u2019s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. (Citations: Mandiant APT1)\n\nThe malicious software is S0006 (tool pwdump):\npwdump is a credential dumper. (Citations: Wikipedia pwdump)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "APT1 (G0006)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "APT1 is a Chinese threat group that has been attributed to the 2nd Bureau of the People\u2019s Liberation Army (PLA) General Staff Department\u2019s (GSD) 3rd Department, commonly known by its Military Unit Cover Designator (MUCD) as Unit 61398. (Citations: Mandiant APT1)",
      "dyn_dst_name": "S0006 (tool pwdump)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "pwdump is a credential dumper. (Citations: Wikipedia pwdump)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Template Injection (T1221) and Hiding Malicious Data or Code within Files (CAPEC-636). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nTemplate Injection (T1221) -\nAdversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. Adversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload. This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citations: Microsoft Open XML July 2017, SANS Brian Wiltse Template Injection, Redxorblue Remote Template Injection, MalwareBytes Template Injection OCT 2017, Proofpoint RTF Injection, Ciberseguridad Decoding malicious RTF files, Anomali Template Injection MAR 2018, Talos Template Injection July 2017, ryhanson phishery SEPT 2016)\n\nHiding Malicious Data or Code within Files (CAPEC-636) -\nFiles on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Template Injection (T1221)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft\u2019s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. Adversaries may also modify the <code>*\\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload. This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citations: Microsoft Open XML July 2017, SANS Brian Wiltse Template Injection, Redxorblue Remote Template Injection, MalwareBytes Template Injection OCT 2017, Proofpoint RTF Injection, Ciberseguridad Decoding malicious RTF files, Anomali Template Injection MAR 2018, Talos Template Injection July 2017, ryhanson phishery SEPT 2016)",
      "dyn_dst_name": "Hiding Malicious Data or Code within Files (CAPEC-636)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Out-of-bounds Read (CWE-125):\nThe product reads data past the end, or before the beginning, of the intended buffer.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-39356:\nFreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. In affected versions a missing offset validation may lead to an Out Of Bound Read in the function `gdi_multi_opaque_rect`. In particular there is no code to validate if the value `multi_opaque_rect->numRectangles` is less than 45. Looping through `multi_opaque_rect->`numRectangles without proper boundary checks can lead to Out-of-Bounds Read errors which will likely lead to a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\nYour goal is to determine if Out-of-bounds Read (CWE-125) is related to CVE-2023-39356, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Out-of-bounds Read (CWE-125)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
      "dyn_dst_name": "CVE-2023-39356",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. In affected versions a missing offset validation may lead to an Out Of Bound Read in the function `gdi_multi_opaque_rect`. In particular there is no code to validate if the value `multi_opaque_rect->numRectangles` is less than 45. Looping through `multi_opaque_rect->`numRectangles without proper boundary checks can lead to Out-of-Bounds Read errors which will likely lead to a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Using Escaped Slashes in Alternate Encoding (CAPEC-78) and Improper Neutralization (CWE-707). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nUsing Escaped Slashes in Alternate Encoding (CAPEC-78) -\nThis attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.\n\nImproper Neutralization (CWE-707) -\nThe product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Using Escaped Slashes in Alternate Encoding (CAPEC-78)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
      "dyn_dst_name": "Improper Neutralization (CWE-707)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77):\nThe product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-26296:\nPrevious versions of HP Device Manager (prior to HPDM 5.0.10) could potentially allow command injection and/or elevation of privileges.\n\nYour goal is to determine if Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77) is related to CVE-2023-26296, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection') (CWE-77)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-26296",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Previous versions of HP Device Manager (prior to HPDM 5.0.10) could potentially allow command injection and/or elevation of privileges.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is tool Imminent Monitor (S0434):\nImminent Monitor was a commodity remote access tool (RAT) offered for sale from 2012 until 2019, when an operation was conducted to take down the Imminent Monitor infrastructure. Various cracked versions and variations of this RAT are still in circulation.(Citations: Imminent Unit42 Dec2019)\n\nThe MITRE ATT&CK technique is Multi-Factor Authentication Interception (T1111):\nAdversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.  Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).  Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citations: Mandiant M Trends 2011, GCN RSA June 2011, Okta Scatter Swine 2022)\n\nYour goal is to determine if tool Imminent Monitor (S0434) is related to Multi-Factor Authentication Interception (T1111), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Imminent Monitor (S0434)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Imminent Monitor was a commodity remote access tool (RAT) offered for sale from 2012 until 2019, when an operation was conducted to take down the Imminent Monitor infrastructure. Various cracked versions and variations of this RAT are still in circulation.(Citations: Imminent Unit42 Dec2019)",
      "dyn_dst_name": "Multi-Factor Authentication Interception (T1111)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token.  Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes).  Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users\u2019 phones.(Citations: Mandiant M Trends 2011, GCN RSA June 2011, Okta Scatter Swine 2022)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78)\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-52310\nPaddlePaddle before 2.6.0 has a command injection in get_online_pass_interval. This resulted in the ability to execute arbitrary commands on the operating system.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (CWE-78)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-52310",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "PaddlePaddle before 2.6.0 has a command injection in get_online_pass_interval. This resulted in the ability to execute arbitrary commands on the operating system.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, operating system nvrmini2_firmware (by nuuo) version * and CVE-2022-27569. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\noperating system nvrmini2_firmware (by nuuo) version * -\n\"nvrmini2_firmware\" is an operating system released by \"nuuo\". \n\nCVE-2022-27569 -\nHeap-based buffer overflow vulnerability in parser_infe function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system nvrmini2_firmware (by nuuo) version *",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"nvrmini2_firmware\" is an operating system released by \"nuuo\". ",
      "dyn_dst_name": "CVE-2022-27569",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Heap-based buffer overflow vulnerability in parser_infe function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Configuration/Environment Manipulation (CAPEC-176):\nAn attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\n\nThe CWE (Common Weakness Enumeration) is Modules with Circular Dependencies (CWE-1047):\nThe product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.\n\nYour goal is to determine if Configuration/Environment Manipulation (CAPEC-176) is related to Modules with Circular Dependencies (CWE-1047), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Configuration/Environment Manipulation (CAPEC-176)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",
      "dyn_dst_name": "Modules with Circular Dependencies (CWE-1047)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is tool ngrok (S0508):\nngrok is a legitimate reverse proxy tool that can create a secure tunnel to servers located behind firewalls or on local machines that do not have a public IP. ngrok has been leveraged by threat actors in several campaigns including use for lateral movement and data exfiltration.(Citations: Zdnet Ngrok September 2018, FireEye Maze May 2020, Cyware Ngrok May 2019, MalwareBytes LazyScripter Feb 2021)\n\nThe MITRE ATT&CK technique is Web Service (T1102):\nAdversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).\n\nYour goal is to determine if tool ngrok (S0508) is related to Web Service (T1102), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool ngrok (S0508)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ngrok is a legitimate reverse proxy tool that can create a secure tunnel to servers located behind firewalls or on local machines that do not have a public IP. ngrok has been leveraged by threat actors in several campaigns including use for lateral movement and data exfiltration.(Citations: Zdnet Ngrok September 2018, FireEye Maze May 2020, Cyware Ngrok May 2019, MalwareBytes LazyScripter Feb 2021)",
      "dyn_dst_name": "Web Service (T1102)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware OceanSalt (S0346):\nOceanSalt is a Trojan that was used in a campaign targeting victims in South Korea, United States, and Canada. OceanSalt shares code similarity with SpyNote RAT, which has been linked to APT1.(Citations: McAfee Oceansalt Oct 2018)\n\nThe MITRE ATT&CK sub-technique is Pluggable Authentication Modules (T1556.003):\nAdversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>. Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citations: Apple PAM, Man Pam_Unix, Red Hat PAM, PAM Backdoor, PAM Creds, Apple PAM)\n\nYour goal is to determine if malware OceanSalt (S0346) is related to Pluggable Authentication Modules (T1556.003), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware OceanSalt (S0346)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "OceanSalt is a Trojan that was used in a campaign targeting victims in South Korea, United States, and Canada. OceanSalt shares code similarity with SpyNote RAT, which has been linked to APT1.(Citations: McAfee Oceansalt Oct 2018)",
      "dyn_dst_name": "Pluggable Authentication Modules (T1556.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <code>pam_unix.so</code>, which retrieves, sets, and verifies account authentication information in <code>/etc/passwd</code> and <code>/etc/shadow</code>. Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <code>pam_unix.so</code>, can be patched to accept arbitrary adversary supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citations: Apple PAM, Man Pam_Unix, Red Hat PAM, PAM Backdoor, PAM Creds, Apple PAM)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-6231 and operating system lbp237dw_firmware (by canon) version *. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-6231 -\nBuffer overflow in WSD probe request process of Office Multifunction Printers and Laser Printers(*) which may allow an attacker on the network segment to trigger the affected product being unresponsive or to execute arbitrary code.*: Satera LBP670C Series/Satera MF750C Series firmware v03.07 and earlier sold in Japan. Color imageCLASS LBP674C/Color imageCLASS X LBP1333C/Color imageCLASS MF750C Series/Color imageCLASS X MF1333C Series firmware v03.07 and earlier sold in US. i-SENSYS LBP673Cdw/C1333P/i-SENSYS MF750C Series/C1333i Series firmware v03.07 and earlier sold in Europe.\n\noperating system lbp237dw_firmware (by canon) version * -\n\"lbp237dw_firmware\" is an operating system released by \"canon\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-6231",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Buffer overflow in WSD probe request process of Office Multifunction Printers and Laser Printers(*) which may allow an attacker on the network segment to trigger the affected product being unresponsive or to execute arbitrary code.*: Satera LBP670C Series/Satera MF750C Series firmware v03.07 and earlier sold in Japan. Color imageCLASS LBP674C/Color imageCLASS X LBP1333C/Color imageCLASS MF750C Series/Color imageCLASS X MF1333C Series firmware v03.07 and earlier sold in US. i-SENSYS LBP673Cdw/C1333P/i-SENSYS MF750C Series/C1333i Series firmware v03.07 and earlier sold in Europe.",
      "dyn_dst_name": "operating system lbp237dw_firmware (by canon) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"lbp237dw_firmware\" is an operating system released by \"canon\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30924:\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system msm8917_firmware (by qualcomm) version -:\n\"msm8917_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nYour goal is to determine if CVE-2022-30924 is related to operating system msm8917_firmware (by qualcomm) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30924",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system msm8917_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"msm8917_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, tool Net (S0039) and XPC Services (T1559.003). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\ntool Net (S0039) -\nThe Net utility is a component of the Windows operating system. It is used in command-line operations for control of users, groups, services, and network connections.  Net has a great deal of functionality,  much of which is useful for an adversary, such as gathering system and network information for Discovery, moving laterally through SMB/Windows Admin Shares using <code>net use</code> commands, and interacting with services. The net1.exe utility is executed for certain functionality when net.exe is run and can be used directly in commands such as <code>net1 user</code>.(Citations: Microsoft Net Utility, Savill 1999)\n\nXPC Services (T1559.003) -\nAdversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service <code>C API</code> or the high level <code>NSXPCConnection API</code> in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon. Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler. This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct Exploitation for Privilege Escalation.(Citations: creatingXPCservices, Designing Daemons Apple Dev, CVMServer Vuln, Learn XPC Exploitation)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Net (S0039)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "The Net utility is a component of the Windows operating system. It is used in command-line operations for control of users, groups, services, and network connections.  Net has a great deal of functionality,  much of which is useful for an adversary, such as gathering system and network information for Discovery, moving laterally through SMB/Windows Admin Shares using <code>net use</code> commands, and interacting with services. The net1.exe utility is executed for certain functionality when net.exe is run and can be used directly in commands such as <code>net1 user</code>.(Citations: Microsoft Net Utility, Savill 1999)",
      "dyn_dst_name": "XPC Services (T1559.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries can provide malicious content to an XPC service daemon for local code execution. macOS uses XPC services for basic inter-process communication between various processes, such as between the XPC Service daemon and third-party application privileged helper tools. Applications can send messages to the XPC Service daemon, which runs as root, using the low-level XPC Service <code>C API</code> or the high level <code>NSXPCConnection API</code> in order to handle tasks that require elevated privileges (such as network connections). Applications are responsible for providing the protocol definition which serves as a blueprint of the XPC services. Developers typically use XPC Services to provide applications stability and privilege separation between the application client and the daemon. Adversaries can abuse XPC services to execute malicious content. Requests for malicious execution can be passed through the application's XPC Services handler. This may also include identifying and abusing improper XPC client validation and/or poor sanitization of input parameters to conduct Exploitation for Privilege Escalation.(Citations: creatingXPCservices, Designing Daemons Apple Dev, CVMServer Vuln, Learn XPC Exploitation)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Metamorfo (S0455)\nMetamorfo is a Latin-American banking trojan operated by a Brazilian cybercrime group that has been active since at least April 2018. The group focuses on targeting banks and cryptocurrency services in Brazil and Mexico.(Citations: Medium Metamorfo Apr 2020, ESET Casbaneiro Oct 2019)\n\nThe MITRE ATT&CK technique is Automated Collection (T1119)\nOnce established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.(Citations: Mandiant UNC3944 SMS Phishing 2023)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Metamorfo (S0455)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Metamorfo is a Latin-American banking trojan operated by a Brazilian cybercrime group that has been active since at least April 2018. The group focuses on targeting banks and cryptocurrency services in Brazil and Mexico.(Citations: Medium Metamorfo Apr 2020, ESET Casbaneiro Oct 2019)",
      "dyn_dst_name": "Automated Collection (T1119)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.(Citations: Mandiant UNC3944 SMS Phishing 2023)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-49091 and application cosmos_server (by cosmos-cloud) version 0.9.8. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-49091 -\nCosmos provides users the ability self-host a home server by acting as a secure gateway to your application, as well as a server manager. Cosmos-server is vulnerable due to to the authorization header used for user login remaining valid and not expiring after log out. This vulnerability allows an attacker to use the token to gain unauthorized access to the application/system even after the user has logged out. This issue has been patched in version 0.13.0.\n\napplication cosmos_server (by cosmos-cloud) version 0.9.8 -\n\"cosmos_server\" is an application released by \"cosmos-cloud\".  This product version is 0.9.8",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-49091",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Cosmos provides users the ability self-host a home server by acting as a secure gateway to your application, as well as a server manager. Cosmos-server is vulnerable due to to the authorization header used for user login remaining valid and not expiring after log out. This vulnerability allows an attacker to use the token to gain unauthorized access to the application/system even after the user has logged out. This issue has been patched in version 0.13.0.",
      "dyn_dst_name": "application cosmos_server (by cosmos-cloud) version 0.9.8",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"cosmos_server\" is an application released by \"cosmos-cloud\".  This product version is 0.9.8",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CWE-94 (Improper Control of Generation of Code ('Code Injection')) and CVE-2023-32728. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCWE-94 (Improper Control of Generation of Code ('Code Injection')) -\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nCVE-2023-32728 -\nThe Zabbix Agent 2 item key smart.disk.get does not sanitize its parameters before passing them to a shell command resulting possible vulnerability for remote code execution.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-94 (Improper Control of Generation of Code ('Code Injection'))",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "dyn_dst_name": "CVE-2023-32728",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "The Zabbix Agent 2 item key smart.disk.get does not sanitize its parameters before passing them to a shell command resulting possible vulnerability for remote code execution.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, tool Tasklist (S0057) and LSA Secrets (T1003.004). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\ntool Tasklist (S0057) -\nThe Tasklist utility displays a list of applications and services with their Process IDs (PID) for all tasks running on either a local or a remote computer. It is packaged with Windows operating systems and can be executed from the command-line interface. (Citations: Microsoft Tasklist)\n\nLSA Secrets (T1003.004) -\nAdversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory. Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.(Citations: Passcape LSA Secrets, Microsoft AD Admin Tier Model, Tilbury Windows Credentials, ired Dumping LSA Secrets, ired Dumping LSA Secrets)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Tasklist (S0057)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "The Tasklist utility displays a list of applications and services with their Process IDs (PID) for all tasks running on either a local or a remote computer. It is packaged with Windows operating systems and can be executed from the command-line interface. (Citations: Microsoft Tasklist)",
      "dyn_dst_name": "LSA Secrets (T1003.004)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at <code>HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets</code>. LSA secrets can also be dumped from memory. Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.(Citations: Passcape LSA Secrets, Microsoft AD Admin Tier Model, Tilbury Windows Credentials, ired Dumping LSA Secrets, ired Dumping LSA Secrets)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is CAPEC-643 (Identify Shared Files/Directories on System):\nAn adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.\n\nThe CWE (Common Weakness Enumeration) is Sensitive Information Uncleared Before Debug/Power State Transition (CWE-1272):\nThe product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-643 (Identify Shared Files/Directories on System)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",
      "dyn_dst_name": "Sensitive Information Uncleared Before Debug/Power State Transition (CWE-1272)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware InvisiMole (S0260):\nInvisiMole is a modular spyware program that has been used by the InvisiMole Group since at least 2013. InvisiMole has two backdoor modules called RC2FM and RC2CL that are used to perform post-exploitation activities. It has been discovered on compromised victims in the Ukraine and Russia. Gamaredon Group infrastructure has been used to download and execute InvisiMole against a small number of victims.(Citations: ESET InvisiMole June 2018, ESET InvisiMole June 2020)\n\nThe MITRE ATT&CK sub-technique is ListPlanting (T1055.015):\nAdversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process. List-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control. ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods. Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.(Citations: Microsoft List View Controls, Modexp Windows Process Injection, ESET InvisiMole June 2020)\n\nYour goal is to determine if malware InvisiMole (S0260) is related to ListPlanting (T1055.015), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware InvisiMole (S0260)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "InvisiMole is a modular spyware program that has been used by the InvisiMole Group since at least 2013. InvisiMole has two backdoor modules called RC2FM and RC2CL that are used to perform post-exploitation activities. It has been discovered on compromised victims in the Ukraine and Russia. Gamaredon Group infrastructure has been used to download and execute InvisiMole against a small number of victims.(Citations: ESET InvisiMole June 2018, ESET InvisiMole June 2020)",
      "dyn_dst_name": "ListPlanting (T1055.015)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse list-view controls to inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process. List-view controls are user interface windows used to display collections of items. Information about an application's list-view settings are stored within the process' memory in a <code>SysListView32</code> control. ListPlanting (a form of message-passing \"shatter attack\") may be performed by copying code into the virtual address space of a process that uses a list-view control then using that code as a custom callback for sorting the listed items. Adversaries must first copy code into the target process\u2019 memory space, which can be performed various ways including by directly obtaining a handle to the <code>SysListView32</code> child of the victim process window (via Windows API calls such as <code>FindWindow</code> and/or <code>EnumWindows</code>) or other Process Injection methods. Some variations of ListPlanting may allocate memory in the target process but then use window messages to copy the payload, to avoid the use of the highly monitored <code>WriteProcessMemory</code> function. For example, an adversary can use the <code>PostMessage</code> and/or <code>SendMessage</code> API functions to send <code>LVM_SETITEMPOSITION</code> and <code>LVM_GETITEMPOSITION</code> messages, effectively copying a payload 2 bytes at a time to the allocated memory. Finally, the payload is triggered by sending the <code>LVM_SORTITEMS</code> message to the <code>SysListView32</code> child of the process window, with the payload within the newly allocated buffer passed and executed as the <code>ListView_SortItems</code> callback.(Citations: Microsoft List View Controls, Modexp Windows Process Injection, ESET InvisiMole June 2020)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, S0658 (malware XCSSET) and System Language Discovery (T1614.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nS0658 (malware XCSSET) -\nXCSSET is a macOS modular backdoor that targets Xcode application developers. XCSSET was first observed in August 2020 and has been used to install a backdoor component, modify browser applications, conduct collection, and provide ransomware-like encryption capabilities.(Citations: trendmicro xcsset xcode project 2020)\n\nSystem Language Discovery (T1614.001) -\nAdversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities. There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>. On a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.(Citations: Malware System Language Check, CrowdStrike Ryuk January 2019, Darkside Ransomware Cybereason, Securelist JSWorm, SecureList SynAck Doppelg\u00e4nging May 2018)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0658 (malware XCSSET)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "XCSSET is a macOS modular backdoor that targets Xcode application developers. XCSSET was first observed in August 2020 and has been used to install a backdoor component, modify browser applications, conduct collection, and provide ransomware-like encryption capabilities.(Citations: trendmicro xcsset xcode project 2020)",
      "dyn_dst_name": "System Language Discovery (T1614.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities. There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>. On a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.(Citations: Malware System Language Check, CrowdStrike Ryuk January 2019, Darkside Ransomware Cybereason, Securelist JSWorm, SecureList SynAck Doppelg\u00e4nging May 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK technique and MITRE ATT&CK tactic and their descriptions:\n\nThe MITRE ATT&CK technique is Obtain Capabilities (T1588):\nAdversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle. In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals. In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citations: NationsBuying, PegasusCitizenLab, DiginotarCompromise)\n\nThe MITRE ATT&CK tactic is initial-access (TA0001):\nThe adversary is trying to get into your network. Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.\n\nYour goal is to determine if Obtain Capabilities (T1588) is related to initial-access (TA0001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Obtain Capabilities (T1588)",
      "dyn_src_layer": "MITRE ATT&CK technique",
      "dyn_src_description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle. In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals. In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citations: NationsBuying, PegasusCitizenLab, DiginotarCompromise)",
      "dyn_dst_name": "initial-access (TA0001)",
      "dyn_dst_layer": "MITRE ATT&CK tactic",
      "dyn_dst_description": "The adversary is trying to get into your network. Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware CCBkdr (S0222) and T1566.002 (Spearphishing Link). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware CCBkdr (S0222) -\nCCBkdr is malware that was injected into a signed version of CCleaner and distributed from CCleaner's distribution website.  (Citations: Talos CCleanup 2017, Intezer Aurora Sept 2017)\n\nT1566.002 (Spearphishing Link) -\nAdversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`. Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.  Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL . Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citations: CISA IDN ST05-016, Mandiant URL Obfuscation 2023, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, SecureWorks Device Code Phishing 2021, Netskope Device Code Phishing 2021, Optiv Device Code Phishing 2021)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware CCBkdr (S0222)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "CCBkdr is malware that was injected into a signed version of CCleaner and distributed from CCleaner's distribution website.  (Citations: Talos CCleanup 2017, Intezer Aurora Sept 2017)",
      "dyn_dst_name": "T1566.002 (Spearphishing Link)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging User Execution. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly. Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an \"IDN homograph attack\"). URLs may also be obfuscated by taking advantage of quirks in the URL schema, such as the acceptance of integer- or hexadecimal-based hostname formats and the automatic discarding of text before an \u201c@\u201d symbol: for example, `hxxp://google.com@1157586937`. Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to Steal Application Access Tokens. These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls.  Adversaries may also utilize spearphishing links to Steal Application Access Tokens that grant immediate access to the victim environment. For example, a user may be lured through \u201cconsent phishing\u201d into granting adversaries permissions/access via a malicious OAuth 2.0 request URL . Similarly, malicious links may also target device-based authorization, such as OAuth 2.0 device authorization grant flow which is typically used to authenticate devices without UIs/browsers. Known as \u201cdevice code phishing,\u201d an adversary may send a link that directs the victim to a malicious authorization page where the user is tricked into entering a code/credentials that produces a device token.(Citations: CISA IDN ST05-016, Mandiant URL Obfuscation 2023, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, Trend Micro Pawn Storm OAuth 2017, Microsoft OAuth 2.0 Consent Phishing 2021, SecureWorks Device Code Phishing 2021, Netskope Device Code Phishing 2021, Optiv Device Code Phishing 2021)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89) and CVE-2023-46347. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nImproper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89) -\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nCVE-2023-46347 -\nIn the module \"Step by Step products Pack\" (ndk_steppingpack) version 1.5.6 and before from NDK Design for PrestaShop, a guest can perform SQL injection. The method `NdkSpack::getPacks()` has sensitive SQL calls that can be executed with a trivial http call and exploited to forge a SQL injection.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-46347",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "In the module \"Step by Step products Pack\" (ndk_steppingpack) version 1.5.6 and before from NDK Design for PrestaShop, a guest can perform SQL injection. The method `NdkSpack::getPacks()` has sensitive SQL calls that can be executed with a trivial http call and exploited to forge a SQL injection.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-22954\nVMware Workspace ONE Access and Identity Manager contain a remote code execution vulnerability due to server-side template injection. A malicious actor with network access can trigger a server-side template injection that may result in remote code execution.\n\nThe CPE (Common Platform Enumeration) is operating system msm8909w_firmware (by qualcomm) version -\n\"msm8909w_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-22954",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "VMware Workspace ONE Access and Identity Manager contain a remote code execution vulnerability due to server-side template injection. A malicious actor with network access can trigger a server-side template injection that may result in remote code execution.",
      "dyn_dst_name": "operating system msm8909w_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"msm8909w_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Ryuk (S0446) and Scheduled Task (T1053.005). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Ryuk (S0446) -\nRyuk is a ransomware designed to target enterprise environments that has been used in attacks since at least 2018. Ryuk shares code similarities with Hermes ransomware.(Citations: CrowdStrike Ryuk January 2019, FireEye Ryuk and Trickbot January 2019, FireEye FIN6 Apr 2019)\n\nScheduled Task (T1053.005) -\nAdversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task. The deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel. An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes. Adversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citations: ProofPoint Serpent, SigmaHQ, Tarrask scheduled task, Defending Against Scheduled Task Attacks in Windows Environments)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Ryuk (S0446)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Ryuk is a ransomware designed to target enterprise environments that has been used in attacks since at least 2018. Ryuk shares code similarities with Hermes ransomware.(Citations: CrowdStrike Ryuk January 2019, FireEye Ryuk and Trickbot January 2019, FireEye FIN6 Apr 2019)",
      "dyn_dst_name": "Scheduled Task (T1053.005)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task. The deprecated at utility could also be abused by adversaries (ex: At), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel. An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes. Adversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citations: ProofPoint Serpent, SigmaHQ, Tarrask scheduled task, Defending Against Scheduled Task Attacks in Windows Environments)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Origin Validation Error (CWE-346):\nThe product does not properly verify that the source of data or communication is valid.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-26114:\nVersions of the package code-server before 4.10.1 are vulnerable to Missing Origin Validation in WebSockets handshakes. Exploiting this vulnerability can allow an adversary in specific scenarios to access data from and connect to the code-server instance.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Origin Validation Error (CWE-346)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product does not properly verify that the source of data or communication is valid.",
      "dyn_dst_name": "CVE-2023-26114",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Versions of the package code-server before 4.10.1 are vulnerable to Missing Origin Validation in WebSockets handshakes. Exploiting this vulnerability can allow an adversary in specific scenarios to access data from and connect to the code-server instance.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-23660:\nA remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.\n\nThe CPE (Common Platform Enumeration) is operating system windows_10 (by microsoft) version 21h2:\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is 21h2\n\nYour goal is to determine if CVE-2022-23660 is related to operating system windows_10 (by microsoft) version 21h2, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-23660",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version 21h2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is 21h2",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CWE-287 (Improper Authentication) and CVE-2024-24830. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCWE-287 (Improper Authentication) -\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nCVE-2024-24830 -\nOpenObserve is a observability platform built specifically for logs, metrics, traces, analytics, designed to work at petabyte scale. A vulnerability has been identified in the \"/api/{org_id}/users\" endpoint. This vulnerability allows any authenticated regular user ('member') to add new users with elevated privileges, including the 'root' role, to an organization. This issue circumvents the intended security controls for role assignments. The vulnerability resides in the user creation process, where the payload does not validate the user roles. A regular user can manipulate the payload to assign root-level privileges. This vulnerability leads to Unauthorized Privilege Escalation and significantly compromises the application's role-based access control system. It allows unauthorized control over application resources and poses a risk to data security. All users, particularly those in administrative roles, are impacted. This issue has been addressed in release version 0.8.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-287 (Improper Authentication)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
      "dyn_dst_name": "CVE-2024-24830",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "OpenObserve is a observability platform built specifically for logs, metrics, traces, analytics, designed to work at petabyte scale. A vulnerability has been identified in the \"/api/{org_id}/users\" endpoint. This vulnerability allows any authenticated regular user ('member') to add new users with elevated privileges, including the 'root' role, to an organization. This issue circumvents the intended security controls for role assignments. The vulnerability resides in the user creation process, where the payload does not validate the user roles. A regular user can manipulate the payload to assign root-level privileges. This vulnerability leads to Unauthorized Privilege Escalation and significantly compromises the application's role-based access control system. It allows unauthorized control over application resources and poses a risk to data security. All users, particularly those in administrative roles, are impacted. This issue has been addressed in release version 0.8.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware WastedLocker (S0612)\nWastedLocker is a ransomware family attributed to Indrik Spider that has been used since at least May 2020. WastedLocker has been used against a broad variety of sectors, including manufacturing, information technology, and media.(Citations: Symantec WastedLocker June 2020, NCC Group WastedLocker June 2020, Sentinel Labs WastedLocker July 2020)\n\nThe MITRE ATT&CK sub-technique is Windows Command Shell (T1059.003)\nAdversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.(Citations: SSH in Windows)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WastedLocker (S0612)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WastedLocker is a ransomware family attributed to Indrik Spider that has been used since at least May 2020. WastedLocker has been used against a broad variety of sectors, including manufacturing, information technology, and media.(Citations: Symantec WastedLocker June 2020, NCC Group WastedLocker June 2020, Sentinel Labs WastedLocker July 2020)",
      "dyn_dst_name": "Windows Command Shell (T1059.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH. Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems. Adversaries may leverage cmd to execute various commands and payloads. Common uses include cmd to execute a single command, or abusing cmd interactively with input and output forwarded over a command and control channel.(Citations: SSH in Windows)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-27076:\nTenda M3 1.10 V1.0.0.12(4856) was discovered to contain a command injection vulnerability via the component /goform/delAd.\n\nThe CPE (Common Platform Enumeration) is operating system qca6564_firmware (by qualcomm) version -:\n\"qca6564_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nYour goal is to determine if CVE-2022-27076 is related to operating system qca6564_firmware (by qualcomm) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-27076",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda M3 1.10 V1.0.0.12(4856) was discovered to contain a command injection vulnerability via the component /goform/delAd.",
      "dyn_dst_name": "operating system qca6564_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6564_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-35785:\nZoho ManageEngine Active Directory 360 versions 4315 and below, ADAudit Plus 7202 and below, ADManager Plus 7200 and below, Asset Explorer 6993 and below and 7xxx 7002 and below, Cloud Security Plus 4161 and below, Data Security Plus 6110 and below, Eventlog Analyzer 12301 and below, Exchange Reporter Plus 5709 and below, Log360 5315 and below, Log360 UEBA 4045 and below, M365 Manager Plus 4529 and below, M365 Security Plus 4529 and below, Recovery Manager Plus 6061 and below, ServiceDesk Plus 14204 and below and 143xx 14302 and below, ServiceDesk Plus MSP 14300 and below, SharePoint Manager Plus 4402 and below, and Support Center Plus 14300 and below are vulnerable to 2FA bypass via a few TOTP authenticators. Note: A valid pair of username and password is required to leverage this vulnerability.\n\nThe CPE (Common Platform Enumeration) is application manageengine_m365_security_plus (by zohocorp) version 4.5:\n\"manageengine_m365_security_plus\" is an application released by \"zohocorp\".  This product version is 4.5 and minor version (point release) 4527\n\nYour goal is to determine if CVE-2023-35785 is related to application manageengine_m365_security_plus (by zohocorp) version 4.5, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-35785",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Zoho ManageEngine Active Directory 360 versions 4315 and below, ADAudit Plus 7202 and below, ADManager Plus 7200 and below, Asset Explorer 6993 and below and 7xxx 7002 and below, Cloud Security Plus 4161 and below, Data Security Plus 6110 and below, Eventlog Analyzer 12301 and below, Exchange Reporter Plus 5709 and below, Log360 5315 and below, Log360 UEBA 4045 and below, M365 Manager Plus 4529 and below, M365 Security Plus 4529 and below, Recovery Manager Plus 6061 and below, ServiceDesk Plus 14204 and below and 143xx 14302 and below, ServiceDesk Plus MSP 14300 and below, SharePoint Manager Plus 4402 and below, and Support Center Plus 14300 and below are vulnerable to 2FA bypass via a few TOTP authenticators. Note: A valid pair of username and password is required to leverage this vulnerability.",
      "dyn_dst_name": "application manageengine_m365_security_plus (by zohocorp) version 4.5",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"manageengine_m365_security_plus\" is an application released by \"zohocorp\".  This product version is 4.5 and minor version (point release) 4527",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Out-of-bounds Write (CWE-787) and CVE-2023-20954. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nOut-of-bounds Write (CWE-787) -\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\nCVE-2023-20954 -\nIn SDP_AddAttribute of sdp_db.cc, there is a possible out of bounds write due to an incorrect bounds check. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12 Android-12L Android-13Android ID: A-261867748",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Out-of-bounds Write (CWE-787)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
      "dyn_dst_name": "CVE-2023-20954",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "In SDP_AddAttribute of sdp_db.cc, there is a possible out of bounds write due to an incorrect bounds check. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12 Android-12L Android-13Android ID: A-261867748",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, tool Sliver (S0633) and Exfiltration Over Other Network Medium (T1011). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\ntool Sliver (S0633) -\nSliver is an open source, cross-platform, red team command and control framework written in Golang.(Citations: Bishop Fox Sliver Framework August 2019)\n\nExfiltration Over Other Network Medium (T1011) -\nAdversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Sliver (S0633)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Sliver is an open source, cross-platform, red team command and control framework written in Golang.(Citations: Bishop Fox Sliver Framework August 2019)",
      "dyn_dst_name": "Exfiltration Over Other Network Medium (T1011)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is S0598 (malware P.A.S. Webshell)\nP.A.S. Webshell is a publicly available multifunctional PHP webshell in use since at least 2016 that provides remote access and execution on target web servers.(Citations: ANSSI Sandworm January 2021)\n\nThe MITRE ATT&CK sub-technique is NTDS (T1003.003)\nAdversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller. In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information. The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes. * Volume Shadow Copy * secretsdump.py * Using the in-built Windows tool, ntdsutil.exe * Invoke-NinjaCopy(Citations: Wikipedia Active Directory, Metcalf 2015)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0598 (malware P.A.S. Webshell)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "P.A.S. Webshell is a publicly available multifunctional PHP webshell in use since at least 2016 that provides remote access and execution on target web servers.(Citations: ANSSI Sandworm January 2021)",
      "dyn_dst_name": "NTDS (T1003.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller. In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information. The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes. * Volume Shadow Copy * secretsdump.py * Using the in-built Windows tool, ntdsutil.exe * Invoke-NinjaCopy(Citations: Wikipedia Active Directory, Metcalf 2015)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is S0377 (malware Ebury)\nEbury is an SSH backdoor targeting Linux operating systems. Attackers require root-level access, which allows them to replace SSH binaries (ssh, sshd, ssh-add, etc) or modify a shared library used by OpenSSH (libkeyutils).(Citations: ESET Ebury Feb 2014, BleepingComputer Ebury March 2017, ESET Ebury Oct 2017)\n\nThe MITRE ATT&CK technique is Fallback Channels (T1008)\nAdversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0377 (malware Ebury)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Ebury is an SSH backdoor targeting Linux operating systems. Attackers require root-level access, which allows them to replace SSH binaries (ssh, sshd, ssh-add, etc) or modify a shared library used by OpenSSH (libkeyutils).(Citations: ESET Ebury Feb 2014, BleepingComputer Ebury March 2017, ESET Ebury Oct 2017)",
      "dyn_dst_name": "Fallback Channels (T1008)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-20160\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\nThe CPE (Common Platform Enumeration) is operating system sf350-28_firmware (by cisco) version -\n\"sf350-28_firmware\" is an operating system released by \"cisco\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20160",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sf350-28_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sf350-28_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware JSS Loader (S0648):\nJSS Loader is Remote Access Trojan (RAT) with .NET and C++ variants that has been used by FIN7 since at least 2020.(Citations: eSentire FIN7 July 2021, CrowdStrike Carbon Spider August 2021)\n\nThe MITRE ATT&CK sub-technique is Malicious File (T1204.002):\nAn adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.(Citations: Password Protected Word Docs)\n\nYour goal is to determine if malware JSS Loader (S0648) is related to Malicious File (T1204.002), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware JSS Loader (S0648)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "JSS Loader is Remote Access Trojan (RAT) with .NET and C++ variants that has been used by FIN7 since at least 2020.(Citations: eSentire FIN7 July 2021, CrowdStrike Carbon Spider August 2021)",
      "dyn_dst_name": "Malicious File (T1204.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.(Citations: Password Protected Word Docs)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware CosmicDuke (S0050):\nCosmicDuke is malware that was used by APT29 from 2010 to 2015. (Citations: F-Secure The Dukes)\n\nThe MITRE ATT&CK sub-technique is Proc Memory (T1055.009):\nAdversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd. Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Uninformed Needle, GDS Linux Injection, DD Man, GDS Linux Injection)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware CosmicDuke (S0050)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "CosmicDuke is malware that was used by APT29 from 2010 to 2015. (Citations: F-Secure The Dukes)",
      "dyn_dst_name": "Proc Memory (T1055.009)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<code>/proc/[pid]</code>) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes\u2019 stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes\u2019 memory map within <code>/proc/[pid]/maps</code> can be overwritten using dd. Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.(Citations: Uninformed Needle, GDS Linux Injection, DD Man, GDS Linux Injection)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK technique and their descriptions:\n\nThe MITRE ATT&CK tactic is discovery (TA0007):\nThe adversary is trying to figure out your environment. Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective.\n\nThe MITRE ATT&CK technique is Domain Trust Discovery (T1482):\nAdversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.(Citations: Microsoft Trusts, AdSecurity Forging Trust Tickets, Harmj0y Domain Trusts, Harmj0y Domain Trusts, Microsoft Operation Wilysupply)\n\nYour goal is to determine if discovery (TA0007) is related to Domain Trust Discovery (T1482), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "discovery (TA0007)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to figure out your environment. Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective.",
      "dyn_dst_name": "Domain Trust Discovery (T1482)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.(Citations: Microsoft Trusts, AdSecurity Forging Trust Tickets, Harmj0y Domain Trusts, Harmj0y Domain Trusts, Microsoft Operation Wilysupply)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Accessing Functionality Not Properly Constrained by ACLs (CAPEC-1)\nIn applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\n\nThe CWE (Common Weakness Enumeration) is Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)\nThe web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Accessing Functionality Not Properly Constrained by ACLs (CAPEC-1)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
      "dyn_dst_name": "Use of Web Link to Untrusted Target with window.opener Access (CWE-1022)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware LiteDuke (S0513) and T1547.009 (Shortcut Modification). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware LiteDuke (S0513) -\nLiteDuke is a third stage backdoor that was used by APT29, primarily in 2014-2015. LiteDuke used the same dropper as PolyglotDuke, and was found on machines also compromised by MiniDuke.(Citations: ESET Dukes October 2019)\n\nT1547.009 (Shortcut Modification) -\nAdversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program. Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.(Citations: Shortcut for Persistence )",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware LiteDuke (S0513)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "LiteDuke is a third stage backdoor that was used by APT29, primarily in 2014-2015. LiteDuke used the same dropper as PolyglotDuke, and was found on machines also compromised by MiniDuke.(Citations: ESET Dukes October 2019)",
      "dyn_dst_name": "T1547.009 (Shortcut Modification)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program. Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.(Citations: Shortcut for Persistence )",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware OSX_OCEANLOTUS.D (S0352) and Symmetric Cryptography (T1573.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware OSX_OCEANLOTUS.D (S0352) -\nOSX_OCEANLOTUS.D is a macOS backdoor used by APT32. First discovered in 2015, APT32 has continued to make improvements using a plugin architecture to extend capabilities, specifically using `.dylib` files. OSX_OCEANLOTUS.D can also determine it's permission level and execute according to access type (`root` or `user`).(Citations: Unit42 OceanLotus 2017, TrendMicro MacOS April 2018, Trend Micro MacOS Backdoor November 2020)\n\nSymmetric Cryptography (T1573.001) -\nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware OSX_OCEANLOTUS.D (S0352)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "OSX_OCEANLOTUS.D is a macOS backdoor used by APT32. First discovered in 2015, APT32 has continued to make improvements using a plugin architecture to extend capabilities, specifically using `.dylib` files. OSX_OCEANLOTUS.D can also determine it's permission level and execute according to access type (`root` or `user`).(Citations: Unit42 OceanLotus 2017, TrendMicro MacOS April 2018, Trend Micro MacOS Backdoor November 2020)",
      "dyn_dst_name": "Symmetric Cryptography (T1573.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is S0144 (malware ChChes):\nChChes is a Trojan that appears to be used exclusively by menuPass. It was used to target Japanese organizations in 2016. Its lack of persistence methods suggests it may be intended as a first-stage tool.   (Citations: Palo Alto menuPass Feb 2017, JPCERT ChChes Feb 2017, PWC Cloud Hopper Technical Annex April 2017)\n\nThe MITRE ATT&CK sub-technique is Cron (T1053.003):\nAdversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems. The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths. An adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.(Citations: 20 macOS Common Tools and Techniques)\n\nYour goal is to determine if S0144 (malware ChChes) is related to Cron (T1053.003), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0144 (malware ChChes)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "ChChes is a Trojan that appears to be used exclusively by menuPass. It was used to target Japanese organizations in 2016. Its lack of persistence methods suggests it may be intended as a first-stage tool.   (Citations: Palo Alto menuPass Feb 2017, JPCERT ChChes Feb 2017, PWC Cloud Hopper Technical Annex April 2017)",
      "dyn_dst_name": "Cron (T1053.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse the <code>cron</code> utility to perform task scheduling for initial or recurring execution of malicious code. The <code>cron</code> utility is a time-based job scheduler for Unix-like operating systems. The <code> crontab</code> file contains the schedule of cron entries to be run and the specified times for execution. Any <code>crontab</code> files are stored in operating system-specific file paths. An adversary may use <code>cron</code> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence.(Citations: 20 macOS Common Tools and Techniques)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique:\n\nThe MITRE ATT&CK tactic is collection (TA0009)\nThe adversary is trying to gather data of interest to their goal. Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.\n\nThe MITRE ATT&CK sub-technique is GUI Input Capture (T1056.002)\nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control). Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.(Citations: OSX Malware Exploits MacKeeper, LogRhythm Do You Trust Oct 2014, OSX Keydnap malware, Spoofing credential dialogs, LogRhythm Do You Trust Oct 2014, Enigma Phishing for Credentials Jan 2015, Spoofing credential dialogs, Spoofing credential dialogs)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "collection (TA0009)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gather data of interest to their goal. Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the data. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
      "dyn_dst_name": "GUI Input Capture (T1056.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control). Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.(Citations: OSX Malware Exploits MacKeeper, LogRhythm Do You Trust Oct 2014, OSX Keydnap malware, Spoofing credential dialogs, LogRhythm Do You Trust Oct 2014, Enigma Phishing for Credentials Jan 2015, Spoofing credential dialogs, Spoofing credential dialogs)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-23658 and application diaenergie (by deltaww) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-23658 -\nA remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.\n\napplication diaenergie (by deltaww) version * -\n\"diaenergie\" is an application released by \"deltaww\". ",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-23658",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A remote authentication bypass vulnerability was discovered in Aruba ClearPass Policy Manager version(s): 6.10.4 and below, 6.9.9 and below, 6.8.9-HF2 and below, 6.7.x and below. Aruba has released updates to ClearPass Policy Manager that address this security vulnerability.",
      "dyn_dst_name": "application diaenergie (by deltaww) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"diaenergie\" is an application released by \"deltaww\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-26349 and operating system qca6436_firmware (by qualcomm) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-26349 -\nDelta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability that exists in DIAE_eccoefficientHandler.ashx. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.\n\noperating system qca6436_firmware (by qualcomm) version - -\n\"qca6436_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-26349",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Delta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability that exists in DIAE_eccoefficientHandler.ashx. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.",
      "dyn_dst_name": "operating system qca6436_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6436_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware TrickBot (S0266)\nTrickBot is a Trojan spyware program written in C++ that first emerged in September 2016 as a possible successor to Dyre. TrickBot was developed and initially used by Wizard Spider for targeting banking sites in North America, Australia, and throughout Europe; it has since been used against all sectors worldwide as part of \"big game hunting\" ransomware campaigns.(Citations: S2 Grupo TrickBot June 2017, Fidelis TrickBot Oct 2016, IBM TrickBot Nov 2016, CrowdStrike Wizard Spider October 2020)\n\nThe MITRE ATT&CK technique is T1135 (Network Share Discovery)\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.(Citations: Wikipedia Shared Resource, TechNet Shared Folder)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware TrickBot (S0266)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "TrickBot is a Trojan spyware program written in C++ that first emerged in September 2016 as a possible successor to Dyre. TrickBot was developed and initially used by Wizard Spider for targeting banking sites in North America, Australia, and throughout Europe; it has since been used against all sectors worldwide as part of \"big game hunting\" ransomware campaigns.(Citations: S2 Grupo TrickBot June 2017, Fidelis TrickBot Oct 2016, IBM TrickBot Nov 2016, CrowdStrike Wizard Spider October 2020)",
      "dyn_dst_name": "T1135 (Network Share Discovery)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.(Citations: Wikipedia Shared Resource, TechNet Shared Folder)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK group presented below:\n\nThe malicious software is malware Dtrack (S0567):\nDtrack is spyware that was discovered in 2019 and has been used against Indian financial institutions, research facilities, and the Kudankulam Nuclear Power Plant. Dtrack shares similarities with the DarkSeoul campaign, which was attributed to Lazarus Group. (Citations: Kaspersky Dtrack, Securelist Dtrack, Dragos WASSONITE, CyberBit Dtrack, ZDNet Dtrack)\n\nThe MITRE ATT&CK group is Stealth Falcon (G0038):\nStealth Falcon is a threat group that has conducted targeted spyware attacks against Emirati journalists, activists, and dissidents since at least 2012. Circumstantial evidence suggests there could be a link between this group and the United Arab Emirates (UAE) government, but that has not been confirmed. (Citations: Citizen Lab Stealth Falcon May 2016)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Dtrack (S0567)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Dtrack is spyware that was discovered in 2019 and has been used against Indian financial institutions, research facilities, and the Kudankulam Nuclear Power Plant. Dtrack shares similarities with the DarkSeoul campaign, which was attributed to Lazarus Group. (Citations: Kaspersky Dtrack, Securelist Dtrack, Dragos WASSONITE, CyberBit Dtrack, ZDNet Dtrack)",
      "dyn_dst_name": "Stealth Falcon (G0038)",
      "dyn_dst_layer": "MITRE ATT&CK group",
      "dyn_dst_description": "Stealth Falcon is a threat group that has conducted targeted spyware attacks against Emirati journalists, activists, and dissidents since at least 2012. Circumstantial evidence suggests there could be a link between this group and the United Arab Emirates (UAE) government, but that has not been confirmed. (Citations: Citizen Lab Stealth Falcon May 2016)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Server-Side Request Forgery (SSRF) (CWE-918)\nThe web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-39110\nrconfig v3.9.4 was discovered to contain a Server-Side Request Forgery (SSRF) via the path parameter at /ajaxGetFileByPath.php. This vulnerability allows authenticated attackers to make arbitrary requests via injection of crafted URLs.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Server-Side Request Forgery (SSRF) (CWE-918)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
      "dyn_dst_name": "CVE-2023-39110",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "rconfig v3.9.4 was discovered to contain a Server-Side Request Forgery (SSRF) via the path parameter at /ajaxGetFileByPath.php. This vulnerability allows authenticated attackers to make arbitrary requests via injection of crafted URLs.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is tool Expand (S0361):\nExpand is a Windows utility used to expand one or more compressed CAB files. It has been used by BBSRAT to decompress a CAB file into executable content.(Citations: Microsoft Expand Utility, Palo Alto Networks BBSRAT)\n\nThe MITRE ATT&CK technique is Office Application Startup (T1137):\nAdversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.(Citations: SensePost Ruler GitHub, TechNet O365 Outlook Rules)\n\nYour goal is to determine if tool Expand (S0361) is related to Office Application Startup (T1137), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Expand (S0361)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Expand is a Windows utility used to expand one or more compressed CAB files. It has been used by BBSRAT to decompress a CAB file into executable content.(Citations: Microsoft Expand Utility, Palo Alto Networks BBSRAT)",
      "dyn_dst_name": "Office Application Startup (T1137)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365.(Citations: SensePost Ruler GitHub, TechNet O365 Outlook Rules)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-49569 and CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-49569 -\nA path traversal vulnerability was discovered in go-git versions prior to v5.11. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved. Applications are only affected if they are using the ChrootOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS , which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using BoundOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS or in-memory filesystems are not affected by this issue. This is a go-git implementation issue and does not affect the upstream git cli.\n\nCWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) -\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-49569",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A path traversal vulnerability was discovered in go-git versions prior to v5.11. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved. Applications are only affected if they are using the ChrootOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS , which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using BoundOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS or in-memory filesystems are not affected by this issue. This is a go-git implementation issue and does not affect the upstream git cli.",
      "dyn_dst_name": "CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'))",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-21849 and operating system 2540_firmware (by arubanetworks) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-21849 -\nWindows Internet Key Exchange (IKE) Protocol Extensions Remote Code Execution Vulnerability\n\noperating system 2540_firmware (by arubanetworks) version * -\n\"2540_firmware\" is an operating system released by \"arubanetworks\". ",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-21849",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Windows Internet Key Exchange (IKE) Protocol Extensions Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system 2540_firmware (by arubanetworks) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"2540_firmware\" is an operating system released by \"arubanetworks\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-27971\nCertain HP LaserJet Pro print products are potentially vulnerable to Buffer Overflow and/or Elevation of Privilege.\n\nThe CPE (Common Platform Enumeration) is operating system laserjet_pro_mfp_m428-m429_w1a31a_firmware (by hp) version *\n\"laserjet_pro_mfp_m428-m429_w1a31a_firmware\" is an operating system released by \"hp\". \n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-27971",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Certain HP LaserJet Pro print products are potentially vulnerable to Buffer Overflow and/or Elevation of Privilege.",
      "dyn_dst_name": "operating system laserjet_pro_mfp_m428-m429_w1a31a_firmware (by hp) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"laserjet_pro_mfp_m428-m429_w1a31a_firmware\" is an operating system released by \"hp\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-1376:\nDelta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability exists in DIAE_privgrpHandler.ashx. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.\n\nThe CPE (Common Platform Enumeration) is operating system sd_675_firmware (by qualcomm) version -:\n\"sd_675_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-1376",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Delta Electronics DIAEnergie (All versions prior to 1.8.02.004) has a blind SQL injection vulnerability exists in DIAE_privgrpHandler.ashx. This allows an attacker to inject arbitrary SQL queries, retrieve and modify database contents, and execute system commands.",
      "dyn_dst_name": "operating system sd_675_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sd_675_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-30926 and operating system fedora (by fedoraproject) version 36. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-30926 -\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the EditMacList parameter at /goform/aspForm.\n\noperating system fedora (by fedoraproject) version 36 -\n\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 36",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30926",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the EditMacList parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system fedora (by fedoraproject) version 36",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fedora\" is an operating system released by \"fedoraproject\".  This product version is 36",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and malicious software and their descriptions:\n\nThe MITRE ATT&CK sub-technique is Windows Management Instrumentation Event Subscription (T1546.003):\nAdversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe` \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.(Citations: Mandiant M-Trends 2015, FireEye WMI SANS 2015, FireEye WMI 2015, Dell WMI Persistence, Microsoft MOF May 2018)\n\nThe malicious software is malware Hikit (S0009):\nHikit is malware that has been used by Axiom for late-stage persistence and exfiltration after the initial compromise.(Citations: Novetta-Axiom, FireEye Hikit Rootkit)\n\nYour goal is to determine if Windows Management Instrumentation Event Subscription (T1546.003) is related to malware Hikit (S0009), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Windows Management Instrumentation Event Subscription (T1546.003)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts \u2013 using `mofcomp.exe` \u2013into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.(Citations: Mandiant M-Trends 2015, FireEye WMI SANS 2015, FireEye WMI 2015, Dell WMI Persistence, Microsoft MOF May 2018)",
      "dyn_dst_name": "malware Hikit (S0009)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Hikit is malware that has been used by Axiom for late-stage persistence and exfiltration after the initial compromise.(Citations: Novetta-Axiom, FireEye Hikit Rootkit)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, operating system fx3s-10mr\\/es_firmware (by mitsubishielectric) version - and CVE-2023-4699. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\noperating system fx3s-10mr\\/es_firmware (by mitsubishielectric) version - -\n\"fx3s-10mr\\/es_firmware\" is an operating system released by \"mitsubishielectric\".  This product version is -\n\nCVE-2023-4699 -\nInsufficient Verification of Data Authenticity vulnerability in Mitsubishi Electric Corporation MELSEC-F Series main modules and MELSEC iQ-F Series CPU modules allows a remote unauthenticated attacker to reset the memory of the products to factory default state and cause denial-of-service (DoS) condition on the products by sending specific packets.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system fx3s-10mr\\/es_firmware (by mitsubishielectric) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"fx3s-10mr\\/es_firmware\" is an operating system released by \"mitsubishielectric\".  This product version is -",
      "dyn_dst_name": "CVE-2023-4699",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Insufficient Verification of Data Authenticity vulnerability in Mitsubishi Electric Corporation MELSEC-F Series main modules and MELSEC iQ-F Series CPU modules allows a remote unauthenticated attacker to reset the memory of the products to factory default state and cause denial-of-service (DoS) condition on the products by sending specific packets.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-28905 and operating system sd730_firmware (by qualcomm) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-28905 -\nTOTOLink N600R V5.3c.7159_B20190425 was discovered to contain a command injection vulnerability via the devicemac parameter in /setting/setDeviceName.\n\noperating system sd730_firmware (by qualcomm) version - -\n\"sd730_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28905",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOLink N600R V5.3c.7159_B20190425 was discovered to contain a command injection vulnerability via the devicemac parameter in /setting/setDeviceName.",
      "dyn_dst_name": "operating system sd730_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sd730_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-29328\nD-Link DAP-1330_OSS-firmware_1.00b21 was discovered to contain a stack overflow via the function checkvalidupgrade.\n\nThe CPE (Common Platform Enumeration) is operating system iphone_os (by apple) version *\n\"iphone_os\" is an operating system released by \"apple\". \n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-29328",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "D-Link DAP-1330_OSS-firmware_1.00b21 was discovered to contain a stack overflow via the function checkvalidupgrade.",
      "dyn_dst_name": "operating system iphone_os (by apple) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"iphone_os\" is an operating system released by \"apple\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Encryption Brute Forcing (CAPEC-20):\nAn attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.\n\nThe CWE (Common Weakness Enumeration) is Generation of Weak Initialization Vector (IV) (CWE-1204):\nThe product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\n\nYour goal is to determine if Encryption Brute Forcing (CAPEC-20) is related to Generation of Weak Initialization Vector (IV) (CWE-1204), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Encryption Brute Forcing (CAPEC-20)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",
      "dyn_dst_name": "Generation of Weak Initialization Vector (IV) (CWE-1204)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Out-of-bounds Write (CWE-787)\nThe product writes data past the end, or before the beginning, of the intended buffer.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-42910\nMultiple memory corruption issues were addressed with improved input validation. This issue is fixed in macOS Sonoma 14.2. Processing a maliciously crafted file may lead to unexpected app termination or arbitrary code execution.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Out-of-bounds Write (CWE-787)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
      "dyn_dst_name": "CVE-2023-42910",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Multiple memory corruption issues were addressed with improved input validation. This issue is fixed in macOS Sonoma 14.2. Processing a maliciously crafted file may lead to unexpected app termination or arbitrary code execution.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30308\nIn Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-web-viewer-request-on\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection.\n\nThe CPE (Common Platform Enumeration) is application netweaver_java_web_container_and_http_service_engine (by sap) version 7.11\n\"netweaver_java_web_container_and_http_service_engine\" is an application released by \"sap\".  This product version is 7.11\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30308",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "In Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-web-viewer-request-on\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection.",
      "dyn_dst_name": "application netweaver_java_web_container_and_http_service_engine (by sap) version 7.11",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"netweaver_java_web_container_and_http_service_engine\" is an application released by \"sap\".  This product version is 7.11",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and CAPEC (Common Attack Pattern Enumeration and Classification) and their descriptions:\n\nThe MITRE ATT&CK sub-technique is Startup Items (T1037.005):\nAdversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.(Citations: Startup Items, Methods of Mac Malware Persistence)\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Using Alternative IP Address Encodings (CAPEC-4):\nThis attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.\n\nYour goal is to determine if Startup Items (T1037.005) is related to Using Alternative IP Address Encodings (CAPEC-4), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Startup Items (T1037.005)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, <code>/Library/StartupItems</code> isn\u2019t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <code>StartupParameters.plist</code>, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.(Citations: Startup Items, Methods of Mac Malware Persistence)",
      "dyn_dst_name": "Using Alternative IP Address Encodings (CAPEC-4)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique and their descriptions:\n\nThe MITRE ATT&CK tactic is credential-access (TA0006):\nThe adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.\n\nThe MITRE ATT&CK sub-technique is LSASS Memory (T1003.001):\nAdversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material. As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host use procdump: * <code>procdump -ma lsass.exe lsass_dump</code> Locally, mimikatz can be run using: * <code>sekurlsa::Minidump lsassdump.dmp</code> * <code>sekurlsa::logonPasswords</code> Built-in Windows tools such as `comsvcs.dll` can also be used: * <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full</code> Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`). Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. The following SSPs can be used to access credentials: * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. * CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.(Citations: Volexity Exchange Marauder March 2021, Symantec Attacks Against Government Sector, Deep Instinct LSASS, Graeber 2014, TechNet Blogs Credential Protection, TechNet Blogs Credential Protection)\n\nYour goal is to determine if credential-access (TA0006) is related to LSASS Memory (T1003.001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "credential-access (TA0006)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
      "dyn_dst_name": "LSASS Memory (T1003.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material. As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host use procdump: * <code>procdump -ma lsass.exe lsass_dump</code> Locally, mimikatz can be run using: * <code>sekurlsa::Minidump lsassdump.dmp</code> * <code>sekurlsa::logonPasswords</code> Built-in Windows tools such as `comsvcs.dll` can also be used: * <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full</code> Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`). Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. The following SSPs can be used to access credentials: * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. * CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.(Citations: Volexity Exchange Marauder March 2021, Symantec Attacks Against Government Sector, Deep Instinct LSASS, Graeber 2014, TechNet Blogs Credential Protection, TechNet Blogs Credential Protection)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-20158 and operating system sg300-10p_firmware (by cisco) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-20158 -\nMultiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.\n\noperating system sg300-10p_firmware (by cisco) version - -\n\"sg300-10p_firmware\" is an operating system released by \"cisco\".  This product version is -",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20158",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Multiple vulnerabilities in the web-based user interface of certain Cisco Small Business Series Switches could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition or execute arbitrary code with root privileges on an affected device. These vulnerabilities are due to improper validation of requests that are sent to the web interface. For more information about these vulnerabilities, see the Details section of this advisory.",
      "dyn_dst_name": "operating system sg300-10p_firmware (by cisco) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg300-10p_firmware\" is an operating system released by \"cisco\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Component Firmware (T1542.002) and Exploitation of Thunderbolt Protection Flaws (CAPEC-665). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nComponent Firmware (T1542.002) -\nAdversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking. Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.\n\nExploitation of Thunderbolt Protection Flaws (CAPEC-665) -\nAn adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Component Firmware (T1542.002)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking. Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.",
      "dyn_dst_name": "Exploitation of Thunderbolt Protection Flaws (CAPEC-665)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware InvisiMole (S0260)\nInvisiMole is a modular spyware program that has been used by the InvisiMole Group since at least 2013. InvisiMole has two backdoor modules called RC2FM and RC2CL that are used to perform post-exploitation activities. It has been discovered on compromised victims in the Ukraine and Russia. Gamaredon Group infrastructure has been used to download and execute InvisiMole against a small number of victims.(Citations: ESET InvisiMole June 2018, ESET InvisiMole June 2020)\n\nThe MITRE ATT&CK sub-technique is Compromise Software Dependencies and Development Tools (T1195.001)\nAdversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citations: Trendmicro NPM Compromise)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware InvisiMole (S0260)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "InvisiMole is a modular spyware program that has been used by the InvisiMole Group since at least 2013. InvisiMole has two backdoor modules called RC2FM and RC2CL that are used to perform post-exploitation activities. It has been discovered on compromised victims in the Ukraine and Russia. Gamaredon Group infrastructure has been used to download and execute InvisiMole against a small number of victims.(Citations: ESET InvisiMole June 2018, ESET InvisiMole June 2020)",
      "dyn_dst_name": "Compromise Software Dependencies and Development Tools (T1195.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citations: Trendmicro NPM Compromise)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK sub-technique and malicious software:\n\nThe MITRE ATT&CK sub-technique is T1132.001 (Standard Encoding)\nAdversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.(Citations: Wikipedia Binary-to-text Encoding, Wikipedia Character Encoding)\n\nThe malicious software is malware Octopus (S0340)\nOctopus is a Windows Trojan written in the Delphi programming language that has been used by Nomadic Octopus to target government organizations in Central Asia since at least 2014.(Citations: Securelist Octopus Oct 2018, Security Affairs DustSquad Oct 2018, ESET Nomadic Octopus 2018)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1132.001 (Standard Encoding)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.(Citations: Wikipedia Binary-to-text Encoding, Wikipedia Character Encoding)",
      "dyn_dst_name": "malware Octopus (S0340)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Octopus is a Windows Trojan written in the Delphi programming language that has been used by Nomadic Octopus to target government organizations in Central Asia since at least 2014.(Citations: Securelist Octopus Oct 2018, Security Affairs DustSquad Oct 2018, ESET Nomadic Octopus 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-20267\nA vulnerability with the handling of MPLS traffic for Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause the netstack process to unexpectedly restart, which could cause the device to stop processing network traffic or to reload. This vulnerability is due to lack of proper error checking when processing an ingress MPLS frame. An attacker could exploit this vulnerability by sending a crafted IPv6 packet that is encapsulated within an MPLS frame to an MPLS-enabled interface of the targeted device. A successful exploit could allow the attacker to cause a denial of service (DoS) condition. Note: The IPv6 packet can be generated multiple hops away from the targeted device and then encapsulated within MPLS. The DoS condition may occur when the NX-OS device processes the packet.\n\nThe CPE (Common Platform Enumeration) is operating system nx-os (by cisco) version 6.0\\(2\\)u6\\(6\\)\n\"nx-os\" is an operating system released by \"cisco\".  This product version is 6.0\\(2\\)u6\\(6\\)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-20267",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability with the handling of MPLS traffic for Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause the netstack process to unexpectedly restart, which could cause the device to stop processing network traffic or to reload. This vulnerability is due to lack of proper error checking when processing an ingress MPLS frame. An attacker could exploit this vulnerability by sending a crafted IPv6 packet that is encapsulated within an MPLS frame to an MPLS-enabled interface of the targeted device. A successful exploit could allow the attacker to cause a denial of service (DoS) condition. Note: The IPv6 packet can be generated multiple hops away from the targeted device and then encapsulated within MPLS. The DoS condition may occur when the NX-OS device processes the packet.",
      "dyn_dst_name": "operating system nx-os (by cisco) version 6.0\\(2\\)u6\\(6\\)",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"nx-os\" is an operating system released by \"cisco\".  This product version is 6.0\\(2\\)u6\\(6\\)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware FlawedAmmyy (S0381) and Credential Stuffing (T1110.004). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware FlawedAmmyy (S0381) -\nFlawedAmmyy is a remote access tool (RAT) that was first seen in early 2016. The code for FlawedAmmyy was based on leaked source code for a version of Ammyy Admin, a remote access software.(Citations: Proofpoint TA505 Mar 2018)\n\nCredential Stuffing (T1110.004) -\nAdversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following: * SSH (22/TCP) * Telnet (23/TCP) * FTP (21/TCP) * NetBIOS / SMB / Samba (139/TCP & 445/TCP) * LDAP (389/TCP) * Kerberos (88/TCP) * RDP / Terminal Services (3389/TCP) * HTTP/HTTP Management Services (80/TCP & 443/TCP) * MSSQL (1433/TCP) * Oracle (1521/TCP) * MySQL (3306/TCP) * VNC (5900/TCP) In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citations: US-CERT TA18-068A 2018)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware FlawedAmmyy (S0381)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FlawedAmmyy is a remote access tool (RAT) that was first seen in early 2016. The code for FlawedAmmyy was based on leaked source code for a version of Ammyy Admin, a remote access software.(Citations: Proofpoint TA505 Mar 2018)",
      "dyn_dst_name": "Credential Stuffing (T1110.004)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following: * SSH (22/TCP) * Telnet (23/TCP) * FTP (21/TCP) * NetBIOS / SMB / Samba (139/TCP & 445/TCP) * LDAP (389/TCP) * Kerberos (88/TCP) * RDP / Terminal Services (3389/TCP) * HTTP/HTTP Management Services (80/TCP & 443/TCP) * MSSQL (1433/TCP) * Oracle (1521/TCP) * MySQL (3306/TCP) * VNC (5900/TCP) In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citations: US-CERT TA18-068A 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Carbanak (S0030)\nCarbanak is a full-featured, remote backdoor used by a group of the same name (Carbanak). It is intended for espionage, data exfiltration, and providing remote access to infected machines.  (Citations: Kaspersky Carbanak, FireEye CARBANAK June 2017)\n\nThe MITRE ATT&CK sub-technique is Keylogging (T1056.001)\nAdversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Carbanak (S0030)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Carbanak is a full-featured, remote backdoor used by a group of the same name (Carbanak). It is intended for espionage, data exfiltration, and providing remote access to infected machines.  (Citations: Kaspersky Carbanak, FireEye CARBANAK June 2017)",
      "dyn_dst_name": "Keylogging (T1056.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citations: Talos Kimsuky Nov 2021, Adventures of a Keystroke, Cisco Blog Legacy Device Attacks)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware BLUELIGHT (S0657):\nBLUELIGHT is a remote access Trojan used by APT37 that was first observed in early 2021.(Citations: Volexity InkySquid BLUELIGHT August 2021)\n\nThe MITRE ATT&CK technique is Browser Session Hijacking (T1185):\nAdversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques. A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights. Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citations: Wikipedia Man in the Browser, Cobalt Strike Browser Pivot, ICEBRG Chrome Extensions, cobaltstrike manual)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware BLUELIGHT (S0657)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "BLUELIGHT is a remote access Trojan used by APT37 that was first observed in early 2021.(Citations: Volexity InkySquid BLUELIGHT August 2021)",
      "dyn_dst_name": "Browser Session Hijacking (T1185)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques. A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights. Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citations: Wikipedia Man in the Browser, Cobalt Strike Browser Pivot, ICEBRG Chrome Extensions, cobaltstrike manual)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware WellMess (S0514):\nWellMess is lightweight malware family with variants written in .NET and Golang that has been in use since at least 2018 by APT29.(Citations: CISA WellMess July 2020, PWC WellMess July 2020, NCSC APT29 July 2020)\n\nThe MITRE ATT&CK technique is T1016 (System Network Configuration Discovery):\nAdversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route. Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>). Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.(Citations: US-CERT-TA18-106A, Mandiant APT41 Global Intrusion )\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WellMess (S0514)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WellMess is lightweight malware family with variants written in .NET and Golang that has been in use since at least 2018 by APT29.(Citations: CISA WellMess July 2020, PWC WellMess July 2020, NCSC APT29 July 2020)",
      "dyn_dst_name": "T1016 (System Network Configuration Discovery)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route. Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>). Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.(Citations: US-CERT-TA18-106A, Mandiant APT41 Global Intrusion )",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89):\nThe product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-7138:\nA vulnerability, which was classified as critical, was found in code-projects Client Details System 1.0. This affects an unknown part of the file /admin of the component HTTP POST Request Handler. The manipulation of the argument username leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-249141 was assigned to this vulnerability.\n\nYour goal is to determine if Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89) is related to CVE-2023-7138, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') (CWE-89)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-7138",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability, which was classified as critical, was found in code-projects Client Details System 1.0. This affects an unknown part of the file /admin of the component HTTP POST Request Handler. The manipulation of the argument username leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-249141 was assigned to this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Stuxnet (S0603):\nStuxnet was the first publicly reported piece of malware to specifically target industrial control systems devices. Stuxnet is a large and complex piece of malware that utilized multiple different behaviors including multiple zero-day vulnerabilities, a sophisticated Windows rootkit, and network infection routines. Stuxnet was discovered in 2010, with some components being used as early as November 2008.(Citations: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011, CISA ICS Advisory ICSA-10-272-01, ESET Stuxnet Under the Microscope, Langer Stuxnet, Nicolas Falliere, Liam O Murchu, Eric Chien February 2011)\n\nThe MITRE ATT&CK technique is Exfiltration Over C2 Channel (T1041):\nAdversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Stuxnet (S0603)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Stuxnet was the first publicly reported piece of malware to specifically target industrial control systems devices. Stuxnet is a large and complex piece of malware that utilized multiple different behaviors including multiple zero-day vulnerabilities, a sophisticated Windows rootkit, and network infection routines. Stuxnet was discovered in 2010, with some components being used as early as November 2008.(Citations: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011, CISA ICS Advisory ICSA-10-272-01, ESET Stuxnet Under the Microscope, Langer Stuxnet, Nicolas Falliere, Liam O Murchu, Eric Chien February 2011)",
      "dyn_dst_name": "Exfiltration Over C2 Channel (T1041)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is User-Controlled Filename (CAPEC-73):\nAn attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.\n\nThe CWE (Common Weakness Enumeration) is Incomplete List of Disallowed Inputs (CWE-184):\nThe product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nYour goal is to determine if User-Controlled Filename (CAPEC-73) is related to Incomplete List of Disallowed Inputs (CWE-184), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "User-Controlled Filename (CAPEC-73)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
      "dyn_dst_name": "Incomplete List of Disallowed Inputs (CWE-184)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware RAPIDPULSE (S1113) and Deobfuscate/Decode Files or Information (T1140). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware RAPIDPULSE (S1113) -\nRAPIDPULSE is a web shell that exists as a modification to a legitimate Pulse Secure file that has been used by APT5 since at least 2021.(Citations: Mandiant Pulse Secure Update May 2021)\n\nDeobfuscate/Decode Files or Information (T1140) -\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware RAPIDPULSE (S1113)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "RAPIDPULSE is a web shell that exists as a modification to a legitimate Pulse Secure file that has been used by APT5 since at least 2021.(Citations: Mandiant Pulse Secure Update May 2021)",
      "dyn_dst_name": "Deobfuscate/Decode Files or Information (T1140)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-37265 and CWE-306 (Missing Authentication for Critical Function). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-37265 -\nCasaOS is an open-source Personal Cloud system. Due to a lack of IP address verification an unauthenticated attackers can execute arbitrary commands as `root` on CasaOS instances. The problem was addressed by improving the detection of client IP addresses in `391dd7f`. This patch is part of CasaOS 0.4.4. Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly.\n\nCWE-306 (Missing Authentication for Critical Function) -\nThe product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-37265",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "CasaOS is an open-source Personal Cloud system. Due to a lack of IP address verification an unauthenticated attackers can execute arbitrary commands as `root` on CasaOS instances. The problem was addressed by improving the detection of client IP addresses in `391dd7f`. This patch is part of CasaOS 0.4.4. Users should upgrade to CasaOS 0.4.4. If they can't, they should temporarily restrict access to CasaOS to untrusted users, for instance by not exposing it publicly.",
      "dyn_dst_name": "CWE-306 (Missing Authentication for Critical Function)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-20695 and operating system firepower_appliance_7115_firmware (by cisco) version 6.5.0. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-20695 -\nA vulnerability in the authentication functionality of Cisco Wireless LAN Controller (WLC) Software could allow an unauthenticated, remote attacker to bypass authentication controls and log in to the device through the management interface This vulnerability is due to the improper implementation of the password validation algorithm. An attacker could exploit this vulnerability by logging in to an affected device with crafted credentials. A successful exploit could allow the attacker to bypass authentication and log in to the device as an administrator. The attacker could obtain privileges that are the same level as an administrative user but it depends on the crafted credentials. Note: This vulnerability exists because of a non-default device configuration that must be present for it to be exploitable. For details about the vulnerable configuration, see the Vulnerable Products section of this advisory.\n\noperating system firepower_appliance_7115_firmware (by cisco) version 6.5.0 -\n\"firepower_appliance_7115_firmware\" is an operating system released by \"cisco\".  This product version is 6.5.0",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-20695",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the authentication functionality of Cisco Wireless LAN Controller (WLC) Software could allow an unauthenticated, remote attacker to bypass authentication controls and log in to the device through the management interface This vulnerability is due to the improper implementation of the password validation algorithm. An attacker could exploit this vulnerability by logging in to an affected device with crafted credentials. A successful exploit could allow the attacker to bypass authentication and log in to the device as an administrator. The attacker could obtain privileges that are the same level as an administrative user but it depends on the crafted credentials. Note: This vulnerability exists because of a non-default device configuration that must be present for it to be exploitable. For details about the vulnerable configuration, see the Vulnerable Products section of this advisory.",
      "dyn_dst_name": "operating system firepower_appliance_7115_firmware (by cisco) version 6.5.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"firepower_appliance_7115_firmware\" is an operating system released by \"cisco\".  This product version is 6.5.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-3272:\n** UNSUPPORTED WHEN ASSIGNED ** A vulnerability, which was classified as very critical, has been found in D-Link DNS-320L, DNS-325, DNS-327L and DNS-340L up to 20240403. This issue affects some unknown processing of the file /cgi-bin/nas_sharing.cgi of the component HTTP GET Request Handler. The manipulation of the argument user with the input messagebus leads to hard-coded credentials. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-259283. NOTE: This vulnerability only affects products that are no longer supported by the maintainer. NOTE: Vendor was contacted early and confirmed immediately that the product is end-of-life. It should be retired and replaced.\n\nThe CPE (Common Platform Enumeration) is operating system dns-320_firmware (by dlink) version -:\n\"dns-320_firmware\" is an operating system released by \"dlink\".  This product version is -\n\nYour goal is to determine if CVE-2024-3272 is related to operating system dns-320_firmware (by dlink) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-3272",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability, which was classified as very critical, has been found in D-Link DNS-320L, DNS-325, DNS-327L and DNS-340L up to 20240403. This issue affects some unknown processing of the file /cgi-bin/nas_sharing.cgi of the component HTTP GET Request Handler. The manipulation of the argument user with the input messagebus leads to hard-coded credentials. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-259283. NOTE: This vulnerability only affects products that are no longer supported by the maintainer. NOTE: Vendor was contacted early and confirmed immediately that the product is end-of-life. It should be retired and replaced.",
      "dyn_dst_name": "operating system dns-320_firmware (by dlink) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"dns-320_firmware\" is an operating system released by \"dlink\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, operating system latitude_3510_firmware (by dell) version * and CVE-2022-26854. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\noperating system latitude_3510_firmware (by dell) version * -\n\"latitude_3510_firmware\" is an operating system released by \"dell\". \n\nCVE-2022-26854 -\nDell PowerScale OneFS, versions 8.2.x-9.2.x, contain risky cryptographic algorithms. A remote unprivileged malicious attacker could potentially exploit this vulnerability, leading to full system access",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system latitude_3510_firmware (by dell) version *",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"latitude_3510_firmware\" is an operating system released by \"dell\". ",
      "dyn_dst_name": "CVE-2022-26854",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Dell PowerScale OneFS, versions 8.2.x-9.2.x, contain risky cryptographic algorithms. A remote unprivileged malicious attacker could potentially exploit this vulnerability, leading to full system access",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware StrongPity (S0491) and Domain Trust Discovery (T1482). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware StrongPity (S0491) -\nStrongPity is an information stealing malware used by PROMETHIUM.(Citations: Bitdefender StrongPity June 2020, Talos Promethium June 2020)\n\nDomain Trust Discovery (T1482) -\nAdversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.(Citations: Microsoft Trusts, AdSecurity Forging Trust Tickets, Harmj0y Domain Trusts, Harmj0y Domain Trusts, Microsoft Operation Wilysupply)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware StrongPity (S0491)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "StrongPity is an information stealing malware used by PROMETHIUM.(Citations: Bitdefender StrongPity June 2020, Talos Promethium June 2020)",
      "dyn_dst_name": "Domain Trust Discovery (T1482)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.(Citations: Microsoft Trusts, AdSecurity Forging Trust Tickets, Harmj0y Domain Trusts, Harmj0y Domain Trusts, Microsoft Operation Wilysupply)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware HAPPYWORK (S0214) and T1007 (System Service Discovery). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware HAPPYWORK (S0214) -\nHAPPYWORK is a downloader used by APT37 to target South Korean government and financial victims in November 2016. (Citations: FireEye APT37 Feb 2018)\n\nT1007 (System Service Discovery) -\nAdversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>. Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware HAPPYWORK (S0214)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "HAPPYWORK is a downloader used by APT37 to target South Korean government and financial victims in November 2016. (Citations: FireEye APT37 Feb 2018)",
      "dyn_dst_name": "T1007 (System Service Discovery)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>. Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware Downdelph (S0134):\nDowndelph is a first-stage downloader written in Delphi that has been used by APT28 in rare instances between 2013 and 2015. (Citations: ESET Sednit Part 3)\n\nThe MITRE ATT&CK sub-technique is T1027.002 (Software Packing):\nAdversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)\n\nYour goal is to determine if malware Downdelph (S0134) is related to T1027.002 (Software Packing), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Downdelph (S0134)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Downdelph is a first-stage downloader written in Delphi that has been used by APT28 in rare instances between 2013 and 2015. (Citations: ESET Sednit Part 3)",
      "dyn_dst_name": "T1027.002 (Software Packing)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citations: ESET FinFisher Jan 2018, Awesome Executable Packing)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Credential Prompt Impersonation (CAPEC-654)\nThe adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt. A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user.\n\nThe CWE (Common Weakness Enumeration) is Reliance on IP Address for Authentication (CWE-291)\nThe product uses an IP address for authentication.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Credential Prompt Impersonation (CAPEC-654)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "The adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt. A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user.",
      "dyn_dst_name": "Reliance on IP Address for Authentication (CWE-291)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses an IP address for authentication.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Unrestricted Upload of File with Dangerous Type (CWE-434) and CVE-2024-1116. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nUnrestricted Upload of File with Dangerous Type (CWE-434) -\nThe product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nCVE-2024-1116 -\nA vulnerability was found in openBI up to 1.0.8. It has been classified as critical. Affected is the function index of the file /application/plugins/controller/Upload.php. The manipulation leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-252474 is the identifier assigned to this vulnerability.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Unrestricted Upload of File with Dangerous Type (CWE-434)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
      "dyn_dst_name": "CVE-2024-1116",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability was found in openBI up to 1.0.8. It has been classified as critical. Affected is the function index of the file /application/plugins/controller/Upload.php. The manipulation leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-252474 is the identifier assigned to this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CPE (Common Platform Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CPE (Common Platform Enumeration) is operating system apq8053_firmware (by qualcomm) version -:\n\"apq8053_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-1517:\nLRM utilizes elevated privileges. An unauthenticated malicious actor can upload and execute code remotely at the operating system level, which can allow an attacker to change settings, configurations, software, or access sensitive data on the affected produc. An attacker could also exploit this vulnerability to access APIs not intended for general use and interact through the network.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system apq8053_firmware (by qualcomm) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"apq8053_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_dst_name": "CVE-2022-1517",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "LRM utilizes elevated privileges. An unauthenticated malicious actor can upload and execute code remotely at the operating system level, which can allow an attacker to change settings, configurations, software, or access sensitive data on the affected produc. An attacker could also exploit this vulnerability to access APIs not intended for general use and interact through the network.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-32449 and operating system android (by google) version 10.0. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-32449 -\nTOTOLINK EX300_V2 V4.0.3c.7484 was discovered to contain a command injection vulnerability via the langType parameter in the setLanguageCfg function. This vulnerability is exploitable via a crafted MQTT data packet.\n\noperating system android (by google) version 10.0 -\n\"android\" is an operating system released by \"google\".  This product version is 10.0",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-32449",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOLINK EX300_V2 V4.0.3c.7484 was discovered to contain a command injection vulnerability via the langType parameter in the setLanguageCfg function. This vulnerability is exploitable via a crafted MQTT data packet.",
      "dyn_dst_name": "operating system android (by google) version 10.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is 10.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Credential API Hooking (T1056.004) and tool Empire (S0363). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCredential API Hooking (T1056.004) -\nAdversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via: * **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. * **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored. * **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citations: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017, Microsoft Hook Overview, Elastic Process Injection July 2017, Elastic Process Injection July 2017, Adlice Software IAT Hooks Oct 2014, MWRInfoSecurity Dynamic Hooking 2015, Elastic Process Injection July 2017, HighTech Bridge Inline Hooking Sept 2011, MWRInfoSecurity Dynamic Hooking 2015)\n\ntool Empire (S0363) -\nEmpire is an open source, cross-platform remote administration and post-exploitation framework that is publicly available on GitHub. While the tool itself is primarily written in Python, the post-exploitation agents are written in pure PowerShell for Windows and Python for Linux/macOS. Empire was one of five tools singled out by a joint report on public hacking tools being widely used by adversaries.(Citations: NCSC Joint Report Public Tools, Github PowerShell Empire, GitHub ATTACK Empire)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Credential API Hooking (T1056.004)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via: * **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. * **Import address table (IAT) hooking**, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored. * **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citations: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017, Microsoft Hook Overview, Elastic Process Injection July 2017, Elastic Process Injection July 2017, Adlice Software IAT Hooks Oct 2014, MWRInfoSecurity Dynamic Hooking 2015, Elastic Process Injection July 2017, HighTech Bridge Inline Hooking Sept 2011, MWRInfoSecurity Dynamic Hooking 2015)",
      "dyn_dst_name": "tool Empire (S0363)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Empire is an open source, cross-platform remote administration and post-exploitation framework that is publicly available on GitHub. While the tool itself is primarily written in Python, the post-exploitation agents are written in pure PowerShell for Windows and Python for Linux/macOS. Empire was one of five tools singled out by a joint report on public hacking tools being widely used by adversaries.(Citations: NCSC Joint Report Public Tools, Github PowerShell Empire, GitHub ATTACK Empire)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK tactic and MITRE ATT&CK sub-technique:\n\nThe MITRE ATT&CK tactic is defense-evasion (TA0005)\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nThe MITRE ATT&CK sub-technique is Fileless Storage (T1027.011)\nAdversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository. Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored. Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citations: Microsoft Fileless, SecureList Fileless, Microsoft Fileless)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "defense-evasion (TA0005)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_dst_name": "Fileless Storage (T1027.011)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository. Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored. Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citations: Microsoft Fileless, SecureList Fileless, Microsoft Fileless)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures):\n\nThe CWE (Common Weakness Enumeration) is Integer Underflow (Wrap or Wraparound) (CWE-191)\nThe product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-40181\nFreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. Affected versions are subject to an Integer-Underflow leading to Out-Of-Bound Read in the `zgfx_decompress_segment` function. In the context of `CopyMemory`, it's possible to read data beyond the transmitted packet range and likely cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this issue.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Integer Underflow (Wrap or Wraparound) (CWE-191)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
      "dyn_dst_name": "CVE-2023-40181",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP), released under the Apache license. Affected versions are subject to an Integer-Underflow leading to Out-Of-Bound Read in the `zgfx_decompress_segment` function. In the context of `CopyMemory`, it's possible to read data beyond the transmitted packet range and likely cause a crash. This issue has been addressed in versions 2.11.0 and 3.0.0-beta3. Users are advised to upgrade. There are no known workarounds for this issue.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-27001:\nArris TR3300 v1.0.13 were discovered to contain a command injection vulnerability in the dhcp function via the hostname parameter. This vulnerability allows attackers to execute arbitrary commands via a crafted request.\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version -:\n\"android\" is an operating system released by \"google\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-27001",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Arris TR3300 v1.0.13 were discovered to contain a command injection vulnerability in the dhcp function via the hostname parameter. This vulnerability allows attackers to execute arbitrary commands via a crafted request.",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-42770 and operating system vt-mipm-135-d_firmware (by redlioncontrols) version 4.9.114. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-42770 -\nRed Lion SixTRAK and VersaTRAK Series RTUs with authenticated users enabled (UDR-A) any Sixnet UDR message will meet an authentication challenge over UDP/IP. When the same message is received over TCP/IP the RTU will simply accept the message with no authentication challenge.\n\noperating system vt-mipm-135-d_firmware (by redlioncontrols) version 4.9.114 -\n\"vt-mipm-135-d_firmware\" is an operating system released by \"redlioncontrols\".  This product version is 4.9.114",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-42770",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Red Lion SixTRAK and VersaTRAK Series RTUs with authenticated users enabled (UDR-A) any Sixnet UDR message will meet an authentication challenge over UDP/IP. When the same message is received over TCP/IP the RTU will simply accept the message with no authentication challenge.",
      "dyn_dst_name": "operating system vt-mipm-135-d_firmware (by redlioncontrols) version 4.9.114",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"vt-mipm-135-d_firmware\" is an operating system released by \"redlioncontrols\".  This product version is 4.9.114",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-22954:\nVMware Workspace ONE Access and Identity Manager contain a remote code execution vulnerability due to server-side template injection. A malicious actor with network access can trigger a server-side template injection that may result in remote code execution.\n\nThe CPE (Common Platform Enumeration) is application fusion (by vmware) version 7.1.0:\n\"fusion\" is an application released by \"vmware\".  This product version is 7.1.0\n\nYour goal is to determine if CVE-2022-22954 is related to application fusion (by vmware) version 7.1.0, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-22954",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "VMware Workspace ONE Access and Identity Manager contain a remote code execution vulnerability due to server-side template injection. A malicious actor with network access can trigger a server-side template injection that may result in remote code execution.",
      "dyn_dst_name": "application fusion (by vmware) version 7.1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"fusion\" is an application released by \"vmware\".  This product version is 7.1.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Keydnap (S0276)\nThis piece of malware steals the content of the user's keychain while maintaining a permanent backdoor .(Citations: OSX Keydnap malware)\n\nThe MITRE ATT&CK sub-technique is GUI Input Capture (T1056.002)\nAdversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control). Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.(Citations: OSX Malware Exploits MacKeeper, LogRhythm Do You Trust Oct 2014, OSX Keydnap malware, Spoofing credential dialogs, LogRhythm Do You Trust Oct 2014, Enigma Phishing for Credentials Jan 2015, Spoofing credential dialogs, Spoofing credential dialogs)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Keydnap (S0276)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "This piece of malware steals the content of the user's keychain while maintaining a permanent backdoor .(Citations: OSX Keydnap malware)",
      "dyn_dst_name": "GUI Input Capture (T1056.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control). Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.(Citations: OSX Malware Exploits MacKeeper, LogRhythm Do You Trust Oct 2014, OSX Keydnap malware, Spoofing credential dialogs, LogRhythm Do You Trust Oct 2014, Enigma Phishing for Credentials Jan 2015, Spoofing credential dialogs, Spoofing credential dialogs)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-46987:\nSeaCMS v12.9 was discovered to contain a remote code execution (RCE) vulnerability via the component /augap/adminip.php.\n\nThe CPE (Common Platform Enumeration) is application seacms (by seacms) version 12.9:\n\"seacms\" is an application released by \"seacms\".  This product version is 12.9\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-46987",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "SeaCMS v12.9 was discovered to contain a remote code execution (RCE) vulnerability via the component /augap/adminip.php.",
      "dyn_dst_name": "application seacms (by seacms) version 12.9",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"seacms\" is an application released by \"seacms\".  This product version is 12.9",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CAPEC-34 (HTTP Response Splitting) and Interpretation Conflict (CWE-436). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCAPEC-34 (HTTP Response Splitting) -\nMalicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding. A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses. This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path. This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aby sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.\n\nInterpretation Conflict (CWE-436) -\nProduct A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-34 (HTTP Response Splitting)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Malicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding. A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses. This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path. This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aby sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques.",
      "dyn_dst_name": "Interpretation Conflict (CWE-436)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is malware StrongPity (S0491):\nStrongPity is an information stealing malware used by PROMETHIUM.(Citations: Bitdefender StrongPity June 2020, Talos Promethium June 2020)\n\nThe MITRE ATT&CK technique is Ingress Tool Transfer (T1105):\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)\n\nYour goal is to determine if malware StrongPity (S0491) is related to Ingress Tool Transfer (T1105), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware StrongPity (S0491)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "StrongPity is an information stealing malware used by PROMETHIUM.(Citations: Bitdefender StrongPity June 2020, Talos Promethium June 2020)",
      "dyn_dst_name": "Ingress Tool Transfer (T1105)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Application API Navigation Remapping (CAPEC-386):\nAn attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\n\nThe CWE (Common Weakness Enumeration) is Modification of Assumed-Immutable Data (MAID) (CWE-471):\nThe product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Application API Navigation Remapping (CAPEC-386)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",
      "dyn_dst_name": "Modification of Assumed-Immutable Data (MAID) (CWE-471)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not properly protect an assumed-immutable element from being modified by an attacker.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and CAPEC (Common Attack Pattern Enumeration and Classification) and their descriptions:\n\nThe MITRE ATT&CK sub-technique is Compromise Hardware Supply Chain (T1195.003):\nAdversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is CAPEC-672 (Malicious Code Implanted During Chip Programming):\nDuring the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip\u2019s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.\n\nYour goal is to determine if Compromise Hardware Supply Chain (T1195.003) is related to CAPEC-672 (Malicious Code Implanted During Chip Programming), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Compromise Hardware Supply Chain (T1195.003)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
      "dyn_dst_name": "CAPEC-672 (Malicious Code Implanted During Chip Programming)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip\u2019s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CAPEC (Common Attack Pattern Enumeration and Classification) presented below:\n\nThe CWE (Common Weakness Enumeration) is CWE-1007 (Insufficient Visual Distinction of Homoglyphs Presented to User):\nThe product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Collect Data from Clipboard (CAPEC-637):\nThe adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-1007 (Insufficient Visual Distinction of Homoglyphs Presented to User)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",
      "dyn_dst_name": "Collect Data from Clipboard (CAPEC-637)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware SslMM (S0058):\nSslMM is a full-featured backdoor used by Naikon that has multiple variants. (Citations: Baumgartner Naikon 2015)\n\nThe MITRE ATT&CK technique is Execution Guardrails (T1480):\nAdversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses. Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.(Citations: FireEye Kevin Mandia Guardrails, FireEye Outlook Dec 2019)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware SslMM (S0058)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SslMM is a full-featured backdoor used by Naikon that has multiple variants. (Citations: Baumgartner Naikon 2015)",
      "dyn_dst_name": "Execution Guardrails (T1480)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary\u2019s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses. Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.(Citations: FireEye Kevin Mandia Guardrails, FireEye Outlook Dec 2019)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-1668 and operating system qcs405_firmware (by qualcomm) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-1668 -\nWeak default root user credentials allow remote attackers to easily obtain OS superuser privileges over the open TCP port for SSH.\n\noperating system qcs405_firmware (by qualcomm) version - -\n\"qcs405_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-1668",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Weak default root user credentials allow remote attackers to easily obtain OS superuser privileges over the open TCP port for SSH.",
      "dyn_dst_name": "operating system qcs405_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qcs405_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33268:\nAn issue was discovered in DTS Monitoring 3.57.0. The parameter port within the SSL Certificate check function is vulnerable to OS command injection (blind).\n\nThe CWE (Common Weakness Enumeration) is CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')):\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nYour goal is to determine if CVE-2023-33268 is related to CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33268",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An issue was discovered in DTS Monitoring 3.57.0. The parameter port within the SSL Certificate check function is vulnerable to OS command injection (blind).",
      "dyn_dst_name": "CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-1351:\nA vulnerability classified as critical has been found in SourceCodester Computer Parts Sales and Inventory System 1.0. This affects an unknown part of the file cust_transac.php. The manipulation of the argument phonenumber leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-222849 was assigned to this vulnerability.\n\nThe CPE (Common Platform Enumeration) is application computer_parts_sales_and_inventory_system (by computer_parts_sales_and_inventory_system_project) version 1.0:\n\"computer_parts_sales_and_inventory_system\" is an application released by \"computer_parts_sales_and_inventory_system_project\".  This product version is 1.0\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-1351",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability classified as critical has been found in SourceCodester Computer Parts Sales and Inventory System 1.0. This affects an unknown part of the file cust_transac.php. The manipulation of the argument phonenumber leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-222849 was assigned to this vulnerability.",
      "dyn_dst_name": "application computer_parts_sales_and_inventory_system (by computer_parts_sales_and_inventory_system_project) version 1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"computer_parts_sales_and_inventory_system\" is an application released by \"computer_parts_sales_and_inventory_system_project\".  This product version is 1.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware FatDuke (S0512)\nFatDuke is a backdoor used by APT29 since at least 2016.(Citations: ESET Dukes October 2019)\n\nThe MITRE ATT&CK sub-technique is T1070.004 (File Deletion)\nAdversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.(Citations: Microsoft SDelete July 2016)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware FatDuke (S0512)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FatDuke is a backdoor used by APT29 since at least 2016.(Citations: ESET Dukes October 2019)",
      "dyn_dst_name": "T1070.004 (File Deletion)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint. There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.(Citations: Microsoft SDelete July 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25760:\nAll versions of package accesslog are vulnerable to Arbitrary Code Injection due to the usage of the Function constructor without input sanitization. If (attacker-controlled) user input is given to the format option of the package's exported constructor function, it is possible for an attacker to execute arbitrary JavaScript code on the host that this package is being run on.\n\nThe CPE (Common Platform Enumeration) is operating system debian_linux (by debian) version 9.0:\n\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25760",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "All versions of package accesslog are vulnerable to Arbitrary Code Injection due to the usage of the Function constructor without input sanitization. If (attacker-controlled) user input is given to the format option of the package's exported constructor function, it is possible for an attacker to execute arbitrary JavaScript code on the host that this package is being run on.",
      "dyn_dst_name": "operating system debian_linux (by debian) version 9.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"debian_linux\" is an operating system released by \"debian\".  This product version is 9.0",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-4853:\nA flaw was found in Quarkus where HTTP security policies are not sanitizing certain character permutations correctly when accepting requests, resulting in incorrect evaluation of permissions. This issue could allow an attacker to bypass the security policy altogether, resulting in unauthorized endpoint access and possibly a denial of service.\n\nThe CPE (Common Platform Enumeration) is application build_of_quarkus (by redhat) version *:\n\"build_of_quarkus\" is an application released by \"redhat\". \n\nYour goal is to determine if CVE-2023-4853 is related to application build_of_quarkus (by redhat) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-4853",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A flaw was found in Quarkus where HTTP security policies are not sanitizing certain character permutations correctly when accepting requests, resulting in incorrect evaluation of permissions. This issue could allow an attacker to bypass the security policy altogether, resulting in unauthorized endpoint access and possibly a denial of service.",
      "dyn_dst_name": "application build_of_quarkus (by redhat) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"build_of_quarkus\" is an application released by \"redhat\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-30913 and operating system windows_10 (by microsoft) version 1607. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-30913 -\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the ipqos_set_bandwidth parameter at /goform/aspForm.\n\noperating system windows_10 (by microsoft) version 1607 -\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30913",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the ipqos_set_bandwidth parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version 1607",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is 1607",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-21369:\nMicrosoft WDAC OLE DB provider for SQL Server Remote Code Execution Vulnerability\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2022_23h2 (by microsoft) version *:\n\"windows_server_2022_23h2\" is an operating system released by \"microsoft\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-21369",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Microsoft WDAC OLE DB provider for SQL Server Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system windows_server_2022_23h2 (by microsoft) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2022_23h2\" is an operating system released by \"microsoft\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware KONNI (S0356)\nKONNI is a remote access tool that security researchers assess has been used by North Korean cyber actors since at least 2014. KONNI has significant code overlap with the NOKKI malware family, and has been linked to several suspected North Korean campaigns targeting political organizations in Russia, East Asia, Europe and the Middle East; there is some evidence potentially linking KONNI to APT37.(Citations: Talos Konni May 2017, Unit 42 NOKKI Sept 2018, Unit 42 Nokki Oct 2018, Medium KONNI Jan 2020, Malwarebytes Konni Aug 2021)\n\nThe MITRE ATT&CK technique is T1106 (Native API)\nAdversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware KONNI (S0356)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "KONNI is a remote access tool that security researchers assess has been used by North Korean cyber actors since at least 2014. KONNI has significant code overlap with the NOKKI malware family, and has been linked to several suspected North Korean campaigns targeting political organizations in Russia, East Asia, Europe and the Middle East; there is some evidence potentially linking KONNI to APT37.(Citations: Talos Konni May 2017, Unit 42 NOKKI Sept 2018, Unit 42 Nokki Oct 2018, Medium KONNI Jan 2020, Malwarebytes Konni Aug 2021)",
      "dyn_dst_name": "T1106 (Native API)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, S0002 (tool Mimikatz) and Pass the Ticket (T1550.003). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nS0002 (tool Mimikatz) -\nMimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks.  (Citations: Deply Mimikatz, Adsecurity Mimikatz Guide)\n\nPass the Ticket (T1550.003) -\nAdversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.(Citations: ADSecurity AD Kerberos Attacks, GentilKiwi Pass the Ticket, ADSecurity AD Kerberos Attacks, Campbell 2014, Stealthbits Overpass-the-Hash)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0002 (tool Mimikatz)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords, along with many other features that make it useful for testing the security of networks.  (Citations: Deply Mimikatz, Adsecurity Mimikatz Guide)",
      "dyn_dst_name": "Pass the Ticket (T1550.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may \u201cpass the ticket\u201d using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.(Citations: ADSecurity AD Kerberos Attacks, GentilKiwi Pass the Ticket, ADSecurity AD Kerberos Attacks, Campbell 2014, Stealthbits Overpass-the-Hash)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-27079:\nTenda M3 1.10 V1.0.0.12(4856) was discovered to contain a command injection vulnerability via the component /goform/setPicListItem.\n\nThe CPE (Common Platform Enumeration) is operating system h500s_firmware (by netapp) version -:\n\"h500s_firmware\" is an operating system released by \"netapp\".  This product version is -\n\nYour goal is to determine if CVE-2022-27079 is related to operating system h500s_firmware (by netapp) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-27079",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda M3 1.10 V1.0.0.12(4856) was discovered to contain a command injection vulnerability via the component /goform/setPicListItem.",
      "dyn_dst_name": "operating system h500s_firmware (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"h500s_firmware\" is an operating system released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Cross-Site Request Forgery (CSRF) (CWE-352):\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2024-24524:\nCross Site Request Forgery (CSRF) vulnerability in flusity-CMS v.2.33, allows remote attackers to execute arbitrary code via the add_menu.php component.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2024-24524",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross Site Request Forgery (CSRF) vulnerability in flusity-CMS v.2.33, allows remote attackers to execute arbitrary code via the add_menu.php component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Email Injection (CAPEC-134):\nMany applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an adversary adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an adversary can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.\n\nThe CWE (Common Weakness Enumeration) is Processor Optimization Removal or Modification of Security-critical Code (CWE-1037):\nThe developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\n\nYour goal is to determine if Email Injection (CAPEC-134) is related to Processor Optimization Removal or Modification of Security-critical Code (CWE-1037), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Email Injection (CAPEC-134)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an adversary adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an adversary can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character.",
      "dyn_dst_name": "Processor Optimization Removal or Modification of Security-critical Code (CWE-1037)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware NGLite (S1106) and Symmetric Cryptography (T1573.001). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware NGLite (S1106) -\nNGLite is a backdoor Trojan that is only capable of running commands received through its C2 channel. While the capabilities are standard for a backdoor, NGLite uses a novel C2 channel that leverages a decentralized network based on the legitimate NKN to communicate between the backdoor and the actors.(Citations: NGLite Trojan)\n\nSymmetric Cryptography (T1573.001) -\nAdversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware NGLite (S1106)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "NGLite is a backdoor Trojan that is only capable of running commands received through its C2 channel. While the capabilities are standard for a backdoor, NGLite uses a novel C2 channel that leverages a decentralized network based on the legitimate NKN to communicate between the backdoor and the actors.(Citations: NGLite Trojan)",
      "dyn_dst_name": "Symmetric Cryptography (T1573.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Cross-Site Request Forgery (CSRF) (CWE-352):\nThe web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-46085:\nCross-Site Request Forgery (CSRF) vulnerability in Wpmet Wp Ultimate Review plugin <= 2.2.4 versions.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Cross-Site Request Forgery (CSRF) (CWE-352)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
      "dyn_dst_name": "CVE-2023-46085",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Cross-Site Request Forgery (CSRF) vulnerability in Wpmet Wp Ultimate Review plugin <= 2.2.4 versions.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Data Serialization External Entities Blowup (CAPEC-221):\nThis attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.\n\nThe CWE (Common Weakness Enumeration) is Improper Restriction of XML External Entity Reference (CWE-611):\nThe product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Data Serialization External Entities Blowup (CAPEC-221)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",
      "dyn_dst_name": "Improper Restriction of XML External Entity Reference (CWE-611)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-6768 and Improper Authentication (CWE-287). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-6768 -\nAuthentication bypass vulnerability in Amazing Little Poll affecting versions 1.3 and 1.4. This vulnerability could allow an unauthenticated user to access the admin panel without providing any credentials by simply accessing the \"lp_admin.php?adminstep=\" parameter.\n\nImproper Authentication (CWE-287) -\nWhen an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-6768",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Authentication bypass vulnerability in Amazing Little Poll affecting versions 1.3 and 1.4. This vulnerability could allow an unauthenticated user to access the admin panel without providing any credentials by simply accessing the \"lp_admin.php?adminstep=\" parameter.",
      "dyn_dst_name": "Improper Authentication (CWE-287)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-6156:\nImproper neutralization of livestatus command delimiters in the availability timeline in Checkmk <= 2.0.0p39, < 2.1.0p37, and < 2.2.0p15 allows arbitrary livestatus command execution for authorized users.\n\nThe CPE (Common Platform Enumeration) is application checkmk (by tribe29) version 2.1.0:\n\"checkmk\" is an application released by \"tribe29\".  This product version is 2.1.0 and minor version (point release) p15\n\nYour goal is to determine if CVE-2023-6156 is related to application checkmk (by tribe29) version 2.1.0, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-6156",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Improper neutralization of livestatus command delimiters in the availability timeline in Checkmk <= 2.0.0p39, < 2.1.0p37, and < 2.2.0p15 allows arbitrary livestatus command execution for authorized users.",
      "dyn_dst_name": "application checkmk (by tribe29) version 2.1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"checkmk\" is an application released by \"tribe29\".  This product version is 2.1.0 and minor version (point release) p15",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-25643 and operating system windows_10 (by microsoft) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-25643 -\nseatd-launch in seatd 0.6.x before 0.6.4 allows removing files with escalated privileges when installed setuid root. The attack vector is a user-supplied socket pathname.\n\noperating system windows_10 (by microsoft) version - -\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25643",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "seatd-launch in seatd 0.6.x before 0.6.4 allows removing files with escalated privileges when installed setuid root. The attack vector is a user-supplied socket pathname.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware njRAT (S0385) and T1555.003 (Credentials from Web Browsers). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware njRAT (S0385) -\nnjRAT is a remote access tool (RAT) that was first observed in 2012. It has been used by threat actors in the Middle East.(Citations: Fidelis njRAT June 2013)\n\nT1555.003 (Credentials from Web Browsers) -\nAdversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).(Citations: Talos Olympic Destroyer 2018, Microsoft CryptUnprotectData April 2018, Proofpoint Vega Credential Stealer May 2018, FireEye HawkEye Malware July 2017, GitHub Mimikittenz July 2016)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware njRAT (S0385)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "njRAT is a remote access tool (RAT) that was first observed in 2012. It has been used by threat actors in the Middle East.(Citations: Fidelis njRAT June 2013)",
      "dyn_dst_name": "T1555.003 (Credentials from Web Browsers)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victim\u2019s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).(Citations: Talos Olympic Destroyer 2018, Microsoft CryptUnprotectData April 2018, Proofpoint Vega Credential Stealer May 2018, FireEye HawkEye Malware July 2017, GitHub Mimikittenz July 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25440:\nTenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the ntpserver parameter in the SetSysTimeCfg function.\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version -:\n\"android\" is an operating system released by \"google\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25440",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the ntpserver parameter in the SetSysTimeCfg function.",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is S0266 (malware TrickBot):\nTrickBot is a Trojan spyware program written in C++ that first emerged in September 2016 as a possible successor to Dyre. TrickBot was developed and initially used by Wizard Spider for targeting banking sites in North America, Australia, and throughout Europe; it has since been used against all sectors worldwide as part of \"big game hunting\" ransomware campaigns.(Citations: S2 Grupo TrickBot June 2017, Fidelis TrickBot Oct 2016, IBM TrickBot Nov 2016, CrowdStrike Wizard Spider October 2020)\n\nThe MITRE ATT&CK sub-technique is PowerShell (T1059.001):\nAdversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk. A number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, PoshC2, and PSAttack. PowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citations: TechNet PowerShell, Github PSAttack, Sixdub PowerPick Jan 2016, SilentBreak Offensive PS Dec 2015, Microsoft PSfromCsharp APR 2014)\n\nYour goal is to determine if S0266 (malware TrickBot) is related to PowerShell (T1059.001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0266 (malware TrickBot)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "TrickBot is a Trojan spyware program written in C++ that first emerged in September 2016 as a possible successor to Dyre. TrickBot was developed and initially used by Wizard Spider for targeting banking sites in North America, Australia, and throughout Europe; it has since been used against all sectors worldwide as part of \"big game hunting\" ransomware campaigns.(Citations: S2 Grupo TrickBot June 2017, Fidelis TrickBot Oct 2016, IBM TrickBot Nov 2016, CrowdStrike Wizard Spider October 2020)",
      "dyn_dst_name": "PowerShell (T1059.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk. A number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, PoshC2, and PSAttack. PowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citations: TechNet PowerShell, Github PSAttack, Sixdub PowerPick Jan 2016, SilentBreak Offensive PS Dec 2015, Microsoft PSfromCsharp APR 2014)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration):\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Signal Strength Tracking (CAPEC-619)\nIn this attack scenario, the attacker passively monitors the signal strength of the target\u2019s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.\n\nThe CWE (Common Weakness Enumeration) is CWE-601 (URL Redirection to Untrusted Site ('Open Redirect'))\nA web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Signal Strength Tracking (CAPEC-619)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "In this attack scenario, the attacker passively monitors the signal strength of the target\u2019s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",
      "dyn_dst_name": "CWE-601 (URL Redirection to Untrusted Site ('Open Redirect'))",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware Grandoreiro (S0531):\nGrandoreiro is a banking trojan written in Delphi that was first observed in 2016 and uses a Malware-as-a-Service (MaaS) business model. Grandoreiro has confirmed victims in Brazil, Mexico, Portugal, and Spain.(Citations: Securelist Brazilian Banking Malware July 2020, ESET Grandoreiro April 2020)\n\nThe MITRE ATT&CK sub-technique is Malicious File (T1204.002):\nAn adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.(Citations: Password Protected Word Docs)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Grandoreiro (S0531)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Grandoreiro is a banking trojan written in Delphi that was first observed in 2016 and uses a Malware-as-a-Service (MaaS) business model. Grandoreiro has confirmed victims in Brazil, Mexico, Portugal, and Spain.(Citations: Securelist Brazilian Banking Malware July 2020, ESET Grandoreiro April 2020)",
      "dyn_dst_name": "Malicious File (T1204.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Attachment. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl. Adversaries may employ various forms of Masquerading and Obfuscated Files or Information to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it. While Malicious File frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing.(Citations: Password Protected Word Docs)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, reconnaissance (TA0043) and Spearphishing Service (T1598.001). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nreconnaissance (TA0043) -\nThe adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.\n\nSpearphishing Service (T1598.001) -\nAdversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.(Citations: ThreatPost Social Media Phishing)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "reconnaissance (TA0043)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.",
      "dyn_dst_name": "Spearphishing Service (T1598.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: Social Media or Search Victim-Owned Websites) to craft persuasive and believable lures.(Citations: ThreatPost Social Media Phishing)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-28585\nMemory corruption while loading an ELF segment in TEE Kernel.\n\nThe CPE (Common Platform Enumeration) is operating system qcn9000_firmware (by qualcomm) version -\n\"qcn9000_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-28585",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Memory corruption while loading an ELF segment in TEE Kernel.",
      "dyn_dst_name": "operating system qcn9000_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qcn9000_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Use After Free (CWE-416):\nReferencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-3217:\nUse after free in WebXR in Google Chrome prior to 114.0.5735.133 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Use After Free (CWE-416)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
      "dyn_dst_name": "CVE-2023-3217",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Use after free in WebXR in Google Chrome prior to 114.0.5735.133 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK technique and their descriptions:\n\nThe malicious software is malware TDTESS (S0164):\nTDTESS is a 64-bit .NET binary backdoor used by CopyKittens. (Citations: ClearSky Wilted Tulip July 2017)\n\nThe MITRE ATT&CK technique is Ingress Tool Transfer (T1105):\nAdversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)\n\nYour goal is to determine if malware TDTESS (S0164) is related to Ingress Tool Transfer (T1105), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware TDTESS (S0164)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "TDTESS is a 64-bit .NET binary backdoor used by CopyKittens. (Citations: ClearSky Wilted Tulip July 2017)",
      "dyn_dst_name": "Ingress Tool Transfer (T1105)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, certutil, and PowerShell commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`. Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures). Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citations: t1105_lolbas, T1105: Trellix_search-ms, PTSecurity Cobalt Dec 2016, Dropbox Malware Sync)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK tactic and MITRE ATT&CK technique presented below:\n\nThe MITRE ATT&CK tactic is privilege-escalation (TA0004):\nThe adversary is trying to gain higher-level permissions. Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: * SYSTEM/root level * local administrator * user account with admin-like access * user accounts with access to specific system or perform specific function These techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.\n\nThe MITRE ATT&CK technique is Boot or Logon Autostart Execution (T1547):\nAdversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.(Citations: Microsoft Run Key, MSDN Authentication Packages, Microsoft TimeProvider, Cylance Reg Persistence Sept 2013, Linux Kernel Programming)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "privilege-escalation (TA0004)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to gain higher-level permissions. Privilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: * SYSTEM/root level * local administrator * user account with admin-like access * user accounts with access to specific system or perform specific function These techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.",
      "dyn_dst_name": "Boot or Logon Autostart Execution (T1547)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.(Citations: Microsoft Run Key, MSDN Authentication Packages, Microsoft TimeProvider, Cylance Reg Persistence Sept 2013, Linux Kernel Programming)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-22056\nThe Le-yan dental management system contains a hard-coded credentials vulnerability in the web page source code, which allows an unauthenticated remote attacker to acquire administrator\u2019s privilege and control the system or disrupt service.\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2012 (by microsoft) version -\n\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-22056",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The Le-yan dental management system contains a hard-coded credentials vulnerability in the web page source code, which allows an unauthenticated remote attacker to acquire administrator\u2019s privilege and control the system or disrupt service.",
      "dyn_dst_name": "operating system windows_server_2012 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-32358 and operating system macos (by apple) version *. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-32358 -\nA type confusion issue was addressed with improved checks. This issue is fixed in iOS 16.4 and iPadOS 16.4, macOS Ventura 13.3. Processing web content may lead to arbitrary code execution.\n\noperating system macos (by apple) version * -\n\"macos\" is an operating system released by \"apple\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-32358",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A type confusion issue was addressed with improved checks. This issue is fixed in iOS 16.4 and iPadOS 16.4, macOS Ventura 13.3. Processing web content may lead to arbitrary code execution.",
      "dyn_dst_name": "operating system macos (by apple) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"macos\" is an operating system released by \"apple\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Double Encoding (CAPEC-120) and Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nDouble Encoding (CAPEC-120) -\nThe adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.\n\nImproper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74) -\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Double Encoding (CAPEC-120)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",
      "dyn_dst_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-39545 and application expresscluster_x (by nec) version 3.0. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-39545 -\nCLUSTERPRO X Ver5.1 and earlier and EXPRESSCLUSTER X 5.1 and earlier, CLUSTERPRO X SingleServerSafe 5.1 and earlier, EXPRESSCLUSTER X SingleServerSafe 5.1 and earlier allows a attacker to log in to the product may execute an arbitrary command.\n\napplication expresscluster_x (by nec) version 3.0 -\n\"expresscluster_x\" is an application released by \"nec\".  This product version is 3.0",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-39545",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "CLUSTERPRO X Ver5.1 and earlier and EXPRESSCLUSTER X 5.1 and earlier, CLUSTERPRO X SingleServerSafe 5.1 and earlier, EXPRESSCLUSTER X SingleServerSafe 5.1 and earlier allows a attacker to log in to the product may execute an arbitrary command.",
      "dyn_dst_name": "application expresscluster_x (by nec) version 3.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"expresscluster_x\" is an application released by \"nec\".  This product version is 3.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware RotaJakiro (S1078) and Unix Shell Configuration Modification (T1546.004). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware RotaJakiro (S1078) -\nRotaJakiro is a 64-bit Linux backdoor used by APT32. First seen in 2018, it uses a plugin architecture to extend capabilities. RotaJakiro can determine it's permission level and execute according to access type (`root` or `user`).(Citations: RotaJakiro 2021 netlab360 analysis, netlab360 rotajakiro vs oceanlotus)\n\nUnix Shell Configuration Modification (T1546.004) -\nAdversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.(Citations: intezer-kaiji-malware, bencane blog bashrc, anomali-rocke-tactics, Linux manual bash invocation, Tsunami, anomali-rocke-tactics, anomali-linux-rabbit, Magento, ScriptingOSX zsh, PersistentJXA_leopitt, code_persistence_zsh, macOS MS office sandbox escape)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware RotaJakiro (S1078)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "RotaJakiro is a 64-bit Linux backdoor used by APT32. First seen in 2018, it uses a plugin architecture to extend capabilities. RotaJakiro can determine it's permission level and execute according to access type (`root` or `user`).(Citations: RotaJakiro 2021 netlab360 analysis, netlab360 rotajakiro vs oceanlotus)",
      "dyn_dst_name": "Unix Shell Configuration Modification (T1546.004)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user\u2019s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>. The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.(Citations: intezer-kaiji-malware, bencane blog bashrc, anomali-rocke-tactics, Linux manual bash invocation, Tsunami, anomali-rocke-tactics, anomali-linux-rabbit, Magento, ScriptingOSX zsh, PersistentJXA_leopitt, code_persistence_zsh, macOS MS office sandbox escape)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74) and CVE-2023-27040. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nImproper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74) -\nThe product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nCVE-2023-27040 -\nSimple Image Gallery v1.0 was discovered to contain a remote code execution (RCE) vulnerability via the username parameter.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection') (CWE-74)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-27040",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Simple Image Gallery v1.0 was discovered to contain a remote code execution (RCE) vulnerability via the username parameter.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-3275:\nA vulnerability classified as critical was found in PHPGurukul Rail Pass Management System 1.0. Affected by this vulnerability is an unknown functionality of the file /view-pass-detail.php of the component POST Request Handler. The manipulation of the argument searchdata leads to sql injection. The attack can be launched remotely. The identifier VDB-231625 was assigned to this vulnerability.\n\nThe CPE (Common Platform Enumeration) is application rail_pass_management_system (by phpgurukul) version 1.0:\n\"rail_pass_management_system\" is an application released by \"phpgurukul\".  This product version is 1.0\n\nYour goal is to determine if CVE-2023-3275 is related to application rail_pass_management_system (by phpgurukul) version 1.0, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-3275",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability classified as critical was found in PHPGurukul Rail Pass Management System 1.0. Affected by this vulnerability is an unknown functionality of the file /view-pass-detail.php of the component POST Request Handler. The manipulation of the argument searchdata leads to sql injection. The attack can be launched remotely. The identifier VDB-231625 was assigned to this vulnerability.",
      "dyn_dst_name": "application rail_pass_management_system (by phpgurukul) version 1.0",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"rail_pass_management_system\" is an application released by \"phpgurukul\".  This product version is 1.0",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware Pony (S0453)\nPony is a credential stealing malware, though has also been used among adversaries for its downloader capabilities. The source code for Pony Loader 1.0 and 2.0 were leaked online, leading to their use by various threat actors.(Citations: Malwarebytes Pony April 2016)\n\nThe MITRE ATT&CK sub-technique is Wi-Fi Discovery (T1016.002)\nAdversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Pony (S0453)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Pony is a credential stealing malware, though has also been used among adversaries for its downloader capabilities. The source code for Pony Loader 1.0 and 2.0 were leaked online, leading to their use by various threat actors.(Citations: Malwarebytes Pony April 2016)",
      "dyn_dst_name": "Wi-Fi Discovery (T1016.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may search for information about Wi-Fi networks, such as network names and passwords, on compromised systems. Adversaries may use Wi-Fi information as part of Account Discovery, Remote System Discovery, and other discovery or Credential Access activity to support both ongoing and future campaigns. Adversaries may collect various types of information about Wi-Fi networks from hosts. For example, on Windows names and passwords of all Wi-Fi networks a device has previously connected to may be available through `netsh wlan show profiles` to enumerate Wi-Fi names and then `netsh wlan show profile \u201cWi-Fi name\u201d key=clear` to show a Wi-Fi network\u2019s corresponding password. Additionally, names and other details of locally reachable Wi-Fi networks can be discovered using calls to `wlanAPI.dll` Native API functions. On Linux, names and passwords of all Wi-Fi-networks a device has previously connected to may be available in files under ` /etc/NetworkManager/system-connections/`. On macOS, the password of a known Wi-Fi may be identified with ` security find-generic-password -wa wifiname` (requires admin username/password).(Citations: BleepingComputer Agent Tesla steal wifi passwords, Malware Bytes New AgentTesla variant steals WiFi credentials, Check Point APT35 CharmPower January 2022, Binary Defense Emotes Wi-Fi Spreader, Wi-Fi Password of All Connected Networks in Windows/Linux, Find Wi-Fi Password on Mac)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, execution (TA0002) and T1059.007 (JavaScript). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nexecution (TA0002) -\nThe adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.\n\nT1059.007 (JavaScript) -\nAdversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser. JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages. JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework. Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.(Citations: NodeJS, JScrip May 2018, Microsoft JScript 2007, Microsoft Windows Scripts, Apple About Mac Scripting 2016, SpecterOps JXA 2020, SentinelOne macOS Red Team, Red Canary Silver Sparrow Feb2021, MDSec macOS JXA and VSCode)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "execution (TA0002)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.",
      "dyn_dst_name": "T1059.007 (JavaScript)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser. JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the Component Object Model and Internet Explorer HTML Application (HTA) pages. JavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple\u2019s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple\u2019s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple\u2019s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and AppleScript. Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework. Adversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a Drive-by Compromise or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of Obfuscated Files or Information.(Citations: NodeJS, JScrip May 2018, Microsoft JScript 2007, Microsoft Windows Scripts, Apple About Mac Scripting 2016, SpecterOps JXA 2020, SentinelOne macOS Red Team, Red Canary Silver Sparrow Feb2021, MDSec macOS JXA and VSCode)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30924:\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system windows_10 (by microsoft) version 21h1:\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is 21h1\n\nYour goal is to determine if CVE-2022-30924 is related to operating system windows_10 (by microsoft) version 21h1, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30924",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version 21h1",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is 21h1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-30924 and operating system sd_636_firmware (by qualcomm) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-30924 -\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.\n\noperating system sd_636_firmware (by qualcomm) version - -\n\"sd_636_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30924",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system sd_636_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sd_636_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-28348:\nArm Mali GPU Kernel Driver (Midgard r4p0 through r31p0, Bifrost r0p0 through r36p0 before r37p0, and Valhall r19p0 through r36p0 before r37p0) allows improper GPU memory operations to reach a use-after-free situation.\n\nThe CPE (Common Platform Enumeration) is operating system msm8917_firmware (by qualcomm) version -:\n\"msm8917_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nYour goal is to determine if CVE-2022-28348 is related to operating system msm8917_firmware (by qualcomm) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-28348",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Arm Mali GPU Kernel Driver (Midgard r4p0 through r31p0, Bifrost r0p0 through r36p0 before r37p0, and Valhall r19p0 through r36p0 before r37p0) allows improper GPU memory operations to reach a use-after-free situation.",
      "dyn_dst_name": "operating system msm8917_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"msm8917_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-24609:\nLuocms v2.0 is affected by an incorrect access control vulnerability. Through /admin/templates/template_manage.php, an attacker can write an arbitrary shell file.\n\nThe CPE (Common Platform Enumeration) is application openssl (by openssl) version *:\n\"openssl\" is an application released by \"openssl\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-24609",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Luocms v2.0 is affected by an incorrect access control vulnerability. Through /admin/templates/template_manage.php, an attacker can write an arbitrary shell file.",
      "dyn_dst_name": "application openssl (by openssl) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"openssl\" is an application released by \"openssl\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, S0503 (malware FrameworkPOS) and Social Media Accounts (T1586.001). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nS0503 (malware FrameworkPOS) -\nFrameworkPOS is a point of sale (POS) malware used by FIN6 to steal payment card data from sytems that run physical POS devices.(Citations: SentinelOne FrameworkPOS September 2019)\n\nSocial Media Accounts (T1586.001) -\nAdversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos. Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).(Citations: AnonHBGary, NEWSCASTER2014, BlackHatRobinSage)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0503 (malware FrameworkPOS)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FrameworkPOS is a point of sale (POS) malware used by FIN6 to steal payment card data from sytems that run physical POS devices.(Citations: SentinelOne FrameworkPOS September 2019)",
      "dyn_dst_name": "Social Media Accounts (T1586.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. Social Media Accounts), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. A variety of methods exist for compromising social media accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps). Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation. Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos. Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others. Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: Spearphishing via Service).(Citations: AnonHBGary, NEWSCASTER2014, BlackHatRobinSage)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-40309 and application netweaver_application_server_abap (by sap) version kernel_7.93. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-40309 -\nSAP CommonCryptoLib does not perform necessary authentication checks, which may result in missing or wrong authorization checks for an authenticated user, resulting in escalation of privileges. Depending on the application and the level of privileges acquired, an attacker could abuse functionality restricted to a particular user group as well as read, modify or delete restricted data.\n\napplication netweaver_application_server_abap (by sap) version kernel_7.93 -\n\"netweaver_application_server_abap\" is an application released by \"sap\".  This product version is kernel_7.93",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-40309",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "SAP CommonCryptoLib does not perform necessary authentication checks, which may result in missing or wrong authorization checks for an authenticated user, resulting in escalation of privileges. Depending on the application and the level of privileges acquired, an attacker could abuse functionality restricted to a particular user group as well as read, modify or delete restricted data.",
      "dyn_dst_name": "application netweaver_application_server_abap (by sap) version kernel_7.93",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"netweaver_application_server_abap\" is an application released by \"sap\".  This product version is kernel_7.93",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25394:\nMedical Store Management System v1.0 was discovered to contain a SQL injection vulnerability via the cid parameter under customer-add.php.\n\nThe CPE (Common Platform Enumeration) is operating system windows_7 (by microsoft) version -:\n\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1\n\nYour goal is to determine if CVE-2022-25394 is related to operating system windows_7 (by microsoft) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25394",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Medical Store Management System v1.0 was discovered to contain a SQL injection vulnerability via the cid parameter under customer-add.php.",
      "dyn_dst_name": "operating system windows_7 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_7\" is an operating system released by \"microsoft\".  This product version is - and minor version (point release) sp1",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Volatile Cedar (G0123) and malware TDTESS (S0164). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nVolatile Cedar (G0123) -\nVolatile Cedar is a Lebanese threat group that has targeted individuals, companies, and institutions worldwide. Volatile Cedar has been operating since 2012 and is motivated by political and ideological interests.(Citations: CheckPoint Volatile Cedar March 2015, ClearSky Lebanese Cedar Jan 2021)\n\nmalware TDTESS (S0164) -\nTDTESS is a 64-bit .NET binary backdoor used by CopyKittens. (Citations: ClearSky Wilted Tulip July 2017)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Volatile Cedar (G0123)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "Volatile Cedar is a Lebanese threat group that has targeted individuals, companies, and institutions worldwide. Volatile Cedar has been operating since 2012 and is motivated by political and ideological interests.(Citations: CheckPoint Volatile Cedar March 2015, ClearSky Lebanese Cedar Jan 2021)",
      "dyn_dst_name": "malware TDTESS (S0164)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "TDTESS is a 64-bit .NET binary backdoor used by CopyKittens. (Citations: ClearSky Wilted Tulip July 2017)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CAPEC-176 (Configuration/Environment Manipulation) and Security-Sensitive Hardware Controls with Missing Lock Bit Protection (CWE-1233). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCAPEC-176 (Configuration/Environment Manipulation) -\nAn attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\n\nSecurity-Sensitive Hardware Controls with Missing Lock Bit Protection (CWE-1233) -\nThe product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-176 (Configuration/Environment Manipulation)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",
      "dyn_dst_name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection (CWE-1233)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CWE (Common Weakness Enumeration) and CAPEC (Common Attack Pattern Enumeration and Classification):\n\nThe CWE (Common Weakness Enumeration) is Improper Restriction of Rendered UI Layers or Frames (CWE-1021)\nThe web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Signal Strength Tracking (CAPEC-619)\nIn this attack scenario, the attacker passively monitors the signal strength of the target\u2019s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Restriction of Rendered UI Layers or Frames (CWE-1021)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
      "dyn_dst_name": "Signal Strength Tracking (CAPEC-619)",
      "dyn_dst_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_dst_description": "In this attack scenario, the attacker passively monitors the signal strength of the target\u2019s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is malware WEBC2 (S0109):\nWEBC2 is a family of backdoor malware used by APT1 as early as July 2006. WEBC2 backdoors are designed to retrieve a webpage, with commands hidden in HTML comments or special tags, from a predetermined C2 server. (Citations: Mandiant APT1 Appendix, Mandiant APT1)\n\nThe MITRE ATT&CK sub-technique is Remote Desktop Protocol (T1021.001):\nAdversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.(Citations: TechNet Remote Desktop Services, Alperovitch Malware)\n\nYour goal is to determine if malware WEBC2 (S0109) is related to Remote Desktop Protocol (T1021.001), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WEBC2 (S0109)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WEBC2 is a family of backdoor malware used by APT1 as early as July 2006. WEBC2 backdoors are designed to retrieve a webpage, with commands hidden in HTML comments or special tags, from a predetermined C2 server. (Citations: Mandiant APT1 Appendix, Mandiant APT1)",
      "dyn_dst_name": "Remote Desktop Protocol (T1021.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features or Terminal Services DLL for Persistence.(Citations: TechNet Remote Desktop Services, Alperovitch Malware)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-46575:\nA SQL injection vulnerability exists in Meshery prior to version v0.6.179, enabling a remote attacker to retrieve sensitive information and execute arbitrary code through the \u201corder\u201d parameter\n\nThe CPE (Common Platform Enumeration) is application meshery (by layer5) version *:\n\"meshery\" is an application released by \"layer5\". \n\nYour goal is to determine if CVE-2023-46575 is related to application meshery (by layer5) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-46575",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A SQL injection vulnerability exists in Meshery prior to version v0.6.179, enabling a remote attacker to retrieve sensitive information and execute arbitrary code through the \u201corder\u201d parameter",
      "dyn_dst_name": "application meshery (by layer5) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"meshery\" is an application released by \"layer5\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware TYPEFRAME (S0263) and OS Credential Dumping (T1003). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware TYPEFRAME (S0263) -\nTYPEFRAME is a remote access tool that has been used by Lazarus Group. (Citations: US-CERT TYPEFRAME June 2018)\n\nOS Credential Dumping (T1003) -\nAdversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information. Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.(Citations: Brining MimiKatz to Unix)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware TYPEFRAME (S0263)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "TYPEFRAME is a remote access tool that has been used by Lazarus Group. (Citations: US-CERT TYPEFRAME June 2018)",
      "dyn_dst_name": "OS Credential Dumping (T1003)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information. Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.(Citations: Brining MimiKatz to Unix)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is malware DealersChoice (S0243):\nDealersChoice is a Flash exploitation framework used by APT28. (Citations: Sofacy DealersChoice)\n\nThe MITRE ATT&CK sub-technique is T1584.008 (Network Devices):\nAdversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting. Once an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices. Adversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses. Compromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.(Citations: Mandiant Fortinet Zero Day, Wired Russia Cyberwar, Justice GRU 2024)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware DealersChoice (S0243)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "DealersChoice is a Flash exploitation framework used by APT28. (Citations: Sofacy DealersChoice)",
      "dyn_dst_name": "T1584.008 (Network Devices)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may compromise third-party network devices that can be used during targeting. Network devices, such as small office/home office (SOHO) routers, may be compromised where the adversary's ultimate goal is not Initial Access to that environment -- instead leveraging these devices to support additional targeting. Once an adversary has control, compromised network devices can be used to launch additional operations, such as hosting payloads for Phishing campaigns (i.e., Link Target) or enabling the required access to execute Content Injection operations. Adversaries may also be able to harvest reusable credentials (i.e., Valid Accounts) from compromised network devices. Adversaries often target Internet-facing edge devices and related network appliances that specifically do not support robust host-based defenses. Compromised network devices may be used to support subsequent Command and Control activity, such as Hide Infrastructure through an established Proxy and/or Botnet network.(Citations: Mandiant Fortinet Zero Day, Wired Russia Cyberwar, Justice GRU 2024)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Pillowmint (S0517) and Data from Local System (T1005). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Pillowmint (S0517) -\nPillowmint is a point-of-sale malware used by FIN7 designed to capture credit card information.(Citations: Trustwave Pillowmint June 2020)\n\nData from Local System (T1005) -\nAdversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.(Citations: show_run_config_cmd_cisco)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Pillowmint (S0517)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Pillowmint is a point-of-sale malware used by FIN7 designed to capture credit card information.(Citations: Trustwave Pillowmint June 2020)",
      "dyn_dst_name": "Data from Local System (T1005)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.(Citations: show_run_config_cmd_cisco)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-22587:\nA memory corruption issue was addressed with improved input validation. This issue is fixed in iOS 15.3 and iPadOS 15.3, macOS Big Sur 11.6.3, macOS Monterey 12.2. A malicious application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited..\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2019 (by microsoft) version -:\n\"windows_server_2019\" is an operating system released by \"microsoft\".  This product version is -\n\nYour goal is to determine if CVE-2022-22587 is related to operating system windows_server_2019 (by microsoft) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-22587",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A memory corruption issue was addressed with improved input validation. This issue is fixed in iOS 15.3 and iPadOS 15.3, macOS Big Sur 11.6.3, macOS Monterey 12.2. A malicious application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited..",
      "dyn_dst_name": "operating system windows_server_2019 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2019\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2023-24236 and operating system a7100ru_firmware (by totolink) version 7.4cu.2313_b20191024. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2023-24236 -\nTOTOlink A7100RU(V7.4cu.2313_B20191024) was discovered to contain a command injection vulnerability via the province parameter at setting/delStaticDhcpRules.\n\noperating system a7100ru_firmware (by totolink) version 7.4cu.2313_b20191024 -\n\"a7100ru_firmware\" is an operating system released by \"totolink\".  This product version is 7.4cu.2313_b20191024",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-24236",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "TOTOlink A7100RU(V7.4cu.2313_B20191024) was discovered to contain a command injection vulnerability via the province parameter at setting/delStaticDhcpRules.",
      "dyn_dst_name": "operating system a7100ru_firmware (by totolink) version 7.4cu.2313_b20191024",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"a7100ru_firmware\" is an operating system released by \"totolink\".  This product version is 7.4cu.2313_b20191024",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-20086 and operating system adaptive_security_appliance_software (by cisco) version 9.8.4.7. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-20086 -\nA vulnerability in ICMPv6 processing of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. This vulnerability is due to improper processing of ICMPv6 messages. An attacker could exploit this vulnerability by sending crafted ICMPv6 messages to a targeted Cisco ASA or FTD system with IPv6 enabled. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.\n\noperating system adaptive_security_appliance_software (by cisco) version 9.8.4.7 -\n\"adaptive_security_appliance_software\" is an operating system released by \"cisco\".  This product version is 9.8.4.7",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-20086",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in ICMPv6 processing of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. This vulnerability is due to improper processing of ICMPv6 messages. An attacker could exploit this vulnerability by sending crafted ICMPv6 messages to a targeted Cisco ASA or FTD system with IPv6 enabled. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.",
      "dyn_dst_name": "operating system adaptive_security_appliance_software (by cisco) version 9.8.4.7",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"adaptive_security_appliance_software\" is an operating system released by \"cisco\".  This product version is 9.8.4.7",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following malicious software and MITRE ATT&CK sub-technique and their descriptions:\n\nThe malicious software is S0137 (malware CORESHELL):\nCORESHELL is a downloader used by APT28. The older versions of this malware are known as SOURFACE and newer versions as CORESHELL. (Citations: FireEye APT28, FireEye APT28 January 2017)\n\nThe MITRE ATT&CK sub-technique is AppDomainManager (T1574.014):\nAdversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citations: Microsoft App Domains, PenTestLabs AppDomainManagerInject, PwC Yellow Liderc, Rapid7 AppDomain Manager Injection)\n\nYour goal is to determine if S0137 (malware CORESHELL) is related to AppDomainManager (T1574.014), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0137 (malware CORESHELL)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "CORESHELL is a downloader used by APT28. The older versions of this malware are known as SOURFACE and newer versions as CORESHELL. (Citations: FireEye APT28, FireEye APT28 January 2017)",
      "dyn_dst_name": "AppDomainManager (T1574.014)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may execute their own malicious payloads by hijacking how the .NET `AppDomainManager` loads assemblies. The .NET framework uses the `AppDomainManager` class to create and manage one or more isolated runtime environments (called application domains) inside a process to host the execution of .NET applications. Assemblies (`.exe` or `.dll` binaries compiled to run as .NET code) may be loaded into an application domain as executable code. Known as \"AppDomainManager injection,\" adversaries may execute arbitrary code by hijacking how .NET applications load assemblies. For example, malware may create a custom application domain inside a target process to load and execute an arbitrary assembly. Alternatively, configuration files (`.config`) or process environment variables that define .NET runtime settings may be tampered with to instruct otherwise benign .NET applications to load a malicious assembly (identified by name) into the target process.(Citations: Microsoft App Domains, PenTestLabs AppDomainManagerInject, PwC Yellow Liderc, Rapid7 AppDomain Manager Injection)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-25756\nOut-of-bounds read in the BIOS firmware for some Intel(R) Processors may allow an authenticated user to potentially enable escalation of privilege via adjacent access.\n\nThe CPE (Common Platform Enumeration) is operating system core_i7-13700_firmware (by intel) version -\n\"core_i7-13700_firmware\" is an operating system released by \"intel\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-25756",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Out-of-bounds read in the BIOS firmware for some Intel(R) Processors may allow an authenticated user to potentially enable escalation of privilege via adjacent access.",
      "dyn_dst_name": "operating system core_i7-13700_firmware (by intel) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"core_i7-13700_firmware\" is an operating system released by \"intel\".  This product version is -",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is XML Injection (aka Blind XPath Injection) (CWE-91):\nThe product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-27253:\nA command injection vulnerability in the function restore_rrddata() of Netgate pfSense v2.7.0 allows authenticated attackers to execute arbitrary commands via manipulating the contents of an XML file supplied to the component config.xml.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "XML Injection (aka Blind XPath Injection) (CWE-91)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
      "dyn_dst_name": "CVE-2023-27253",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A command injection vulnerability in the function restore_rrddata() of Netgate pfSense v2.7.0 allows authenticated attackers to execute arbitrary commands via manipulating the contents of an XML file supplied to the component config.xml.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33412:\nThe web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.\n\nThe CPE (Common Platform Enumeration) is operating system x11spw-ctf_firmware (by supermicro) version *:\n\"x11spw-ctf_firmware\" is an operating system released by \"supermicro\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-33412",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "The web interface in the Intelligent Platform Management Interface (IPMI) baseboard management controller (BMC) implementation on Supermicro X11 and M11 based devices, with firmware versions before 3.17.02, allows remote authenticated users to execute arbitrary commands via a crafted request targeting vulnerable cgi endpoints.",
      "dyn_dst_name": "operating system x11spw-ctf_firmware (by supermicro) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"x11spw-ctf_firmware\" is an operating system released by \"supermicro\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-23166:\nSysaid \u2013 Sysaid Local File Inclusion (LFI) \u2013 An unauthenticated attacker can access to the system by accessing to \"/lib/tinymce/examples/index.html\" path. in the \"Insert/Edit Embedded Media\" window Choose Type : iFrame and File/URL : [here is the LFI] Solution: Update to 22.2.20 cloud version, or to 22.1.64 on premise version.\n\nThe CPE (Common Platform Enumeration) is operating system qca6174a_firmware (by qualcomm) version -:\n\"qca6174a_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-23166",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Sysaid \u2013 Sysaid Local File Inclusion (LFI) \u2013 An unauthenticated attacker can access to the system by accessing to \"/lib/tinymce/examples/index.html\" path. in the \"Insert/Edit Embedded Media\" window Choose Type : iFrame and File/URL : [here is the LFI] Solution: Update to 22.2.20 cloud version, or to 22.1.64 on premise version.",
      "dyn_dst_name": "operating system qca6174a_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"qca6174a_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-31471:\nAn issue was discovered on GL.iNet devices before 3.216. Through the software installation feature, it is possible to install arbitrary software, such as a reverse shell, because the restrictions on the available package list are limited to client-side verification. It is possible to install software from the filesystem, the package list, or a URL.\n\nThe CPE (Common Platform Enumeration) is operating system gl-e750_firmware (by gl-inet) version *:\n\"gl-e750_firmware\" is an operating system released by \"gl-inet\". \n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-31471",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An issue was discovered on GL.iNet devices before 3.216. Through the software installation feature, it is possible to install arbitrary software, such as a reverse shell, because the restrictions on the available package list are limited to client-side verification. It is possible to install software from the filesystem, the package list, or a URL.",
      "dyn_dst_name": "operating system gl-e750_firmware (by gl-inet) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"gl-e750_firmware\" is an operating system released by \"gl-inet\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, WiFi MAC Address Tracking (CAPEC-612) and Improper Restriction of Rendered UI Layers or Frames (CWE-1021). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nWiFi MAC Address Tracking (CAPEC-612) -\nIn this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.\n\nImproper Restriction of Rendered UI Layers or Frames (CWE-1021) -\nThe web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "WiFi MAC Address Tracking (CAPEC-612)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.",
      "dyn_dst_name": "Improper Restriction of Rendered UI Layers or Frames (CWE-1021)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Zeroaccess (S0027):\nZeroaccess is a kernel-mode Rootkit that attempts to add victims to the ZeroAccess botnet, often for monetary gain. (Citations: Sophos ZeroAccess)\n\nThe MITRE ATT&CK technique is T1491 (Defacement):\nAdversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Zeroaccess (S0027)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Zeroaccess is a kernel-mode Rootkit that attempts to add victims to the ZeroAccess botnet, often for monetary gain. (Citations: Sophos ZeroAccess)",
      "dyn_dst_name": "T1491 (Defacement)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25900:\nAll versions of package git-clone are vulnerable to Command Injection due to insecure usage of the --upload-pack feature of git.\n\nThe CPE (Common Platform Enumeration) is operating system windows_10 (by microsoft) version -:\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25900",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "All versions of package git-clone are vulnerable to Command Injection due to insecure usage of the --upload-pack feature of git.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, T1102.002 (Bidirectional Communication) and malware SpicyOmelette (S0646). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nT1102.002 (Bidirectional Communication) -\nAdversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\n\nmalware SpicyOmelette (S0646) -\nSpicyOmelette is a JavaScript based remote access tool that has been used by Cobalt Group since at least 2018.(Citations: Secureworks GOLD KINGSWOOD September 2018)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "T1102.002 (Bidirectional Communication)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
      "dyn_dst_name": "malware SpicyOmelette (S0646)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "SpicyOmelette is a JavaScript based remote access tool that has been used by Cobalt Group since at least 2018.(Citations: Secureworks GOLD KINGSWOOD September 2018)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2024-20267 and operating system nx-os (by cisco) version 6.0\\(2\\)a7\\(2\\). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2024-20267 -\nA vulnerability with the handling of MPLS traffic for Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause the netstack process to unexpectedly restart, which could cause the device to stop processing network traffic or to reload. This vulnerability is due to lack of proper error checking when processing an ingress MPLS frame. An attacker could exploit this vulnerability by sending a crafted IPv6 packet that is encapsulated within an MPLS frame to an MPLS-enabled interface of the targeted device. A successful exploit could allow the attacker to cause a denial of service (DoS) condition. Note: The IPv6 packet can be generated multiple hops away from the targeted device and then encapsulated within MPLS. The DoS condition may occur when the NX-OS device processes the packet.\n\noperating system nx-os (by cisco) version 6.0\\(2\\)a7\\(2\\) -\n\"nx-os\" is an operating system released by \"cisco\".  This product version is 6.0\\(2\\)a7\\(2\\)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-20267",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability with the handling of MPLS traffic for Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause the netstack process to unexpectedly restart, which could cause the device to stop processing network traffic or to reload. This vulnerability is due to lack of proper error checking when processing an ingress MPLS frame. An attacker could exploit this vulnerability by sending a crafted IPv6 packet that is encapsulated within an MPLS frame to an MPLS-enabled interface of the targeted device. A successful exploit could allow the attacker to cause a denial of service (DoS) condition. Note: The IPv6 packet can be generated multiple hops away from the targeted device and then encapsulated within MPLS. The DoS condition may occur when the NX-OS device processes the packet.",
      "dyn_dst_name": "operating system nx-os (by cisco) version 6.0\\(2\\)a7\\(2\\)",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"nx-os\" is an operating system released by \"cisco\".  This product version is 6.0\\(2\\)a7\\(2\\)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Subvert Code-signing Facilities (CAPEC-68) and Use of Weak Hash (CWE-328). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nSubvert Code-signing Facilities (CAPEC-68) -\nMany languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.\n\nUse of Weak Hash (CWE-328) -\nThe product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Subvert Code-signing Facilities (CAPEC-68)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
      "dyn_dst_name": "Use of Weak Hash (CWE-328)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK group and malicious software and their descriptions:\n\nThe MITRE ATT&CK group is FIN5 (G0053):\nFIN5 is a financially motivated threat group that has targeted personally identifiable information and payment card information. The group has been active since at least 2008 and has targeted the restaurant, gaming, and hotel industries. The group is made up of actors who likely speak Russian.   (Citations: FireEye Respond Webinar July 2017, Mandiant FIN5 GrrCON Oct 2016, DarkReading FireEye FIN5 Oct 2015)\n\nThe malicious software is tool SDelete (S0195):\nSDelete is an application that securely deletes data in a way that makes it unrecoverable. It is part of the Microsoft Sysinternals suite of tools. (Citations: Microsoft SDelete July 2016)\n\nYour goal is to determine if FIN5 (G0053) is related to tool SDelete (S0195), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "FIN5 (G0053)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "FIN5 is a financially motivated threat group that has targeted personally identifiable information and payment card information. The group has been active since at least 2008 and has targeted the restaurant, gaming, and hotel industries. The group is made up of actors who likely speak Russian.   (Citations: FireEye Respond Webinar July 2017, Mandiant FIN5 GrrCON Oct 2016, DarkReading FireEye FIN5 Oct 2015)",
      "dyn_dst_name": "tool SDelete (S0195)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "SDelete is an application that securely deletes data in a way that makes it unrecoverable. It is part of the Microsoft Sysinternals suite of tools. (Citations: Microsoft SDelete July 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')):\nThe product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-0861:\nNetModule NSRW web administration interface executes an OS command constructed with unsanitized user input. A successful exploit could allow an authenticated user to execute arbitrary commands with elevated privileges. This issue affects NSRW: from 4.3.0.0 before 4.3.0.119, from 4.4.0.0 before 4.4.0.118, from 4.6.0.0 before 4.6.0.105, from 4.7.0.0 before 4.7.0.103.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-78 (Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'))",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "dyn_dst_name": "CVE-2023-0861",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "NetModule NSRW web administration interface executes an OS command constructed with unsanitized user input. A successful exploit could allow an authenticated user to execute arbitrary commands with elevated privileges. This issue affects NSRW: from 4.3.0.0 before 4.3.0.119, from 4.4.0.0 before 4.4.0.118, from 4.6.0.0 before 4.6.0.105, from 4.7.0.0 before 4.7.0.103.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-24231 and operating system windows_10 (by microsoft) version -. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-24231 -\nSimple Student Information System v1.0 was discovered to contain a SQL injection vulnerability via add/Student.\n\noperating system windows_10 (by microsoft) version - -\n\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-24231",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Simple Student Information System v1.0 was discovered to contain a SQL injection vulnerability via add/Student.",
      "dyn_dst_name": "operating system windows_10 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_10\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware HAPPYWORK (S0214) and LSASS Memory (T1003.001). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware HAPPYWORK (S0214) -\nHAPPYWORK is a downloader used by APT37 to target South Korean government and financial victims in November 2016. (Citations: FireEye APT37 Feb 2018)\n\nLSASS Memory (T1003.001) -\nAdversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material. As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host use procdump: * <code>procdump -ma lsass.exe lsass_dump</code> Locally, mimikatz can be run using: * <code>sekurlsa::Minidump lsassdump.dmp</code> * <code>sekurlsa::logonPasswords</code> Built-in Windows tools such as `comsvcs.dll` can also be used: * <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full</code> Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`). Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. The following SSPs can be used to access credentials: * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. * CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.(Citations: Volexity Exchange Marauder March 2021, Symantec Attacks Against Government Sector, Deep Instinct LSASS, Graeber 2014, TechNet Blogs Credential Protection, TechNet Blogs Credential Protection)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware HAPPYWORK (S0214)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "HAPPYWORK is a downloader used by APT37 to target South Korean government and financial victims in November 2016. (Citations: FireEye APT37 Feb 2018)",
      "dyn_dst_name": "LSASS Memory (T1003.001)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material. As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host use procdump: * <code>procdump -ma lsass.exe lsass_dump</code> Locally, mimikatz can be run using: * <code>sekurlsa::Minidump lsassdump.dmp</code> * <code>sekurlsa::logonPasswords</code> Built-in Windows tools such as `comsvcs.dll` can also be used: * <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full</code> Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`). Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. The following SSPs can be used to access credentials: * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. * CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.(Citations: Volexity Exchange Marauder March 2021, Symantec Attacks Against Government Sector, Deep Instinct LSASS, Graeber 2014, TechNet Blogs Credential Protection, TechNet Blogs Credential Protection)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Micropsia (S0339):\nMicropsia is a remote access tool written in Delphi.(Citations: Talos Micropsia June 2017, Radware Micropsia July 2018)\n\nThe MITRE ATT&CK technique is Screen Capture (T1113):\nAdversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Micropsia (S0339)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Micropsia is a remote access tool written in Delphi.(Citations: Talos Micropsia June 2017, Radware Micropsia July 2018)",
      "dyn_dst_name": "Screen Capture (T1113)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citations: CopyFromScreen .NET, Antiquated Mac Malware)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following MITRE ATT&CK group and malicious software:\n\nThe MITRE ATT&CK group is G0050 (APT32)\nAPT32 is a suspected Vietnam-based threat group that has been active since at least 2014. The group has targeted multiple private sector industries as well as foreign governments, dissidents, and journalists with a strong focus on Southeast Asian countries like Vietnam, the Philippines, Laos, and Cambodia. They have extensively used strategic web compromises to compromise victims.(Citations: FireEye APT32 May 2017, Volexity OceanLotus Nov 2017, ESET OceanLotus)\n\nThe malicious software is malware SOUNDBITE (S0157)\nSOUNDBITE is a signature backdoor used by APT32. (Citations: FireEye APT32 May 2017)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "G0050 (APT32)",
      "dyn_src_layer": "MITRE ATT&CK group",
      "dyn_src_description": "APT32 is a suspected Vietnam-based threat group that has been active since at least 2014. The group has targeted multiple private sector industries as well as foreign governments, dissidents, and journalists with a strong focus on Southeast Asian countries like Vietnam, the Philippines, Laos, and Cambodia. They have extensively used strategic web compromises to compromise victims.(Citations: FireEye APT32 May 2017, Volexity OceanLotus Nov 2017, ESET OceanLotus)",
      "dyn_dst_name": "malware SOUNDBITE (S0157)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "SOUNDBITE is a signature backdoor used by APT32. (Citations: FireEye APT32 May 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2024-21591 and operating system junos (by juniper) version 21.2. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2024-21591 -\nAn Out-of-bounds Write vulnerability in J-Web of Juniper Networks Junos OS on SRX Series and EX Series allows an unauthenticated, network-based attacker to cause a Denial of Service (DoS), or Remote Code Execution (RCE) and obtain root privileges on the device. This issue is caused by use of an insecure function allowing an attacker to overwrite arbitrary memory. This issue affects Juniper Networks Junos OS SRX Series and EX Series: * Junos OS versions earlier than 20.4R3-S9; * Junos OS 21.2 versions earlier than 21.2R3-S7; * Junos OS 21.3 versions earlier than 21.3R3-S5; * Junos OS 21.4 versions earlier than 21.4R3-S5; * Junos OS 22.1 versions earlier than 22.1R3-S4; * Junos OS 22.2 versions earlier than 22.2R3-S3; * Junos OS 22.3 versions earlier than 22.3R3-S2; * Junos OS 22.4 versions earlier than 22.4R2-S2, 22.4R3.\n\noperating system junos (by juniper) version 21.2 -\n\"junos\" is an operating system released by \"juniper\".  This product version is 21.2 and minor version (point release) r3-s4",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2024-21591",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An Out-of-bounds Write vulnerability in J-Web of Juniper Networks Junos OS on SRX Series and EX Series allows an unauthenticated, network-based attacker to cause a Denial of Service (DoS), or Remote Code Execution (RCE) and obtain root privileges on the device. This issue is caused by use of an insecure function allowing an attacker to overwrite arbitrary memory. This issue affects Juniper Networks Junos OS SRX Series and EX Series: * Junos OS versions earlier than 20.4R3-S9; * Junos OS 21.2 versions earlier than 21.2R3-S7; * Junos OS 21.3 versions earlier than 21.3R3-S5; * Junos OS 21.4 versions earlier than 21.4R3-S5; * Junos OS 22.1 versions earlier than 22.1R3-S4; * Junos OS 22.2 versions earlier than 22.2R3-S3; * Junos OS 22.3 versions earlier than 22.3R3-S2; * Junos OS 22.4 versions earlier than 22.4R2-S2, 22.4R3.",
      "dyn_dst_name": "operating system junos (by juniper) version 21.2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"junos\" is an operating system released by \"juniper\".  This product version is 21.2 and minor version (point release) r3-s4",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CAPEC-109 (Object Relational Mapping Injection) and Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCAPEC-109 (Object Relational Mapping Injection) -\nAn attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.\n\nSensitive Cookie Without 'HttpOnly' Flag (CWE-1004) -\nThe product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CAPEC-109 (Object Relational Mapping Injection)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
      "dyn_dst_name": "Sensitive Cookie Without 'HttpOnly' Flag (CWE-1004)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, S0457 (malware Netwalker) and Fileless Storage (T1027.011). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nS0457 (malware Netwalker) -\nNetwalker is fileless ransomware written in PowerShell and executed directly in memory.(Citations: TrendMicro Netwalker May 2020)\n\nFileless Storage (T1027.011) -\nAdversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository. Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored. Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citations: Microsoft Fileless, SecureList Fileless, Microsoft Fileless)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0457 (malware Netwalker)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Netwalker is fileless ransomware written in PowerShell and executed directly in memory.(Citations: TrendMicro Netwalker May 2020)",
      "dyn_dst_name": "Fileless Storage (T1027.011)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository. Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored. Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.(Citations: Microsoft Fileless, SecureList Fileless, Microsoft Fileless)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-25433 and application snapcenter (by netapp) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-25433 -\nTenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the urls parameter in the saveparentcontrolinfo function.\n\napplication snapcenter (by netapp) version - -\n\"snapcenter\" is an application released by \"netapp\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25433",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the urls parameter in the saveparentcontrolinfo function.",
      "dyn_dst_name": "application snapcenter (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"snapcenter\" is an application released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CPE (Common Platform Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CPE (Common Platform Enumeration) is operating system windows_10_1809 (by microsoft) version -:\n\"windows_10_1809\" is an operating system released by \"microsoft\".  This product version is -\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-21546:\nWindows Layer 2 Tunneling Protocol (L2TP) Remote Code Execution Vulnerability\n\nYour goal is to determine if operating system windows_10_1809 (by microsoft) version - is related to CVE-2023-21546, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "operating system windows_10_1809 (by microsoft) version -",
      "dyn_src_layer": "CPE (Common Platform Enumeration)",
      "dyn_src_description": "\"windows_10_1809\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_dst_name": "CVE-2023-21546",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Windows Layer 2 Tunneling Protocol (L2TP) Remote Code Execution Vulnerability",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Olympic Destroyer (S0365) and T1529 (System Shutdown/Reboot). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Olympic Destroyer (S0365) -\nOlympic Destroyer is malware that was used by Sandworm Team against the 2018 Winter Olympics, held in Pyeongchang, South Korea. The main purpose of the malware was to render infected computer systems inoperable. The malware leverages various native Windows utilities and API calls to carry out its destructive tasks. Olympic Destroyer has worm-like features to spread itself across a computer network in order to maximize its destructive impact.(Citations: Talos Olympic Destroyer 2018, US District Court Indictment GRU Unit 74455 October 2020)\n\nT1529 (System Shutdown/Reboot) -\nAdversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>). Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery. Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.(Citations: Microsoft Shutdown Oct 2017, alert_TA18_106A, Talos Nyetya June 2017, Talos Olympic Destroyer 2018)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Olympic Destroyer (S0365)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Olympic Destroyer is malware that was used by Sandworm Team against the 2018 Winter Olympics, held in Pyeongchang, South Korea. The main purpose of the malware was to render infected computer systems inoperable. The malware leverages various native Windows utilities and API calls to carry out its destructive tasks. Olympic Destroyer has worm-like features to spread itself across a computer network in order to maximize its destructive impact.(Citations: Talos Olympic Destroyer 2018, US District Court Indictment GRU Unit 74455 October 2020)",
      "dyn_dst_name": "T1529 (System Shutdown/Reboot)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. <code>reload</code>). Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery. Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.(Citations: Microsoft Shutdown Oct 2017, alert_TA18_106A, Talos Nyetya June 2017, Talos Olympic Destroyer 2018)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-35303:\nUSB Audio Class System Driver Remote Code Execution Vulnerability\n\nThe CPE (Common Platform Enumeration) is operating system windows_server_2012 (by microsoft) version r2:\n\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is r2\n\nYour goal is to determine if CVE-2023-35303 is related to operating system windows_server_2012 (by microsoft) version r2, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-35303",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "USB Audio Class System Driver Remote Code Execution Vulnerability",
      "dyn_dst_name": "operating system windows_server_2012 (by microsoft) version r2",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_server_2012\" is an operating system released by \"microsoft\".  This product version is r2",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, malware Ryuk (S0446) and Control Panel (T1218.002). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nmalware Ryuk (S0446) -\nRyuk is a ransomware designed to target enterprise environments that has been used in attacks since at least 2018. Ryuk shares code similarities with Hermes ransomware.(Citations: CrowdStrike Ryuk January 2019, FireEye Ryuk and Trickbot January 2019, FireEye FIN6 Apr 2019)\n\nControl Panel (T1218.002) -\nAdversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.  Malicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists. Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citations: Microsoft Implementing CPL, TrendMicro CPL Malware Jan 2014, Microsoft Implementing CPL, Microsoft Implementing CPL, TrendMicro CPL Malware Jan 2014, TrendMicro CPL Malware Dec 2013, TrendMicro CPL Malware Jan 2014, TrendMicro CPL Malware Dec 2013, Palo Alto Reaver Nov 2017, ESET InvisiMole June 2020)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Ryuk (S0446)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Ryuk is a ransomware designed to target enterprise environments that has been used in attacks since at least 2018. Ryuk shares code similarities with Hermes ransomware.(Citations: CrowdStrike Ryuk January 2019, FireEye Ryuk and Trickbot January 2019, FireEye FIN6 Apr 2019)",
      "dyn_dst_name": "Control Panel (T1218.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.  Malicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists. Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citations: Microsoft Implementing CPL, TrendMicro CPL Malware Jan 2014, Microsoft Implementing CPL, Microsoft Implementing CPL, TrendMicro CPL Malware Jan 2014, TrendMicro CPL Malware Dec 2013, TrendMicro CPL Malware Jan 2014, TrendMicro CPL Malware Dec 2013, Palo Alto Reaver Nov 2017, ESET InvisiMole June 2020)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK sub-technique:\n\nThe malicious software is malware FALLCHILL (S0181)\nFALLCHILL is a RAT that has been used by Lazarus Group since at least 2016 to target the aerospace, telecommunications, and finance industries. It is usually dropped by other Lazarus Group malware or delivered when a victim unknowingly visits a compromised website. (Citations: US-CERT FALLCHILL Nov 2017)\n\nThe MITRE ATT&CK sub-technique is T1543.003 (Windows Service)\nAdversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citations: TechNet Services, Symantec W.32 Stuxnet Dossier, Crowdstrike DriveSlayer February 2022, Unit42 AcidBox June 2020, ESET InvisiMole June 2020, Unit42 AcidBox June 2020, SANS 1, SANS 2)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware FALLCHILL (S0181)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "FALLCHILL is a RAT that has been used by Lazarus Group since at least 2016 to target the aerospace, telecommunications, and finance industries. It is usually dropped by other Lazarus Group malware or delivered when a victim unknowingly visits a compromised website. (Citations: US-CERT FALLCHILL Nov 2017)",
      "dyn_dst_name": "T1543.003 (Windows Service)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.(Citations: TechNet Services, Symantec W.32 Stuxnet Dossier, Crowdstrike DriveSlayer February 2022, Unit42 AcidBox June 2020, ESET InvisiMole June 2020, Unit42 AcidBox June 2020, SANS 1, SANS 2)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is S0439 (malware Okrum):\nOkrum is a Windows backdoor that has been seen in use since December 2016 with strong links to Ke3chang.(Citations: ESET Okrum July 2019)\n\nThe MITRE ATT&CK sub-technique is Protocol Impersonation (T1001.003):\nAdversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic. Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0439 (malware Okrum)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Okrum is a Windows backdoor that has been seen in use since December 2016 with strong links to Ke3chang.(Citations: ESET Okrum July 2019)",
      "dyn_dst_name": "Protocol Impersonation (T1001.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic. Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2022-20825 and operating system sg300-10mp_firmware (by cisco) version 1.3.7.18. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2022-20825 -\nA vulnerability in the web-based management interface of Cisco Small Business RV110W, RV130, RV130W, and RV215W Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause an affected device to restart unexpectedly, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending a crafted request to the web-based management interface. A successful exploit could allow the attacker to execute arbitrary commands on an affected device using root-level privileges. Cisco has not released software updates that address this vulnerability.\n\noperating system sg300-10mp_firmware (by cisco) version 1.3.7.18 -\n\"sg300-10mp_firmware\" is an operating system released by \"cisco\".  This product version is 1.3.7.18",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-20825",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A vulnerability in the web-based management interface of Cisco Small Business RV110W, RV130, RV130W, and RV215W Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause an affected device to restart unexpectedly, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending a crafted request to the web-based management interface. A successful exploit could allow the attacker to execute arbitrary commands on an affected device using root-level privileges. Cisco has not released software updates that address this vulnerability.",
      "dyn_dst_name": "operating system sg300-10mp_firmware (by cisco) version 1.3.7.18",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"sg300-10mp_firmware\" is an operating system released by \"cisco\".  This product version is 1.3.7.18",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is CWE-798 (Use of Hard-coded Credentials):\nThe product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-33372:\nConnected IO v2.1.0 and prior uses a hard-coded username/password pair embedded in their device's firmware used for device communication using MQTT. An attacker who gained access to these credentials is able to connect to the MQTT broker and send messages on behalf of devices, impersonating them. in order to sign and verify JWT session tokens, allowing attackers to sign arbitrary session tokens and bypass authentication.\n\nYour goal is to determine if CWE-798 (Use of Hard-coded Credentials) is related to CVE-2023-33372, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-798 (Use of Hard-coded Credentials)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
      "dyn_dst_name": "CVE-2023-33372",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Connected IO v2.1.0 and prior uses a hard-coded username/password pair embedded in their device's firmware used for device communication using MQTT. An attacker who gained access to these credentials is able to connect to the MQTT broker and send messages on behalf of devices, impersonating them. in order to sign and verify JWT session tokens, allowing attackers to sign arbitrary session tokens and bypass authentication.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, S0155 (malware WINDSHIELD) and Query Registry (T1012). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nS0155 (malware WINDSHIELD) -\nWINDSHIELD is a signature backdoor used by APT32. (Citations: FireEye APT32 May 2017)\n\nQuery Registry (T1012) -\nAdversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software. The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.(Citations: Wikipedia Windows Registry)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0155 (malware WINDSHIELD)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WINDSHIELD is a signature backdoor used by APT32. (Citations: FireEye APT32 May 2017)",
      "dyn_dst_name": "Query Registry (T1012)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software. The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.(Citations: Wikipedia Windows Registry)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK sub-technique presented below:\n\nThe malicious software is S0699 (tool Mythic):\nMythic is an open source, cross-platform post-exploitation/command and control platform. Mythic is designed to \"plug-n-play\" with various agents and communication channels. Deployed Mythic C2 servers have been observed as part of potentially malicious infrastructure.(Citations: Mythic Github, Mythic SpecterOps, Mythc Documentation, RecordedFuture 2021 Ad Infra)\n\nThe MITRE ATT&CK sub-technique is File Transfer Protocols (T1071.002):\nAdversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments. Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: US-CERT TA18-074A, ESET Machete July 2019)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0699 (tool Mythic)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Mythic is an open source, cross-platform post-exploitation/command and control platform. Mythic is designed to \"plug-n-play\" with various agents and communication channels. Deployed Mythic C2 servers have been observed as part of potentially malicious infrastructure.(Citations: Mythic Github, Mythic SpecterOps, Mythc Documentation, RecordedFuture 2021 Ad Infra)",
      "dyn_dst_name": "File Transfer Protocols (T1071.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Protocols such as SMB, FTP, FTPS, and TFTP that transfer files may be very common in environments. Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citations: US-CERT TA18-074A, ESET Machete July 2019)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Raindrop (S0565) and Drive-by Compromise (T1189). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Raindrop (S0565) -\nRaindrop is a loader used by APT29 that was discovered on some victim machines during investigations related to the SolarWinds Compromise. It was discovered in January 2021 and was likely used since at least May 2020.(Citations: Symantec RAINDROP January 2021, Microsoft Deep Dive Solorigate January 2021)\n\nDrive-by Compromise (T1189) -\nAdversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token. Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including: * A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting * Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary * Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising) * Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content). Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring. Typical drive-by compromise process: 1. A user visits a website that is used to host the adversary controlled content. 2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes. 3. Upon finding a vulnerable version, exploit code is delivered to the browser. 4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place. * In some cases a second visit to the website after the initial scan is required before exploit code is delivered. Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ. Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citations: Shadowserver Strategic Web Compromise, Volexity OceanLotus Nov 2017)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Raindrop (S0565)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Raindrop is a loader used by APT29 that was discovered on some victim machines during investigations related to the SolarWinds Compromise. It was discovered in January 2021 and was likely used since at least May 2020.(Citations: Symantec RAINDROP January 2021, Microsoft Deep Dive Solorigate January 2021)",
      "dyn_dst_name": "Drive-by Compromise (T1189)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token. Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including: * A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting * Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary * Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising) * Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content). Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring. Typical drive-by compromise process: 1. A user visits a website that is used to host the adversary controlled content. 2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes. 3. Upon finding a vulnerable version, exploit code is delivered to the browser. 4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place. * In some cases a second visit to the website after the initial scan is required before exploit code is delivered. Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ. Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citations: Shadowserver Strategic Web Compromise, Volexity OceanLotus Nov 2017)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, Unrestricted Upload of File with Dangerous Type (CWE-434) and CVE-2023-0587. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nUnrestricted Upload of File with Dangerous Type (CWE-434) -\nThe product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nCVE-2023-0587 -\nA file upload vulnerability in exists in Trend Micro Apex One server build 11110. Using a malformed Content-Length header in an HTTP PUT message sent to URL /officescan/console/html/cgi/fcgiOfcDDA.exe, an unauthenticated remote attacker can upload arbitrary files to the SampleSubmission directory (i.e., \\PCCSRV\\TEMP\\SampleSubmission) on the server. The attacker can upload a large number of large files to fill up the file system on which the Apex One server is installed.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Unrestricted Upload of File with Dangerous Type (CWE-434)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
      "dyn_dst_name": "CVE-2023-0587",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A file upload vulnerability in exists in Trend Micro Apex One server build 11110. Using a malformed Content-Length header in an HTTP PUT message sent to URL /officescan/console/html/cgi/fcgiOfcDDA.exe, an unauthenticated remote attacker can upload arbitrary files to the SampleSubmission directory (i.e., \\PCCSRV\\TEMP\\SampleSubmission) on the server. The attacker can upload a large number of large files to fill up the file system on which the Apex One server is installed.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) presented below:\n\nThe CWE (Common Weakness Enumeration) is Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22):\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-34342:\nAMI BMC contains a vulnerability in the IPMI handler, where an attacker can upload and download arbitrary files under certain circumstances, which may lead to denial of service, escalation of privileges, information disclosure, or data tampering.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') (CWE-22)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
      "dyn_dst_name": "CVE-2023-34342",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "AMI BMC contains a vulnerability in the IPMI handler, where an attacker can upload and download arbitrary files under certain circumstances, which may lead to denial of service, escalation of privileges, information disclosure, or data tampering.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, S0242 (malware SynAck) and Bootkit (T1542.003). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nS0242 (malware SynAck) -\nSynAck is variant of Trojan ransomware targeting mainly English-speaking users since at least fall 2017.  (Citations: SecureList SynAck Doppelg\u00e4nging May 2018, Kaspersky Lab SynAck May 2018)\n\nBootkit (T1542.003) -\nAdversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.  The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.(Citations: Mandiant M Trends 2016, Lau 2011)",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "S0242 (malware SynAck)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "SynAck is variant of Trojan ransomware targeting mainly English-speaking users since at least fall 2017.  (Citations: SecureList SynAck Doppelg\u00e4nging May 2018, Kaspersky Lab SynAck May 2018)",
      "dyn_dst_name": "Bootkit (T1542.003)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR).  The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.  The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.(Citations: Mandiant M Trends 2016, Lau 2011)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) and CVE-2023-46496. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')) -\nThe product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nCVE-2023-46496 -\nDirectory Traversal vulnerability in EverShop NPM versions before v.1.0.0-rc.8 allows a remote attacker to obtain sensitive information via a crafted request to the DELETE function in api/files endpoint.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CWE-22 (Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'))",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
      "dyn_dst_name": "CVE-2023-46496",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Directory Traversal vulnerability in EverShop NPM versions before v.1.0.0-rc.8 allows a remote attacker to obtain sensitive information via a crafted request to the DELETE function in api/files endpoint.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CWE (Common Weakness Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-28812\nThere is a buffer overflow vulnerability in a web browser plug-in could allow an attacker to exploit the vulnerability by sending crafted messages to computers installed with this plug-in, which could lead to arbitrary code execution or cause process exception of the plug-in.\n\nThe CWE (Common Weakness Enumeration) is Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (CWE-120)\nThe product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-28812",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "There is a buffer overflow vulnerability in a web browser plug-in could allow an attacker to exploit the vulnerability by sending crafted messages to computers installed with this plug-in, which could lead to arbitrary code execution or cause process exception of the plug-in.",
      "dyn_dst_name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow') (CWE-120)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, credential-access (TA0006) and Credentials in Registry (T1552.002). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\ncredential-access (TA0006) -\nThe adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.\n\nCredentials in Registry (T1552.002) -\nAdversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons. Example commands to find Registry keys related to password information:  * Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code> * Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>(Citations: Pentestlab Stored Credentials)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "credential-access (TA0006)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
      "dyn_dst_name": "Credentials in Registry (T1552.002)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons. Example commands to find Registry keys related to password information:  * Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code> * Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>(Citations: Pentestlab Stored Credentials)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Kerberoasting (CAPEC-509) and Weak Password Requirements (CWE-521). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nKerberoasting (CAPEC-509) -\nThrough the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.\n\nWeak Password Requirements (CWE-521) -\nThe product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Kerberoasting (CAPEC-509)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",
      "dyn_dst_name": "Weak Password Requirements (CWE-521)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-30924:\nH3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.\n\nThe CPE (Common Platform Enumeration) is operating system iphone_os (by apple) version *:\n\"iphone_os\" is an operating system released by \"apple\". \n\nYour goal is to determine if CVE-2022-30924 is related to operating system iphone_os (by apple) version *, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-30924",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "H3C Magic R100 R100V100R005 was discovered to contain a stack overflow vulnerability via the SetAPWifiorLedInfoById parameter at /goform/aspForm.",
      "dyn_dst_name": "operating system iphone_os (by apple) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"iphone_os\" is an operating system released by \"apple\". ",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, TA0003 (persistence) and T1505 (Server Software Component). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nTA0003 (persistence) -\nThe adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.\n\nT1505 (Server Software Component) -\nAdversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "TA0003 (persistence)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code.",
      "dyn_dst_name": "T1505 (Server Software Component)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.(Citations: volexity_0day_sophos_FW)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-24260:\nA SQL injection vulnerability in Voipmonitor GUI before v24.96 allows attackers to escalate privileges to the Administrator level.\n\nThe CPE (Common Platform Enumeration) is operating system windows_8.1 (by microsoft) version -:\n\"windows_8.1\" is an operating system released by \"microsoft\".  This product version is -\n\nYour goal is to determine if CVE-2022-24260 is related to operating system windows_8.1 (by microsoft) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-24260",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "A SQL injection vulnerability in Voipmonitor GUI before v24.96 allows attackers to escalate privileges to the Administrator level.",
      "dyn_dst_name": "operating system windows_8.1 (by microsoft) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"windows_8.1\" is an operating system released by \"microsoft\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, defense-evasion (TA0005) and Deobfuscate/Decode Files or Information (T1140). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\ndefense-evasion (TA0005) -\nThe adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.\n\nDeobfuscate/Decode Files or Information (T1140) -\nAdversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "defense-evasion (TA0005)",
      "dyn_src_layer": "MITRE ATT&CK tactic",
      "dyn_src_description": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses.",
      "dyn_dst_name": "Deobfuscate/Decode Files or Information (T1140)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citations: Malwarebytes Targeted Attack against Saudi Arabia, Carbon Black Obfuscation Sept 2016, Volexity PowerDuke November 2016)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware QakBot (S0650) and T1055 (Process Injection). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware QakBot (S0650) -\nQakBot is a modular banking trojan that has been used primarily by financially-motivated actors since at least 2007. QakBot is continuously maintained and developed and has evolved from an information stealer into a delivery agent for ransomware, most notably ProLock and Egregor.(Citations: Trend Micro Qakbot December 2020, Red Canary Qbot, Kaspersky QakBot September 2021, ATT QakBot April 2021)\n\nT1055 (Process Injection) -\nAdversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware QakBot (S0650)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "QakBot is a modular banking trojan that has been used primarily by financially-motivated actors since at least 2007. QakBot is continuously maintained and developed and has evolved from an information stealer into a delivery agent for ransomware, most notably ProLock and Egregor.(Citations: Trend Micro Qakbot December 2020, Red Canary Qbot, Kaspersky QakBot September 2021, ATT QakBot April 2021)",
      "dyn_dst_name": "T1055 (Process Injection)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration):\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-31311\nAn issue in adm.cgi of WAVLINK AERIAL X 1200M M79X3.V5030.180719 allows attackers to execute arbitrary commands via a crafted POST request.\n\nThe CPE (Common Platform Enumeration) is operating system mdm9640_firmware (by qualcomm) version -\n\"mdm9640_firmware\" is an operating system released by \"qualcomm\".  This product version is -\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-31311",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "An issue in adm.cgi of WAVLINK AERIAL X 1200M M79X3.V5030.180719 allows attackers to execute arbitrary commands via a crafted POST request.",
      "dyn_dst_name": "operating system mdm9640_firmware (by qualcomm) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"mdm9640_firmware\" is an operating system released by \"qualcomm\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, Unrestricted Upload of File with Dangerous Type (CWE-434) and CVE-2023-0651. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nUnrestricted Upload of File with Dangerous Type (CWE-434) -\nThe product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nCVE-2023-0651 -\nA vulnerability was found in FastCMS 0.1.0. It has been classified as critical. Affected is an unknown function of the component Template Management. The manipulation leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-220038 is the identifier assigned to this vulnerability.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Unrestricted Upload of File with Dangerous Type (CWE-434)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
      "dyn_dst_name": "CVE-2023-0651",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "A vulnerability was found in FastCMS 0.1.0. It has been classified as critical. Affected is an unknown function of the component Template Management. The manipulation leads to unrestricted upload. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-220038 is the identifier assigned to this vulnerability.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following MITRE ATT&CK sub-technique and malicious software and their descriptions:\n\nThe MITRE ATT&CK sub-technique is /etc/passwd and /etc/shadow (T1003.008):\nAdversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user. The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>(Citations: Linux Password and Shadow File Formats, nixCraft - John the Ripper)\n\nThe malicious software is tool Cachedump (S0119):\nCachedump is a publicly-available tool that program extracts cached password hashes from a system\u2019s registry. (Citations: Mandiant APT1)\n\nYour goal is to determine if /etc/passwd and /etc/shadow (T1003.008) is related to tool Cachedump (S0119), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "/etc/passwd and /etc/shadow (T1003.008)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may attempt to dump the contents of <code>/etc/passwd</code> and <code>/etc/shadow</code> to enable offline password cracking. Most modern Linux operating systems use a combination of <code>/etc/passwd</code> and <code>/etc/shadow</code> to store user account information including password hashes in <code>/etc/shadow</code>. By default, <code>/etc/shadow</code> is only readable by the root user. The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper: <code># /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db</code>(Citations: Linux Password and Shadow File Formats, nixCraft - John the Ripper)",
      "dyn_dst_name": "tool Cachedump (S0119)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "Cachedump is a publicly-available tool that program extracts cached password hashes from a system\u2019s registry. (Citations: Mandiant APT1)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, CVE-2023-2134 and application chrome (by google) version *. Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\nCVE-2023-2134 -\nOut of bounds memory access in Service Worker API in Google Chrome prior to 112.0.5615.137 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)\n\napplication chrome (by google) version * -\n\"chrome\" is an application released by \"google\". ",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2023-2134",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Out of bounds memory access in Service Worker API in Google Chrome prior to 112.0.5615.137 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)",
      "dyn_dst_name": "application chrome (by google) version *",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"chrome\" is an application released by \"google\". ",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) presented below:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Group Permission Footprinting (CAPEC-576):\nAn adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is \"net localgroup\".\n\nThe CWE (Common Weakness Enumeration) is CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor):\nThe product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Group Permission Footprinting (CAPEC-576)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is \"net localgroup\".",
      "dyn_dst_name": "CWE-200 (Exposure of Sensitive Information to an Unauthorized Actor)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) presented below:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-25440:\nTenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the ntpserver parameter in the SetSysTimeCfg function.\n\nThe CPE (Common Platform Enumeration) is application solidfire_\\&_hci_management_node (by netapp) version -:\n\"solidfire_\\&_hci_management_node\" is an application released by \"netapp\".  This product version is -\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-25440",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the ntpserver parameter in the SetSysTimeCfg function.",
      "dyn_dst_name": "application solidfire_\\&_hci_management_node (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"solidfire_\\&_hci_management_node\" is an application released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CWE (Common Weakness Enumeration) and CVE (Common Vulnerabilities and Exposures) and their descriptions:\n\nThe CWE (Common Weakness Enumeration) is Improper Control of Generation of Code ('Code Injection') (CWE-94):\nThe product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2023-5800:\nVintage, member of the AXIS OS Bug Bounty Program, has found that the VAPIX API create_overlay.cgi did not have a sufficient input validation allowing for a possible remote code execution. This flaw can only be exploited after authenticating with an operator- or administrator-privileged service account. Axis has released patched AXIS OS versions for the highlighted flaw. Please refer to the Axis security advisory for more information and solution.\n\nYour goal is to determine if Improper Control of Generation of Code ('Code Injection') (CWE-94) is related to CVE-2023-5800, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Improper Control of Generation of Code ('Code Injection') (CWE-94)",
      "dyn_src_layer": "CWE (Common Weakness Enumeration)",
      "dyn_src_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
      "dyn_dst_name": "CVE-2023-5800",
      "dyn_dst_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_dst_description": "Vintage, member of the AXIS OS Bug Bounty Program, has found that the VAPIX API create_overlay.cgi did not have a sufficient input validation allowing for a possible remote code execution. This flaw can only be exploited after authenticating with an operator- or administrator-privileged service account. Axis has released patched AXIS OS versions for the highlighted flaw. Please refer to the Axis security advisory for more information and solution.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware Lokibot (S0447) and Visual Basic (T1059.005). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware Lokibot (S0447) -\nLokibot is a widely distributed information stealer that was first reported in 2015. It is designed to steal sensitive information such as usernames, passwords, cryptocurrency wallets, and other credentials. Lokibot can also create a backdoor into infected systems to allow an attacker to install additional payloads.(Citations: Infoblox Lokibot January 2019, Morphisec Lokibot April 2020, CISA Lokibot September 2020)\n\nVisual Basic (T1059.005) -\nAdversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core. Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support). Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).(Citations: VB .NET Mar 2020, VB Microsoft, Microsoft VBA, Wikipedia VBA, Microsoft VBScript, Default VBS macros Blocking )",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Lokibot (S0447)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Lokibot is a widely distributed information stealer that was first reported in 2015. It is designed to steal sensitive information such as usernames, passwords, cryptocurrency wallets, and other credentials. Lokibot can also create a backdoor into infected systems to allow an attacker to install additional payloads.(Citations: Infoblox Lokibot January 2019, Morphisec Lokibot April 2020, CISA Lokibot September 2020)",
      "dyn_dst_name": "Visual Basic (T1059.005)",
      "dyn_dst_layer": "MITRE ATT&CK sub-technique",
      "dyn_dst_description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as Component Object Model and the Native API through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core. Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications. VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of JavaScript on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support). Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into Spearphishing Attachment payloads (which may also involve Mark-of-the-Web Bypass to enable execution).(Citations: VB .NET Mar 2020, VB Microsoft, Microsoft VBA, Wikipedia VBA, Microsoft VBScript, Default VBS macros Blocking )",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware Egregor (S0554):\nEgregor is a Ransomware-as-a-Service (RaaS) tool that was first observed in September 2020. Researchers have noted code similarities between Egregor and Sekhmet ransomware, as well as Maze ransomware.(Citations: NHS Digital Egregor Nov 2020, Cyble Egregor Oct 2020, Security Boulevard Egregor Oct 2020)\n\nThe MITRE ATT&CK technique is T1106 (Native API):\nAdversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Egregor (S0554)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Egregor is a Ransomware-as-a-Service (RaaS) tool that was first observed in September 2020. Researchers have noted code similarities between Egregor and Sekhmet ransomware, as well as Maze ransomware.(Citations: NHS Digital Egregor Nov 2020, Cyble Egregor Oct 2020, Security Boulevard Egregor Oct 2020)",
      "dyn_dst_name": "T1106 (Native API)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations. Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations. Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code. Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.(Citations: NT API Windows, Linux Kernel API, OutFlank System Calls, CyberBit System Calls, MDSec System Calls, Microsoft CreateProcess, GNU Fork, Microsoft Win32, LIBC, GLIBC, Microsoft NET, Apple Core Services, MACOS Cocoa, macOS Foundation, Redops Syscalls)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is tool Pupy (S0192)\nPupy is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).  Pupy is publicly available on GitHub. (Citations: GitHub Pupy, GitHub Pupy, GitHub Pupy)\n\nThe MITRE ATT&CK technique is Network Share Discovery (T1135)\nAdversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.(Citations: Wikipedia Shared Resource, TechNet Shared Folder)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Pupy (S0192)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Pupy is an open source, cross-platform (Windows, Linux, OSX, Android) remote administration and post-exploitation tool.  It is written in Python and can be generated as a payload in several different ways (Windows exe, Python file, PowerShell oneliner/file, Linux elf, APK, Rubber Ducky, etc.).  Pupy is publicly available on GitHub. (Citations: GitHub Pupy, GitHub Pupy, GitHub Pupy)",
      "dyn_dst_name": "Network Share Discovery (T1135)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.(Citations: Wikipedia Shared Resource, TechNet Shared Folder)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions for the following malicious software and MITRE ATT&CK technique:\n\nThe malicious software is malware Black Basta (S1070)\nBlack Basta is ransomware written in C++ that has been offered within the ransomware-as-a-service (RaaS) model since at least April 2022; there are variants that target Windows and VMWare ESXi servers. Black Basta operations have included the double extortion technique where in addition to demanding ransom for decrypting the files of targeted organizations the cyber actors also threaten to post sensitive information to a leak site if the ransom is not paid. Black Basta affiliates have targeted multiple high-value organizations, with the largest number of victims based in the U.S. Based on similarities in TTPs, leak sites, payment sites, and negotiation tactics, security researchers assess the Black Basta RaaS operators could include current or former members of the Conti group.(Citations: Palo Alto Networks Black Basta August 2022, Deep Instinct Black Basta August 2022, Minerva Labs Black Basta May 2022, Avertium Black Basta June 2022, NCC Group Black Basta June 2022, Cyble Black Basta May 2022)\n\nThe MITRE ATT&CK technique is Browser Information Discovery (T1217)\nAdversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser. Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citations: Kaspersky Autofill, Chrome Roaming Profiles)\n\nThen, assess the correctness of the connection between them by answering Yes (connected) / No (disconnected):\n",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware Black Basta (S1070)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Black Basta is ransomware written in C++ that has been offered within the ransomware-as-a-service (RaaS) model since at least April 2022; there are variants that target Windows and VMWare ESXi servers. Black Basta operations have included the double extortion technique where in addition to demanding ransom for decrypting the files of targeted organizations the cyber actors also threaten to post sensitive information to a leak site if the ransom is not paid. Black Basta affiliates have targeted multiple high-value organizations, with the largest number of victims based in the U.S. Based on similarities in TTPs, leak sites, payment sites, and negotiation tactics, security researchers assess the Black Basta RaaS operators could include current or former members of the Conti group.(Citations: Palo Alto Networks Black Basta August 2022, Deep Instinct Black Basta August 2022, Minerva Labs Black Basta May 2022, Avertium Black Basta June 2022, NCC Group Black Basta June 2022, Cyble Black Basta May 2022)",
      "dyn_dst_name": "Browser Information Discovery (T1217)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser. Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).(Citations: Kaspersky Autofill, Chrome Roaming Profiles)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CAPEC (Common Attack Pattern Enumeration and Classification) and CWE (Common Weakness Enumeration) and their descriptions:\n\nThe CAPEC (Common Attack Pattern Enumeration and Classification) is Phishing (CAPEC-98):\nPhishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\n\nThe CWE (Common Weakness Enumeration) is Use of Less Trusted Source (CWE-348):\nThe product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nYour goal is to determine if Phishing (CAPEC-98) is related to Use of Less Trusted Source (CWE-348), based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Phishing (CAPEC-98)",
      "dyn_src_layer": "CAPEC (Common Attack Pattern Enumeration and Classification)",
      "dyn_src_description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
      "dyn_dst_name": "Use of Less Trusted Source (CWE-348)",
      "dyn_dst_layer": "CWE (Common Weakness Enumeration)",
      "dyn_dst_description": "The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the malicious software and MITRE ATT&CK technique presented below:\n\nThe malicious software is malware WindTail (S0466):\nWindTail is a macOS surveillance implant used by Windshift. WindTail shares code similarities with Hack Back aka KitM OSX.(Citations: SANS Windshift August 2018, objective-see windtail1 dec 2018, objective-see windtail2 jan 2019)\n\nThe MITRE ATT&CK technique is T1016 (System Network Configuration Discovery):\nAdversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route. Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>). Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.(Citations: US-CERT-TA18-106A, Mandiant APT41 Global Intrusion )\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware WindTail (S0466)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "WindTail is a macOS surveillance implant used by Windshift. WindTail shares code similarities with Hack Back aka KitM OSX.(Citations: SANS Windshift August 2018, objective-see windtail1 dec 2018, objective-see windtail2 jan 2019)",
      "dyn_dst_name": "T1016 (System Network Configuration Discovery)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route. Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>). Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next.(Citations: US-CERT-TA18-106A, Mandiant APT41 Global Intrusion )",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the information provided for the MITRE ATT&CK sub-technique and malicious software presented below:\n\nThe MITRE ATT&CK sub-technique is Stripped Payloads (T1027.008):\nAdversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads. Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citations: Mandiant golang stripped binaries explanation, intezer stripped binaries elf files 2018, SentinelLabs reversing run-only applescripts 2021)\n\nThe malicious software is malware FruitFly (S0277):\nFruitFly is designed to spy on mac users .(Citations: objsee mac malware 2017)\n\nBased on this, please evaluate whether the two are related to each other or not.Respond with 'Yes' or 'No'.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "Stripped Payloads (T1027.008)",
      "dyn_src_layer": "MITRE ATT&CK sub-technique",
      "dyn_src_description": "Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system\u2019s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads. Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.(Citations: Mandiant golang stripped binaries explanation, intezer stripped binaries elf files 2018, SentinelLabs reversing run-only applescripts 2021)",
      "dyn_dst_name": "malware FruitFly (S0277)",
      "dyn_dst_layer": "malicious software",
      "dyn_dst_description": "FruitFly is designed to spy on mac users .(Citations: objsee mac malware 2017)",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Look at the following CVE (Common Vulnerabilities and Exposures) and CPE (Common Platform Enumeration) and their descriptions:\n\nThe CVE (Common Vulnerabilities and Exposures) is CVE-2022-27570:\nHeap-based buffer overflow vulnerability in parser_single_iref function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.\n\nThe CPE (Common Platform Enumeration) is operating system android (by google) version -:\n\"android\" is an operating system released by \"google\".  This product version is -\n\nYour goal is to determine if CVE-2022-27570 is related to operating system android (by google) version -, based on the provided context. Answer Yes/No.",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-27570",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "Heap-based buffer overflow vulnerability in parser_single_iref function in libsimba library prior to SMR Apr-2022 Release 1 allows code execution by remote attacker.",
      "dyn_dst_name": "operating system android (by google) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"android\" is an operating system released by \"google\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  },
  {
    "instruction": "Take a look at the descriptions of the given entities, tool Out1 (S0594) and Obfuscated Files or Information (T1027). Your objective is to verify the connection between them by answering Yes (the two are related to each other) or No (the two are not related to each other):\n\ntool Out1 (S0594) -\nOut1 is a remote access tool written in python and used by MuddyWater since at least 2021.(Citations: Trend Micro Muddy Water March 2021)\n\nObfuscated Files or Information (T1027) -\nAdversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.  Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.  (Citations: Volexity PowerDuke November 2016, Linux/Cdorked.A We Live Security Analysis, Carbon Black Obfuscation Sept 2016, FireEye Obfuscation June 2017, FireEye Revoke-Obfuscation July 2017, PaloAlto EncodedCommand March 2017)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "tool Out1 (S0594)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "Out1 is a remote access tool written in python and used by MuddyWater since at least 2021.(Citations: Trend Micro Muddy Water March 2021)",
      "dyn_dst_name": "Obfuscated Files or Information (T1027)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.  Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.  (Citations: Volexity PowerDuke November 2016, Linux/Cdorked.A We Live Security Analysis, Carbon Black Obfuscation Sept 2016, FireEye Obfuscation June 2017, FireEye Revoke-Obfuscation July 2017, PaloAlto EncodedCommand March 2017)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, malware XAgentOSX (S0161) and File and Directory Discovery (T1083). Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nmalware XAgentOSX (S0161) -\nXAgentOSX is a trojan that has been used by APT28 on OS X and appears to be a port of their standard CHOPSTICK or XAgent trojan. (Citations: XAgentOSX 2017)\n\nFile and Directory Discovery (T1083) -\nAdversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>). Some files and directories may require elevated or specific user permissions to access.(Citations: Windows Commands JPCERT, US-CERT-TA18-106A)",
    "context": "",
    "output": "Yes",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "malware XAgentOSX (S0161)",
      "dyn_src_layer": "malicious software",
      "dyn_src_description": "XAgentOSX is a trojan that has been used by APT28 on OS X and appears to be a port of their standard CHOPSTICK or XAgent trojan. (Citations: XAgentOSX 2017)",
      "dyn_dst_name": "File and Directory Discovery (T1083)",
      "dyn_dst_layer": "MITRE ATT&CK technique",
      "dyn_dst_description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>). Some files and directories may require elevated or specific user permissions to access.(Citations: Windows Commands JPCERT, US-CERT-TA18-106A)",
      "dyn_answer": "Yes",
      "prompts": []
    }
  },
  {
    "instruction": "Examine the descriptions of the concepts provided, CVE-2022-22087 and operating system h700s_firmware (by netapp) version -. Your task is to determine if the concepts have a correlation with each other or not. Respond with Yes/No:\n\nCVE-2022-22087 -\nmemory corruption in video due to buffer overflow while parsing mkv clip with no codechecker in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables\n\noperating system h700s_firmware (by netapp) version - -\n\"h700s_firmware\" is an operating system released by \"netapp\".  This product version is -",
    "context": "",
    "output": "No",
    "category": "BronFlan",
    "instruction_type": "bron_direct_yes_no",
    "parsed_raw_data": {
      "dyn_src_name": "CVE-2022-22087",
      "dyn_src_layer": "CVE (Common Vulnerabilities and Exposures)",
      "dyn_src_description": "memory corruption in video due to buffer overflow while parsing mkv clip with no codechecker in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables",
      "dyn_dst_name": "operating system h700s_firmware (by netapp) version -",
      "dyn_dst_layer": "CPE (Common Platform Enumeration)",
      "dyn_dst_description": "\"h700s_firmware\" is an operating system released by \"netapp\".  This product version is -",
      "dyn_answer": "No",
      "prompts": []
    }
  }
]