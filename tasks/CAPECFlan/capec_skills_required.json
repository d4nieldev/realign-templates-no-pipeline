[
  {
    "instruction": "List the required skills related to capec: MIME Conversion (CAPEC ID: 42)",
    "context": "",
    "output": "required skills:\nIt may be trivial to cause a DoS via this attack pattern The level of the required skills can be classified as Low\n* Causing arbitrary code to execute on the target system. The level of the required skills can be classified as High",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "It may be trivial to cause a DoS via this attack pattern The level of the required skills can be classified as Low",
        "Causing arbitrary code to execute on the target system. The level of the required skills can be classified as High"
      ],
      "@Name": "MIME Conversion (CAPEC ID: 42)",
      "attack_ptrn": {
        "@ID": "42",
        "@Name": "MIME Conversion",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target mail server] The adversary identifies a target mail server that they wish to attack.",
              "Technique": "Use Nmap on a system to identify a mail server service."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4)."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target system uses a mail server.",
            "Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "It may be trivial to cause a DoS via this attack pattern"
            },
            {
              "@Level": "High",
              "#text": "Causing arbitrary code to execute on the target system."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Stay up to date with third party vendor patches",
            {
              "xhtml:p": [
                "Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.",
                "For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):",
                "This can be achieved for the \"Mlocal\" and \"Mprog\" Mailers by modifying the \".mc\" file to include the following lines:",
                "and then rebuilding the sendmail.cf file using m4(1).",
                "From \"Exploiting Software\", please see reference below."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "T=DNS/RFC822/X-Unix,A=mail -d $u"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:br": [
                        null,
                        null
                      ],
                      "#text": "D=$z:/,T=X-Unix,A=sh -c $u"
                    }
                  ],
                  "xhtml:br": null,
                  "#text": "Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,\n                  Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:br": null,
                        "#text": "`translit(LOCAL_MAILER_FLAGS, `9')',`rmn'))"
                      },
                      "#text": "ifdef(`LOCAL_MAILER_FLAGS',"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:br": null,
                        "#text": "`translit(LOCAL_SHELL_FLAGS, `9')',`eu'))"
                      },
                      "#text": "ifdef(`LOCAL_SHELL_FLAGS',"
                    }
                  ],
                  "xhtml:br": null,
                  "#text": "define(`LOCAL_MAILER_FLAGS',\n                  define(`LOCAL_SHELL_FLAGS',"
                }
              ]
            },
            "Use the sendmail restricted shell program (smrsh)",
            "Use mail.local"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.",
              "Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild."
            ],
            "#text": "See also: CVE-1999-0047"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-364"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Using Malicious Files (CAPEC ID: 17), tell me required skills from an attacker",
    "context": "",
    "output": "Sure. Here are the required skills the attacker should posses:\nTo identify and execute against an over-privileged system interface The level of the required skills can be classified as Low",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "To identify and execute against an over-privileged system interface The level of the required skills can be classified as Low"
      ],
      "@Name": "Using Malicious Files (CAPEC ID: 17)",
      "attack_ptrn": {
        "@ID": "17",
        "@Name": "Using Malicious Files",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "122",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "233"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.",
              "Technique": "Through shell access to a system, use the command \"ls -l\" to view permissions for files and directories."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.",
              "Technique": "Upload a malicious file through a misconfigured FTP server."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To identify and execute against an over-privileged system interface"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Consider a directory on a web server with the following permissions",
              "This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "272"
            },
            {
              "@CWE_ID": "59"
            },
            {
              "@CWE_ID": "282"
            },
            {
              "@CWE_ID": "270"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.005",
              "Entry_Name": "Hijack Execution Flow: Executable Installer File Permissions Weakness"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.010",
              "Entry_Name": "Hijack Execution Flow: Services File Permissions Weakness"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "Accessing, Modifying or Executing Executable Files"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required skills related to capec: Command Line Execution through SQL Injection (CAPEC ID: 108)",
    "context": "",
    "output": "required skills:\nThe attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding. The level of the required skills can be classified as High",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding. The level of the required skills can be classified as High"
      ],
      "@Name": "Command Line Execution through SQL Injection (CAPEC ID: 108)",
      "attack_ptrn": {
        "@ID": "108",
        "@Name": "Command Line Execution through SQL Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "66"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application does not properly validate data before storing in the database",
            "Backend application implicitly trusts the data stored in the database",
            "Malicious data is used on the backend as a command line argument"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Disable MSSQL xp_cmdshell directive on the database",
            "Properly validate the data (syntactically and semantically) before writing it to the database.",
            "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument)."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).",
              "Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799"
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "114"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the skills needed so the attacker can use the attack pattern: Forced Integer Overflow (CAPEC ID: 92)",
    "context": "",
    "output": "Here is the list of skills required to implement attack pattern Forced Integer Overflow (CAPEC ID: 92):\nAn attacker can simply overflow an integer by inserting an out of range value. The level of the required skills can be classified as Low\nExploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level. The level of the required skills can be classified as High",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "An attacker can simply overflow an integer by inserting an out of range value. The level of the required skills can be classified as Low",
        "Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level. The level of the required skills can be classified as High"
      ],
      "@Name": "Forced Integer Overflow (CAPEC ID: 92)",
      "attack_ptrn": {
        "@ID": "92",
        "@Name": "Forced Integer Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "128"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The first step is exploratory meaning the attacker looks for an integer variable that they can control."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The integer variable is forced to have a value out of range which set its final value to an unexpected value."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "The target host acts on the data and unexpected behavior may happen."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker can manipulate the value of an integer variable utilized by the target host.",
            "The target host does not do proper range checking on the variable before utilizing it.",
            "When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)"
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can simply overflow an integer by inserting an out of range value."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use a language or compiler that performs automatic bounds checking.",
            "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.",
            "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "Always do bound checking before consuming user input data."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544",
            {
              "xhtml:p": "The following code illustrates an integer overflow. The declaration of total integer as \"unsigned short int\" assumes that the length of the first and second arguments fits in such an integer [REF-547], [REF-548].",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:br": null,
                    "#text": "printf(\"Usage: prog_name <string1> <string2>\\n\");exit(-1);"
                  },
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "if (argc !=3){\n                     }unsigned short int total;total = strlen(argv[1])+strlen(argv[2])+1;char * buff = (char *)malloc(total);strcpy(buff, argv[1]);strcpy(buff, argv[2]);"
                },
                "#text": "include <stdlib.h>include <string.h>include <stdio.h>\n                  int main (int argc, char *const *argv){\n                  }"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "190"
            },
            {
              "@CWE_ID": "128"
            },
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "122"
            },
            {
              "@CWE_ID": "196"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "03",
            "Entry_Name": "Integer Overflows"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-131"
            },
            {
              "@External_Reference_ID": "REF-547",
              "@Section": "Test Case ID 1511"
            },
            {
              "@External_Reference_ID": "REF-548",
              "@Section": "Page 152, Figure 5-1"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required skills to execute the attack pattern: Incomplete Data Deletion in a Multi-Tenant Environment (CAPEC ID: 546)",
    "context": "",
    "output": "The skills required to execute Incomplete Data Deletion in a Multi-Tenant Environment (CAPEC ID: 546) are the following: The adversary requires the ability to traverse directory structure. The level of the required skills can be classified as Low",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "The adversary requires the ability to traverse directory structure. The level of the required skills can be classified as Low"
      ],
      "@Name": "Incomplete Data Deletion in a Multi-Tenant Environment (CAPEC ID: 546)",
      "attack_ptrn": {
        "@ID": "546",
        "@Name": "Incomplete Data Deletion in a Multi-Tenant Environment",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "545"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires the ability to traverse directory structure."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "A successful attack that probes application memory will compromise the confidentiality of that data."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.",
            "Deletion of data should be completed promptly when requested."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "284"
            },
            {
              "@CWE_ID": "1266"
            },
            {
              "@CWE_ID": "1272"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-461"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Name"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2021-10-21",
            "#text": "Probe Application Memory"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required skills to execute the attack pattern: Malicious Code Implanted During Chip Programming (CAPEC ID: 672)",
    "context": "",
    "output": "The skills required to execute Malicious Code Implanted During Chip Programming (CAPEC ID: 672) are the following: An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis. The level of the required skills can be classified as Medium",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis. The level of the required skills can be classified as Medium"
      ],
      "@Name": "Malicious Code Implanted During Chip Programming (CAPEC ID: 672)",
      "attack_ptrn": {
        "@ID": "672",
        "@Name": "Malicious Code Implanted During Chip Programming",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip\u2019s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "688"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to a foundry\u2019s or chip maker\u2019s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Alter Execution Logic"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
            "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.",
            "Require that provenance of COTS microelectronic components be known whenever procured.",
            "Conduct detailed vendor assessment before acquiring COTS hardware."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-662"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required skills related to capec: Relative Path Traversal (CAPEC ID: 139)",
    "context": "",
    "output": "required skills:\nTo inject the malicious payload in a web page The level of the required skills can be classified as Low\n- To bypass non trivial filters in the application The level of the required skills can be classified as High",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "To inject the malicious payload in a web page The level of the required skills can be classified as Low",
        "To bypass non trivial filters in the application The level of the required skills can be classified as High"
      ],
      "@Name": "Relative Path Traversal (CAPEC ID: 139)",
      "attack_ptrn": {
        "@ID": "139",
        "@Name": "Relative Path Traversal",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "126"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.",
              "Technique": [
                "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
                "TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.",
              "Technique": [
                "Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.",
              "Technique": [
                "Provide \"../\" or \"..\\\" at the beginning of any filename to traverse to the parent directory",
                "Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\".",
                "Use a proxy tool to record results of manual input of relative path traversal probes in known URLs."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Access, modify, or execute arbitrary files.] An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.",
              "Technique": [
                "Manipulate file and its path by injecting relative path sequences (e.g. \"../\").",
                "Download files, modify files, or try to execute shell commands (with binary files)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To inject the malicious payload in a web page"
            },
            {
              "@Level": "High",
              "#text": "To bypass non trivial filters in the application"
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
            "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.",
            "Implementation: Prefer working without user input when using file system calls",
            "Implementation: Use indirect references rather than actual file names.",
            "Implementation: Use possible permissions on file access when developing and deploying web applications."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.",
              "However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.",
              "Then an attacker creates special payloads to bypass this filter:",
              "When the application gets this input string, it will be the desired vector by the attacker."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "23"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-9",
              "@Section": "Testing for Path Traversal (OWASP-AZ-001)"
            },
            {
              "@External_Reference_ID": "REF-10",
              "@Section": "WASC-33 - Path Traversal"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required skills to execute the attack pattern: Session Credential Falsification through Forging (CAPEC ID: 196)",
    "context": "",
    "output": "The skills required to execute Session Credential Falsification through Forging (CAPEC ID: 196) are the following: Forge the session credential and reply the request. The level of the required skills can be classified as Medium",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "Forge the session credential and reply the request. The level of the required skills can be classified as Medium"
      ],
      "@Name": "Session Credential Falsification through Forging (CAPEC ID: 196)",
      "attack_ptrn": {
        "@ID": "196",
        "@Name": "Session Credential Falsification through Forging",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "384"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "61"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "21"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.",
              "Technique": [
                "An attacker makes many anonymous connections and records the session IDs.",
                "An attacker makes authorized connections and records the session tokens or credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.",
              "Technique": "The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.",
              "Technique": [
                "The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.",
                "The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Forge the session credential and reply the request."
          }
        },
        "Resources_Required": {
          "Resource": "Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.",
            "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "This example uses client side scripting to set session ID in the victim's browser. The JavaScript code",
              "fixates a falsified session credential into victim's browser, with the help of crafted a URL link.",
              "A similar example uses session ID as an argument of the URL.",
              "Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "document.cookie=\"sessionid=0123456789\""
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://www.example.com/<script>document.cookie=\"sessionid=0123456789\";</script>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://www.example.com/index.php/sessionid=0123456789"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "664"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134.002",
              "Entry_Name": "Access Token Manipulation: Create Process with Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134.003",
              "Entry_Name": "Access Token Manipulation: Make and Impersonate Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1606",
              "Entry_Name": "Forge Web Credentials"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-62"
            },
            {
              "@External_Reference_ID": "REF-63",
              "@Section": "Testing for Session Management"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required skills to execute the attack pattern: File Content Injection (CAPEC ID: 23)",
    "context": "",
    "output": "The skills required to execute File Content Injection (CAPEC ID: 23) are the following: How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened. The level of the required skills can be classified as Medium",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened. The level of the required skills can be classified as Medium"
      ],
      "@Name": "File Content Injection (CAPEC ID: 23)",
      "attack_ptrn": {
        "@ID": "23",
        "@Name": "File Content Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",
        "Extended_Description": {
          "xhtml:p": "Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "242"
            },
            {
              "@Nature": "CanAlsoBe",
              "@CAPEC_ID": "165"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software must consume files.",
            "The adversary must have access to modify files that the target software will consume."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Execute Unauthorized Commands",
            "Note": "Run Arbitrary Code"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
            "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
            "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
            "Implementation: Virus scanning on host",
            "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "20"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Example_Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "File System Function Injection, Content Based"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required skills related to capec: Hardware Component Substitution During Baselining (CAPEC ID: 516)",
    "context": "",
    "output": "required skills:\nIntelligence data on victim's purchasing habits. The level of the required skills can be classified as Medium\nResources to maliciously construct/alter hardware components used for testing by the supplier. The level of the required skills can be classified as High\nResources to physically infiltrate supplier. The level of the required skills can be classified as High",
    "category": "CAPECFlan",
    "instruction_type": "capec_skills_required",
    "parsed_raw_data": {
      "Skills_Required": [
        "Intelligence data on victim's purchasing habits. The level of the required skills can be classified as Medium",
        "Resources to maliciously construct/alter hardware components used for testing by the supplier. The level of the required skills can be classified as High",
        "Resources to physically infiltrate supplier. The level of the required skills can be classified as High"
      ],
      "@Name": "Hardware Component Substitution During Baselining (CAPEC ID: 516)",
      "attack_ptrn": {
        "@ID": "516",
        "@Name": "Hardware Component Substitution During Baselining",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "688"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary will need either physical access or be able to supply malicious hardware components to the product development facility."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Intelligence data on victim's purchasing habits."
            },
            {
              "@Level": "High",
              "#text": "Resources to maliciously construct/alter hardware components used for testing by the supplier."
            },
            {
              "@Level": "High",
              "#text": "Resources to physically infiltrate supplier."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.",
            "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-712"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations, Prerequisites, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  }
]