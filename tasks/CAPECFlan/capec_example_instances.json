[
  {
    "instruction": "Are there any examples for 'Search Order Hijacking' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.\n* macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.",
        "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level."
      ],
      "@Name": "Search Order Hijacking"
    }
  },
  {
    "instruction": "Are there any examples for 'Fuzzing for garnering other adjacent user/sensitive data' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.",
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data"
    }
  },
  {
    "instruction": "Are there any examples for 'User-Controlled Filename' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.",
      "@Name": "User-Controlled Filename"
    }
  },
  {
    "instruction": "List examples for 'Key Negotiation of Bluetooth Attack (KNOB)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Key Negotiation of Bluetooth Attack (KNOB) are: Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.",
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB)"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
    "context": "",
    "output": "Possible examples: In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]",
      "@Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation"
    }
  },
  {
    "instruction": "Given the attack pattern: Windows Admin Shares with Stolen Credentials, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]\n- In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]",
        "In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]"
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Malicious Automated Software Update via Spoofing",
    "context": "",
    "output": "An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.",
      "@Name": "Malicious Automated Software Update via Spoofing"
    }
  },
  {
    "instruction": "Are there any examples for 'LDAP Injection' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301",
      "@Name": "LDAP Injection"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Root/Jailbreak Detection Evasion via Debugging",
    "context": "",
    "output": "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.",
      "@Name": "Root/Jailbreak Detection Evasion via Debugging"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Modification of Registry Run Keys",
    "context": "",
    "output": "Examples of Modification of Registry Run Keys are: An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.\n* Through the modification of registry \"run keys\" the adversary can masquerade a malicious executable as a legitimate program.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.",
        "Through the modification of registry \"run keys\" the adversary can masquerade a malicious executable as a legitimate program."
      ],
      "@Name": "Modification of Registry Run Keys"
    }
  },
  {
    "instruction": "List examples for 'Signature Spoofing by Improper Validation' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Signature Spoofing by Improper Validation are: The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601",
      "@Name": "Signature Spoofing by Improper Validation"
    }
  },
  {
    "instruction": "Are there any examples for 'MIME Conversion' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.\n- Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.",
        "Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild."
      ],
      "@Name": "MIME Conversion"
    }
  },
  {
    "instruction": "Are there any examples for 'XML Flood' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
      "@Name": "XML Flood"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Task Impersonation",
    "context": "",
    "output": "Possible examples: An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.\n* An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
        "An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges."
      ],
      "@Name": "Task Impersonation"
    }
  },
  {
    "instruction": "List examples for 'Mobile Phishing' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Mobile Phishing are: The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes.",
      "@Name": "Mobile Phishing"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploiting Incorrectly Configured SSL/TLS, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.",
      "@Name": "Exploiting Incorrectly Configured SSL/TLS"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Use of Known Kerberos Credentials",
    "context": "",
    "output": "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]\nPowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
        "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
      ],
      "@Name": "Use of Known Kerberos Credentials"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Cache Poisoning",
    "context": "",
    "output": "Possible examples: In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.\n* Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com\n* When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
        "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
        "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
      ],
      "@Name": "Cache Poisoning"
    }
  },
  {
    "instruction": "Are there any examples for 'Hardware Design Specifications Are Altered' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 \"cores\" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 \"cores\" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.",
      "@Name": "Hardware Design Specifications Are Altered"
    }
  },
  {
    "instruction": "List examples for 'DHCP Spoofing' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - DHCP Spoofing are: In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]",
      "@Name": "DHCP Spoofing"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: iFrame Overlay",
    "context": "",
    "output": "Possible examples: The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled \"Don't Click.\" This button is aligned with the invisible \"Update\" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled \"Don't Click.\" This button is aligned with the invisible \"Update\" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.",
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "Are there any examples for 'Rogue Integration Procedures' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.",
      "@Name": "Rogue Integration Procedures"
    }
  },
  {
    "instruction": "Given the attack pattern: Accessing Functionality Not Properly Constrained by ACLs, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.\n* If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.",
        "If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted."
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "List examples for 'Password Brute Forcing' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Password Brute Forcing are: A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143"
      ],
      "@Name": "Password Brute Forcing"
    }
  },
  {
    "instruction": "List examples for 'Cross Site Request Forgery' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Cross Site Request Forgery are: While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.\nThe link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.\nThe attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.",
        "The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.",
        "The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie."
      ],
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Session Fixation",
    "context": "",
    "output": "Examples of Session Fixation are: Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.\n- An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.",
        "An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182"
      ],
      "@Name": "Session Fixation"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Malicious Hardware Update",
    "context": "",
    "output": "An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.",
      "@Name": "Malicious Hardware Update"
    }
  },
  {
    "instruction": "Are there any examples for 'Homograph Attack via Homoglyphs' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.\n* However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.\n* The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.\n* The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.\n* Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
        "However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.",
        "The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.",
        "Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials."
      ],
      "@Name": "Homograph Attack via Homoglyphs"
    }
  },
  {
    "instruction": "Given the attack pattern: Encryption Brute Forcing, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.",
      "@Name": "Encryption Brute Forcing"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - SQL Injection",
    "context": "",
    "output": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525",
      "@Name": "SQL Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Cryptanalysis, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.",
      "@Name": "Cryptanalysis"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Carry-Off GPS Attack",
    "context": "",
    "output": "Examples of Carry-Off GPS Attack are: A \"proof-of-concept\" attack was successfully performed in June, 2013, when the luxury yacht \"White Rose\" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A \"proof-of-concept\" attack was successfully performed in June, 2013, when the luxury yacht \"White Rose\" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.",
      "@Name": "Carry-Off GPS Attack"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Documentation Alteration to Circumvent Dial-down",
    "context": "",
    "output": "Examples of Documentation Alteration to Circumvent Dial-down are: A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.",
      "@Name": "Documentation Alteration to Circumvent Dial-down"
    }
  },
  {
    "instruction": "Are there any examples for 'Spoof Version Control System Commit Metadata' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].",
      "@Name": "Spoof Version Control System Commit Metadata"
    }
  },
  {
    "instruction": "Are there any examples for 'Artificially Inflate File Sizes' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.",
      "@Name": "Artificially Inflate File Sizes"
    }
  },
  {
    "instruction": "List examples for 'Data Injected During Configuration' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Data Injected During Configuration are: An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.",
      "@Name": "Data Injected During Configuration"
    }
  },
  {
    "instruction": "Are there any examples for 'Malicious Code Implanted During Chip Programming' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary.",
      "@Name": "Malicious Code Implanted During Chip Programming"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Password Spraying",
    "context": "",
    "output": "Possible examples: A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.\nThe Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.",
        "The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment."
      ],
      "@Name": "Password Spraying"
    }
  },
  {
    "instruction": "Given the attack pattern: Leverage Alternate Encoding, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified \"encoding strings,\" which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka \"Post Encoding Information Disclosure Vulnerability.\" Related Vulnerabilities CVE-2010-0488\n- Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified \"encoding strings,\" which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka \"Post Encoding Information Disclosure Vulnerability.\" Related Vulnerabilities CVE-2010-0488",
        "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses."
      ],
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "List examples for 'Leveraging Race Conditions' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Leveraging Race Conditions are: The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057"
      ],
      "@Name": "Leveraging Race Conditions"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: DNS Spoofing",
    "context": "",
    "output": "Possible examples: Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record ) response before a legitimate resolver can.\n- Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (\"NXDOMAIN\" (\"No such domain\")code, or a DNS record) response before a legitimate resolver can.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record ) response before a legitimate resolver can.",
        "Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (\"NXDOMAIN\" (\"No such domain\")code, or a DNS record) response before a legitimate resolver can."
      ],
      "@Name": "DNS Spoofing"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Subverting Environment Variable Values",
    "context": "",
    "output": "Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)\n* The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)",
        "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands."
      ],
      "@Name": "Subverting Environment Variable Values"
    }
  },
  {
    "instruction": "Given the attack pattern: Buffer Overflow via Symbolic Links, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.",
      "@Name": "Buffer Overflow via Symbolic Links"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploitation of Improperly Controlled Hardware Security Identifiers, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers \"1\" and \"2\". The Main-controller (ID \"1\") is meant to have access to the AES-key registers, while the Aux-controller (ID \"2\") has access to the access-policy register. If a SoC incorrectly generates security identifier \"1\" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers \"1\" and \"2\". The Main-controller (ID \"1\") is meant to have access to the AES-key registers, while the Aux-controller (ID \"2\") has access to the access-policy register. If a SoC incorrectly generates security identifier \"1\" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.",
      "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Remote Services with Stolen Credentials",
    "context": "",
    "output": "Possible examples: Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.\n- Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.",
        "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell."
      ],
      "@Name": "Remote Services with Stolen Credentials"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Developer Signing Maliciously Altered Software",
    "context": "",
    "output": "Possible examples: An adversary who has infiltrated an organization\u2019s build environment maliciously alters code intended to be included in a product\u2019s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer\u2019s intent with respect to functionality unaware of the adversary\u2019s malicious intent harbored within.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary who has infiltrated an organization\u2019s build environment maliciously alters code intended to be included in a product\u2019s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer\u2019s intent with respect to functionality unaware of the adversary\u2019s malicious intent harbored within.",
      "@Name": "Developer Signing Maliciously Altered Software"
    }
  },
  {
    "instruction": "Are there any examples for 'Process Footprinting' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: On a Windows system, the command, \"tasklist,\" displays information about processes. The same function on a Mac OS system is done with the command, \"ps.\"\n* In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "On a Windows system, the command, \"tasklist,\" displays information about processes. The same function on a Mac OS system is done with the command, \"ps.\"",
        "In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action."
      ],
      "@Name": "Process Footprinting"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Manipulate Registry Information",
    "context": "",
    "output": "Examples of Manipulate Registry Information are: Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).",
      "@Name": "Manipulate Registry Information"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Alteration of a Software Update",
    "context": "",
    "output": "Possible examples: A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.",
      "@Name": "Alteration of a Software Update"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Contaminate Resource",
    "context": "",
    "output": "An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.",
      "@Name": "Contaminate Resource"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Interface Manipulation",
    "context": "",
    "output": "Examples of Interface Manipulation are: An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.\nAPI methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.\nSoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.",
        "API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.",
        "SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device."
      ],
      "@Name": "Interface Manipulation"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Forceful Browsing",
    "context": "",
    "output": "Examples of Forceful Browsing are: A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.\n- An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.",
        "An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role."
      ],
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "List examples for 'XPath Injection' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - XPath Injection are: Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
      "@Name": "XPath Injection"
    }
  },
  {
    "instruction": "Are there any examples for 'XSS Through HTTP Query Strings' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: http://user:host@example.com:8080/oradb<script>alert('Hi')</script>",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "http://user:host@example.com:8080/oradb<script>alert('Hi')</script>"
      ],
      "@Name": "XSS Through HTTP Query Strings"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "context": "",
    "output": "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057"
      ],
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"
    }
  },
  {
    "instruction": "How can I implement attack pattern - SQL Injection through SOAP Parameter Tampering",
    "context": "",
    "output": "Examples of SQL Injection through SOAP Parameter Tampering are: An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.",
      "@Name": "SQL Injection through SOAP Parameter Tampering"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Signature Spoof",
    "context": "",
    "output": "Possible examples: An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.\nAn attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.",
        "An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor."
      ],
      "@Name": "Signature Spoof"
    }
  },
  {
    "instruction": "Given the attack pattern: Forced Deadlock, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)",
      "@Name": "Forced Deadlock"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: JSON Hijacking (aka JavaScript Hijacking)",
    "context": "",
    "output": "Possible examples: Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.\n* When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.",
        "When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker."
      ],
      "@Name": "JSON Hijacking (aka JavaScript Hijacking)"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Blind SQL Injection",
    "context": "",
    "output": "Examples of Blind SQL Injection are: In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705"
      ],
      "@Name": "Blind SQL Injection"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Shoulder Surfing",
    "context": "",
    "output": "An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.\n- An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.\n- An insider could obtain database credentials for an application and sell the credentials on the black market.\n- An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.",
        "An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.",
        "An insider could obtain database credentials for an application and sell the credentials on the black market.",
        "An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum."
      ],
      "@Name": "Shoulder Surfing"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Requirements for ASIC Functionality Maliciously Altered",
    "context": "",
    "output": "Examples of Requirements for ASIC Functionality Maliciously Altered are: An adversary with access to ASIC functionality requirements for various customers, targets a particular customer\u2019s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer\u2019s capability needs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to ASIC functionality requirements for various customers, targets a particular customer\u2019s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer\u2019s capability needs.",
      "@Name": "Requirements for ASIC Functionality Maliciously Altered"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Sniff Application Code",
    "context": "",
    "output": "Possible examples: Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..\nPlain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..",
        "Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such."
      ],
      "@Name": "Sniff Application Code"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
    "context": "",
    "output": "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.",
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Cache Poisoning, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.\n- Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com\n- When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
        "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
        "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
      ],
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "Are there any examples for 'DNS Domain Seizure' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.",
      "@Name": "DNS Domain Seizure"
    }
  },
  {
    "instruction": "Are there any examples for 'OS Command Injection' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.\n- An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.",
        "An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data."
      ],
      "@Name": "OS Command Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Infiltration of Software Development Environment, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.\n- Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.",
        "Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process."
      ],
      "@Name": "Infiltration of Software Development Environment"
    }
  },
  {
    "instruction": "Given the attack pattern: Using Alternative IP Address Encodings, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.",
      "@Name": "Using Alternative IP Address Encodings"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Stored XSS",
    "context": "",
    "output": "Possible examples: An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.\n- An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.",
        "An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser."
      ],
      "@Name": "Stored XSS"
    }
  },
  {
    "instruction": "List examples for 'Influence Perception of Reciprocation' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Influence Perception of Reciprocation are: An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.",
      "@Name": "Influence Perception of Reciprocation"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: System Build Data Maliciously Altered",
    "context": "",
    "output": "Possible examples: \u2018Make\u2019 is a program used for building executable programs and libraries from source code by executing commands and following rules in a \u2018makefile\u2019. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "\u2018Make\u2019 is a program used for building executable programs and libraries from source code by executing commands and following rules in a \u2018makefile\u2019. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.",
      "@Name": "System Build Data Maliciously Altered"
    }
  },
  {
    "instruction": "List examples for 'Infected Memory' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Infected Memory are: A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.\nIn 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.",
        "In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords."
      ],
      "@Name": "Infected Memory"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Manipulating Opaque Client-based Data Tokens",
    "context": "",
    "output": "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.\n- Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.\n- Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.",
        "Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.",
        "Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944"
      ],
      "@Name": "Manipulating Opaque Client-based Data Tokens"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: XML Ping of the Death",
    "context": "",
    "output": "Possible examples: Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulation During Distribution, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.\n* External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.",
        "External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution."
      ],
      "@Name": "Manipulation During Distribution"
    }
  },
  {
    "instruction": "Given the attack pattern: Probe Audio and Video Peripherals, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.\nAn adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.\nAn adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.",
        "An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.",
        "An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook."
      ],
      "@Name": "Probe Audio and Video Peripherals"
    }
  },
  {
    "instruction": "Given the attack pattern: Subvert Code-signing Facilities, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.\nSome (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.\nThe ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.",
        "Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.",
        "The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers."
      ],
      "@Name": "Subvert Code-signing Facilities"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Voice Phishing",
    "context": "",
    "output": "Examples of Voice Phishing are: The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.\n- An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.",
        "An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary."
      ],
      "@Name": "Voice Phishing"
    }
  },
  {
    "instruction": "Given the attack pattern: Footprinting, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.",
      "@Name": "Footprinting"
    }
  },
  {
    "instruction": "Given the attack pattern: Pharming, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.\n* An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.",
        "An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims."
      ],
      "@Name": "Pharming"
    }
  },
  {
    "instruction": "Are there any examples for 'Use of Known Domain Credentials' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]\n* In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]",
        "In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]"
      ],
      "@Name": "Use of Known Domain Credentials"
    }
  },
  {
    "instruction": "List examples for 'Cross-Site Flashing' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Cross-Site Flashing are: The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.",
      "@Name": "Cross-Site Flashing"
    }
  },
  {
    "instruction": "Are there any examples for 'Try Common or Default Usernames and Passwords' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.\nCisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288\nIn April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.",
        "Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288",
        "In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]"
      ],
      "@Name": "Try Common or Default Usernames and Passwords"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Clickjacking",
    "context": "",
    "output": "Examples of Clickjacking are: A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.\n* In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.",
        "In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service."
      ],
      "@Name": "Clickjacking"
    }
  },
  {
    "instruction": "Given the attack pattern: Escaping a Sandbox by Calling Code in Another Language, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named \"msits.exe\", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named \"msits.exe\", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.",
      "@Name": "Escaping a Sandbox by Calling Code in Another Language"
    }
  },
  {
    "instruction": "List examples for 'WSDL Scanning' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - WSDL Scanning are: A WSDL interface may expose a function vulnerable to SQL Injection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A WSDL interface may expose a function vulnerable to SQL Injection."
      ],
      "@Name": "WSDL Scanning"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353",
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Install Rootkit ",
    "context": "",
    "output": "A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.\n- Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.",
        "Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly."
      ],
      "@Name": "Install Rootkit "
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Use of Captured Hashes (Pass The Hash)",
    "context": "",
    "output": "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]\n- Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
        "Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]"
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash)"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: XML Injection",
    "context": "",
    "output": "Possible examples: Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Altered Installed BIOS",
    "context": "",
    "output": "Examples of Altered Installed BIOS are: An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.",
      "@Name": "Altered Installed BIOS"
    }
  },
  {
    "instruction": "List examples for 'Session Sidejacking' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Session Sidejacking are: The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.",
      "@Name": "Session Sidejacking"
    }
  },
  {
    "instruction": "Are there any examples for 'Leveraging Race Conditions via Symbolic Links' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939\nOpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894\nSetuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939",
        "OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894",
        "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972"
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: StarJacking",
    "context": "",
    "output": "Possible examples: In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].",
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Hardware Component Substitution",
    "context": "",
    "output": "Examples of Hardware Component Substitution are: An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.",
      "@Name": "Hardware Component Substitution"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Software Implanted",
    "context": "",
    "output": "Possible examples: An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.",
      "@Name": "Malicious Software Implanted"
    }
  },
  {
    "instruction": "Given the attack pattern: Web Server Logs Tampering, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.",
      "@Name": "Web Server Logs Tampering"
    }
  },
  {
    "instruction": "List examples for 'Replace Trusted Executable' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Replace Trusted Executable are: Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. \"C:\\Windows\\System32\\utilman.exe\") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. \"C:\\Windows\\System32\\utilman.exe\") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.",
      "@Name": "Replace Trusted Executable"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Forced Integer Overflow",
    "context": "",
    "output": "Examples of Forced Integer Overflow are: Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544"
      ],
      "@Name": "Forced Integer Overflow"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Altered Component Firmware",
    "context": "",
    "output": "Examples of Altered Component Firmware are: In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]",
      "@Name": "Altered Component Firmware"
    }
  },
  {
    "instruction": "Given the attack pattern: AJAX Footprinting, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.",
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Privilege Abuse",
    "context": "",
    "output": "Examples of Privilege Abuse are: Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.",
      "@Name": "Privilege Abuse"
    }
  },
  {
    "instruction": "List examples for 'Overflow Buffers' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Overflow Buffers are: The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.\n* Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.",
        "Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process."
      ],
      "@Name": "Overflow Buffers"
    }
  },
  {
    "instruction": "List examples for 'Documentation Alteration to Cause Errors in System Design' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Documentation Alteration to Cause Errors in System Design are: During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a \"fail open\" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a \"fail open\" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.",
      "@Name": "Documentation Alteration to Cause Errors in System Design"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - HTTP Response Splitting",
    "context": "",
    "output": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207",
      "@Name": "HTTP Response Splitting"
    }
  },
  {
    "instruction": "Given the attack pattern: Hijacking a Privileged Thread of Execution, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.",
      "@Name": "Hijacking a Privileged Thread of Execution"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Session Credential Falsification through Prediction",
    "context": "",
    "output": "Examples of Session Credential Falsification through Prediction are: Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969\n- mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969",
        "mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534"
      ],
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Are there any examples for 'Spoof Open-Source Software Metadata' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.",
      "@Name": "Spoof Open-Source Software Metadata"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Local Execution of Code",
    "context": "",
    "output": "Possible examples: BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.",
      "@Name": "Local Execution of Code"
    }
  },
  {
    "instruction": "Given the attack pattern: BGP Route Disabling, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.",
      "@Name": "BGP Route Disabling"
    }
  },
  {
    "instruction": "List examples for 'Fuzzing' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Fuzzing are: A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.",
      "@Name": "Fuzzing"
    }
  },
  {
    "instruction": "Are there any examples for 'File Content Injection' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.",
      "@Name": "File Content Injection"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: SoundSquatting",
    "context": "",
    "output": "Possible examples: An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.\nHowever, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.\nThe user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.\nThe user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
        "However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.",
        "The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account."
      ],
      "@Name": "SoundSquatting"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Hardware Component Substitution During Baselining",
    "context": "",
    "output": "Examples of Hardware Component Substitution During Baselining are: An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.",
      "@Name": "Hardware Component Substitution During Baselining"
    }
  },
  {
    "instruction": "Given the attack pattern: Documentation Alteration to Produce Under-performing Systems, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.",
      "@Name": "Documentation Alteration to Produce Under-performing Systems"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Overflow Binary Resource File",
    "context": "",
    "output": "Examples of Overflow Binary Resource File are: Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.",
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "List examples for 'Network Boundary Bridging' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Network Boundary Bridging are: In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure.",
      "@Name": "Network Boundary Bridging"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Scarcity, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.",
      "@Name": "Influence Perception of Scarcity"
    }
  },
  {
    "instruction": "Are there any examples for 'Use of Known Operating System Credentials' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]\n* Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
        "Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]"
      ],
      "@Name": "Use of Known Operating System Credentials"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Exploitation of Transient Instruction Execution",
    "context": "",
    "output": "Possible examples: A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.",
      "@Name": "Exploitation of Transient Instruction Execution"
    }
  },
  {
    "instruction": "Are there any examples for 'Dictionary-based Password Attack' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account."
      ],
      "@Name": "Dictionary-based Password Attack"
    }
  },
  {
    "instruction": "List examples for 'Embedding Scripts within Scripts' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Embedding Scripts within Scripts are: ~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell."
      ],
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Adversary in the Middle (AiTM)",
    "context": "",
    "output": "Possible examples: In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]",
      "@Name": "Adversary in the Middle (AiTM)"
    }
  },
  {
    "instruction": "List examples for 'Malicious Manual Software Update' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Malicious Manual Software Update are: An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.",
      "@Name": "Malicious Manual Software Update"
    }
  },
  {
    "instruction": "List examples for 'HTTP Request Splitting' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - HTTP Request Splitting are: Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.",
      "@Name": "HTTP Request Splitting"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - IP Address Blocking",
    "context": "",
    "output": "Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.",
      "@Name": "IP Address Blocking"
    }
  },
  {
    "instruction": "Are there any examples for 'Cross Frame Scripting (XFS)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.",
      "@Name": "Cross Frame Scripting (XFS)"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Restful Privilege Elevation",
    "context": "",
    "output": "Examples of Restful Privilege Elevation are: The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.",
      "@Name": "Restful Privilege Elevation"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Format String Injection",
    "context": "",
    "output": "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027",
      "@Name": "Format String Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Choosing Message Identifier, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.",
      "@Name": "Choosing Message Identifier"
    }
  },
  {
    "instruction": "Given the attack pattern: Credential Prompt Impersonation, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.\n* An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
        "An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data."
      ],
      "@Name": "Credential Prompt Impersonation"
    }
  },
  {
    "instruction": "Are there any examples for 'Log Injection-Tampering-Forging' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201"
      ],
      "@Name": "Log Injection-Tampering-Forging"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Malicious Gray Market Hardware",
    "context": "",
    "output": "Examples of Malicious Gray Market Hardware are: An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.",
      "@Name": "Malicious Gray Market Hardware"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Password Recovery Exploitation",
    "context": "",
    "output": "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system."
      ],
      "@Name": "Password Recovery Exploitation"
    }
  },
  {
    "instruction": "Are there any examples for 'Object Relational Mapping Injection' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.",
      "@Name": "Object Relational Mapping Injection"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Influence Perception of Authority",
    "context": "",
    "output": "Possible examples: The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information.",
      "@Name": "Influence Perception of Authority"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Exploiting Trust in Client",
    "context": "",
    "output": "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.\n- Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.\n- Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.\n- Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.",
        "Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.",
        "Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.",
        "Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on."
      ],
      "@Name": "Exploiting Trust in Client"
    }
  },
  {
    "instruction": "Are there any examples for 'Physically Hacking Hardware' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.",
      "@Name": "Physically Hacking Hardware"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Collect Data from Common Resource Locations",
    "context": "",
    "output": "Possible examples: An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.",
      "@Name": "Collect Data from Common Resource Locations"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: XSS Using MIME Type Mismatch",
    "context": "",
    "output": "Possible examples: For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.\nIn another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.",
        "In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters."
      ],
      "@Name": "XSS Using MIME Type Mismatch"
    }
  },
  {
    "instruction": "List examples for 'Retrieve Data from Decommissioned Devices' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Retrieve Data from Decommissioned Devices are: A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.",
      "@Name": "Retrieve Data from Decommissioned Devices"
    }
  },
  {
    "instruction": "Are there any examples for 'Credential Stuffing' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.\nIn October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.",
        "In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised."
      ],
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Logic Inserted Into Product by Authorized Developer",
    "context": "",
    "output": "Possible examples: During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices."
      ],
      "@Name": "Malicious Logic Inserted Into Product by Authorized Developer"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - String Format Overflow in syslog()",
    "context": "",
    "output": "Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412",
      "@Name": "String Format Overflow in syslog()"
    }
  },
  {
    "instruction": "Given the attack pattern: Pretexting, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.",
      "@Name": "Pretexting"
    }
  },
  {
    "instruction": "Given the attack pattern: Argument Injection, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]",
      "@Name": "Argument Injection"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Exploitation of Trusted Identifiers",
    "context": "",
    "output": "For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so."
      ],
      "@Name": "Exploitation of Trusted Identifiers"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploitation of Improperly Controlled Registers, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.",
      "@Name": "Exploitation of Improperly Controlled Registers"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Provide Counterfeit Component",
    "context": "",
    "output": "The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.",
      "@Name": "Provide Counterfeit Component"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Avoid Security Tool Identification by Adding Data",
    "context": "",
    "output": "Examples of Avoid Security Tool Identification by Adding Data are: Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.",
      "@Name": "Avoid Security Tool Identification by Adding Data"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Terrestrial Jamming",
    "context": "",
    "output": "Examples of Terrestrial Jamming are: An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
      "@Name": "Terrestrial Jamming"
    }
  },
  {
    "instruction": "Given the attack pattern: Server Side Include (SSI) Injection, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the \"Options Includes\" directive enabled.\n- Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.\n- When these logs are eventually reviewed, the server parses the SSI directives and executes them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the \"Options Includes\" directive enabled.",
        "Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.",
        "When these logs are eventually reviewed, the server parses the SSI directives and executes them."
      ],
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Timestamp Request",
    "context": "",
    "output": "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.\nAn adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.",
        "An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting"
      ],
      "@Name": "Timestamp Request"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Malicious Software Update",
    "context": "",
    "output": "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]",
      "@Name": "Malicious Software Update"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Reusing Session IDs (aka Session Replay)",
    "context": "",
    "output": "Examples of Reusing Session IDs (aka Session Replay) are: OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428\n- Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428",
        "Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258"
      ],
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Infiltration of Hardware Development Environment",
    "context": "",
    "output": "The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.",
      "@Name": "Infiltration of Hardware Development Environment"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Cross Site Tracing",
    "context": "",
    "output": "An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.\n- In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.",
        "In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection."
      ],
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Redirect Access to Libraries",
    "context": "",
    "output": "Examples of Redirect Access to Libraries are: In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... \u2022 mark the text segment writeable \u2022 save the PLT(GOT) entry \u2022 replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... \u2022 do the payload of the new lib call \u2022 restore the original PLT(GOT) entry \u2022 call the lib call \u2022 save the PLT(GOT) entry again (if its changed) \u2022 replace the PLT(GOT) entry with the address of the new lib call",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... \u2022 mark the text segment writeable \u2022 save the PLT(GOT) entry \u2022 replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... \u2022 do the payload of the new lib call \u2022 restore the original PLT(GOT) entry \u2022 call the lib call \u2022 save the PLT(GOT) entry again (if its changed) \u2022 replace the PLT(GOT) entry with the address of the new lib call",
      "@Name": "Redirect Access to Libraries"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Phishing",
    "context": "",
    "output": "Possible examples: The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.\nAn adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.",
        "An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content."
      ],
      "@Name": "Phishing"
    }
  },
  {
    "instruction": "Are there any examples for 'TypoSquatting' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.\n- However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.\n- The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.\n- The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.\n- TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.",
        "However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.",
        "The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.",
        "TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials."
      ],
      "@Name": "TypoSquatting"
    }
  },
  {
    "instruction": "Given the attack pattern: Command Line Execution through SQL Injection, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).\n* Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).",
        "Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799"
      ],
      "@Name": "Command Line Execution through SQL Injection"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Manipulating State",
    "context": "",
    "output": "Possible examples: During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.\n* An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.",
        "An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application."
      ],
      "@Name": "Manipulating State"
    }
  },
  {
    "instruction": "List examples for 'Malicious Hardware Component Replacement' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Malicious Hardware Component Replacement are: During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.",
      "@Name": "Malicious Hardware Component Replacement"
    }
  },
  {
    "instruction": "Are there any examples for 'DNS Rebinding' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.",
      "@Name": "DNS Rebinding"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Block Access to Libraries",
    "context": "",
    "output": "Possible examples: A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.",
      "@Name": "Block Access to Libraries"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Open-Source Library Manipulation",
    "context": "",
    "output": "Examples of Open-Source Library Manipulation are: An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.",
      "@Name": "Open-Source Library Manipulation"
    }
  },
  {
    "instruction": "List examples for 'Cross Zone Scripting' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Cross Zone Scripting are: There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the \"add video to chat\" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. \"Add video to chat\" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the \"add video to chat\" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. \"Add video to chat\" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).",
      "@Name": "Cross Zone Scripting"
    }
  },
  {
    "instruction": "Given the attack pattern: Code Inclusion, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.",
      "@Name": "Code Inclusion"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Probe System Files",
    "context": "",
    "output": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n* Adversaries may search network shares on computers they have compromised to find files of interest.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "Adversaries may search network shares on computers they have compromised to find files of interest."
      ],
      "@Name": "Probe System Files"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Root/Jailbreak Detection Evasion via Hooking",
    "context": "",
    "output": "Possible examples: An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns \"false\" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns \"false\", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.\n- An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns \"false\" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns \"false\", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.",
        "An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users."
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Hooking"
    }
  },
  {
    "instruction": "List examples for 'Use of Captured Tickets (Pass The Ticket)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Use of Captured Tickets (Pass The Ticket) are: Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
      "@Name": "Use of Captured Tickets (Pass The Ticket)"
    }
  },
  {
    "instruction": "Given the attack pattern: Inducing Account Lockout, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.",
      "@Name": "Inducing Account Lockout"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Directory Indexing",
    "context": "",
    "output": "Examples of Directory Indexing are: The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80\n* The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80",
        "The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly."
      ],
      "@Name": "Directory Indexing"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Padding Oracle Crypto Attack",
    "context": "",
    "output": "Examples of Padding Oracle Crypto Attack are: An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.",
      "@Name": "Padding Oracle Crypto Attack"
    }
  },
  {
    "instruction": "Are there any examples for 'Rainbow Table Password Cracking' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058",
      "@Name": "Rainbow Table Password Cracking"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Reflection Attack in Authentication Protocol",
    "context": "",
    "output": "Possible examples: A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.\n* An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.",
        "An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange."
      ],
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "Given the attack pattern: Cross Site Identification, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.",
      "@Name": "Cross Site Identification"
    }
  },
  {
    "instruction": "Given the attack pattern: Using Unpublished Interfaces or Functionality, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.",
      "@Name": "Using Unpublished Interfaces or Functionality"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Kerberoasting",
    "context": "",
    "output": "Possible examples: PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "Are there any examples for 'ASIC With Malicious Functionality' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.",
      "@Name": "ASIC With Malicious Functionality"
    }
  },
  {
    "instruction": "Given the attack pattern: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.",
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Exploiting Incorrectly Configured Access Control Security Levels",
    "context": "",
    "output": "Examples of Exploiting Incorrectly Configured Access Control Security Levels are: For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.",
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Leverage Executable Code in Non-Executable Files",
    "context": "",
    "output": "Examples of Leverage Executable Code in Non-Executable Files are: Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.\n* The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.",
        "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser."
      ],
      "@Name": "Leverage Executable Code in Non-Executable Files"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - XSS Through HTTP Headers",
    "context": "",
    "output": "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host."
      ],
      "@Name": "XSS Through HTTP Headers"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Retrieve Embedded Sensitive Data",
    "context": "",
    "output": "Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.\n- An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.\n- Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.",
        "An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.",
        "Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user."
      ],
      "@Name": "Retrieve Embedded Sensitive Data"
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Filter Failure through Buffer Overflow",
    "context": "",
    "output": "Possible examples: A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.\n- Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.",
        "Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack."
      ],
      "@Name": "Filter Failure through Buffer Overflow"
    }
  },
  {
    "instruction": "Are there any examples for 'Spear Phishing' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.\n- An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.",
        "An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack."
      ],
      "@Name": "Spear Phishing"
    }
  },
  {
    "instruction": "Are there any examples for 'Replace Binaries' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.\n* By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\\Windows\\system32\\. This value is set in the registry at HKEY_CURRENT_USER\\Control Panel\\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.",
        "By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\\Windows\\system32\\. This value is set in the registry at HKEY_CURRENT_USER\\Control Panel\\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently."
      ],
      "@Name": "Replace Binaries"
    }
  },
  {
    "instruction": "Given the attack pattern: Blue Boxing, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.",
      "@Name": "Blue Boxing"
    }
  },
  {
    "instruction": "List examples for 'Software Development Tools Maliciously Altered' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Software Development Tools Maliciously Altered are: An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.",
      "@Name": "Software Development Tools Maliciously Altered"
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Blocking, give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Full URL Based Filtering: Filtering based upon the requested URL.\n* URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Full URL Based Filtering: Filtering based upon the requested URL.",
        "URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL."
      ],
      "@Name": "DNS Blocking"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Excessive Allocation",
    "context": "",
    "output": "In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.",
      "@Name": "Excessive Allocation"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Command Delimiters",
    "context": "",
    "output": "Examples of Command Delimiters are: By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.\n- LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.",
        "LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database."
      ],
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "Are there any examples for 'Query System for Information' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705"
      ],
      "@Name": "Query System for Information"
    }
  },
  {
    "instruction": "List examples for 'Removing Important Client Functionality' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Removing Important Client Functionality are: The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.\n* The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.",
        "The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks)."
      ],
      "@Name": "Removing Important Client Functionality"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Design for FPGA Maliciously Altered",
    "context": "",
    "output": "Examples of Design for FPGA Maliciously Altered are: An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.",
      "@Name": "Design for FPGA Maliciously Altered"
    }
  },
  {
    "instruction": "How can I implement attack pattern - Exploitation of Thunderbolt Protection Flaws",
    "context": "",
    "output": "Examples of Exploitation of Thunderbolt Protection Flaws are: An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.",
      "@Name": "Exploitation of Thunderbolt Protection Flaws"
    }
  },
  {
    "instruction": "Are there any examples for 'Reverse Engineering' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.",
      "@Name": "Reverse Engineering"
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Server Motherboard Compromise",
    "context": "",
    "output": "Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer\u2019s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer\u2019s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]",
      "@Name": "Server Motherboard Compromise"
    }
  }
]