[
  {
    "instruction": "How can I detect attack pattern: Manipulating User-Controlled Variables (CAPEC ID: 77)",
    "context": "",
    "output": "The indicators of Manipulating User-Controlled Variables (CAPEC ID: 77) are: A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool.",
      "@Name": "Manipulating User-Controlled Variables (CAPEC ID: 77)",
      "attack_ptrn": {
        "@ID": "77",
        "@Name": "Manipulating User-Controlled Variables",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.",
              "Technique": [
                "Adversaries will try to alter many common variable names such as \"count\", \"tempFile\", \"i\", etc. The hope is that they can alter the flow of the application without knowing the inner-workings.",
                "Adversaries will try to alter known environment variables."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A variable consumed by the application server is exposed to the client.",
            "A variable consumed by the application server can be overwritten by the user.",
            "The application server trusts user supplied data to compute business logic.",
            "The application server does not perform proper input validation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "The malicious user can easily try some well-known global variables and find one which matches."
            },
            {
              "@Level": "Medium",
              "#text": "The adversary can use automated tools to probe for variables that they can control."
            }
          ]
        },
        "Indicators": {
          "Indicator": "A web penetration tool probing a web server may generate abnormal activities recorded on log files. Abnormal traffic such as a high number of request coming from the same client may also rise the warnings from a monitoring system or an intrusion detection tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            {
              "xhtml:p": [
                "Do not allow override of global variables and do Not Trust Global Variables.",
                "If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables."
              ]
            },
            "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.",
            "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.",
            "Use encapsulation when declaring your variables. This is to lower the exposure of your variables.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "PHP is a study in bad security. The main idea pervading PHP is \"ease of use,\" and the mantra \"don't make the developer go to any extra work to get stuff done\" applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP.",
              "One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user.",
              "Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things:",
              "Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as",
              "and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg.",
              "Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an adversary can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable.",
              "PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example.",
              "Consider another example of this problem in which a program defines a variable called $tempfile. An adversary can supply a new temp file such as $tempfile = \"/etc/passwd\". Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs.",
              "Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be \"Trojaned\" (the adversary can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified.",
              "Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null
                ],
                "#text": "while($count < 10){// Do something$count++;}"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "GET /login.php?count=9"
              }
            ],
            "#text": "See also: File upload allows arbitrary file read by setting hidden form variables to match internal variable names (CVE-2000-0860)"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "15"
            },
            {
              "@CWE_ID": "94"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "473"
            },
            {
              "@CWE_ID": "1321"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-520"
            },
            {
              "@External_Reference_ID": "REF-521"
            },
            {
              "@External_Reference_ID": "REF-522",
              "@Section": "Chapter 29. Using Register Globals"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Mitigations, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: BlueSmacking (CAPEC ID: 666)",
    "context": "",
    "output": "The indicators of BlueSmacking (CAPEC ID: 666) are: Performance is degraded or halted by incoming L2CAP packets.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Performance is degraded or halted by incoming L2CAP packets.",
      "@Name": "BlueSmacking (CAPEC ID: 666)",
      "attack_ptrn": {
        "@ID": "666",
        "@Name": "BlueSmacking",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "125"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.",
              "Technique": "Note the MAC address of the device you want to attack."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.",
              "Technique": "An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The system/application has Bluetooth enabled."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common."
          }
        },
        "Indicators": {
          "Indicator": "Performance is degraded or halted by incoming L2CAP packets."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": [
              "Unreliable Execution",
              "Resource Consumption"
            ]
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Disable Bluetooth when not being used.",
            "When using Bluetooth, set it to hidden or non-discoverable mode."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "404"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1498.001",
              "Entry_Name": "Network Denial of Service: Direct Network Flood"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499.001",
              "Entry_Name": "Endpoint Denial of Service: OS Exhaustion Flood"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-655"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Filter Failure through Buffer Overflow (CAPEC ID: 24)",
    "context": "",
    "output": "The indicators of Filter Failure through Buffer Overflow (CAPEC ID: 24) are: Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address.",
      "@Name": "Filter Failure through Buffer Overflow (CAPEC ID: 24)",
      "attack_ptrn": {
        "@ID": "24",
        "@Name": "Filter Failure through Buffer Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for inputs that involve potential filtering",
                "Brute force guessing of filtered inputs"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.",
              "Technique": [
                "Brute force attack through black box penetration test tool.",
                "Fuzzing of communications protocols",
                "Manual testing of possible inputs with attack data."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?",
              "Technique": [
                "Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.",
                "Check Log files. An attacker with access to log files can look at the outcome of bad input."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.",
              "Technique": [
                "DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.",
                "Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.",
                "An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Ability to control the length of data passed to an active filter."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": "Many exceptions are thrown by the application's filter modules in a short period of time. Check the logs. See if the probes are coming from the same IP address."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
            "Pre-design: Use a language or compiler that performs automatic bounds checking.",
            "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Operational: Use OS-level preventative functionality. Not a complete solution.",
            "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack."
            },
            "A filter is used by a web application to filter out characters that may allow the input to jump from the data plane to the control plane when data is used in a SQL statement (chaining this attack with the SQL injection attack). Leveraging a buffer overflow the attacker makes the filter fail insecurely and the tainted data is permitted to enter unfiltered into the system, subsequently causing a SQL injection.",
            "Audit Truncation and Filters with Buffer Overflow. Sometimes very large transactions can be used to destroy a log file or cause partial logging failures. In this kind of attack, log processing code might be examining a transaction in real-time processing, but the oversized transaction causes a logic branch or an exception of some kind that is trapped. In other words, the transaction is still executed, but the logging or filtering mechanism still fails. This has two consequences, the first being that you can run transactions that are not logged in any way (or perhaps the log entry is completely corrupted). The second consequence is that you might slip through an active filter that otherwise would stop your attack."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "733"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Query System for Information (CAPEC ID: 54), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any.",
      "@Name": "Query System for Information (CAPEC ID: 54)",
      "attack_ptrn": {
        "@ID": "54",
        "@Name": "Query System for Information",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "116",
            "Exclude_Related": [
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "437"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause error condition] Inject each parameter with content that causes an error condition to manifest"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify parameters] Modify the content of each parameter according to observed error conditions"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary.",
              "The Attack does not need special hardware, software, skills, or access."
            ]
          }
        },
        "Indicators": {
          "Indicator": "Repeated errors generated by the same piece of code are an indication, although it requires careful monitoring of the application and its associated error logs, if any."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.",
            "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705",
            {
              "xhtml:p": [
                "Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality.",
                "In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "209"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Probe Application Error Reporting"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Credential Stuffing (CAPEC ID: 600)",
    "context": "",
    "output": "Yes. to detect the attack pattern Credential Stuffing (CAPEC ID: 600), you can look at the following indicator: Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.\n* The login attempts use passwords that have been used previously by the user account in question.\n* Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
        "The login attempts use passwords that have been used previously by the user account in question.",
        "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
      ],
      "@Name": "Credential Stuffing (CAPEC ID: 600)",
      "attack_ptrn": {
        "@ID": "600",
        "@Name": "Credential Stuffing",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Attacks of this kind often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications.",
            "The primary goal of Credential Stuffing is to achieve lateral movement and gain authenticated access to additional systems, applications, and/or services. A successfully executed Credential Stuffing attack could result in the adversary impersonating the victim or executing any action that the victim is authorized to perform.",
            "Although not technically a brute force attack, Credential Stuffing attacks can function as such if an adversary possess multiple known passwords for the same user account. This may occur in the event where an adversary obtains user credentials from multiple sources or if the adversary obtains a user's password history for an account.",
            "Credential Stuffing attacks are similar to Password Spraying attacks (CAPEC-565) regarding their targets and their overall goals. However, Password Spraying attacks do not have any insight into known username/password combinations and instead leverage common or expected passwords. This also means that Password Spraying attacks must avoid inducing account lockouts, which is generally not a worry of Credential Stuffing attacks. Password Spraying attacks may additionally lead to Credential Stuffing attacks, once a successful username/password combination is discovered."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
              "Technique": [
                "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
                "An adversary gains access to a database and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each username/password combination until the target grants access.",
              "Technique": "Manually or automatically enter each username/password combination through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A Credential Stuffing attack is very straightforward."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A machine with sufficient resources for the job (e.g. CPU, RAM, HD).",
            "A known list of username/password combinations.",
            "A custom script that leverages the credential list to launch the attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
            "The login attempts use passwords that have been used previously by the user account in question.",
            "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user leverages the password \"Password123\" for a handful of application logins. An adversary obtains a victim's username/password combination from a breach of a social media application and executes a Credential Stuffing attack against multiple banking and credit card applications. Since the user leverages the same credentials for their bank account login, the adversary successfully authenticates to the user's bank account and transfer money to an offshore account.",
            "In October 2014 J.P. Morgan's Corporate Challenge website was breached, resulting in adversaries obtaining multiple username/password pairs. A Credential Stuffing attack was then executed against J.P. Morgan Chase, which resulted in over 76 million households having their accounts compromised."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1110.004",
              "Entry_Name": "Brute Force:Credential Stuffing"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Credential stuffing"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-567"
            },
            {
              "@External_Reference_ID": "REF-568"
            },
            {
              "@External_Reference_ID": "REF-569"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Blind SQL Injection (CAPEC ID: 7)",
    "context": "",
    "output": "The indicators of Blind SQL Injection (CAPEC ID: 7) are: The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database.",
      "@Name": "Blind SQL Injection (CAPEC ID: 7)",
      "attack_ptrn": {
        "@ID": "7",
        "@Name": "Blind SQL Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "66"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": {
                "xhtml:p": [
                  "Generated hypotheses regarding the SQL queries in an application. For example, the adversary may hypothesize that their input is passed directly into a query that looks like:",
                  "Of course, there are many other possibilities."
                ],
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "\"SELECT * FROM orders WHERE ordernum = _____\"or\"SELECT * FROM orders WHERE ordernum IN (_____)\"or\"SELECT * FROM orders WHERE ordernum in (_____) ORDER BY _____\""
                },
                "#text": "[Hypothesize SQL queries in application]"
              },
              "Technique": "Research types of SQL queries and determine which ones could be used at various places in an application."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": {
                "xhtml:p": "Determine how to inject information into the queries from the previous step such that the injection does not impact their logic. For example, the following are possible injections for those queries:",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null,
                    null,
                    null
                  ],
                  "#text": "\"5' OR 1=1; --\"and\"5) OR 1=1; --\"and\"ordernum DESC; --\""
                },
                "#text": "[Determine how to inject information into the queries]"
              },
              "Technique": [
                "Add clauses to the SQL queries such that the query logic does not change.",
                "Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries",
              "Technique": [
                "Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)",
                "Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)",
                "Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not)."
              ]
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.",
              "Technique": [
                "Automatically extract database schema using a tool such as Absinthe.",
                "Manually perform the blind SQL Injection to extract desired information about the database schema."
              ]
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database",
              "Technique": "Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SQL queries used by the application to store, retrieve or modify data.",
            "User-controllable input that is not properly validated by the application as part of SQL queries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "The only indicators of successful Blind SQL Injection are the application or database logs that show similar queries with slightly differing logical conditions that increase in complexity over time. However, this requires extensive logging as well as knowledge of the queries that can be used to perform such injection and return meaningful information from the database."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "An adversary may try entering something like \"username' AND 1=1; --\" in an input field. If the result is the same as when the adversary entered \"username\" in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries:",
                "If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like:"
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"username' AND ascii(lower(substring((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) > 108\"."
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"username'; DROP TABLE trades; --"
                }
              ]
            },
            "In the PHP application TimeSheet 1.1, an adversary can successfully retrieve username and password hashes from the database using Blind SQL Injection. If the adversary is aware of the local path structure, the adversary can also remotely execute arbitrary code and write the output of the injected queries to the local path. Blind SQL Injection is possible since the application does not properly sanitize the $_POST['username'] variable in the login.php file. See also: CVE-2006-4705"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "209"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Blind SQL Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
    "context": "",
    "output": "The indicators of Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644) are: Authentication attempts use credentials that have been used previously by the account in question.\n- Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\n- Data is being transferred and/or removed from systems/applications within the network.\n- Suspicious or Malicious software is downloaded/installed on systems within the domain.\n- Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Authentication attempts use credentials that have been used previously by the account in question.",
        "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
        "Data is being transferred and/or removed from systems/applications within the network.",
        "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
        "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
      "attack_ptrn": {
        "@ID": "644",
        "@Name": "Use of Captured Hashes (Pass The Hash)",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
        "Extended_Description": {
          "xhtml:p": "When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.",
              "Technique": [
                "An adversary purchases breached Windows credential hash value pairs from the dark web.",
                "An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.",
              "Technique": "Manually or automatically enter each Windows credential hash value pair through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
            "The adversary possesses known Windows credential hash value pairs that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Window credential hash value pairs for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.",
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Monitor system and domain logs for abnormal credential access.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
            "Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "836"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "308"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1550.002",
            "Entry_Name": "Use Alternate Authentication Material:Pass The Hash"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-575"
            },
            {
              "@External_Reference_ID": "REF-580"
            },
            {
              "@External_Reference_ID": "REF-581"
            },
            {
              "@External_Reference_ID": "REF-582"
            },
            {
              "@External_Reference_ID": "REF-583"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
    "context": "",
    "output": "The indicators of Windows Admin Shares with Stolen Credentials (CAPEC ID: 561) are: Data is being transferred and/or removed from administrative network shares.\n* Suspicious or Malicious software is executed within administrative network shares.\n* Suspicious or Malicious software is downloaded/installed on systems within the domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Data is being transferred and/or removed from administrative network shares.",
        "Suspicious or Malicious software is executed within administrative network shares.",
        "Suspicious or Malicious software is downloaded/installed on systems within the domain."
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
      "attack_ptrn": {
        "@ID": "561",
        "@Name": "Windows Admin Shares with Stolen Credentials",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.",
        "Extended_Description": {
          "xhtml:p": "Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels."
        },
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.",
              "Technique": [
                "An adversary purchases breached Windows administrator credentials from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.",
              "Technique": "Manually or automatically enter each administrator credential through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The target administrative share allows remote use of local admin credentials to log into domain systems.",
            "The adversary possesses a list of known Windows administrator credentials that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Windows administrator credentials for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Data is being transferred and/or removed from administrative network shares.",
            "Suspicious or Malicious software is executed within administrative network shares.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system."
          ]
        },
        "Example_Instances": {
          "Example": [
            "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]",
            "In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1021.002",
            "Entry_Name": "Remote Services:SMB/Windows Admin Shares"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-577"
            },
            {
              "@External_Reference_ID": "REF-578"
            },
            {
              "@External_Reference_ID": "REF-579"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Using UTF-8 Encoding to Bypass Validation Logic (CAPEC ID: 80)",
    "context": "",
    "output": "The indicators of Using UTF-8 Encoding to Bypass Validation Logic (CAPEC ID: 80) are: A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.\n- An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.\n- An IDS filtering network traffic may be able to detect illegal UTF-8 characters.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.",
        "An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
        "An IDS filtering network traffic may be able to detect illegal UTF-8 characters."
      ],
      "@Name": "Using UTF-8 Encoding to Bypass Validation Logic (CAPEC ID: 80)",
      "attack_ptrn": {
        "@ID": "80",
        "@Name": "Using UTF-8 Encoding to Bypass Validation Logic",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "64"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "71"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "267"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.",
                "Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.",
                "Try to use UTF-8 encoding of content in CSS in order to bypass validation routines."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.",
            "Input filtering and validating is not done properly leaving the door open to harmful characters for the target host."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can inject different representation of a filtered character in UTF-8 format."
            },
            {
              "@Level": "Medium",
              "#text": "An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "A web page that contains overly long UTF-8 codes constitute a protocol anomaly, and could be an indication that an attacker is attempting to exploit a vulnerability on the target host.",
            "An attacker can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
            "An IDS filtering network traffic may be able to detect illegal UTF-8 characters."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.",
            {
              "xhtml:p": [
                "The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:",
                "It is possible for a decoder to behave in different ways for different types of invalid input.",
                "RFC 3629 only requires that UTF-8 decoders must not decode \"overlong sequences\" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to \"...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.\"",
                "Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.",
                "To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.",
                "Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position."
              ],
              "xhtml:ul": {
                "xhtml:li": [
                  "1. Insert a replacement character (e.g. '?', '').",
                  "2. Ignore the bytes.",
                  "3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).",
                  "4. Not notice and decode as if the bytes were some similar bit of UTF-8.",
                  "5. Stop decoding and report an error (possibly giving the caller the option to continue)."
                ]
              }
            },
            "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
            "Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this",
              "the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence.",
              "So when the attacker requested the tainted URL, they accessed",
              "In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "result",
                "#text": "http://servername/scripts/../../winnt/system32/cmd.exe"
              }
            ],
            "#text": "See also: CVE-2000-0884"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "180"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "692"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-112",
              "@Section": "5.9. Character Encoding"
            },
            {
              "@External_Reference_ID": "REF-530",
              "@Section": "Chapter 12"
            },
            {
              "@External_Reference_ID": "REF-531"
            },
            {
              "@External_Reference_ID": "REF-532",
              "@Section": "UTF-8"
            },
            {
              "@External_Reference_ID": "REF-533"
            },
            {
              "@External_Reference_ID": "REF-114"
            },
            {
              "@External_Reference_ID": "REF-535"
            },
            {
              "@External_Reference_ID": "REF-525"
            },
            {
              "@External_Reference_ID": "REF-537"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Mitigations, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: HTTP Response Splitting (CAPEC ID: 34)",
    "context": "",
    "output": "Yes. to detect the attack pattern HTTP Response Splitting (CAPEC ID: 34), you can look at the following indicator: Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool.",
      "@Name": "HTTP Response Splitting (CAPEC ID: 34)",
      "attack_ptrn": {
        "@ID": "34",
        "@Name": "HTTP Response Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "Malicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding.",
            "A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "client agent (e.g., web browser)",
              "#text": "This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aby sending malicious content in HTTP responses from back-end HTTP infrastructure."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "105"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages."
        },
        "Indicators": {
          "Indicator": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "25",
            "Entry_Name": "HTTP Response Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-680"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Payload_Activation_Impact, Probing_Techniques, Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Password Spraying (CAPEC ID: 565), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.\nThe login attempts use passwords that have been used previously by the user account in question.\nLogin attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
        "The login attempts use passwords that have been used previously by the user account in question.",
        "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
      ],
      "@Name": "Password Spraying (CAPEC ID: 565)",
      "attack_ptrn": {
        "@ID": "565",
        "@Name": "Password Spraying",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Password Spraying attacks often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. Successful execution of Password Spraying attacks usually lead to lateral movement within the target, which allows the adversary to impersonate the victim or execute any action that the victim is authorized to perform. If the password chosen by the user is commonly used or easily guessed, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.",
            "Password Spraying Attacks are similar to Dictionary-based Password Attacks (CAPEC-16) in that they both leverage precompiled lists (i.e. dictionaries) of username/password combinations to try against a system/application. The primary difference is that Password Spraying Attacks leverage a known list of user accounts and only try one password for each account before moving onto the next password. In contrast, Dictionary-based Password Attacks leverage unknown username/password combinations and are often executed offline against files containing hashed credentials, where inducing an account lockout is not a concern.",
            "Password Spraying Attacks are also similar to Credential Stuffing attacks (CAPEC-600), since both utilize known user accounts and often attack the same targets. Credential Stuffing attacks, however, leverage known username/password combinations, whereas Password Spraying attacks have no insight into known username/password pairs. If a Password Spraying attack succeeds, it may additionally lead to Credential Stuffing attacks on different targets."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)",
              "Technique": [
                "Select passwords based on common use or a particular user's additional details.",
                "Select passwords based on the target's password complexity policies."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.",
              "Technique": [
                "Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
                "Iterate through the remaining passwords for each known user account."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts on the target system/application."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A machine with sufficient resources for the job (e.g. CPU, RAM, HD).",
            "Applicable password lists.",
            "A password cracking tool or a custom script that leverages the password list to launch the attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Many invalid login attempts are coming from the same machine (same IP address) or for multiple user accounts within short succession.",
            "The login attempts use passwords that have been used previously by the user account in question.",
            "Login attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user selects the phrase \"Password123\" as their password, believing that it would be very difficult to guess. Password Spraying, leveraging a list of commonly used passwords, is used to crack this password and gain access to the account.",
            "The Iranian hacker group APT33 (AKA Holmium, Refined Kitten, or Elfin) carried out numerous Password Spraying attacks in 2019. On average, APT33 targeted 2,000 organizations per month, with upwards of 10 million authentication attempts each day. The majority of these attacks targeted manufacturers, suppliers, or maintainers of industrial control system equipment."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.003",
            "Entry_Name": "Brute Force:Password Spraying"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-565"
            },
            {
              "@External_Reference_ID": "REF-566"
            },
            {
              "@External_Reference_ID": "REF-567"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Use of Known Kerberos Credentials (CAPEC ID: 652)",
    "context": "",
    "output": "Possible indicators: Authentication attempts use expired or invalid credentials.\nAuthentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.\nData is being transferred and/or removed from systems/applications within the network.\nSuspicious or Malicious software is downloaded/installed on systems within the domain.\nMessages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Authentication attempts use expired or invalid credentials.",
        "Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.",
        "Data is being transferred and/or removed from systems/applications within the network.",
        "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
        "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
      ],
      "@Name": "Use of Known Kerberos Credentials (CAPEC ID: 652)",
      "attack_ptrn": {
        "@ID": "652",
        "@Name": "Use of Known Kerberos Credentials",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",
        "Extended_Description": {
          "xhtml:p": "Kerberos is the default authentication method for Windows domains and is also used across many operating systems. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the domain or access to any resources the service account is privileged to access, among other things. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.",
              "Technique": [
                "An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary guesses the credentials to a weak Kerberos service account.",
                "An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.",
                "An adversary conducts a Kerberoasting attack."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.",
              "Technique": [
                "Manually or automatically enter each Kerberos service account credential through the target's interface.",
                "Attempt a Pass the Ticket attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application leverages Kerberos authentication.",
            "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.",
            "The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.",
            "The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.",
            "The targeted network allows for network sniffing attacks to succeed."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Kerberos credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A valid Kerberos ticket or a known Kerberos service account credential."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use expired or invalid credentials.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
            "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse Kerberos service account credentials across systems.",
            "Deny remote use of Kerberos service account credentials to log into domain systems.",
            "Do not allow Kerberos service accounts to be a local administrator on more than one system.",
            "Enable at least AES Kerberos encryption for tickets.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
            "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "836"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1558",
            "Entry_Name": "Steal or Forge Kerberos Tickets"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-584"
            },
            {
              "@External_Reference_ID": "REF-585"
            },
            {
              "@External_Reference_ID": "REF-586"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Postfix, Null Terminate, and Backslash (CAPEC ID: 53)",
    "context": "",
    "output": "The indicators of Postfix, Null Terminate, and Backslash (CAPEC ID: 53) are: Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it.",
      "@Name": "Postfix, Null Terminate, and Backslash (CAPEC ID: 53)",
      "attack_ptrn": {
        "@ID": "53",
        "@Name": "Postfix, Null Terminate, and Backslash",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.",
              "Technique": "Try different encodings for null such as \\0 or %00 followed by an encoding for the backslash character."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.",
              "Technique": "If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Null terminators are not properly handled by the filter."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API"
          }
        },
        "Indicators": {
          "Indicator": "Null characters are observed by the filter. The filter needs to be able to understand various encodings of the Null character, or only canonical data should be passed to it."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A rather simple injection is possible in a URL:",
              "This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "xhtml:br": [
                null,
                null
              ],
              "#text": "http://getAccessHostname/sekbin/helpwin.gas.bat?mode=&draw=x&file=x&module=&locale=[insert relative path here][%00][%5C]&chapter="
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "158"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Encryption Brute Forcing (CAPEC ID: 20)",
    "context": "",
    "output": "The indicators of Encryption Brute Forcing (CAPEC ID: 20) are: None. This attack happens offline.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "None. This attack happens offline.",
      "@Name": "Encryption Brute Forcing (CAPEC ID: 20)",
      "attack_ptrn": {
        "@ID": "20",
        "@Name": "Encryption Brute Forcing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "112"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "668"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Determine the ciphertext and the encryption algorithm."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Ciphertext is known.",
            "Encryption algorithm and key size are known."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Brute forcing encryption does not require much skill."
          }
        },
        "Resources_Required": {
          "Resource": {
            "xhtml:p": [
              "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).",
              "On average, for a binary key of size N, 2^(N/2) trials will be needed to find the key that would decrypt the ciphertext to obtain the original plaintext.",
              "Obviously as N gets large the brute force approach becomes infeasible."
            ]
          }
        },
        "Indicators": {
          "Indicator": "None. This attack happens offline."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.",
            "In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
          ]
        },
        "Example_Instances": {
          "Example": "In 1997 the original DES challenge used distributed net computing to brute force the encryption key and decrypt the ciphertext to obtain the original plaintext. Each machine was given its own section of the key space to cover. The ciphertext was decrypted in 96 days."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "326"
            },
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "1204"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2021-06-24",
            "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Targeted Malware (CAPEC ID: 542), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: Software being run on a system matches a file signature found in a malware database\n* A suspicious module is loaded that is not regularly loaded by a system\n* Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Software being run on a system matches a file signature found in a malware database",
        "A suspicious module is loaded that is not regularly loaded by a system",
        "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution"
      ],
      "@Name": "Targeted Malware (CAPEC ID: 542)",
      "attack_ptrn": {
        "@ID": "542",
        "@Name": "Targeted Malware",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "662"
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "Software being run on a system matches a file signature found in a malware database",
            "A suspicious module is loaded that is not regularly loaded by a system",
            "Software on a system is making calls to \"GetProcAddress()\" which is a commonly used function to implement dynamic API resolution"
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1587.001",
              "Entry_Name": "Develop Capabilities: Malware"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027",
              "Entry_Name": "Obfuscated Files or Information"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Adversaries often utilize obfuscation techniques when developing malware with the purpose of either avoiding detection or prevent the target from reverse engineering and understanding a captured malware sample. Some of these techniques include, but are not limited to, binary padding, software packing, stripping symbols and strings from a payload, and utilizing dynamic API resolution."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Indicators, Notes, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Exploitation of Transient Instruction Execution (CAPEC ID: 663)",
    "context": "",
    "output": "The indicators of Exploitation of Transient Instruction Execution (CAPEC ID: 663) are: File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "@Name": "Exploitation of Transient Instruction Execution (CAPEC ID: 663)",
      "attack_ptrn": {
        "@ID": "663",
        "@Name": "Exploitation of Transient Instruction Execution",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "74"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "184",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "403"
                },
                {
                  "@Exclude_ID": "437"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "212"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "124"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "180"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.",
              "Technique": "Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.",
              "Technique": "Run OS or application specific tools that examine the contents of cache."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.",
              "Technique": [
                "Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.",
                "Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.",
              "Technique": [
                "Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.",
                "Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.",
                "Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage."
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "C2C mechanism or direct access to victim system, capable of dropping malicious program and collecting covert channel attack data.",
            "Malicious program capable of triggering execution of transient instructions or vulnerable instruction sequences of victim program and performing a covert channel attack to gather data from victim process memory space. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources of the victim machine."
          ]
        },
        "Indicators": {
          "Indicator": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources",
            "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
            "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
            "Configuration: Disable SharedArrayBuffer for Web Browsers",
            "Configuration: Disable Copy-on-Write between Cloud VMs",
            "Configuration: Privilege Checks on Cache Flush Instructions",
            "Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "1037"
            },
            {
              "@CWE_ID": "1303"
            },
            {
              "@CWE_ID": "1264"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-637"
            },
            {
              "@External_Reference_ID": "REF-638"
            },
            {
              "@External_Reference_ID": "REF-639"
            },
            {
              "@External_Reference_ID": "REF-640"
            },
            {
              "@External_Reference_ID": "REF-641"
            },
            {
              "@External_Reference_ID": "REF-642"
            },
            {
              "@External_Reference_ID": "REF-643"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-02-22",
            "Modification_Comment": "Updated Related_Attack_Patterns"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Using Unicode Encoding to Bypass Validation Logic (CAPEC ID: 71)",
    "context": "",
    "output": "Possible indicators: Unicode encoded data is passed to APIs where it is not expected",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Unicode encoded data is passed to APIs where it is not expected",
      "@Name": "Using Unicode Encoding to Bypass Validation Logic (CAPEC ID: 71)",
      "attack_ptrn": {
        "@ID": "71",
        "@Name": "Using Unicode Encoding to Bypass Validation Logic",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Try to use Unicode encoding of content in Scripts in order to bypass validation routines.",
                "Try to use Unicode encoding of content in HTML in order to bypass validation routines.",
                "Try to use Unicode encoding of content in CSS in order to bypass validation routines."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Filtering is performed on data that has not be properly canonicalized."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware."
          }
        },
        "Indicators": {
          "Indicator": "Unicode encoded data is passed to APIs where it is not expected"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
            "Ensure that filtering or input validation is applied to canonical data.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is",
              "In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters.",
              "In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are",
              "Using this conversion, the previously displayed URL can be encoded as"
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://target.server/some_directory/../../../winnt"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null
                ],
                "#text": ". yields C0 AE/ yields C0 AF\\ yields C1 9C"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://target.server/some_directory/%C0AE/%C0AE/%C0AE%C0AE/%C0AE%C0AE/winnt"
              }
            ],
            "#text": "See also: CVE-2000-0884"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "176"
            },
            {
              "@CWE_ID": "179"
            },
            {
              "@CWE_ID": "180"
            },
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "183"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "692"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Unicode Encoding"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Buffer Overflow via Environment Variables (CAPEC ID: 10), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert.",
      "@Name": "Buffer Overflow via Environment Variables (CAPEC ID: 10)",
      "attack_ptrn": {
        "@ID": "10",
        "@Name": "Buffer Overflow via Environment Variables",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
        "Extended_Description": "Although the focus of this attack is putting excessive content into an environment variable that is loaded into a buffer, environment variables can be used to assist a classic buffer overflow attack as well. In the case where the buffer used in a traditional buffer overflow attack is not large enough to store the adversary's shell code, they will store the shell code in an environment variable and attempt to return to its address, rather than back into the data they wrote to the buffer.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application uses environment variables.",
            "An environment variable exposed to the user is vulnerable to a buffer overflow.",
            "The vulnerable environment variable uses untrusted data.",
            "Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": "If the application does bound checking, it should fail when the data source is larger than the size of the destination buffer. If the application's code is well written, that failure should trigger an alert."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not expose environment variable to the user.",
            "Do not use untrusted data in your environment variables.",
            "Use a language or compiler that performs automatic bounds checking",
            "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906"
            },
            {
              "xhtml:p": "A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "99"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "733"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Buffer Overflow via Environment Variables"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-2"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665)",
    "context": "",
    "output": "The indicators of Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665) are: Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events.",
      "@Name": "Exploitation of Thunderbolt Protection Flaws (CAPEC ID: 665)",
      "attack_ptrn": {
        "@ID": "665",
        "@Name": "Exploitation of Thunderbolt Protection Flaws",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary leverages a firmware weakness within the Thunderbolt protocol, on a computing device to manipulate Thunderbolt controller firmware in order to exploit vulnerabilities in the implementation of authorization and verification schemes within Thunderbolt protection mechanisms. Upon gaining physical access to a target device, the adversary conducts high-level firmware manipulation of the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash, through the use of a SPI Programing device and an external Thunderbolt device, typically as the target device is booting up. If successful, this allows the adversary to modify memory, subvert authentication mechanisms, spoof identities and content, and extract data and memory from the target device. Currently 7 major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as noted in the Execution Flow."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "276"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "390"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "458"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.",
              "Technique": [
                "Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.",
                "Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.",
                "Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.",
              "Technique": [
                "Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.",
                "Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.",
                "Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.",
                "Locate data structure containing challenge-response key information between appropriate offsets."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to \"None\" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.",
              "Technique": "The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash."
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.",
              "Technique": [
                "Observe victim device identify adversary device as the victim device and enables PCIe tunneling.",
                "Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.",
                "Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of \"None\" (SL0)",
                "Observe after installation of Firmware update that within Thunderbolt Management UI the \"NVM version\" is unchanged/same prior to the prompt of successful Firmware update/installation."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations."
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "SPI Programming device capable of modifying/configuring or replacing the firmware of Thunderbolt device stored on SPI Flash of target Thunderbolt controller, as well as modification/spoofing of adversary-controlled Thunderbolt controller.",
            "Precrafted scripts/tools capable of implementing the modification and replacement of Thunderbolt Firmware.",
            "Thunderbolt-enabled computing device capable of interfacing with target Thunderbolt device and extracting/dumping data and memory contents of target device."
          ]
        },
        "Indicators": {
          "Indicator": "Windows Event logs may document the access of Thunderbolt port as a USB 3.0 event as well as any malicious actions taken upon target device as file system and memory events."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Kernel Direct Memory Access Protection",
            "Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface",
            "Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface",
            "Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode",
            "Configuration: Set Security Level to SL3 for Thunderbolt 2 system port",
            "Configuration: Disable PCIe tunneling to set Security Level to SL3",
            "Configuration: Disable Boot Camp upon MacOS systems"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "288"
            },
            {
              "@CWE_ID": "1188"
            },
            {
              "@CWE_ID": "862"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1211",
              "Entry_Name": "Exploitation for Defensive Evasion"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1542.002",
              "Entry_Name": "Pre-OS Boot: Component Firmware"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1556",
              "Entry_Name": "Modify Authentication Process"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-647"
            },
            {
              "@External_Reference_ID": "REF-648"
            },
            {
              "@External_Reference_ID": "REF-649"
            },
            {
              "@External_Reference_ID": "REF-650"
            },
            {
              "@External_Reference_ID": "REF-651"
            },
            {
              "@External_Reference_ID": "REF-652"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Target Programs with Elevated Privileges (CAPEC ID: 69), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity.",
      "@Name": "Target Programs with Elevated Privileges (CAPEC ID: 69)",
      "attack_ptrn": {
        "@ID": "69",
        "@Name": "Target Programs with Elevated Privileges",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "233",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "8"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "9"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "10"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "67"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.",
              "Technique": "Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.",
              "Technique": [
                "Look for improper input validation",
                "Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.",
                "Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted program runs with elevated OS privileges.",
            "The targeted program accepts input data from the user or from another program.",
            "The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.",
            "This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique."
            },
            {
              "@Level": "Medium",
              "#text": "More advanced attack may require knowledge of the protocol spoken by the host service."
            }
          ]
        },
        "Indicators": {
          "Indicator": "The log can have a trace of abnormal activity. Also if abnormal activity is detected on the host target. For instance flooding should be seen as abnormal activity and the target host may decide to take appropriate action in order to mitigate the attack (data filtering or blocking). Resource exhaustion is also a sign of abnormal activity."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Apply the principle of least privilege.",
            "Validate all untrusted data.",
            "Apply the latest patches.",
            "Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.",
            "Avoid revealing information about your system (e.g., version of the program) to anonymous users.",
            "Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.",
            "If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.",
            "Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.",
            "Monitor traffic and resource usage and pay attention if resource exhaustion occurs.",
            "Protect your log file from unauthorized modification and log forging."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "250"
            },
            {
              "@CWE_ID": "15"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Altered Component Firmware (CAPEC ID: 638)",
    "context": "",
    "output": "The indicators of Altered Component Firmware (CAPEC ID: 638) are: Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.\n* Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.",
        "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings."
      ],
      "@Name": "Altered Component Firmware (CAPEC ID: 638)",
      "attack_ptrn": {
        "@ID": "638",
        "@Name": "Altered Component Firmware",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "452"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.",
              "Technique": "Conduct reconnaissance to determine potential targets to exploit."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.",
              "Technique": [
                "[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.",
                "[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.",
              "Technique": [
                "The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.",
                "[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Advanced knowledge about the target component's firmware",
            "Advanced knowledge about Master Boot Records (MBR)",
            "Advanced knowledge about tools used to insert firmware altering malware.",
            "Advanced knowledge about component shipments to the target organization."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Ability to access and reverse engineer hardware component firmware."
            },
            {
              "@Level": "High",
              "#text": "Ability to intercept components in transit."
            },
            {
              "@Level": "Medium",
              "#text": "Ability to create malicious payload to be executed from MBR."
            },
            {
              "@Level": "Low",
              "#text": "Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload"
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "Manufacturer source code for hardware components.",
            "Malware tools used to insert malware and payload onto target component.",
            "Either remote or physical access to the target component."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Output observed from processes, API calls, or Self-Monitoring, Analysis and Reporting Technology (SMART) may provide insight into malicious modifications of MBRs.",
            "Digital forensics tools may produce output that indicates an attack of this nature has occurred. Examples include unexpected disk partitions and/or unusual strings."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Authentication",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Execute Unauthorized Commands",
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": [
                "Read Data",
                "Modify Data"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage hardware components known to not be susceptible to these types of attacks.",
            "Implement hardware RAID infrastructure."
          ]
        },
        "Example_Instances": {
          "Example": "In 2014, the Equation group was observed levering known malware tools to conduct component firmware alteration attacks against hard drives. In total, 12 HDD categories were shown to be vulnerable from manufacturers such as Western Digital, HGST, Samsung, and Seagate. Because of their complexity, only a few victims were targeted by these attacks. [REF-664]"
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1542.002",
            "Entry_Name": "Pre-OS Boot:Component Firmware"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-664"
            },
            {
              "@External_Reference_ID": "REF-665"
            },
            {
              "@External_Reference_ID": "REF-666"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Resources_Required, Skills_Required, Typical_Severity"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - Rainbow Table Password Cracking (CAPEC ID: 55)",
    "context": "",
    "output": "This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained.",
      "@Name": "Rainbow Table Password Cracking (CAPEC ID: 55)",
      "attack_ptrn": {
        "@ID": "55",
        "@Name": "Rainbow Table Password Cracking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",
        "Extended_Description": {
          "xhtml:p": "A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.",
              "Technique": [
                "Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)",
                "Obtain password hashes from platform-specific storage locations (e.g. Windows registry)",
                "Sniff network packets containing password hashes."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.",
              "Technique": "Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.",
            "Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).",
            "The system uses one factor password based authentication."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place."
          }
        },
        "Resources_Required": {
          "Resource": "Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required."
        },
        "Indicators": {
          "Indicator": "This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
        },
        "Example_Instances": {
          "Example": "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "261"
            },
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "916"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.002",
            "Entry_Name": "Brute Force:Password Cracking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
    "context": "",
    "output": "The indicators of Try Common or Default Usernames and Passwords (CAPEC ID: 70) are: Many incorrect login attempts are detected by the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Many incorrect login attempts are detected by the system.",
      "@Name": "Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
      "attack_ptrn": {
        "@ID": "70",
        "@Name": "Try Common or Default Usernames and Passwords",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The system uses one factor password based authentication.The adversary has the means to interact with the system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known."
          }
        },
        "Resources_Required": {
          "Resource": "Technology or vendor specific list of default usernames and passwords."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Delete all default account credentials that may be put in by the product vendor.",
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.",
            "Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288",
            "In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "798"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1078.001",
            "Entry_Name": "Valid Accounts:Default Accounts"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-572"
            },
            {
              "@External_Reference_ID": "REF-574"
            },
            {
              "@External_Reference_ID": "REF-596",
              "@Section": "Testing for Account Enumeration and Guessable User Account"
            },
            {
              "@External_Reference_ID": "REF-597",
              "@Section": "Testing for Default Credentials"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Try Common(default) Usernames and Passwords"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Using Escaped Slashes in Alternate Encoding (CAPEC ID: 78)",
    "context": "",
    "output": "The indicators of Using Escaped Slashes in Alternate Encoding (CAPEC ID: 78) are: An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system.",
      "@Name": "Using Escaped Slashes in Alternate Encoding (CAPEC ID: 78)",
      "attack_ptrn": {
        "@ID": "78",
        "@Name": "Using Escaped Slashes in Alternate Encoding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts to escape multiple different special characters using a backslash.",
              "Technique": [
                "Escape a special character with a backslash to bypass input validation.",
                "Try different encodings of both the backslash and the special character to see if this bypasses input validation"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application accepts the backlash character as escape character.",
            "The application server does incomplete input data decoding, filtering and validation."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "The adversary can naively try backslash character and discover that the target host uses it as escape character."
            },
            {
              "@Level": "Medium",
              "#text": "The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability."
            }
          ]
        },
        "Indicators": {
          "Indicator": "An adversary can use a fuzzer in order to probe for this vulnerability. The fuzzer should generate suspicious network activity noticeable by an intrusion detection system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Verify that the user-supplied data does not use backslash character to escape malicious characters.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
            "Be aware of the threat of alternative method of data encoding.",
            "Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.",
            "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.",
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
            "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "For example, the byte pair \\0 might result in a single zero byte (a NULL) being sent. Another example is \\t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that \\/ results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this:",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": null,
                "#text": "/ yields /\\/ yields /"
              }
            },
            {
              "xhtml:p": [
                "An attack leveraging escaped slashes in slternate encodings is very simple. If you believe the target may be filtering the slash, attempt to supply \\/ and see what happens. Example command strings to try out include",
                "which converts in many cases to",
                "To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet",
                "produces the output",
                "Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities:"
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "CWD ..\\/..\\/..\\/..\\/winnt"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "CWD ../../../../winnt"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null
                  ],
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:br": null,
                    "#text": "puts(\"\\/ \\\\ \\? \\. \\| \");return 0;"
                  },
                  "#text": "int main(int argc, char* argv[]){\n                  }"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "/ \\ ? . |"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:br": [
                    null,
                    null
                  ],
                  "#text": "CWD ..\\?\\?\\?\\?\\/..\\/..\\/..\\/winntCWD \\.\\.\\/\\.\\.\\/\\.\\.\\/\\.\\.\\/winntCWD ..\\|\\|\\|\\|\\/..\\/..\\/..\\/winnt"
                }
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "180"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "22"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow, Indicators, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: NoSQL Injection (CAPEC ID: 676)",
    "context": "",
    "output": "Yes. to detect the attack pattern NoSQL Injection (CAPEC ID: 676), you can look at the following indicator: Too many false or invalid queries to the database, especially those caused by malformed input.\n- Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Too many false or invalid queries to the database, especially those caused by malformed input.",
        "Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source."
      ],
      "@Name": "NoSQL Injection (CAPEC ID: 676)",
      "attack_ptrn": {
        "@ID": "676",
        "@Name": "NoSQL Injection",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code."
        },
        "Extended_Description": {
          "xhtml:p": [
            "NoSQL database calls are written in an application's programming language, via a custom API call, or formatted in a common convention (e.g., JSON, XML, etc.), any of which the adversary can exploit to achieve the aforementioned goals. NoSQL attacks usually result from improper sanitization and validation of data that originates from a user, either via special character or JavaScript injection. In both cases, the adversary crafts input strings so that when the target software constructs NoSQL statements based on the input, the resulting NoSQL statement performs actions other than those intended by the application. However, unlike traditional SQL Injection attacks, NoSQL injection attacks can also occur in instances where the application does not rely upon user input, as is the case in operator replacements. This entails the adversary overriding reserved NoSQL variable names with ones that have been modified with malicious functionality (e.g., $where in MongoDB). In all cases, depending on the NoSQL API and data model used, successful injection can cause information disclosure, data modification, and code execution at the application level.",
            "Note: NoSQL Injection attacks are executed within a procedural language (e.g., C, C++, Perl), as opposed to the declarative SQL language itself. As a result, NoSQL injection attacks can potentially result in greater impacts than traditional SQL Injection attacks [REF-668]."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.",
              "Technique": [
                "Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.",
                "Identify areas of the application that interact with user input and may be involved with NoSQL queries."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., \"$ne\" for MongoDB or \"$exists\" for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.",
              "Technique": [
                "Use public resources such as OWASP's \"Testing for NoSQL Injection\" [REF-668] or Null Sweep's \"NoSQL Injection Cheatsheet\" [REF-669] and try different approaches for adding logic to NoSQL queries.",
                "Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.",
                "Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as \"where\" within PHP [CAPEC-460]."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.",
              "Technique": "Craft and Execute underlying NoSQL query"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Awareness of the technology stack being leveraged by the target application.",
            "NoSQL queries used by the application to store, retrieve, or modify data.",
            "User-controllable input that is not properly validated by the application as part of NoSQL queries.",
            "Target potentially susceptible to operator replacement attacks."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined."
            },
            {
              "@Level": "Medium",
              "#text": "For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": [
            "Too many false or invalid queries to the database, especially those caused by malformed input.",
            "Executed queries or commands that appear to malicious in nature or originating from an untrustworthy source."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.",
            "If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.",
            "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
            "Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
            "Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.",
            "If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".",
            "If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.",
            "Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "The following examples primarily cite MongoDB, PHP, and NodeJS attacks due to their prominence and popularity. However, please note that these attacks are not exclusive to this NoSQL instance, programming language, or runtime framework.",
                "Within NodeJS, Login Bypass attacks are possible via MongoDB if user-input is not properly validated and sanitized [REF-670].",
                "The above code works fine if the user were to submit a query like the following:",
                "https://example.org/login?user=patrick&password=1234",
                "But an adversary could submit a malicious query such as the below, which would be interpreted by the code as follows:",
                "https://example.org/login?user=patrick&password[$ne]=",
                "This will result in a Login Bypass attack, as the query will succeed for all values where Bob's password is not an empty string."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "bad",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "\"user\": req.query.user,\"password\": req.query.password"
                    },
                    "#text": "db.collection('users').find({});"
                  },
                  "#text": "//NodeJS with Express.js"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "\"user\": bob,\"password\": {\"&ne\": \"\"}"
                    },
                    "#text": "db.collection('users').find({});"
                  },
                  "#text": "//NodeJS with Express.js"
                }
              ],
              "xhtml:br": [
                null,
                null
              ]
            },
            {
              "xhtml:p": [
                "MongoDB instances are also vulnerable to JavaScript Injection Attacks when user input is not properly validated and sanitized.",
                "If the user properly specifies a username, then this code will execute as intended. However, an adversary can inject JavaScript into the \"$username\" variable to achieve a NoSQL Injection attack as follows:",
                "This will result in the server sleeping for 5 seconds if the attack was successful. An adversary could supply a larger value to deny service to the application."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "bad",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "#text": "return (this.username == $username) } } );"
                    },
                    "#text": "db.collection.find({$where: function() {"
                  },
                  "#text": "//PHP with MongoDB"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "#text": "return (this.username == 'foo'; sleep(5000) ) } } );"
                    },
                    "#text": "db.collection.find({$where: function() {"
                  },
                  "#text": "//PHP with MongoDB"
                }
              ],
              "xhtml:br": null
            },
            {
              "xhtml:p": [
                "If leveraging PHP with MongoDB, operator replacement attacks are possible if special query operators are not properly addressed. The below example from OWASP's \"Test for NoSQL Injection\" displays a simple case of how this could occur.[REF-668]",
                "Even though the above query does not depend on any user input, it is vulnerable to a NoSQL injection attack via operator replacement on the \"$where\" keyword. In this case, the adversary could exploit MongoDB in the following manner:"
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "bad",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "return obj.credits - obj.debits < 0; } } );"
                  },
                  "#text": "db.myCollection.find({$where: function() {"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "#text": "$where: function() { //arbitrary JavaScript here }"
                }
              ],
              "xhtml:br": null
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "943"
            },
            {
              "@CWE_ID": "1286"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-668"
            },
            {
              "@External_Reference_ID": "REF-669"
            },
            {
              "@External_Reference_ID": "REF-670"
            },
            {
              "@External_Reference_ID": "REF-671"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-10-21"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Example_Instances"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - Dictionary-based Password Attack (CAPEC ID: 16)",
    "context": "",
    "output": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words.",
      "@Name": "Dictionary-based Password Attack (CAPEC ID: 16)",
      "attack_ptrn": {
        "@ID": "16",
        "@Name": "Dictionary-based Password Attack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": [
            "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.",
            "Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)",
              "Technique": [
                "Select dictionary based on particular users' preferred languages.",
                "Select dictionary based on the application/system's supported languages."
              ]
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "[Determine username(s) to target] Determine username(s) whose passwords to crack.",
              "Technique": [
                "Obtain username(s) by sniffing network packets.",
                "Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)",
                "Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.",
              "Technique": [
                "Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).",
                "Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system uses one factor password based authentication.",
            "The system does not have a sound password policy that is being enforced.",
            "The system does not implement an effective password throttling mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools and dictionaries are available to launch this type of an attack."
          }
        },
        "Resources_Required": {
          "Resource": "A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack."
        },
        "Indicators": {
          "Indicator": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Leverage multi-factor authentication for all authentication services."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.",
            {
              "xhtml:p": [
                "The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks.",
                "Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server.",
                "Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques."
              ],
              "#text": "See also: CVE-2003-1096"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Mitigations, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - SQL Injection (CAPEC ID: 66)",
    "context": "",
    "output": "Possible indicators: Too many false or invalid queries to the database, especially those caused by malformed input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Too many false or invalid queries to the database, especially those caused by malformed input.",
      "@Name": "SQL Injection (CAPEC ID: 66)",
      "attack_ptrn": {
        "@ID": "66",
        "@Name": "SQL Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",
        "Extended_Description": {
          "xhtml:p": "When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to interact directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] The attacker first takes an inventory of the functionality exposed by the application.",
              "Technique": [
                "Spider web sites for all available links",
                "Sniff network communications with application using a utility such as WireShark."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.",
              "Technique": [
                "Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.",
                "Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.",
                "Use \"Blind SQL Injection\" techniques to extract information about the database schema.",
                "If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.",
              "Technique": "Craft and Execute underlying SQL query"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SQL queries used by the application to store, retrieve or modify data.",
            "User-controllable input that is not properly validated by the application as part of SQL queries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many false or invalid queries to the database, especially those caused by malformed input."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
            "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "1286"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "19",
              "Entry_Name": "SQL Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "SQL Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-607",
            "@Section": "Testing for SQL Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: HTTP Request Smuggling (CAPEC ID: 33)",
    "context": "",
    "output": "The indicators of HTTP Request Smuggling (CAPEC ID: 33) are: Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "@Name": "HTTP Request Smuggling (CAPEC ID: 33)",
      "attack_ptrn": {
        "@ID": "33",
        "@Name": "HTTP Request Smuggling",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "A maliciously crafted HTTP request, which contains a second secretly embedded HTTP request is interpreted by an intermediary web proxy as single benign HTTP request, is forwarded to a back-end server, that interprets and parses the HTTP request as two authorized benign HTTP requests bypassing security controls.",
            "This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]",
            "Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",
            {
              "xhtml:i": "back-end HTTP agent",
              "#text": "This differs from CAPEC-273 HTTP Response Smuggling, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Smuggling is an attempt to compromise avia HTTP Request messages."
            },
            "HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "HTTP Desync",
            "Description": "Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path."
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "273"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent.",
                    "From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent.",
                      "For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. ."
                    ]
                  }
                },
                {
                  "xhtml:p": [
                    "Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server).",
                    "Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers."
                  ]
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses."
        },
        "Indicators": {
          "Indicator": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
            "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
            {
              "xhtml:ul": {
                "xhtml:li": [
                  "Headers with no space before the value \u201cchunked\u201d",
                  "Headers with extra spaces",
                  "Headers beginning with trailing characters",
                  "Headers providing a value \u201cchunk\u201d instead of \u201cchunked\u201d (the server normalizes this as chunked encoding)",
                  "Headers with multiple spaces before the value \u201cchunked\u201d",
                  "Headers with quoted values (whether single or double quotations)",
                  "Headers with CRLF characters before the value \u201cchunked\u201d",
                  "Values with invalid characters"
                ]
              },
              "#text": "Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:"
            },
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287"
            },
            {
              "xhtml:p": "When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276"
            },
            {
              "xhtml:p": "Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both \"Content-Length\" and a \"Transfer-Encoding: chunked\" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with \"Transfer-Encoding: chunked\" header without replacing the existing \"Content-Length\" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with \"Content-Length: 0\". See also: CVE-2005-2088"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "444"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "26",
            "Entry_Name": "HTTP Request Smuggling"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-38"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-672"
            },
            {
              "@External_Reference_ID": "REF-673"
            },
            {
              "@External_Reference_ID": "REF-674"
            },
            {
              "@External_Reference_ID": "REF-678"
            },
            {
              "@External_Reference_ID": "REF-681"
            },
            {
              "@External_Reference_ID": "REF-682"
            },
            {
              "@External_Reference_ID": "REF-683"
            },
            {
              "@External_Reference_ID": "REF-684"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Alternate_Terms, Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Serialized Data with Nested Payloads (CAPEC ID: 230)",
    "context": "",
    "output": "The indicators of Serialized Data with Nested Payloads (CAPEC ID: 230) are: Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.",
      "@Name": "Serialized Data with Nested Payloads (CAPEC ID: 230)",
      "attack_ptrn": {
        "@ID": "230",
        "@Name": "Serialized Data with Nested Payloads",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
        "Extended_Description": {
          "xhtml:p": [
            "An adversary's goal is to leverage parser failure to their advantage. In most cases this type of an attack will result in a Denial of Service due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].",
            "This attack is most closely associated with web services using SOAP or a Rest API, because remote service requesters can post malicious payloads to the service provider. The main weakness is that the service provider generally must inspect, parse, and validate the messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that this attack targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "XML Denial of Service (XML DoS)"
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "130",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An application's user-controllable data is expressed in a language that supports subsitution.",
            "An application does not perform sufficient validation to ensure that user-controllable data is not malicious."
          ]
        },
        "Indicators": {
          "Indicator": "Bad data is passed to the data parser (possibly repeatedly), possibly making it crash or execute arbitrary code."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.",
            "Perform validation on canonical data.",
            "Pick a robust implementation of the data parser."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "112"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "674"
            },
            {
              "@CWE_ID": "770"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-89",
            "@Section": "What is an XML Parser Attack?"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Alternate_Terms, Description, Execution_Flow, Indicators, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Extended_Description, Indicators, Mitigations, Prerequisites, Skills_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2021-10-21",
            "#text": "XML Nested Payloads"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Use of Known Domain Credentials (CAPEC ID: 560)",
    "context": "",
    "output": "Possible indicators: Authentication attempts use credentials that have been used previously by the account in question.\n- Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.\n- Data is being transferred and/or removed from systems/applications within the network.\n- Suspicious or Malicious software is downloaded/installed on systems within the domain.\n- Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Authentication attempts use credentials that have been used previously by the account in question.",
        "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
        "Data is being transferred and/or removed from systems/applications within the network.",
        "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
        "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
      ],
      "@Name": "Use of Known Domain Credentials (CAPEC ID: 560)",
      "attack_ptrn": {
        "@ID": "560",
        "@Name": "Use of Known Domain Credentials",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Attacks leveraging trusted credentials typically result in the adversary laterally moving within the local network, since users are often allowed to login to systems/applications within the network using the same password. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more.",
            "Attacks on known passwords generally rely on the primary fact that users often reuse the same username/password combination for a variety of systems, applications, and services, coupled with poor password policies on the target system or application. Adversaries can also utilize known passwords to target Single Sign On (SSO) or cloud-based applications and services, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "151"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
              "Technique": [
                "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
                "An adversary gains access to a database and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each credential until the target grants access.",
              "Technique": "Manually or automatically enter each credential through the target's interface."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application"
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A list of known credentials.",
            "A custom script that leverages the credential list to launch an attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Throughout 2015 and 2016, APT28 \u2014 also known as Pawn Storm, Sednit, Fancy Bear, Sofacy, and STRONTIUM \u2014 leveraged stolen credentials to infiltrate the Democratic National Committee (DNC), the United States Army, the World Anti-Doping Agency (WADA), the Court of Arbitration for Sport (TAS-CAS), and more. In most cases, the legitimate credentials were obtained via calculated spearphishing, tabnabbing, and DNS attacks targeted at corporate webmail systems. APT28 also executed several watering hole attacks, in addition to exploiting several zero-day vulnerabilities within Flash and Windows. The stolen credentials were then utilized to maintain authenticated access, laterally move within the local network, and exfiltrate sensitive information including DNC emails and personal medical records of numerous athletes. [REF-571]",
            "In early 2019, FIN6 exploited stolen credentials from an organization within the engineering industry to laterally move within an environment via the Windows\u2019 Remote Desktop Protocol (RDP). Multiple servers were subsequently infected with malware to create malware distribution servers, which were used to distribute the LockerGoga ransomware. [REF-573]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "1273"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1078",
            "Entry_Name": "Valid Accounts"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-570"
            },
            {
              "@External_Reference_ID": "REF-571"
            },
            {
              "@External_Reference_ID": "REF-572"
            },
            {
              "@External_Reference_ID": "REF-573"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Voice Phishing (CAPEC ID: 656)",
    "context": "",
    "output": "The indicators of Voice Phishing (CAPEC ID: 656) are: You receive a call from an entity that you are not even a customer of prompting you to log into your account.\n* You receive any call that requests you provide sensitive information.\n* You are redirected to a website that instructs you to call the number on-screen to address the call-to-action.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "You receive a call from an entity that you are not even a customer of prompting you to log into your account.",
        "You receive any call that requests you provide sensitive information.",
        "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action."
      ],
      "@Name": "Voice Phishing (CAPEC ID: 656)",
      "attack_ptrn": {
        "@ID": "656",
        "@Name": "Voice Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a \"cold call\" or by the victim if calling an illegitimate telephone number.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Vishing"
            },
            {
              "Term": "VoIP Phishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to provide sensitive information to the adversary.] An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Call the user a from a spoofed legitimate-looking telephone number."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.",
              "Technique": "Login to the legitimate site using another the victim's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Legitimate-looking telephone number(s) to initiate calls with victims"
        },
        "Indicators": {
          "Indicator": [
            "You receive a call from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any call that requests you provide sensitive information.",
            "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
        },
        "Example_Instances": {
          "Example": [
            "The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.",
            "An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary."
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-594"
            },
            {
              "@External_Reference_ID": "REF-595"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Client-side Injection-induced Buffer Overflow (CAPEC ID: 14)",
    "context": "",
    "output": "The indicators of Client-side Injection-induced Buffer Overflow (CAPEC ID: 14) are: An example of indicator is when the client software crashes after executing code downloaded from a hostile server.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "An example of indicator is when the client software crashes after executing code downloaded from a hostile server.",
      "@Name": "Client-side Injection-induced Buffer Overflow (CAPEC ID: 14)",
      "attack_ptrn": {
        "@ID": "14",
        "@Name": "Client-side Injection-induced Buffer Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": [
                "Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.",
                "Examine APIs of the client-side application and look for areas where a buffer overflow might be possible."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.",
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.",
              "Technique": [
                "If the adversary is targeting a local client-side application, they just need to use the service themselves.",
                "If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted client software communicates with an external server.",
            "The targeted client software has a buffer overflow vulnerability."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": "An example of indicator is when the client software crashes after executing code downloaded from a hostile server."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "The client software should not install untrusted code from a non-authenticated server.",
            "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.",
            "Perform input validation for length of buffer inputs.",
            "Use a language or compiler that performs automatic bounds checking.",
            "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Ensure all buffer uses are consistently bounds-checked.",
            "Use OS-level preventative functionality. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Authors often use <EMBED> tags in HTML documents. For example",
              "In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "<EMBED TYPE=\"audio/midi\" SRC=\"/path/file.mid\" AUTOSTART=\"true\">"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Eavesdropping on a Monitor (CAPEC ID: 699)",
    "context": "",
    "output": "Possible indicators: The target will not observe any indicators of the attack from the computer user\u2019s perspective. The only indication of this attack would be a visible SDR with antenna that can be seen in close proximity to a display cable which is not normally present. This requires that the target is aware of what SDRs look like and can recognize that it may be out of place.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "The target will not observe any indicators of the attack from the computer user\u2019s perspective. The only indication of this attack would be a visible SDR with antenna that can be seen in close proximity to a display cable which is not normally present. This requires that the target is aware of what SDRs look like and can recognize that it may be out of place.",
      "@Name": "Eavesdropping on a Monitor (CAPEC ID: 699)",
      "attack_ptrn": {
        "@ID": "699",
        "@Name": "Eavesdropping on a Monitor",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
        "Extended_Description": {
          "xhtml:p": [
            "This attack gives the adversary the ability to view an external monitor with an insignificant delay. There is also no indicator of compromise from the victim visible on the monitor.",
            "The eavesdrop is possible due to a signal leakage, that is produced at different points of the connection, including the source port, the connection between the cable and PC, the cable itself, and the connection between the cable and the monitor. That signal leakage can be captured near any of the leak points, but also in a near location, like the next room or a few meters away, using an SDR (Software-defined Radio) device and the correspondent software, that process and interpret the signal to show attackers what the monitor is displaying.",
            "From the victim\u2019s point of view, this specified attack might cause a high risk, and from the other hand, from the attacker\u2019s point of view, the attack is excellent, since the specified attack method can be used without investing too much effort or require too many skills, as long as the right attack tool is in right place, this allows attackers to completely compromise the confidentiality of the data; also giving the attacker the advantage of being undetectable by not only traditional security products but also from bug sweep because the SDR device is acting in passive mode."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "651"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey Target] The adversary surveys the target location, looking for exposed display cables and locations to hide an SDR. This also includes looking for display cables or monitors placed close to a wall, where the SDR can be in range while behind the wall. The adversary also attempts to discover the resolution and refresh rate of the targeted display."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find target using SDR] The adversary sets up an SDR near the target display cable or monitor. They use the SDR software to locate the corresponding frequency of the display cable. This is done by looking for interference peaks that change depending on what the screen is showing. The adversary notes down the possible frequencies of unintentional emission.",
              "Technique": "An adversary can make use of many different commercially available SDR devices which are easy to setup such as a HackRF, Ubertooth, RTL-SDR, and many others."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Visualize Monitor Image] Once the SDR software has been used to identify the target, the adversary will record the transmissions and visualize the monitor image using these transmissions, which allows them to eavesdrop on the information visible on the monitor.",
              "Technique": "The TempestSDR software can be used in conjunction an SDR device to visualize the monitor image. The adversary will specify the known monitor resolution and refresh rate, or if those are not known they can use the provided auto-correlation graphs to help predict these values. The adversary will then try the different frequencies recorded from the experiment phase, looking for a viewing monitor display. Low pass filters and gain can be manipulated to make the display image clearer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Victim should use an external monitor device",
            "Physical access to the target location and devices"
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked"
            },
            {
              "@Level": "Low",
              "#text": "Understanding of computing hardware, to identify the video cable and video ports"
            }
          ]
        },
        "Resources_Required": {
          "Resource": [
            "SDR device set with the correspondent antenna",
            "Computer with SDR Software"
          ]
        },
        "Indicators": {
          "Indicator": "The target will not observe any indicators of the attack from the computer user\u2019s perspective. The only indication of this attack would be a visible SDR with antenna that can be seen in close proximity to a display cable which is not normally present. This requires that the target is aware of what SDRs look like and can recognize that it may be out of place."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.",
            "Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.",
            "Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).",
            "Implement: Use wireless technologies to connect to external display devices."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1300"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-744"
            },
            {
              "@External_Reference_ID": "REF-745"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "You Wu (\u5434\u5fe7), Miguel Ivan Fernandez (\u4f0a\u4e07), Qingzhe Jiang (\u848b\u9752\u5586)",
            "Submission_Organization": "Lenovo",
            "Submission_Date": "2023-01-24"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - XML Injection (CAPEC ID: 250)",
    "context": "",
    "output": "Too many exceptions generated by the application as a result of malformed queries",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Too many exceptions generated by the application as a result of malformed queries",
      "@Name": "XML Injection (CAPEC ID: 250)",
      "attack_ptrn": {
        "@ID": "250",
        "@Name": "XML Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",
        "Likelihood_Of_Attack": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries",
              "Technique": [
                "Use an automated tool to record all instances of user-controllable input used to contruct XML queries.",
                "Use a browser to manually explore the website and analyze how the application processes inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.",
              "Technique": "Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.",
              "Technique": "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "XML queries used to process user input and retrieve information stored in XML documents",
            "User-controllable input not properly sanitized"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many exceptions generated by the application as a result of malformed queries"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "91"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "23",
            "Entry_Name": "XML Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - Fuzzing (CAPEC ID: 28)",
    "context": "",
    "output": "A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP.",
      "@Name": "Fuzzing (CAPEC ID: 28)",
      "attack_ptrn": {
        "@ID": "28",
        "@Name": "Fuzzing",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.",
              "Technique": [
                "Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.",
                "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
                "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
              "Technique": [
                "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
                "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.",
              "Technique": [
                "Identify and embed shell code for the target system.",
                "Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)",
                "Induce denial of service by exploiting resource leaks or bad error handling."
              ]
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "There is a wide variety of fuzzing tools available."
          }
        },
        "Resources_Required": {
          "Resource": "Fuzzing tools."
        },
        "Indicators": {
          "Indicator": "A lot of invalid data is fed to the system. Data that cannot have been generated through a legitimate transaction/request. Data is coming into the system within a short period of time and potentially from the same IP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Alter Execution Logic"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.",
            "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior."
          ]
        },
        "Example_Instances": {
          "Example": "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Overflow Buffers (CAPEC ID: 100)",
    "context": "",
    "output": "Possible indicators: An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist.",
      "@Name": "Overflow Buffers (CAPEC ID: 100)",
      "attack_ptrn": {
        "@ID": "100",
        "@Name": "Overflow Buffers",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "123"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Targeted software performs buffer operations.",
            "Targeted software inadequately performs bounds-checking on buffer operations.",
            "Adversary has the capability to influence the input to buffer operations."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content."
            },
            {
              "@Level": "High",
              "#text": "In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Detecting and exploiting a buffer overflow does not require any resources beyond knowledge of and access to the target system."
        },
        "Indicators": {
          "Indicator": "An attack designed to leverage a buffer overflow and redirect execution as per the adversary's bidding is fairly difficult to detect. An attack aimed solely at bringing the system down is usually preceded by a barrage of long inputs that make no sense. In either case, it is likely that the adversary would have resorted to a few hit-or-miss attempts that will be recorded in the system event logs, if they exist."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use a language or compiler that performs automatic bounds checking.",
            "Use secure functions not vulnerable to buffer overflow.",
            "If you have to use dangerous functions, make sure that you do boundary checking.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Use OS-level preventative functionality. Not a complete solution.",
            "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The most straightforward example is an application that reads in input from the user and stores it in an internal buffer but does not check that the size of the input data is less than or equal to the size of the buffer. If the user enters excessive length data, the buffer may overflow leading to the application crashing, or worse, enabling the user to cause execution of injected code.",
            "Many web servers enforce security in web applications through the use of filter plugins. An example is the SiteMinder plugin used for authentication. An overflow in such a plugin, possibly through a long URL or redirect parameter, can allow an adversary not only to bypass the security checks but also execute arbitrary code on the target web server in the context of the user that runs the web server process."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "131"
            },
            {
              "@CWE_ID": "129"
            },
            {
              "@CWE_ID": "805"
            },
            {
              "@CWE_ID": "680"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "07",
              "Entry_Name": "Buffer Overflow"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Buffer overflow attack"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-620",
            "@Section": "Buffer Overflow"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Indicators-Warnings_of_Attack, Probing_Techniques, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Brute Force (CAPEC ID: 112)",
    "context": "",
    "output": "Yes. to detect the attack pattern Brute Force (CAPEC ID: 112), you can look at the following indicator: Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.\n- Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.\n- If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.",
        "Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.",
        "If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing."
      ],
      "@Name": "Brute Force (CAPEC ID: 112)",
      "attack_ptrn": {
        "@ID": "112",
        "@Name": "Brute Force",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.",
        "Extended_Description": {
          "xhtml:p": "Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information."
        },
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.",
              "Technique": "Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded."
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.",
              "Technique": [
                "If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)",
                "If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.",
                "If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.",
                "Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret."
              ]
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords)."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. Ultimately, the speed with which an attacker discovers a secret is directly proportional to the computational resources the attacker has at their disposal. This attack method is resource expensive: having large amounts of computational power do not guarantee timely success, but having only minimal resources makes the problem intractable against all but the weakest secret selection procedures."
        },
        "Indicators": {
          "Indicator": [
            "Repeated submissions of incorrect secret values may indicate a brute force attack. For example, repeated bad passwords when accessing user accounts or repeated queries to databases using non-existent keys.",
            "Attempts to download files protected by secrets (usually using encryption) may be a precursor to an offline attack to break the file's encryption and read its contents. This is especially significant if the file itself contains other secret values, such as password files.",
            "If the attacker is able to perform the checking offline then there will likely be no indication that an attack is ongoing."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
            "Use a secret space that is well known and with no known patterns that may reduce functional size.",
            "Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "330"
            },
            {
              "@CWE_ID": "326"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1110",
              "Entry_Name": "Brute Force"
            },
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "11",
              "Entry_Name": "Brute Force"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Brute force attack"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Oversized Serialized Data Payloads (CAPEC ID: 231)",
    "context": "",
    "output": "Possible indicators: Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code.",
      "@Name": "Oversized Serialized Data Payloads (CAPEC ID: 231)",
      "attack_ptrn": {
        "@ID": "231",
        "@Name": "Oversized Serialized Data Payloads",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.",
        "Extended_Description": {
          "xhtml:p": "Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "XML Denial of Service (XML DoS)"
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "130",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An application uses an parser for serialized data to perform transformation on user-controllable data.",
            "An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Denial of service"
            },
            {
              "@Level": "High",
              "#text": "Arbitrary code execution"
            }
          ]
        },
        "Indicators": {
          "Indicator": "Bad data is passed to the serialized data parser (possibly repeatedly), possibly making it crash or execute arbitrary code."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.",
            "Perform validation on canonical data.",
            "Pick a robust implementation of the serialized data parser.",
            "Validate data against a valid schema or DTD prior to parsing."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "112"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "674"
            },
            {
              "@CWE_ID": "770"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-89",
            "@Section": "What is an XML Parser Attack?"
          }
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Other",
              "#text": "In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89]."
            },
            {
              "@Type": "Other",
              "#text": "The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Alternate_Terms, Description, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Indicators, Mitigations, Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-07-30",
            "#text": "XML Oversized Payloads"
          }
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - XPath Injection (CAPEC ID: 83)",
    "context": "",
    "output": "Too many exceptions generated by the application as a result of malformed XPath queries",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Too many exceptions generated by the application as a result of malformed XPath queries",
      "@Name": "XPath Injection (CAPEC ID: 83)",
      "attack_ptrn": {
        "@ID": "83",
        "@Name": "XPath Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "250"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.",
              "Technique": [
                "Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.",
                "Use a browser to manually explore the website and analyze how the application processes inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.",
              "Technique": [
                "Use an automated tool automatically probe the inputs for XPath weaknesses.",
                "Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.",
              "Technique": [
                "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.",
                "Use a combination of single quote (') and boolean expressions such as \"or 1=1\" to manipulate XPath logic.",
                "Use XPath functions in the malicious content such as \"string-length\", \"substring\", or \"count\" to gain information about the XML document structure being used."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "XPath queries used to retrieve information stored in XML documents",
            "User-controllable input not properly sanitized before being used as part of XPath queries"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection"
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many exceptions generated by the application as a result of malformed XPath queries"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.",
            "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "Consider an application that uses an XML database to authenticate its users. The application retrieves the user name and password from a request and forms an XPath expression to query the database. An attacker can successfully bypass authentication and login without valid credentials through XPath Injection. This can be achieved by injecting the query to the XML database with XPath syntax that causes the authentication check to fail. Improper validation of user-controllable input and use of a non-parameterized XPath expression enable the attacker to inject an XPath expression that causes authentication bypass."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "91"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "39",
              "Entry_Name": "XPath Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Blind XPath Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "XPATH Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-611",
            "@Section": "Testing for XPATH Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Password Recovery Exploitation (CAPEC ID: 50)",
    "context": "",
    "output": "The indicators of Password Recovery Exploitation (CAPEC ID: 50) are: Many incorrect attempts to answer the security question.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Many incorrect attempts to answer the security question.",
      "@Name": "Password Recovery Exploitation (CAPEC ID: 50)",
      "attack_ptrn": {
        "@ID": "50",
        "@Name": "Password Recovery Exploitation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.",
        "Extended_Description": {
          "xhtml:p": "Most of them use only one security question. For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "212",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Understand the password recovery mechanism and how it works."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system allows users to recover their passwords and gain access back into the system.",
            "Password recovery mechanism has been designed or implemented insecurely.",
            "Password recovery mechanism relies only on something the user knows and not something the user has.",
            "No third party intervention is required to use the password recovery mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Brute force attack"
            },
            {
              "@Level": "Medium",
              "#text": "Social engineering and more sophisticated technical attacks."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "For a brute force attack one would need a machine with sufficient CPU, RAM and HD."
        },
        "Indicators": {
          "Indicator": "Many incorrect attempts to answer the security question."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.",
            "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.",
            "Ensure that your password recovery functionality is not vulnerable to an injection style attack."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.",
            {
              "xhtml:p": [
                "phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL.",
                "A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module.",
                "The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression:",
                "A bug in the implementation of eregi() allows to pass additional character using a null byte \"\\0\". Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character \" ' \" to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible:",
                "This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database.",
                "Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "(\\.[a-z]{2,3})$\", $email)){"
                  },
                  "#text": "if(!eregi(\"^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "email='$email' \");"
                  },
                  "#text": "$get_info=mysql_query(\"select * from banneruser where"
                }
              ],
              "#text": "See also: CVE-2006-3013"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "640"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-429"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Exploiting Multiple Input Interpretation Layers (CAPEC ID: 43)",
    "context": "",
    "output": "Yes. to detect the attack pattern Exploiting Multiple Input Interpretation Layers (CAPEC ID: 43), you can look at the following indicator: Control characters are being detected by the filters repeatedly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Control characters are being detected by the filters repeatedly.",
      "@Name": "Exploiting Multiple Input Interpretation Layers (CAPEC ID: 43)",
      "attack_ptrn": {
        "@ID": "43",
        "@Name": "Exploiting Multiple Input Interpretation Layers",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.",
              "Technique": "While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.",
              "Technique": [
                "Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\\'",
                "Determine whether URL encoding is accepted by the application/system.",
                "Determine whether UTF-8 encoding is accepted by the application/system.",
                "Determine whether UTF-16 encoding is accepted by the application/system.",
                "Determine if any other encodings are accepted by the application/system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.",
              "Technique": [
                "Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: \"\\\\\\.\". With two parsing layers, this may get converted to \"\\.\" after the first parsing layer, and then, to \".\" after the second. If the input validation layer is between the two parsing layers, then \"\\\\\\.\\\\\\.\" might pass a test for \"..\" but still get converted to \"..\" afterwards. This may enable directory traversal attacks.",
                "Combine multiple encodings and observe the effects. For example, the attacker might encode \".\" as \"\\.\", and then, encode \"\\.\" as \"&#92;&#46;\", and then, encode that using URL encoding to \"%26%2392%3B%26%2346%3B\""
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.",
              "Technique": [
                "Gain access to sensitive files.",
                "Perform command injection.",
                "Perform SQL injection.",
                "Perform XSS attacks."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "User input is used to construct a command to be executed on the target system or as part of the file name.",
            "Multiple parser passes are performed on the data supplied by the user."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters."
          }
        },
        "Indicators": {
          "Indicator": "Control characters are being detected by the filters repeatedly."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
            "Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to \"double escape\" the backslash. In some cases, a quadruple escape is necessary.",
              "This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string.",
              "[REF-1]"
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "xhtml:br": [
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
              ],
              "#text": "Original String: C:\\\\\\\\winnt\\\\\\\\system32\\\\\\\\cmd.exe /c\n                  <parsing layer>\n                  Interim String: C:\\\\winnt\\\\system32\\\\cmd.exe /c\n                  <parsing layer>\n                  Final String: C:\\winnt\\system32\\cmd.exe /c"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "179"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "183"
            },
            {
              "@CWE_ID": "77"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Use of Known Operating System Credentials (CAPEC ID: 653)",
    "context": "",
    "output": "Possible indicators: Authentication attempts use credentials that have been used previously by the account in question.\n- Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.\n- Data is being transferred and/or removed from systems/applications within the network.\n- Suspicious or Malicious software is downloaded/installed on systems within the domain.\n- Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "Authentication attempts use credentials that have been used previously by the account in question.",
        "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
        "Data is being transferred and/or removed from systems/applications within the network.",
        "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
        "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
      ],
      "@Name": "Use of Known Operating System Credentials (CAPEC ID: 653)",
      "attack_ptrn": {
        "@ID": "653",
        "@Name": "Use of Known Operating System Credentials",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",
        "Extended_Description": {
          "xhtml:p": "This attack can be extremely harmful when the operating system credentials used are for a root or admin user. Once an adversary gains access using credentials with elevated privileges, they are free to alter important system files which can effect other users who may use the system or other users on the system's network."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.",
              "Technique": [
                "An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.",
                "An adversary gains access to a system/files and exfiltrates password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.",
              "Technique": "Manually or automatically enter each credential through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.",
            "The system/application does not have a sound password policy that is being enforced.",
            "The system/application does not implement an effective password throttling mechanism.",
            "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "A list of known credentials for the targeted domain.",
            "A custom script that leverages a credential list to launch an attack."
          ]
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with a user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credentials from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
            "Mimikatz, a post-exploitation Windows credential harvester, can be used to gather and exploit Windows credentials. This malware has been used in several known cyberattacks, such as the Petya Ransomeware attacks. [REF-576]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-575"
            },
            {
              "@External_Reference_ID": "REF-576"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name, Description, Execution_Flow, Extended_Description, Mitigations, Prerequisites, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2022-09-29",
            "#text": "Use of Known Windows Credentials"
          }
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Password Brute Forcing (CAPEC ID: 49)",
    "context": "",
    "output": "Yes. to detect the attack pattern Password Brute Forcing (CAPEC ID: 49), you can look at the following indicator: Many incorrect login attempts are detected by the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Many incorrect login attempts are detected by the system.",
      "@Name": "Password Brute Forcing (CAPEC ID: 49)",
      "attack_ptrn": {
        "@ID": "49",
        "@Name": "Password Brute Forcing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",
        "Extended_Description": {
          "xhtml:p": "A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "112"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.",
              "Technique": [
                "Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
                "Perform an offline dictionary attack or a rainbow table attack against a known password hash."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs to know a username to target.",
            "The system uses password based authentication as the one factor authentication mechanism.",
            "An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A brute force attack is very straightforward. A variety of password cracking tools are widely available."
          }
        },
        "Resources_Required": {
          "Resource": "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge)."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger.",
                "An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster."
              ]
            },
            "A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "257"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.001",
            "Entry_Name": "Brute Force:Password Guessing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Phishing (CAPEC ID: 98), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.\nYou receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.",
        "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information."
      ],
      "@Name": "Phishing (CAPEC ID: 98)",
      "attack_ptrn": {
        "@ID": "98",
        "@Name": "Phishing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "151",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "515"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "611"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "630"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "631"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "632"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": [
                "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
                "Place phishing link in post to online forum."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.",
            "An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Some web development tools to put up a fake website."
        },
        "Indicators": {
          "Indicator": [
            "You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": [
            "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.",
            "An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566",
              "Entry_Name": "Phishing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598",
              "Entry_Name": "Phishing for Information"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-656"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Mobile Phishing (CAPEC ID: 164)",
    "context": "",
    "output": "The indicators of Mobile Phishing (CAPEC ID: 164) are: You receive a text message from an entity that you are not even a customer of prompting you to log into your account.\n- You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
        "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials."
      ],
      "@Name": "Mobile Phishing (CAPEC ID: 164)",
      "attack_ptrn": {
        "@ID": "164",
        "@Name": "Mobile Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Smishing"
            },
            {
              "Term": "MobPhishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs mobile phone numbers to initiate contact with the victim.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack."
        },
        "Indicators": {
          "Indicator": [
            "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": "The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-590"
            },
            {
              "@External_Reference_ID": "REF-591"
            },
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-593"
            },
            {
              "@External_Reference_ID": "REF-696"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Alternate_Terms"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-01-09",
            "#text": "Mobile Phishing (aka MobPhishing)"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Credential Prompt Impersonation (CAPEC ID: 654)",
    "context": "",
    "output": "The indicators of Credential Prompt Impersonation (CAPEC ID: 654) are: Credential prompts that appear illegitimate or unexpected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Credential prompts that appear illegitimate or unexpected.",
      "@Name": "Credential Prompt Impersonation (CAPEC ID: 654)",
      "attack_ptrn": {
        "@ID": "654",
        "@Name": "Credential Prompt Impersonation",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",
        "Extended_Description": {
          "xhtml:p": [
            "The adversary may monitor the task list maintained by the operating system and wait for a specific legitimate credential prompt to become active. Once the prompt is detected, the adversary launches a new credential prompt in the foreground that mimics the user interface of the legitimate credential prompt. At this point, the user thinks that they are interacting with the legitimate credential prompt, but instead they are interacting with the malicious credential prompt.",
            "A second approach involves the adversary impersonating an unexpected credential prompt, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process or commonly used application (e.g., email reader) requires authentication for some purpose. The user, believing they are interacting with a legitimate credential prompt, enters their credentials which the adversary then leverages for nefarious purposes. The ultimate goal of this attack is to obtain sensitive information (e.g., credentials) from the user."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "504"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.",
              "Technique": "Determine what tasks prompt a user for their credentials."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.",
              "Technique": "Prompt a user for their credentials, while making the user believe the credential request is legitimate."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary must already have access to the target system via some means.",
            "A legitimate task must exist that an adversary can impersonate to glean credentials."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult."
          }
        },
        "Resources_Required": {
          "Resource": [
            "Malware or some other means to initially comprise the target system.",
            "Additional malware to impersonate a legitimate credential prompt."
          ]
        },
        "Indicators": {
          "Indicator": "Credential prompts that appear illegitimate or unexpected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Authentication"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
        },
        "Example_Instances": {
          "Example": [
            "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
            "An adversary randomly prompts a user to enter their system credentials, tricking the user into believing that a background process requires the credentials to function. The adversary can then use these gleaned credentials to execute additional attacks or obtain data."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1056",
              "Entry_Name": "Input Capture"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1548.004",
              "Entry_Name": "Abuse Elevation Control Mechanism: Elevated Execution with Prompt"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Load Value Injection (CAPEC ID: 696)",
    "context": "",
    "output": "Yes. to detect the attack pattern Load Value Injection (CAPEC ID: 696), you can look at the following indicator: File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution",
      "@Name": "Load Value Injection (CAPEC ID: 696)",
      "attack_ptrn": {
        "@ID": "696",
        "@Name": "Load Value Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
        "Extended_Description": "This attack is a mix of techniques used in traditional Meltdown and Spectre attacks. It uses microarchitectural data leakage combined with code gadget abuse. Intel has identified that this attack is not applicable in scenarios where the OS and the VMM (Virtual Memory Manager) are both trusted. Because of this, Intel SGX is a prime target for this attack because it assumes that the OS or VMM may be malicious.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "663"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.",
              "Technique": "Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Fill microarchitectural buffer with controlled value] The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.",
              "Technique": [
                "The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access",
                "The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Set up instruction to page fault or microcode assist] The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.",
              "Technique": [
                "When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists.",
                "When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the \u201cmprotect\u201d system call",
                "An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization",
                "When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Operate on adversary-controlled data] Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.",
              "Technique": [
                "Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget.",
                "Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.",
            "The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loads",
            "The adversary needs the ability to induce page faults or microcode assists on the target system.",
            "Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations."
            },
            {
              "@Level": "High",
              "#text": "Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage."
            },
            {
              "@Level": "High",
              "#text": "The ability to provoke faulting or assisted loads in legitimate execution."
            }
          ]
        },
        "Indicators": {
          "Indicator": "File Signatures for Malicious Software capable of abusing Transient Instruction Set Execution"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Access Control",
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.",
            "Insert explicit \u201clfence\u201d speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1342"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-735"
            },
            {
              "@External_Reference_ID": "REF-736"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: HTTP Response Smuggling (CAPEC ID: 273)",
    "context": "",
    "output": "The indicators of HTTP Response Smuggling (CAPEC ID: 273) are: Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "@Name": "HTTP Response Smuggling (CAPEC ID: 273)",
      "attack_ptrn": {
        "@ID": "273",
        "@Name": "HTTP Response Smuggling",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "In the maliciously manipulated HTTP response, an adversary can add duplicate header fields that HTTP agents interpret as belonging to separate responses.",
            "The combined HTTP response ends up being parsed or interpreted as two or more HTTP responses by the targeted client HTTP agent. This allows malicious HTTP responses to bypass security controls. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.",
            "This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]",
            "Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",
            {
              "xhtml:i": "client agent (e.g., web browser)",
              "#text": "This differs from CAPEC-33 HTTP Request Smuggling, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Smuggling is an attempt to compromise a."
            },
            "HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "HTTP Desync",
            "Description": "Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path."
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "33"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent.",
                    "From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent.",
                      "For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details."
                    ]
                  }
                },
                {
                  "xhtml:p": [
                    "Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent.",
                    "Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers."
                  ]
                },
                "Monitor HTTP traffic using a tool such as a Network Protocol Analyzer."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
            "Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.",
            "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages."
        },
        "Indicators": {
          "Indicator": "Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
            "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
            {
              "xhtml:ul": {
                "xhtml:li": [
                  "Headers with no space before the value \u201cchunked\u201d",
                  "Headers with extra spaces",
                  "Headers beginning with trailing characters",
                  "Headers providing a value \u201cchunk\u201d instead of \u201cchunked\u201d (the server normalizes this as chunked encoding)",
                  "Headers with multiple spaces before the value \u201cchunked\u201d",
                  "Headers with quoted values (whether single or double quotations)",
                  "Headers with CRLF characters before the value \u201cchunked\u201d",
                  "Values with invalid characters"
                ]
              },
              "#text": "Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:"
            },
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666"
            },
            {
              "xhtml:p": "Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "436"
            },
            {
              "@CWE_ID": "444"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "27",
            "Entry_Name": "HTTP Response Smuggling"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-38"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-675"
            },
            {
              "@External_Reference_ID": "REF-676"
            },
            {
              "@External_Reference_ID": "REF-677"
            },
            {
              "@External_Reference_ID": "REF-678"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Likelihood_Of_Attack, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Resources_Required, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Alternate_Terms, Extended_Description, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: Using Slashes in Alternate Encoding (CAPEC ID: 79)",
    "context": "",
    "output": "The indicators of Using Slashes in Alternate Encoding (CAPEC ID: 79) are: If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.\n* Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.\n* An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
        "Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.",
        "An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity."
      ],
      "@Name": "Using Slashes in Alternate Encoding (CAPEC ID: 79)",
      "attack_ptrn": {
        "@ID": "79",
        "@Name": "Using Slashes in Alternate Encoding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.",
              "Technique": [
                "Try both backslash and forward slash characters",
                "Try different encodings for slash characters such as %5C"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application server accepts paths to locate resources.",
            "The application server does insufficient input data validation on the resource path requested by the user.",
            "The access right to resources are not set properly."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can try variation of the slashes characters."
            },
            {
              "@Level": "Medium",
              "#text": "An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "If the first path decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
            "Traffic filtering with IDS (or proxy) can detect request with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.",
            "An adversary can use a fuzzer in order to probe for a UTF-8 encoding vulnerability. The fuzzer should generate suspicious network activity."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.",
            "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
            "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
            "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
            "Test your path decoding process against malicious input.",
            "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:b": "Attack Example: Slashes in Alternate Encodings",
            "xhtml:p": [
              "The two following requests are equivalent on most Web servers:",
              "is equivalent to",
              "Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings",
              "where %5C is equivalent to the \\ character."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://target server/some_directory\\..\\..\\..\\winnt"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://target server/some_directory/../../../winnt"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://target server/some_directory\\..%5C..%5C..\\winnt"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "180"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "22"
            },
            {
              "@CWE_ID": "185"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-525"
            },
            {
              "@External_Reference_ID": "REF-495"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Indicators, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow, Indicators, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: URL Encoding (CAPEC ID: 72), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.\n* Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
        "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks."
      ],
      "@Name": "URL Encoding (CAPEC ID: 72)",
      "attack_ptrn": {
        "@ID": "72",
        "@Name": "URL Encoding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
        "Extended_Description": {
          "xhtml:p": [
            "A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE).",
            "For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An adversary will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL.",
            "It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The adversary could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an adversary may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section)."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.",
              "Technique": "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the \"Explore\" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.",
              "Technique": [
                "Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.",
                "Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject special characters into URL parameters] Using the information gathered in the \"Experiment\" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application should accepts and decodes URL input.",
            "The application performs insufficient filtering/canonicalization on the URLs."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can try special characters in the URL and bypass the URL validation."
            },
            {
              "@Level": "Medium",
              "#text": "The adversary may write a script to defeat the input filtering mechanism."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
            "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Refer to the RFCs to safely decode URL.",
            "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
            "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
            "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:b": "URL Encodings in IceCast MP3 Server.",
              "xhtml:p": [
                "The following type of encoded string has been known traverse directories against the IceCast MP3 server9:",
                "or using",
                "The control character \"..\" can be used by an adversary to escape the document root."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "http://[targethost]:8000/somefile/%2E%2E/target.mp3"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"/%25%25/\" instead of \"/../\"."
                }
              ],
              "#text": "See also: CVE-2001-0784"
            },
            {
              "xhtml:b": "Cross-Site Scripting",
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:b": "URL-Encoded attack:",
                  "#text": "http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "xhtml:b": "HTML execution:",
                  "#text": "<script src=\"http://www.badplace.com/nasty.js\"></script>"
                }
              ],
              "xhtml:p": "[REF-495]"
            },
            {
              "xhtml:b": "SQL Injection",
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:b": "Original database query in the example file - \"login.asp\":",
                  "#text": "SQLQuery = \"SELECT preferences FROM logintable WHERE userid='\" & Request.QueryString(\"userid\") & \"' AND password='\" & Request.QueryString(\"password\") & \"';\""
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:b": "URL-encoded attack:",
                  "#text": "http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "xhtml:b": "Executed database query:",
                  "#text": "SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d';"
                }
              ],
              "xhtml:p": "From \"URL encoded attacks\", by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html"
            },
            {
              "xhtml:b": "Combined Encodings CesarFTP",
              "xhtml:p": [
                "Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.",
                "An adversary could provide a URL that included a string like",
                "This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "/...%5C/"
              },
              "#text": "See also: CVE-2001-1335"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "177"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-495"
            },
            {
              "@External_Reference_ID": "REF-496"
            },
            {
              "@External_Reference_ID": "REF-497"
            },
            {
              "@External_Reference_ID": "REF-498"
            },
            {
              "@External_Reference_ID": "REF-499"
            },
            {
              "@External_Reference_ID": "REF-500",
              "@Section": "5.11.4. Validating Hypertext Links (URIs/URLs)"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Indicators, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Session Fixation (CAPEC ID: 61), give me an example of indicator for this pattern",
    "context": "",
    "output": "Sure. Indicators: There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.\n- A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
        "A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect."
      ],
      "@Name": "Session Fixation (CAPEC ID: 61)",
      "attack_ptrn": {
        "@ID": "61",
        "@Name": "Session Fixation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.",
              "Technique": [
                "The attacker chooses a predefined identifier that they know.",
                "The attacker creates a trap session for the victim."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.",
              "Technique": [
                "Attackers can put links on web sites (such as forums, blogs, or comment forms).",
                "Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.",
                "Attackers can email attack URLs to potential victims through spam and phishing techniques."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.",
              "Technique": [
                "The attacker loads the predefined session ID into their browser and browses to protected data or functionality.",
                "The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Session identifiers that remain unchanged when the privilege levels change.",
            "Permissive session management mechanism that accepts random user-generated session identifiers",
            "Predictable session identifiers"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": [
            "There are no indicators for the server since a fixated session identifier is similar to an ordinarily generated one. However, too many invalid sessions due to invalid session identifiers is a potential warning.",
            "A client can be suspicious if a received link contains preset session identifiers. However, this depends on the client's knowledge of such an issue. Also, fixation through Cross Site Scripting or hidden form fields is usually difficult to detect."
          ]
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.",
            "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
            "Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Consider a banking application that issues a session identifier in the URL to a user before login, and uses the same identifier to identify the customer following successful authentication. An attacker can easily leverage session fixation to access a victim's account by having the victim click on a forged link that contains a valid session identifier from a trapped session setup by the attacker. Once the victim is authenticated, the attacker can take over the session and continue with the same levels of privilege as the victim.",
            "An attacker can hijack user sessions, bypass authentication controls and possibly gain administrative privilege by fixating the session of a user authenticating to the Management Console on certain versions of Macromedia JRun 4.0. This can be achieved by setting the session identifier in the user's browser and having the user authenticate to the Management Console. Session fixation is possible since the application server does not regenerate session identifiers when there is a change in the privilege levels. See also: CVE-2004-2182"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "732"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "37",
              "Entry_Name": "Session Fixation"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Session fixation"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-601",
              "@Section": "Testing for Session Fixation"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: HTTP Request Splitting (CAPEC ID: 105)",
    "context": "",
    "output": "The indicators of HTTP Request Splitting (CAPEC ID: 105) are: Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool.",
      "@Name": "HTTP Request Splitting (CAPEC ID: 105)",
      "attack_ptrn": {
        "@ID": "105",
        "@Name": "HTTP Request Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "This entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "back-end HTTP agent",
              "#text": "This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise avia HTTP Request messages."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "34"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses."
        },
        "Indicators": {
          "Indicator": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "24",
            "Entry_Name": "HTTP Request Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-679"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Are there any indicators for attack: Using Slashes and URL Encoding Combined to Bypass Validation Logic (CAPEC ID: 64)",
    "context": "",
    "output": "Yes. to detect the attack pattern Using Slashes and URL Encoding Combined to Bypass Validation Logic (CAPEC ID: 64), you can look at the following indicator: If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.\nTraffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
        "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks."
      ],
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic (CAPEC ID: 64)",
      "attack_ptrn": {
        "@ID": "64",
        "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "The attacker accesses the server using a specific URL."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "The attacker crafts a malicious URL string request and sends it to the server."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application accepts and decodes URL string request.",
            "The application performs insufficient filtering/canonicalization on the URLs."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An attacker can try special characters in the URL and bypass the URL validation."
            },
            {
              "@Level": "Medium",
              "#text": "The attacker may write a script to defeat the input filtering mechanism."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
            "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
            "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
            "Refer to the RFCs to safely decode URL.",
            "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
            "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Attack Example: Combined Encodings CesarFTP",
              "Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.",
              "An attacker could provide a URL that included a string like",
              "This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "/...%5C/"
            },
            "#text": "See also: CVE-2001-1335"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "177"
            },
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "22"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "707"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-495"
            },
            {
              "@External_Reference_ID": "REF-496"
            },
            {
              "@External_Reference_ID": "REF-497"
            },
            {
              "@External_Reference_ID": "REF-498",
              "@Section": "URL Encoding Reference"
            },
            {
              "@External_Reference_ID": "REF-499"
            },
            {
              "@External_Reference_ID": "REF-500",
              "@Section": "5.11.4. Validating Hypertext Links (URIs/URLs)"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Obfuscation_Techniques, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Indicators, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I detect attack pattern: XML Flood (CAPEC ID: 528)",
    "context": "",
    "output": "The indicators of XML Flood (CAPEC ID: 528) are: A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users.",
      "@Name": "XML Flood (CAPEC ID: 528)",
      "attack_ptrn": {
        "@ID": "528",
        "@Name": "XML Flood",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",
        "Extended_Description": {
          "xhtml:p": "XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends."
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "XML Denial of Service (XML DoS)"
          }
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "125",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
              "Technique": [
                "Use an automated tool to record all instances of URLs to process XML requests.",
                "Use a browser to manually explore the website and analyze how the application processes XML requests."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
              "Technique": "Send a large number of crafted XML messages to the target URL."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must receive and process XML transactions.",
            "An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Denial of service"
          }
        },
        "Indicators": {
          "Indicator": "A large amount of data is passed to the XML parser possibly making it crash or otherwise unavailable to end users."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
            "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
          ]
        },
        "Example_Instances": {
          "Example": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "770"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499.002",
              "Entry_Name": "Endpoint Denial of Service:Service Exhaustion Flood"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1498.001",
              "Entry_Name": "Network Denial of Service:Direct Network Flood"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Related_Attack_Patterns, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Give me an indicator example for attack pattern - Task Impersonation (CAPEC ID: 504)",
    "context": "",
    "output": "Credential or permission elevation prompts that appear illegitimate or unexpected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": "Credential or permission elevation prompts that appear illegitimate or unexpected.",
      "@Name": "Task Impersonation (CAPEC ID: 504)",
      "attack_ptrn": {
        "@ID": "504",
        "@Name": "Task Impersonation",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",
        "Extended_Description": {
          "xhtml:p": [
            "When impersonating an expected task, the adversary monitors the task list maintained by the operating system and waits for a specific legitimate task to become active. Once the task is detected, the malicious application launches a new task in the foreground that mimics the user interface of the legitimate task. At this point, the user thinks that they are interacting with the legitimate task that they started, but instead they are interacting with the malicious application. Once the adversary's goal is reached, the malicious application can exit, leaving the original trusted application visible and the appearance that nothing out of the ordinary has occurred.",
            "A second approach entails the adversary impersonating an unexpected task, but one that may often be spawned by legitimate background processes. For example, an adversary may randomly impersonate a system credential prompt, implying that a background process requires authentication for some purpose. The user, believing they are interacting with a legitimate task, enters their credentials or authorizes the use of their stored credentials, which the adversary then leverages for nefarious purposes. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user, but may also be used to ride the user's privileges."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "173",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.",
              "Technique": [
                "Determine what tasks prompt a user for their credentials.",
                "Determine what tasks may prompt a user to authorize a process to execute with elevated privileges."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.",
              "Technique": [
                "Prompt a user for their credentials, while making the user believe the credential request is legitimate.",
                "Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary must already have access to the target system via some means.",
            "A legitimate task must exist that an adversary can impersonate to glean credentials.",
            "The user's privileges allow them to execute certain tasks with elevated privileges."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary has gained access to the target system, impersonating a task is trivial."
          }
        },
        "Resources_Required": {
          "Resource": [
            "Malware or some other means to initially comprise the target system.",
            "Additional malware to impersonate a legitimate task."
          ]
        },
        "Indicators": {
          "Indicator": "Credential or permission elevation prompts that appear illegitimate or unexpected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Authentication"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help."
        },
        "Example_Instances": {
          "Example": [
            "An adversary monitors the system task list for Microsoft Outlook in an attempt to determine when the application may prompt the user to enter their credentials to view encrypted email. Once the task is executed, the adversary impersonates the credential prompt to obtain the user's Microsoft Outlook encryption credentials. These credentials can then be leveraged by the adversary to read a user's encrypted email.",
            "An adversary prompts a user to authorize an elevation of privileges, implying that a background task needs additional permissions to execute. The user accepts the privilege elevation, allowing the adversary to execute additional malware or tasks with the user's privileges."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1036.004",
            "Entry_Name": "Masquerading: Masquerade Task or Service"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-434",
            "@Section": "4.1.2 Man-In-The-Middle"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Abstraction, @Status, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, Resources_Required, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the possible indicators of capec - Buffer Overflow via Symbolic Links (CAPEC ID: 45)",
    "context": "",
    "output": "Possible indicators: An adversary creating or modifying Symbolic links is a potential signal of attack in progress.\n- An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones.",
    "category": "CAPECFlan",
    "instruction_type": "capec_indicators",
    "parsed_raw_data": {
      "Indicators": [
        "An adversary creating or modifying Symbolic links is a potential signal of attack in progress.",
        "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones."
      ],
      "@Name": "Buffer Overflow via Symbolic Links (CAPEC ID: 45)",
      "attack_ptrn": {
        "@ID": "45",
        "@Name": "Buffer Overflow via Symbolic Links",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program that might load in certain files to memory."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary can create symbolic link on the target host.",
            "The target host does not perform correct boundary checking while consuming data from a resources."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "An adversary creating or modifying Symbolic links is a potential signal of attack in progress.",
            "An adversary deleting temporary files can also be a sign that the adversary is trying to replace legitimate resources with malicious ones."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.",
            "Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.",
            "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.",
            "Always check the size of the input data before copying to a buffer.",
            "Use a language or compiler that performs automatic bounds checking.",
            "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Use OS-level preventative functionality. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Indicators, Mitigations, Prerequisites, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  }
]