[
  {
    "instruction": "Which attack pattern are related to the attack pattern: Choosing Message Identifier",
    "context": "",
    "output": "The related attack patterns to Choosing Message Identifier are: Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: PeerOf\n\n\n- Name:Communication Channel Manipulation\nDescription: An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: PeerOf\n\n",
        "Name:Communication Channel Manipulation\nDescription: An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Choosing Message Identifier"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Hijacking a privileged process",
    "context": "",
    "output": "The related attack patterns to Hijacking a privileged process are: Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n\nName:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: CanFollow\n\n\nName:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: CanFollow\n\n\nName:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n",
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: CanFollow\n\n",
        "Name:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: CanFollow\n\n",
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Hijacking a privileged process"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XPath Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XPath Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Modification of Registry Run Keys.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n\nName:Capture Credentials via Keylogger\nDescription: An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.\nNature of relationship: CanPrecede\n\n\nName:Malware-Directed Internal Reconnaissance\nDescription: Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.\nNature of relationship: CanPrecede\n\n\nName:Peripheral Footprinting\nDescription: Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.\nNature of relationship: CanPrecede\n\n\nName:Remote Services with Stolen Credentials\nDescription: This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n",
        "Name:Capture Credentials via Keylogger\nDescription: An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.\nNature of relationship: CanPrecede\n\n",
        "Name:Malware-Directed Internal Reconnaissance\nDescription: Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.\nNature of relationship: CanPrecede\n\n",
        "Name:Peripheral Footprinting\nDescription: Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.\nNature of relationship: CanPrecede\n\n",
        "Name:Remote Services with Stolen Credentials\nDescription: This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Modification of Registry Run Keys"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cryptanalysis of Cellular Encryption",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Cryptanalysis\nDescription: Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cryptanalysis\nDescription: Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cryptanalysis of Cellular Encryption"
    }
  },
  {
    "instruction": "Given attack pattern: Evil Twin Wi-Fi Attack.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Evil Twin Wi-Fi Attack"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Passive OS Fingerprinting",
    "context": "",
    "output": "The related attack patterns to Passive OS Fingerprinting are: Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Passive OS Fingerprinting"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cross-Site Flashing",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cross-Site Flashing: Name:Flash Injection\nDescription: An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flash Injection\nDescription: An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross-Site Flashing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: BGP Route Disabling",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to BGP Route Disabling: Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "BGP Route Disabling"
    }
  },
  {
    "instruction": "Given attack pattern: Passing Local Filenames to Functions That Expect a URL.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Passing Local Filenames to Functions That Expect a URL"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Target Influence via Framing",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Target Influence via Framing: Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Framing"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Redirect Access to Libraries",
    "context": "",
    "output": "The related attack patterns to Redirect Access to Libraries are: Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: ChildOf\n\n\n- Name:Malicious Software Download\nDescription: An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: ChildOf\n\n",
        "Name:Malicious Software Download\nDescription: An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Redirect Access to Libraries"
    }
  },
  {
    "instruction": "Given attack pattern: Evercookie.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Evercookie"
    }
  },
  {
    "instruction": "Given attack pattern: Exponential Data Expansion.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exponential Data Expansion"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Double Encoding",
    "context": "",
    "output": "The related attack patterns to Double Encoding are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Double Encoding"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Escaping Virtualization",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Escaping Virtualization: Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Escaping Virtualization"
    }
  },
  {
    "instruction": "Given attack pattern: HTTP Response Smuggling.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n\n- Name:HTTP Request Smuggling\nDescription: An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n\n- Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n\n- Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n\n- Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n\n- Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n\n- Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\n- Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
        "Name:HTTP Request Smuggling\nDescription: An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n",
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n",
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "HTTP Response Smuggling"
    }
  },
  {
    "instruction": "Given attack pattern: Format String Injection.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Format String Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Adding a Space to a File Extension.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Adding a Space to a File Extension"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Target Influence via The Human Buffer Overflow",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via The Human Buffer Overflow"
    }
  },
  {
    "instruction": "Given attack pattern: MIME Conversion.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "MIME Conversion"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Counterfeit Websites",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n\nName:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Counterfeit Websites"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Targeted Malware",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Targeted Malware: Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: ChildOf\n\n\n* Name:Adversary in the Browser (AiTB)\nDescription: An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: ChildOf\n\n",
        "Name:Adversary in the Browser (AiTB)\nDescription: An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Targeted Malware"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to SQL Injection through SOAP Parameter Tampering",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n\n* Name:Command Line Execution through SQL Injection\nDescription: An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n",
        "Name:Command Line Execution through SQL Injection\nDescription: An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "SQL Injection through SOAP Parameter Tampering"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Overflow Variables and Tags",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n\nName:Buffer Overflow in an API Call\nDescription: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\nNature of relationship: PeerOf\n\n\nName:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
        "Name:Buffer Overflow in an API Call\nDescription: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\nNature of relationship: PeerOf\n\n",
        "Name:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Overflow Variables and Tags"
    }
  },
  {
    "instruction": "Given attack pattern: IMAP/SMTP Command Injection.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IMAP/SMTP Command Injection"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Manipulating Opaque Client-based Data Tokens",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating Opaque Client-based Data Tokens"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Using a Snap Gun Lock to Force a Lock",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Using a Snap Gun Lock to Force a Lock: Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using a Snap Gun Lock to Force a Lock"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Contaminate Resource",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Contaminate Resource: Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Contaminate Resource"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Using Slashes in Alternate Encoding",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Using Slashes in Alternate Encoding: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Pretexting via Delivery Person",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Pretexting via Delivery Person: Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Delivery Person"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Pull Data from System Resources",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pull Data from System Resources"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: SQL Injection",
    "context": "",
    "output": "The related attack patterns to SQL Injection are: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "SQL Injection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Using Unpublished Interfaces or Functionality",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Using Unpublished Interfaces or Functionality: Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Unpublished Interfaces or Functionality"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Navigation Remapping To Propagate Malicious Content",
    "context": "",
    "output": "The related attack patterns to Navigation Remapping To Propagate Malicious Content are: Name:Application API Navigation Remapping\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Navigation Remapping\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Navigation Remapping To Propagate Malicious Content"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Application Fingerprinting",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Application Fingerprinting: Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Application Fingerprinting"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Session Sidejacking",
    "context": "",
    "output": "The related attack patterns to Session Sidejacking are: Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Sidejacking"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XML Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: TCP Null Scan",
    "context": "",
    "output": "The related attack patterns to TCP Null Scan are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Null Scan"
    }
  },
  {
    "instruction": "Given attack pattern: Exploiting Incorrectly Configured Access Control Security Levels.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\n- Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels"
    }
  },
  {
    "instruction": "Given attack pattern: Connection Reset.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Traffic Injection\nDescription: An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Traffic Injection\nDescription: An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Connection Reset"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Magnetic Strip Card Brute Force Attacks",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Magnetic Strip Card Brute Force Attacks"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Exploit Non-Production Interfaces",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploit Non-Production Interfaces"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Subvert Code-signing Facilities",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Subvert Code-signing Facilities: Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Subvert Code-signing Facilities"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Weakening of Cellular Encryption",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Drop Encryption Level\nDescription: An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Drop Encryption Level\nDescription: An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Weakening of Cellular Encryption"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Traceroute Route Enumeration",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Traceroute Route Enumeration: Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Traceroute Route Enumeration"
    }
  },
  {
    "instruction": "Given attack pattern: Collect Data from Clipboard.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Clipboard"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Adversary in the Middle (AiTM)",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Adversary in the Middle (AiTM): Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:Key Negotiation of Bluetooth Attack (KNOB)\nDescription: An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Key Negotiation of Bluetooth Attack (KNOB)\nDescription: An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Adversary in the Middle (AiTM)"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Session Credential Falsification through Prediction",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Path Traversal",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n\nName:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n",
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Path Traversal"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: DOM-Based XSS",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to DOM-Based XSS: Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DOM-Based XSS"
    }
  },
  {
    "instruction": "Given attack pattern: XML Schema Poisoning.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Schema Poisoning\nDescription: An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Schema Poisoning\nDescription: An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Schema Poisoning"
    }
  },
  {
    "instruction": "Given attack pattern: Web Services API Signature Forgery Leveraging Hash Function Extension Weakness.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"
    }
  },
  {
    "instruction": "Given attack pattern: StarJacking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "Given attack pattern: Infiltration of Hardware Development Environment.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infiltration of Hardware Development Environment"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Read Sensitive Constants Within an Executable",
    "context": "",
    "output": "The related attack patterns to Read Sensitive Constants Within an Executable are: Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Read Sensitive Constants Within an Executable"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: HTTP DoS",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to HTTP DoS: Name:Sustained Client Engagement\nDescription: An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Sustained Client Engagement\nDescription: An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "HTTP DoS"
    }
  },
  {
    "instruction": "Given attack pattern: Adversary in the Browser (AiTB).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Adversary in the Browser (AiTB)"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Orbital Jamming",
    "context": "",
    "output": "The related attack patterns to Orbital Jamming are: Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Orbital Jamming"
    }
  },
  {
    "instruction": "Given attack pattern: Email Injection.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Email Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Malicious Gray Market Hardware.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Hardware Component Substitution\nDescription: An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hardware Component Substitution\nDescription: An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Gray Market Hardware"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Incomplete Data Deletion in a Multi-Tenant Environment",
    "context": "",
    "output": "The related attack patterns to Incomplete Data Deletion in a Multi-Tenant Environment are: Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Incomplete Data Deletion in a Multi-Tenant Environment"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Serialized Data with Nested Payloads",
    "context": "",
    "output": "The related attack patterns to Serialized Data with Nested Payloads are: Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Serialized Data with Nested Payloads"
    }
  },
  {
    "instruction": "Given attack pattern: Web Server Logs Tampering.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Audit Log Manipulation\nDescription: The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Audit Log Manipulation\nDescription: The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Web Server Logs Tampering"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Manipulating Web Input to File System Calls",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating Web Input to File System Calls"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Remote Code Inclusion",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n\nName:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Remote Code Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern: Inclusion of Code in Existing Process.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Inclusion of Code in Existing Process"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to TCP (ISN) Sequence Predictability Probe",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP (ISN) Sequence Predictability Probe"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Search Order Hijacking",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Search Order Hijacking: Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Search Order Hijacking"
    }
  },
  {
    "instruction": "Given attack pattern: Cross Frame Scripting (XFS).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Frame Scripting (XFS)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Target Influence via Interview and Interrogation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Target Influence via Interview and Interrogation: Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Interview and Interrogation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to ICMP Fragmentation",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Fragmentation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Hardware Component Substitution",
    "context": "",
    "output": "The related attack patterns to Hardware Component Substitution are: Name:Malicious Hardware Update\nDescription: An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Hardware Update\nDescription: An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hardware Component Substitution"
    }
  },
  {
    "instruction": "Given attack pattern: Development Alteration.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Modification During Manufacture\nDescription: An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Modification During Manufacture\nDescription: An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Development Alteration"
    }
  },
  {
    "instruction": "Given attack pattern: String Format Overflow in syslog().\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n\n- Name:Format String Injection\nDescription: An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
        "Name:Format String Injection\nDescription: An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "String Format Overflow in syslog()"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Voice Phishing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Voice Phishing"
    }
  },
  {
    "instruction": "Given attack pattern: Quadratic Data Expansion.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Serialized Data with Nested Payloads\nDescription: Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Quadratic Data Expansion"
    }
  },
  {
    "instruction": "Given attack pattern: BitSquatting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n\n* Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n\n* Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
        "Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "BitSquatting"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Poison Web Service Registry",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Poison Web Service Registry: Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Poison Web Service Registry"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Bypassing Electronic Locks and Access Controls",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Bypassing Electronic Locks and Access Controls: Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bypassing Electronic Locks and Access Controls"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Probe iOS Screenshots",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Probe iOS Screenshots"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Lock Picking",
    "context": "",
    "output": "The related attack patterns to Lock Picking are: Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Lock Picking"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: ICMP Flood",
    "context": "",
    "output": "The related attack patterns to ICMP Flood are: Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Flood"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Reflection Attack in Authentication Protocol",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Reflection Attack in Authentication Protocol: Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n\n* Name:Authentication Abuse\nDescription: An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
        "Name:Authentication Abuse\nDescription: An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Upload a Web Shell to a Web Server",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Upload a Web Shell to a Web Server: Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Upload a Web Shell to a Web Server"
    }
  },
  {
    "instruction": "Given attack pattern: Probe Audio and Video Peripherals.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n\n- Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Probe Audio and Video Peripherals"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Hardware Component Substitution During Baselining",
    "context": "",
    "output": "The related attack patterns to Hardware Component Substitution During Baselining are: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hardware Component Substitution During Baselining"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Filter Failure through Buffer Overflow",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Filter Failure through Buffer Overflow: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Filter Failure through Buffer Overflow"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cellular Traffic Intercept",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cellular Traffic Intercept: Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Traffic Intercept"
    }
  },
  {
    "instruction": "Given attack pattern: Rooting SIM Cards.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Rooting SIM Cards"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: DNS Blocking",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to DNS Blocking: Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Blocking"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Jamming",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Jamming"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Counterfeit Organizations",
    "context": "",
    "output": "The related attack patterns to Counterfeit Organizations are: Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Counterfeit Organizations"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Network Topology Mapping",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n\n* Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Network Topology Mapping"
    }
  },
  {
    "instruction": "Given attack pattern: Stored XSS.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Stored XSS"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Malicious Logic Insertion into Product via Inclusion of Third-Party Component",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Logic Insertion into Product via Inclusion of Third-Party Component"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Blind SQL Injection",
    "context": "",
    "output": "The related attack patterns to Blind SQL Injection are: Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Blind SQL Injection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Sniffing Attacks",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Sniffing Attacks: Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n\n- Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n",
        "Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Sniffing Attacks"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Pretexting via Phone",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Pretexting via Phone: Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Phone"
    }
  },
  {
    "instruction": "Given attack pattern: Exploiting Multiple Input Interpretation Layers.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploiting Multiple Input Interpretation Layers"
    }
  },
  {
    "instruction": "Given attack pattern: Session Credential Falsification through Manipulation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Credential Falsification through Forging\nDescription: An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Credential Falsification through Manipulation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: TCP ACK Scan",
    "context": "",
    "output": "The related attack patterns to TCP ACK Scan are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP ACK Scan"
    }
  },
  {
    "instruction": "Given attack pattern: TypoSquatting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n\n- Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n\n- Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
        "Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "TypoSquatting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Documentation Alteration to Circumvent Dial-down",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Documentation Alteration to Circumvent Dial-down"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Signature Spoofing by Misrepresentation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Signature Spoofing by Misrepresentation: Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signature Spoofing by Misrepresentation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Task Impersonation",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Task Impersonation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Buffer Overflow via Environment Variables",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Buffer Overflow via Environment Variables"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Probe System Files",
    "context": "",
    "output": "The related attack patterns to Probe System Files are: Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Probe System Files"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Using Alternative IP Address Encodings",
    "context": "",
    "output": "The related attack patterns to Using Alternative IP Address Encodings are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Alternative IP Address Encodings"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: IP ID Sequencing Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to IP ID Sequencing Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IP ID Sequencing Probe"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Forceful Browsing",
    "context": "",
    "output": "The related attack patterns to Forceful Browsing are: Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "Given attack pattern: XML Routing Detour Attacks.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Routing Detour Attacks"
    }
  },
  {
    "instruction": "Given attack pattern: Infrastructure Manipulation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Infrastructure Manipulation"
    }
  },
  {
    "instruction": "Given attack pattern: TCP Xmas Scan.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Xmas Scan"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: DNS Cache Poisoning",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to DNS Cache Poisoning: Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: ChildOf\n\n\n- Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: HTTP Response Splitting",
    "context": "",
    "output": "The related attack patterns to HTTP Response Splitting are: Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n\nName:HTTP Request Splitting\nDescription: An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n\nName:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n\nName:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n\nName:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n\nName:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\nName:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
        "Name:HTTP Request Splitting\nDescription: An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to split a single HTTP request into multiple unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n",
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n",
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "HTTP Response Splitting"
    }
  },
  {
    "instruction": "Given attack pattern: Malicious Software Download.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n\n- Name:Adversary in the Browser (AiTB)\nDescription: An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n",
        "Name:Adversary in the Browser (AiTB)\nDescription: An adversary exploits security vulnerabilities or inherent functionalities of a web browser, in order to manipulate traffic between two endpoints.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Malicious Software Download"
    }
  },
  {
    "instruction": "Given attack pattern: Embedding Scripts within Scripts.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Schema Poisoning",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n\n- Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n",
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Schema Poisoning"
    }
  },
  {
    "instruction": "Given attack pattern: Active OS Fingerprinting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fingerprinting\nDescription: An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Active OS Fingerprinting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to DNS Domain Seizure",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Domain Seizure"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Overread Buffers",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Buffer Manipulation\nDescription: An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Buffer Manipulation\nDescription: An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Overread Buffers"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Capture Credentials via Keylogger",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Collect Data as Provided by Users\nDescription: An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\nNature of relationship: ChildOf\n\n\n* Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n* Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data as Provided by Users\nDescription: An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Capture Credentials via Keylogger"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Load Value Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Exploitation of Transient Instruction Execution\nDescription: An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Transient Instruction Execution\nDescription: An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Load Value Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Detect Unpublicized Web Pages",
    "context": "",
    "output": "The related attack patterns to Detect Unpublicized Web Pages are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Detect Unpublicized Web Pages"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to File Discovery",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "File Discovery"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: SOAP Array Overflow",
    "context": "",
    "output": "The related attack patterns to SOAP Array Overflow are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "SOAP Array Overflow"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Malware-Directed Internal Reconnaissance",
    "context": "",
    "output": "The related attack patterns to Malware-Directed Internal Reconnaissance are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malware-Directed Internal Reconnaissance"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Documentation Alteration to Produce Under-performing Systems",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Documentation Alteration to Produce Under-performing Systems"
    }
  },
  {
    "instruction": "Given attack pattern: Blockage.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Blockage"
    }
  },
  {
    "instruction": "Given attack pattern: iFrame Overlay.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Add Malicious File to Shared Webroot",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Add Malicious File to Shared Webroot"
    }
  },
  {
    "instruction": "Given attack pattern: Open-Source Library Manipulation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Open-Source Library Manipulation"
    }
  },
  {
    "instruction": "Given attack pattern: Manipulating User-Controlled Variables.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating User-Controlled Variables"
    }
  },
  {
    "instruction": "Given attack pattern: Principal Spoof.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Principal Spoof"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: WiFi SSID Tracking",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to WiFi SSID Tracking: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WiFi SSID Tracking"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: TCP Fragmentation",
    "context": "",
    "output": "The related attack patterns to TCP Fragmentation are: Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Fragmentation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Manipulate Registry Information",
    "context": "",
    "output": "The related attack patterns to Manipulate Registry Information are: Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulate Registry Information"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Target Programs with Elevated Privileges",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Target Programs with Elevated Privileges: Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n\nName:Buffer Overflow in an API Call\nDescription: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\nNature of relationship: CanPrecede\n\n\nName:Buffer Overflow in Local Command-Line Utilities\nDescription: This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.\nNature of relationship: CanPrecede\n\n\nName:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: CanPrecede\n\n\nName:String Format Overflow in syslog()\nDescription: This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n",
        "Name:Buffer Overflow in an API Call\nDescription: This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.\nNature of relationship: CanPrecede\n\n",
        "Name:Buffer Overflow in Local Command-Line Utilities\nDescription: This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.\nNature of relationship: CanPrecede\n\n",
        "Name:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: CanPrecede\n\n",
        "Name:String Format Overflow in syslog()\nDescription: This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Target Programs with Elevated Privileges"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Application API Button Hijacking",
    "context": "",
    "output": "The related attack patterns to Application API Button Hijacking are: Name:Application API Navigation Remapping\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Navigation Remapping\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Application API Button Hijacking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: RFID Chip Deactivation or Destruction",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to RFID Chip Deactivation or Destruction: Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "RFID Chip Deactivation or Destruction"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Command Line Execution through SQL Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Command Line Execution through SQL Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Mobile Phishing",
    "context": "",
    "output": "The related attack patterns to Mobile Phishing are: Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Mobile Phishing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Artificially Inflate File Sizes",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Artificially Inflate File Sizes: Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Artificially Inflate File Sizes"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Pretexting via Customer Service",
    "context": "",
    "output": "The related attack patterns to Pretexting via Customer Service are: Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Customer Service"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: ICMP Error Message Quoting Probe",
    "context": "",
    "output": "The related attack patterns to ICMP Error Message Quoting Probe are: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Error Message Quoting Probe"
    }
  },
  {
    "instruction": "Given attack pattern: Client-side Injection-induced Buffer Overflow.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Client-side Injection-induced Buffer Overflow"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Exploitation of Transient Instruction Execution",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Manipulating State\nDescription: The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.\nState management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.\nIf there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.\n\nNature of relationship: ChildOf\n\n\n* Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n\n* Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n\n* Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: PeerOf\n\n\n* Name:Shared Resource Manipulation\nDescription: An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.\nNature of relationship: PeerOf\n\n\n* Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulating State\nDescription: The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner.\nState management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits.\nIf there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data.\n\nNature of relationship: ChildOf\n\n",
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n",
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n",
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: PeerOf\n\n",
        "Name:Shared Resource Manipulation\nDescription: An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.\nNature of relationship: PeerOf\n\n",
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Exploitation of Transient Instruction Execution"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Manipulating Writeable Configuration Files",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating Writeable Configuration Files"
    }
  },
  {
    "instruction": "Given attack pattern: Log Injection-Tampering-Forging.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Audit Log Manipulation\nDescription: The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\nNature of relationship: ChildOf\n\n\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Audit Log Manipulation\nDescription: The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Log Injection-Tampering-Forging"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to SSL Flood",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "SSL Flood"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: File Content Injection",
    "context": "",
    "output": "The related attack patterns to File Content Injection are: Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n\nName:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanAlsoBe\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanAlsoBe\n\n"
      ],
      "@Name": "File Content Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Checksum Spoofing",
    "context": "",
    "output": "The related attack patterns to Checksum Spoofing are: Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Checksum Spoofing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: White Box Reverse Engineering",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to White Box Reverse Engineering: Name:Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "White Box Reverse Engineering"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Wi-Fi Jamming",
    "context": "",
    "output": "The related attack patterns to Wi-Fi Jamming are: Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Wi-Fi Jamming"
    }
  },
  {
    "instruction": "Given attack pattern: DTD Injection.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n\n- Name:Exponential Data Expansion\nDescription: An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.\nNature of relationship: CanPrecede\n\n\n- Name:Quadratic Data Expansion\nDescription: An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n",
        "Name:Exponential Data Expansion\nDescription: An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.\nNature of relationship: CanPrecede\n\n",
        "Name:Quadratic Data Expansion\nDescription: An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "DTD Injection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Spoof Open-Source Software Metadata",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Spoof Open-Source Software Metadata: Name:Metadata Spoofing\nDescription: An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.\nNature of relationship: ChildOf\n\n\n- Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: CanPrecede\n\n\n- Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: CanPrecede\n\n\n- Name:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Metadata Spoofing\nDescription: An adversary alters the metadata of a resource (e.g., file, directory, repository, etc.) to present a malicious resource as legitimate/credible.\nNature of relationship: ChildOf\n\n",
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: CanPrecede\n\n",
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: CanPrecede\n\n",
        "Name:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Spoof Open-Source Software Metadata"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cross Zone Scripting",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cross Zone Scripting: Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Zone Scripting"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Integer Attacks",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Integer Attacks: Name:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Integer Attacks"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Signing Malicious Code",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signing Malicious Code"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Spear Phishing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Spear Phishing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP Options Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP Options Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Options Probe"
    }
  },
  {
    "instruction": "Given attack pattern: Excavation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Excavation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Web Application Fingerprinting",
    "context": "",
    "output": "The related attack patterns to Web Application Fingerprinting are: Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Web Application Fingerprinting"
    }
  },
  {
    "instruction": "Given attack pattern: Overflow Buffers.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Buffer Manipulation\nDescription: An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Buffer Manipulation\nDescription: An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Overflow Buffers"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: WebView Exposure",
    "context": "",
    "output": "The related attack patterns to WebView Exposure are: Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WebView Exposure"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to TCP Timestamp Probe",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Timestamp Probe"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Exploitation of Improperly Configured or Implemented Memory Protections",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Exploitation of Improperly Configured or Implemented Memory Protections: Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n\n* Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n",
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploitation of Improperly Configured or Implemented Memory Protections"
    }
  },
  {
    "instruction": "Given attack pattern: Cross-Site Scripting (XSS).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n\n* Name:Cross Site Tracing\nDescription: Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
        "Name:Cross Site Tracing\nDescription: Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Cross-Site Scripting (XSS)"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Route Disabling",
    "context": "",
    "output": "The related attack patterns to Route Disabling are: Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Route Disabling"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Infected Hardware",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Infected Hardware: Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infected Hardware"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Blue Boxing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Blue Boxing"
    }
  },
  {
    "instruction": "Given attack pattern: Using Leading 'Ghost' Character Sequences to Bypass Input Filters.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Use of Captured Hashes (Pass The Hash)",
    "context": "",
    "output": "The related attack patterns to Use of Captured Hashes (Pass The Hash) are: Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n* Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n\n* Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n\n* Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n",
        "Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Hijacking a Privileged Thread of Execution",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Hijacking a Privileged Thread of Execution: Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hijacking a Privileged Thread of Execution"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Explore for Predictable Temporary File Names",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:File Discovery\nDescription: An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.\nNature of relationship: ChildOf\n\n\nName:Screen Temporary Files for Sensitive Information\nDescription: An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:File Discovery\nDescription: An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.\nNature of relationship: ChildOf\n\n",
        "Name:Screen Temporary Files for Sensitive Information\nDescription: An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Explore for Predictable Temporary File Names"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Influence Perception",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Influence Perception: Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to AJAX Footprinting",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n\n* Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to DNS Rebinding",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Rebinding"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Counterfeit GPS Signals",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Counterfeit GPS Signals: Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Counterfeit GPS Signals"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Contradictory Destinations in Traffic Routing Schemes",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Contradictory Destinations in Traffic Routing Schemes: Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Contradictory Destinations in Traffic Routing Schemes"
    }
  },
  {
    "instruction": "Given attack pattern: Eavesdropping on a Monitor.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Eavesdropping on a Monitor"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cellular Jamming",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Jamming\nDescription: An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Jamming"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Server Side Include (SSI) Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n\n- Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Rainbow Table Password Cracking",
    "context": "",
    "output": "The related attack patterns to Rainbow Table Password Cracking are: Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n\n* Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n* Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Rainbow Table Password Cracking"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Signature Spoofing by Mixing Signed and Unsigned Content",
    "context": "",
    "output": "The related attack patterns to Signature Spoofing by Mixing Signed and Unsigned Content are: Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signature Spoofing by Mixing Signed and Unsigned Content"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Counterfeit Hardware Component Inserted During Product Assembly",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Counterfeit Hardware Component Inserted During Product Assembly"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: IP Address Blocking",
    "context": "",
    "output": "The related attack patterns to IP Address Blocking are: Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IP Address Blocking"
    }
  },
  {
    "instruction": "Given attack pattern: Phishing.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n\nName:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n\nName:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n\nName:BitSquatting\nDescription: An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.\nNature of relationship: CanPrecede\n\n\nName:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: CanPrecede\n\n\nName:SoundSquatting\nDescription: An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: CanPrecede\n\n\nName:Homograph Attack via Homoglyphs\nDescription: An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
        "Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n",
        "Name:BitSquatting\nDescription: An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.\nNature of relationship: CanPrecede\n\n",
        "Name:TypoSquatting\nDescription: An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: CanPrecede\n\n",
        "Name:SoundSquatting\nDescription: An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.\nNature of relationship: CanPrecede\n\n",
        "Name:Homograph Attack via Homoglyphs\nDescription: An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Phishing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Alteration of a Software Update",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Alteration of a Software Update: Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n\n* Name:Developer Signing Maliciously Altered Software\nDescription: Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.\nThis attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.\n\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n",
        "Name:Developer Signing Maliciously Altered Software\nDescription: Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.\nThis attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.\n\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Alteration of a Software Update"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Exploitation of Thunderbolt Protection Flaws",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Exploitation of Thunderbolt Protection Flaws: Name:Inter-component Protocol Manipulation\nDescription: Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n\n- Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: CanFollow\n\n\n- Name:Flash Memory Attacks\nDescription: An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.\nNature of relationship: PeerOf\n\n\n- Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: PeerOf\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Inter-component Protocol Manipulation\nDescription: Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
        "Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: CanFollow\n\n",
        "Name:Flash Memory Attacks\nDescription: An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.\nNature of relationship: PeerOf\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: PeerOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Exploitation of Thunderbolt Protection Flaws"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Block Logging to Central Repository",
    "context": "",
    "output": "The related attack patterns to Block Logging to Central Repository are: Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Block Logging to Central Repository"
    }
  },
  {
    "instruction": "Given attack pattern: Encryption Brute Forcing.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Brute Force\nDescription: In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\nNature of relationship: ChildOf\n\n\n- Name:Key Negotiation of Bluetooth Attack (KNOB)\nDescription: An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Brute Force\nDescription: In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\nNature of relationship: ChildOf\n\n",
        "Name:Key Negotiation of Bluetooth Attack (KNOB)\nDescription: An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Encryption Brute Forcing"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Use of Known Operating System Credentials",
    "context": "",
    "output": "The related attack patterns to Use of Known Operating System Credentials are: Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Use of Known Operating System Credentials"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Modify Shared File",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Modify Shared File"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: ICMP IP 'ID' Field Error Message Probe",
    "context": "",
    "output": "The related attack patterns to ICMP IP 'ID' Field Error Message Probe are: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP IP 'ID' Field Error Message Probe"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XSS Using MIME Type Mismatch",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Using MIME Type Mismatch"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Malicious Root Certificate",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Root Certificate"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Server Motherboard Compromise",
    "context": "",
    "output": "The related attack patterns to Server Motherboard Compromise are: Name:Malicious Hardware Update\nDescription: An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Hardware Update\nDescription: An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Server Motherboard Compromise"
    }
  },
  {
    "instruction": "Given attack pattern: Transaction or Event Tampering via Application API Manipulation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Transaction or Event Tampering via Application API Manipulation"
    }
  },
  {
    "instruction": "Given attack pattern: URL Encoding.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "URL Encoding"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to System Build Data Maliciously Altered",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "System Build Data Maliciously Altered"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Malicious Software Update",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Malicious Software Update: Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n\nName:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Software Integrity Attack\nDescription: An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.\nNature of relationship: ChildOf\n\n",
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Malicious Software Update"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Infected Memory",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Infected Memory: Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infected Memory"
    }
  },
  {
    "instruction": "Given attack pattern: Design for FPGA Maliciously Altered.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Design for FPGA Maliciously Altered"
    }
  },
  {
    "instruction": "Given attack pattern: Collect Data from Common Resource Locations.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Common Resource Locations"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Use of Known Domain Credentials",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Use of Known Domain Credentials: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Use of Known Domain Credentials"
    }
  },
  {
    "instruction": "Given attack pattern: Reusing Session IDs (aka Session Replay).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: ICMP IP Total Length Field Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to ICMP IP Total Length Field Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP IP Total Length Field Probe"
    }
  },
  {
    "instruction": "Given attack pattern: Replace Winlogon Helper DLL.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Replace Winlogon Helper DLL"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Pretexting via Tech Support",
    "context": "",
    "output": "The related attack patterns to Pretexting via Tech Support are: Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pretexting via Tech Support"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: DLL Side-Loading",
    "context": "",
    "output": "The related attack patterns to DLL Side-Loading are: Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DLL Side-Loading"
    }
  },
  {
    "instruction": "Given attack pattern: Windows ::DATA Alternate Data Stream.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Hiding Malicious Data or Code within Files\nDescription: Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hiding Malicious Data or Code within Files\nDescription: Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Windows ::DATA Alternate Data Stream"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to WebView Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WebView Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Developer Signing Maliciously Altered Software.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Developer Signing Maliciously Altered Software"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Malicious Manual Software Update",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Manual Software Update"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Embedding NULL Bytes",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Embedding NULL Bytes: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Embedding NULL Bytes"
    }
  },
  {
    "instruction": "Given attack pattern: TCP FIN Scan.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP FIN Scan"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Physical Destruction of Device or Component",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Physical Destruction of Device or Component: Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Obstruction\nDescription: An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Physical Destruction of Device or Component"
    }
  },
  {
    "instruction": "Given attack pattern: Browser in the Middle (BiTM).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\nName:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Phishing\nDescription: Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Browser in the Middle (BiTM)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP RST Injection",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP RST Injection: Name:Connection Reset\nDescription: In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Connection Reset\nDescription: In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP RST Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Kerberoasting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to IP 'ID' Echoed Byte-Order Probe",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IP 'ID' Echoed Byte-Order Probe"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: XML Ping of the Death",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to XML Ping of the Death: Name:XML Flood\nDescription: An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:XML Flood\nDescription: An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Padding Oracle Crypto Attack",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Cryptanalysis\nDescription: Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cryptanalysis\nDescription: Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Padding Oracle Crypto Attack"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Provide Counterfeit Component",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Hardware Component Substitution\nDescription: An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hardware Component Substitution\nDescription: An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Provide Counterfeit Component"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Influence Perception of Commitment and Consistency",
    "context": "",
    "output": "The related attack patterns to Influence Perception of Commitment and Consistency are: Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Commitment and Consistency"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Bluetooth Impersonation AttackS (BIAS)",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Bluetooth Impersonation AttackS (BIAS): Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bluetooth Impersonation AttackS (BIAS)"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to DNS Zone Transfers",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Zone Transfers"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Mobile Device Fault Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Hardware Fault Injection\nDescription: The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hardware Fault Injection\nDescription: The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Mobile Device Fault Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Collect Data as Provided by Users.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data as Provided by Users"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Reflected XSS",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Reflected XSS: Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reflected XSS"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Content Spoofing Via Application API Manipulation",
    "context": "",
    "output": "The related attack patterns to Content Spoofing Via Application API Manipulation are: Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Content Spoofing Via Application API Manipulation"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Malicious Hardware Component Replacement",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Malicious Hardware Component Replacement: Name:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Hardware Component Replacement"
    }
  },
  {
    "instruction": "Given attack pattern: Target Influence via Eye Cues.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Eye Cues"
    }
  },
  {
    "instruction": "Given attack pattern: Harvesting Information via API Event Monitoring.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n\n* Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Pretexting\nDescription: An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.\nNature of relationship: ChildOf\n\n",
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Harvesting Information via API Event Monitoring"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Manipulating Hidden Fields",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Manipulating Hidden Fields: Name:Manipulating User-Controlled Variables\nDescription: This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulating User-Controlled Variables\nDescription: This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating Hidden Fields"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to TCP Initial Window Size Probe",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Initial Window Size Probe"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Bypassing ATA Password Security",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Physically Hacking Hardware\nDescription: An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Physically Hacking Hardware\nDescription: An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bypassing ATA Password Security"
    }
  },
  {
    "instruction": "Given attack pattern: Screen Temporary Files for Sensitive Information.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Screen Temporary Files for Sensitive Information"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: XSS Using Alternate Syntax",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to XSS Using Alternate Syntax: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\nName:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Using Alternate Syntax"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Enumerate Mail Exchange (MX) Records",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Enumerate Mail Exchange (MX) Records"
    }
  },
  {
    "instruction": "Given attack pattern: ICMP Address Mask Request.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Address Mask Request"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "The related attack patterns to Accessing/Intercepting/Modifying HTTP Cookies are: Name:Manipulating Opaque Client-based Data Tokens\nDescription: In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\nNature of relationship: ChildOf\n\n\n* Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulating Opaque Client-based Data Tokens\nDescription: In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.\nNature of relationship: ChildOf\n\n",
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "Given attack pattern: BlueSmacking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "BlueSmacking"
    }
  },
  {
    "instruction": "Given attack pattern: HTTP Parameter Pollution (HPP).\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Command Delimiters\nDescription: An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.\nNature of relationship: ChildOf\n\n\n- Name:NoSQL Injection\nDescription: An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Delimiters\nDescription: An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.\nNature of relationship: ChildOf\n\n",
        "Name:NoSQL Injection\nDescription: An adversary targets software that constructs NoSQL statements based on user input or with parameters vulnerable to operator replacement in order to achieve a variety of technical impacts such as escalating privileges, bypassing authentication, and/or executing code.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "HTTP Parameter Pollution (HPP)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Data Serialization External Entities Blowup",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Data Serialization External Entities Blowup: Name:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n\n* Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n",
        "Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Data Serialization External Entities Blowup"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Amplification",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Amplification: Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Amplification"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Web Services Protocol Manipulation",
    "context": "",
    "output": "The related attack patterns to Web Services Protocol Manipulation are: Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Web Services Protocol Manipulation"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Malicious Automated Software Update via Redirection",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Malicious Automated Software Update via Redirection: Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Software Update\nDescription: An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Automated Software Update via Redirection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Token Impersonation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Token Impersonation: Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Token Impersonation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Forced Integer Overflow",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Integer Attacks\nDescription: An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Integer Attacks\nDescription: An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Forced Integer Overflow"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cross Site Identification",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Cross Site Request Forgery\nDescription: An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Cross Site Request Forgery\nDescription: An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Site Identification"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Detect Unpublicized Web Services",
    "context": "",
    "output": "The related attack patterns to Detect Unpublicized Web Services are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Detect Unpublicized Web Services"
    }
  },
  {
    "instruction": "Given attack pattern: Root/Jailbreak Detection Evasion via Hooking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Hooking"
    }
  },
  {
    "instruction": "Given attack pattern: Install New Service.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Install New Service"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Group Permission Footprinting",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Group Permission Footprinting: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Group Permission Footprinting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Data Injected During Configuration",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Data Injected During Configuration"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cloning RFID Cards or Chips",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cloning RFID Cards or Chips: Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cloning RFID Cards or Chips"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Sniffing Network Traffic",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Sniffing Network Traffic"
    }
  },
  {
    "instruction": "Given attack pattern: Disable Security Software.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Configuration/Environment Manipulation\nDescription: An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Disable Security Software"
    }
  },
  {
    "instruction": "Given attack pattern: Run Software at Logon.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Run Software at Logon"
    }
  },
  {
    "instruction": "Given attack pattern: Try All Common Switches.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Try All Common Switches"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Android Activity Hijack",
    "context": "",
    "output": "The related attack patterns to Android Activity Hijack are: Name:Android Intent Intercept\nDescription: An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.\nNature of relationship: ChildOf\n\n\n* Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Android Intent Intercept\nDescription: An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.\nNature of relationship: ChildOf\n\n",
        "Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Android Activity Hijack"
    }
  },
  {
    "instruction": "Given attack pattern: Identify Shared Files/Directories on System.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n\n- Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n- Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n\n- Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Network Topology Mapping\nDescription: An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.\nNature of relationship: ChildOf\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Identify Shared Files/Directories on System"
    }
  },
  {
    "instruction": "Given attack pattern: TCP Flood.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Flood"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Use of Captured Tickets (Pass The Ticket)",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Kerberos Credentials\nDescription: An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Use of Captured Tickets (Pass The Ticket)"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Install Malicious Extension",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Install Malicious Extension: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Install Malicious Extension"
    }
  },
  {
    "instruction": "Given attack pattern: Repo Jacking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Repo Jacking"
    }
  },
  {
    "instruction": "Given attack pattern: Analysis of Packet Timing and Sizes.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Analysis of Packet Timing and Sizes"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Inducing Account Lockout",
    "context": "",
    "output": "The related attack patterns to Inducing Account Lockout are: Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Inducing Account Lockout"
    }
  },
  {
    "instruction": "Given attack pattern: Avoid Security Tool Identification by Adding Data.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Artificially Inflate File Sizes\nDescription: An adversary modifies file contents by adding data to files for several reasons. Many different attacks could \u201cfollow\u201d this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Artificially Inflate File Sizes\nDescription: An adversary modifies file contents by adding data to files for several reasons. Many different attacks could \u201cfollow\u201d this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Avoid Security Tool Identification by Adding Data"
    }
  },
  {
    "instruction": "Given attack pattern: Collect Data from Registries.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Registries"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
    "context": "",
    "output": "The related attack patterns to Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements are: Name:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements"
    }
  },
  {
    "instruction": "Given attack pattern: Tapjacking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Tapjacking"
    }
  },
  {
    "instruction": "Given attack pattern: Modification of Windows Service Configuration.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Registry Information\nDescription: An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Modification of Windows Service Configuration"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Removing Important Client Functionality",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Removing Important Client Functionality"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Replace Trusted Executable",
    "context": "",
    "output": "The related attack patterns to Replace Trusted Executable are: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Replace Trusted Executable"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: ICMP Error Message Echoing Integrity Probe",
    "context": "",
    "output": "The related attack patterns to ICMP Error Message Echoing Integrity Probe are: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Error Message Echoing Integrity Probe"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Services Footprinting",
    "context": "",
    "output": "The related attack patterns to Services Footprinting are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Services Footprinting"
    }
  },
  {
    "instruction": "Given attack pattern: Password Spraying.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n\nName:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\nName:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\nName:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Password Spraying"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Port Scanning",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Port Scanning: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Port Scanning"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: TCP RPC Scan",
    "context": "",
    "output": "The related attack patterns to TCP RPC Scan are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP RPC Scan"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Disabling Network Hardware",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Disabling Network Hardware: Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Route Disabling\nDescription: An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Disabling Network Hardware"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to DHCP Spoofing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n\n- Name:Sniffing Network Traffic\nDescription: In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.\nNature of relationship: CanPrecede\n\n\n- Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
        "Name:Sniffing Network Traffic\nDescription: In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.\nNature of relationship: CanPrecede\n\n",
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "DHCP Spoofing"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Influence Perception of Scarcity",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Scarcity"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP Congestion Control Flag (ECN) Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP Congestion Control Flag (ECN) Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Congestion Control Flag (ECN) Probe"
    }
  },
  {
    "instruction": "Given attack pattern: SaaS User Request Forgery.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "SaaS User Request Forgery"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: SOAP Manipulation",
    "context": "",
    "output": "The related attack patterns to SOAP Manipulation are: Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n\n- Name:SQL Injection through SOAP Parameter Tampering\nDescription: An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.\nNature of relationship: CanPrecede\n\n\n- Name:DTD Injection\nDescription: An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n",
        "Name:SQL Injection through SOAP Parameter Tampering\nDescription: An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.\nNature of relationship: CanPrecede\n\n",
        "Name:DTD Injection\nDescription: An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "SOAP Manipulation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Exploitation of Improperly Controlled Registers",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n\nName:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n",
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploitation of Improperly Controlled Registers"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: User-Controlled Filename",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to User-Controlled Filename: Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n\n- Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "User-Controlled Filename"
    }
  },
  {
    "instruction": "Given attack pattern: Signature Spoofing by Key Recreation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signature Spoofing by Key Recreation"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Credential Prompt Impersonation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Credential Prompt Impersonation: Name:Task Impersonation\nDescription: An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Task Impersonation\nDescription: An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Credential Prompt Impersonation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
    "context": "",
    "output": "The related attack patterns to Exploiting Incorrect Chaining or Granularity of Hardware Debug Components are: Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Android Intent Intercept",
    "context": "",
    "output": "The related attack patterns to Android Intent Intercept are: Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Android Intent Intercept"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Leveraging Race Conditions via Symbolic Links",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions\nDescription: This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions\nDescription: This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Software Development Tools Maliciously Altered",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n\n* Name:Alteration of a Software Update\nDescription: An adversary with access to an organization\u2019s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software\u2019s normal functionality.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
        "Name:Alteration of a Software Update\nDescription: An adversary with access to an organization\u2019s software update infrastructure inserts malware into the content of an outgoing update to fielded systems where a wide range of malicious effects are possible. With the same level of access, the adversary can alter a software update to perform specific malicious acts including granting the adversary control over the software\u2019s normal functionality.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Software Development Tools Maliciously Altered"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to SoundSquatting",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n\n- Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n\n- Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
        "Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "SoundSquatting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to PHP Remote File Inclusion",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Remote Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "PHP Remote File Inclusion"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Bypassing Physical Locks",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Security\nDescription: Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Bypassing Physical Locks"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to JSON Hijacking (aka JavaScript Hijacking)",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "JSON Hijacking (aka JavaScript Hijacking)"
    }
  },
  {
    "instruction": "Given attack pattern: TCP SYN Ping.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP SYN Ping"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Buffer Overflow via Symbolic Links",
    "context": "",
    "output": "The related attack patterns to Buffer Overflow via Symbolic Links are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Buffer Overflow via Symbolic Links"
    }
  },
  {
    "instruction": "Given attack pattern: TCP (ISN) Greatest Common Divisor Probe.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP (ISN) Greatest Common Divisor Probe"
    }
  },
  {
    "instruction": "Given attack pattern: Signal Strength Tracking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signal Strength Tracking"
    }
  },
  {
    "instruction": "Given attack pattern: Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to HTTP Flood",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "HTTP Flood"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Privilege Abuse",
    "context": "",
    "output": "The related attack patterns to Privilege Abuse are: Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Server Side Request Forgery\nDescription: An adversary exploits improper input validation by submitting maliciously crafted input to a target application running on a server, with the goal of forcing the server to make a request either to itself, to web services running in the server\u2019s internal network, or to external third parties. If successful, the adversary\u2019s request will be made with the server\u2019s privilege level, bypassing its authentication controls. This ultimately allows the adversary to access sensitive data, execute commands on the server\u2019s network, and make external requests with the stolen identity of the server. Server Side Request Forgery attacks differ from Cross Site Request Forgery attacks in that they target the server itself, whereas CSRF attacks exploit an insecure user authentication mechanism to perform unauthorized actions on the user's behalf.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Privilege Abuse"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Communication Channel Manipulation",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Communication Channel Manipulation"
    }
  },
  {
    "instruction": "Given attack pattern: Black Box Reverse Engineering.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Black Box Reverse Engineering"
    }
  },
  {
    "instruction": "Given attack pattern: Replace File Extension Handlers.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Replace File Extension Handlers"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Session Credential Falsification through Forging",
    "context": "",
    "output": "The related attack patterns to Session Credential Falsification through Forging are: Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: CanPrecede\n\n\n* Name:Session Fixation\nDescription: The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.\nNature of relationship: CanPrecede\n\n\n* Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application API Message Manipulation via Man-in-the-Middle\nDescription: An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Fixation\nDescription: The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.\nNature of relationship: CanPrecede\n\n",
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Credential Falsification through Forging"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Password Brute Forcing",
    "context": "",
    "output": "The related attack patterns to Password Brute Forcing are: Name:Brute Force\nDescription: In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\nNature of relationship: ChildOf\n\n\nName:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\nName:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\nName:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\nName:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Brute Force\nDescription: In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Password Brute Forcing"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XSS Targeting URI Placeholders",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n- Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\n- Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Targeting URI Placeholders"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Using UTF-8 Encoding to Bypass Validation Logic",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Using Slashes and URL Encoding Combined to Bypass Validation Logic\nDescription: This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.\nNature of relationship: PeerOf\n\n\n- Name:Using Unicode Encoding to Bypass Validation Logic\nDescription: An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.\nNature of relationship: PeerOf\n\n\n- Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Slashes and URL Encoding Combined to Bypass Validation Logic\nDescription: This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.\nNature of relationship: PeerOf\n\n",
        "Name:Using Unicode Encoding to Bypass Validation Logic\nDescription: An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.\nNature of relationship: PeerOf\n\n",
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using UTF-8 Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Exploit Script-Based APIs",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Exploit Script-Based APIs: Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interface Manipulation\nDescription: An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploit Script-Based APIs"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cache Poisoning",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cache Poisoning: Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cache Poisoning"
    }
  },
  {
    "instruction": "Given attack pattern: Malicious Hardware Update.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Hardware Integrity Attack\nDescription: An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hardware Integrity Attack\nDescription: An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Hardware Update"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: USB Memory Attacks",
    "context": "",
    "output": "The related attack patterns to USB Memory Attacks are: Name:Infected Memory\nDescription: An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n\n- Name:Malware-Directed Internal Reconnaissance\nDescription: Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infected Memory\nDescription: An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
        "Name:Malware-Directed Internal Reconnaissance\nDescription: Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "USB Memory Attacks"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Cryptanalysis",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Cryptanalysis: Name:Protocol Analysis\nDescription: An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.\nNature of relationship: ChildOf\n\n\n- Name:Encryption Brute Forcing\nDescription: An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Analysis\nDescription: An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.\nNature of relationship: ChildOf\n\n",
        "Name:Encryption Brute Forcing\nDescription: An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Cryptanalysis"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Host Discovery",
    "context": "",
    "output": "The related attack patterns to Host Discovery are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Host Discovery"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: UDP Ping",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to UDP Ping: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "UDP Ping"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to System Footprinting",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "System Footprinting"
    }
  },
  {
    "instruction": "Given attack pattern: System Location Discovery.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "System Location Discovery"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Targeting Non-Script Elements.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\nName:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Targeting Non-Script Elements"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XQuery Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:XML Injection\nDescription: An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XQuery Injection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Manipulating Writeable Terminal Devices",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Manipulating Writeable Terminal Devices: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Manipulating Writeable Terminal Devices"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Dumpster Diving",
    "context": "",
    "output": "The related attack patterns to Dumpster Diving are: Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n\n* Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n\n* Name:Retrieve Data from Decommissioned Devices\nDescription: An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization\u2019s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
        "Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n",
        "Name:Retrieve Data from Decommissioned Devices\nDescription: An adversary obtains decommissioned, recycled, or discarded systems and devices that can include an organization\u2019s intellectual property, employee data, and other types of controlled information. Systems and devices that have reached the end of their lifecycles may be subject to recycle or disposal where they can be exposed to adversarial attempts to retrieve information from internal memory chips and storage devices that are part of the system.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Dumpster Diving"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Fuzzing for application mapping",
    "context": "",
    "output": "The related attack patterns to Fuzzing for application mapping are: Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n\nName:Fuzzing\nDescription: In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n",
        "Name:Fuzzing\nDescription: In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Fuzzing for application mapping"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Cross Site Request Forgery",
    "context": "",
    "output": "The related attack patterns to Cross Site Request Forgery are: Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Peripheral Footprinting",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Peripheral Footprinting"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: SOAP Array Blowup",
    "context": "",
    "output": "The related attack patterns to SOAP Array Blowup are: Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "SOAP Array Blowup"
    }
  },
  {
    "instruction": "Given attack pattern: Application API Message Manipulation via Man-in-the-Middle.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Application API Message Manipulation via Man-in-the-Middle"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Session Fixation",
    "context": "",
    "output": "The related attack patterns to Session Fixation are: Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Fixation"
    }
  },
  {
    "instruction": "Given attack pattern: Leverage Executable Code in Non-Executable Files.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Hiding Malicious Data or Code within Files\nDescription: Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\nNature of relationship: ChildOf\n\n\n- Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: PeerOf\n\n\n- Name:Manipulating Writeable Configuration Files\nDescription: Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hiding Malicious Data or Code within Files\nDescription: Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.\nNature of relationship: ChildOf\n\n",
        "Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: PeerOf\n\n",
        "Name:Manipulating Writeable Configuration Files\nDescription: Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Leverage Executable Code in Non-Executable Files"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Exploitation of Improperly Controlled Hardware Security Identifiers",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Exploitation of Improperly Controlled Hardware Security Identifiers: Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n\n* Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n",
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Using Escaped Slashes in Alternate Encoding",
    "context": "",
    "output": "The related attack patterns to Using Escaped Slashes in Alternate Encoding are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Escaped Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Establish Rogue Location",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Establish Rogue Location: Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: ChildOf\n\n\n- Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: ChildOf\n\n",
        "Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Establish Rogue Location"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "context": "",
    "output": "The related attack patterns to Using Meta-characters in E-mail Headers to Inject Malicious Payloads are: Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n\n- Name:Email Injection\nDescription: An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
        "Name:Email Injection\nDescription: An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to TCP SYN Scan",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP SYN Scan"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Lifting Sensitive Data Embedded in Cache",
    "context": "",
    "output": "The related attack patterns to Lifting Sensitive Data Embedded in Cache are: Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n\n- Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Lifting Sensitive Data Embedded in Cache"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Query System for Information",
    "context": "",
    "output": "The related attack patterns to Query System for Information are: Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Query System for Information"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Leveraging Race Conditions\nDescription: The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leveraging Race Conditions\nDescription: The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Directory Indexing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Directory Indexing"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Flash Injection",
    "context": "",
    "output": "The related attack patterns to Flash Injection are: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n\n- Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: CanAlsoBe\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: CanAlsoBe\n\n"
      ],
      "@Name": "Flash Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Subverting Environment Variable Values",
    "context": "",
    "output": "The related attack patterns to Subverting Environment Variable Values are: Name:Manipulating User-Controlled Variables\nDescription: This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.\nNature of relationship: ChildOf\n\n\n- Name:Client-side Injection-induced Buffer Overflow\nDescription: This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.\nNature of relationship: CanPrecede\n\n\n- Name:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: PeerOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulating User-Controlled Variables\nDescription: This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.\nNature of relationship: ChildOf\n\n",
        "Name:Client-side Injection-induced Buffer Overflow\nDescription: This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.\nNature of relationship: CanPrecede\n\n",
        "Name:Buffer Overflow via Environment Variables\nDescription: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\nNature of relationship: PeerOf\n\n"
      ],
      "@Name": "Subverting Environment Variable Values"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: XSS Using Invalid Characters",
    "context": "",
    "output": "The related attack patterns to XSS Using Invalid Characters are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n- Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\n- Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Using Invalid Characters"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Shoulder Surfing",
    "context": "",
    "output": "The related attack patterns to Shoulder Surfing are: Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Eavesdropping\nDescription: An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.\nNature of relationship: ChildOf\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Shoulder Surfing"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Intent Spoof",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Intent Spoof"
    }
  },
  {
    "instruction": "Given attack pattern: Scheme Squatting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Scheme Squatting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cause Web Server Misclassification",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Alternative Execution Due to Deceptive Filenames\nDescription: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cause Web Server Misclassification"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Altered Component Firmware",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Altered Component Firmware: Name:Infected Hardware\nDescription: An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infected Hardware\nDescription: An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Altered Component Firmware"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: OS Command Injection",
    "context": "",
    "output": "The related attack patterns to OS Command Injection are: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "OS Command Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: DNS Spoofing",
    "context": "",
    "output": "The related attack patterns to DNS Spoofing are: Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Fake the Source of Data\nDescription: An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "DNS Spoofing"
    }
  },
  {
    "instruction": "Given attack pattern: Target Influence via Instant Rapport.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Target Influence via Instant Rapport"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Utilizing REST's Trust in the System Resource to Obtain Sensitive Data: Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Transparent Proxy Abuse",
    "context": "",
    "output": "The related attack patterns to Transparent Proxy Abuse are: Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Transparent Proxy Abuse"
    }
  },
  {
    "instruction": "Given attack pattern: Retrieve Data from Decommissioned Devices.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n\nName:Retrieve Embedded Sensitive Data\nDescription: An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excavation\nDescription: An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.\nNature of relationship: ChildOf\n\n",
        "Name:Retrieve Embedded Sensitive Data\nDescription: An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Retrieve Data from Decommissioned Devices"
    }
  },
  {
    "instruction": "Given attack pattern: Account Footprinting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Account Footprinting"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Retrieve Embedded Sensitive Data",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Retrieve Embedded Sensitive Data: Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Retrieve Embedded Sensitive Data"
    }
  },
  {
    "instruction": "Given attack pattern: Compromising Emanations Attack.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Compromising Emanations Attack"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Object Relational Mapping Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Object Relational Mapping Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Using Malicious Files.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\n- Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Privilege Escalation\nDescription: An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Using Malicious Files"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Pharming",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Pharming: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Pharming"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: UDP Scan",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to UDP Scan: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "UDP Scan"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Windows Admin Shares with Stolen Credentials",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n\n- Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n\n- Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: CanPrecede\n\n",
        "Name:Local Execution of Code\nDescription: An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.\nNature of relationship: CanPrecede\n\n",
        "Name:Pull Data from System Resources\nDescription: An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "Given attack pattern: Influence Perception of Reciprocation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Reciprocation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Scanning for Vulnerable Software",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Scanning for Vulnerable Software"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Malicious Code Implanted During Chip Programming",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Malicious Code Implanted During Chip Programming: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Code Implanted During Chip Programming"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP Sequence Number Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP Sequence Number Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Sequence Number Probe"
    }
  },
  {
    "instruction": "Given attack pattern: Pretexting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n\n- Name:Information Elicitation\nDescription: An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.\nNature of relationship: ChildOf\n\n\n- Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
        "Name:Information Elicitation\nDescription: An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.\nNature of relationship: ChildOf\n\n",
        "Name:Spear Phishing\nDescription: An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Pretexting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Use of Known Kerberos Credentials",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Use of Known Kerberos Credentials"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Rogue Integration Procedures",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Rogue Integration Procedures"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Homograph Attack via Homoglyphs",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n\nName:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n\nName:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
        "Name:Pharming\nDescription: A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.\nNature of relationship: CanPrecede\n\n",
        "Name:Counterfeit Websites\nDescription: Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Homograph Attack via Homoglyphs"
    }
  },
  {
    "instruction": "Given attack pattern: Owner Footprinting.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Owner Footprinting"
    }
  },
  {
    "instruction": "Given attack pattern: Accessing Functionality Not Properly Constrained by ACLs.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\nName:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: ASIC With Malicious Functionality",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to ASIC With Malicious Functionality: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ASIC With Malicious Functionality"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Symlink Attack",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Symlink Attack: Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Symlink Attack"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Password Recovery Exploitation",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n\n- Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n- Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Password Recovery Exploitation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Remote Services with Stolen Credentials",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Remote Services with Stolen Credentials"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Drop Encryption Level",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Drop Encryption Level: Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Misuse\nDescription: An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Drop Encryption Level"
    }
  },
  {
    "instruction": "Given attack pattern: Cellular Broadcast Message Request.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Broadcast Message Request"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Modify Existing Service",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Modify Existing Service"
    }
  },
  {
    "instruction": "Given attack pattern: TCP Window Scan.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Window Scan"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cross-Domain Search Timing",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross-Domain Search Timing"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Force the System to Reset Values",
    "context": "",
    "output": "The related attack patterns to Force the System to Reset Values are: Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Force the System to Reset Values"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to ICMP Echo Request Ping",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Echo Request Ping"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Application API Navigation Remapping",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Application API Navigation Remapping"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Clickjacking",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Action Spoofing\nDescription: An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Clickjacking"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Infected Software",
    "context": "",
    "output": "The related attack patterns to Infected Software are: Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Malicious Logic Insertion\nDescription: An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infected Software"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Key Negotiation of Bluetooth Attack (KNOB)",
    "context": "",
    "output": "The related attack patterns to Key Negotiation of Bluetooth Attack (KNOB) are: Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB)"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Signature Spoofing by Key Theft",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signature Spoofing by Key Theft"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Flash File Overlay",
    "context": "",
    "output": "The related attack patterns to Flash File Overlay are: Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Clickjacking\nDescription: An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Flash File Overlay"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Inter-component Protocol Manipulation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Inter-component Protocol Manipulation: Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Inter-component Protocol Manipulation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Absolute Path Traversal",
    "context": "",
    "output": "The related attack patterns to Absolute Path Traversal are: Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Absolute Path Traversal"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Collect Data from Screen Capture",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Collect Data from Common Resource Locations\nDescription: An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Collect Data from Screen Capture"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Credential Stuffing",
    "context": "",
    "output": "The related attack patterns to Credential Stuffing are: Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Embed Virus into DLL",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Embed Virus into DLL: Name:Infected Software\nDescription: An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infected Software\nDescription: An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Embed Virus into DLL"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: LDAP Injection",
    "context": "",
    "output": "The related attack patterns to LDAP Injection are: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "LDAP Injection"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Overflow Binary Resource File",
    "context": "",
    "output": "The related attack patterns to Overflow Binary Resource File are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n\n* Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
        "Name:File Content Injection\nDescription: An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Reverse Engineer an Executable to Expose Assumed Hidden Functionality",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Reverse Engineer an Executable to Expose Assumed Hidden Functionality: Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:White Box Reverse Engineering\nDescription: An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Physically Hacking Hardware",
    "context": "",
    "output": "The related attack patterns to Physically Hacking Hardware are: Name:Hardware Integrity Attack\nDescription: An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Hardware Integrity Attack\nDescription: An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Physically Hacking Hardware"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Serialized Data External Linking",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n\n* Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Privilege Abuse\nDescription: An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.\nNature of relationship: ChildOf\n\n",
        "Name:Web Services Protocol Manipulation\nDescription: An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Serialized Data External Linking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Documentation Alteration to Cause Errors in System Design",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Documentation Alteration to Cause Errors in System Design: Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Documentation Alteration to Cause Errors in System Design"
    }
  },
  {
    "instruction": "Given attack pattern: Leveraging/Manipulating Configuration File Search Paths.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Redirect Access to Libraries\nDescription: An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leveraging/Manipulating Configuration File Search Paths"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to HTTP Verb Tampering",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "HTTP Verb Tampering"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Creating a Rogue Certification Authority Certificate",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Creating a Rogue Certification Authority Certificate: Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Signature Spoof\nDescription: An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Creating a Rogue Certification Authority Certificate"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Command Delimiters",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Command Delimiters: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Reflection Injection",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Reflection Injection: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Reflection Injection"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Server Side Request Forgery",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Server Side Request Forgery"
    }
  },
  {
    "instruction": "Given attack pattern: UDP Fragmentation.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "UDP Fragmentation"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cellular Data Injection",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Resource Injection\nDescription: An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Resource Injection\nDescription: An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Data Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Create Malicious Client.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploiting Trust in Client\nDescription: An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Create Malicious Client"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to ICMP Information Request",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "ICMP Information Request"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to XSS Through HTTP Query Strings",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n* Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n\n* Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Through HTTP Query Strings"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to TCP Connect Scan",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Port Scanning\nDescription: An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP Connect Scan"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: XSS Using Doubled Characters",
    "context": "",
    "output": "The related attack patterns to XSS Using Doubled Characters are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n* Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\n* Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Using Doubled Characters"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Oversized Serialized Data Payloads",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Oversized Serialized Data Payloads"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Malicious Software Implanted",
    "context": "",
    "output": "The related attack patterns to Malicious Software Implanted are: Name:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulation During Distribution\nDescription: An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Software Implanted"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Malicious Logic Insertion into Product Software via Configuration Management Manipulation: Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: WSDL Scanning",
    "context": "",
    "output": "The related attack patterns to WSDL Scanning are: Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WSDL Scanning"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Removal of filters: Input filters, output filters, data masking",
    "context": "",
    "output": "The related attack patterns to Removal of filters: Input filters, output filters, data masking are: Name:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Removing Important Client Functionality\nDescription: An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Removal of filters: Input filters, output filters, data masking"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Dictionary-based Password Attack",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n\n* Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n* Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n* Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n* Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Dictionary-based Password Attack"
    }
  },
  {
    "instruction": "Given attack pattern: Replace Binaries.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Replace Binaries"
    }
  },
  {
    "instruction": "Given attack pattern: Fake the Source of Data.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n\nName:Malicious Automated Software Update via Spoofing\nDescription: An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.\nNature of relationship: CanPrecede\n\n\nName:Bluetooth Impersonation AttackS (BIAS)\nDescription: An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target\u2019s capabilities.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n",
        "Name:Malicious Automated Software Update via Spoofing\nDescription: An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.\nNature of relationship: CanPrecede\n\n",
        "Name:Bluetooth Impersonation AttackS (BIAS)\nDescription: An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target\u2019s capabilities.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Fake the Source of Data"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: IP (DF) 'Don't Fragment Bit' Echoing Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to IP (DF) 'Don't Fragment Bit' Echoing Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "IP (DF) 'Don't Fragment Bit' Echoing Probe"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Alternative Execution Due to Deceptive Filenames",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Alternative Execution Due to Deceptive Filenames: Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Alternative Execution Due to Deceptive Filenames"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: NoSQL Injection",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to NoSQL Injection: Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Command Injection\nDescription: An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "NoSQL Injection"
    }
  },
  {
    "instruction": "Given attack pattern: Buffer Overflow in an API Call.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Buffer Overflow in an API Call"
    }
  },
  {
    "instruction": "Given attack pattern: Flash Parameter Injection.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Flash Injection\nDescription: An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.\nNature of relationship: ChildOf\n\n\n- Name:HTTP Parameter Pollution (HPP)\nDescription: An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.\nNature of relationship: CanAlsoBe\n\n\n- Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n\n- Name:Cross-Site Flashing\nDescription: An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flash Injection\nDescription: An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.\nNature of relationship: ChildOf\n\n",
        "Name:HTTP Parameter Pollution (HPP)\nDescription: An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.\nNature of relationship: CanAlsoBe\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
        "Name:Cross-Site Flashing\nDescription: An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Flash Parameter Injection"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Infiltration of Software Development Environment",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Infiltration of Software Development Environment"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Influence via Psychological Principles",
    "context": "",
    "output": "The related attack patterns to Influence via Psychological Principles are: Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence via Psychological Principles"
    }
  },
  {
    "instruction": "Given attack pattern: Lock Bumping.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Physical Locks\nDescription: An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Lock Bumping"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Browser Fingerprinting",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Browser Fingerprinting: Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Application Fingerprinting\nDescription: An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Browser Fingerprinting"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Install Rootkit ",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Install Rootkit : Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Targeted Malware\nDescription: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Install Rootkit "
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Security Software Footprinting",
    "context": "",
    "output": "The related attack patterns to Security Software Footprinting are: Name:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:System Footprinting\nDescription: An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Security Software Footprinting"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Leverage Alternate Encoding",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Input Data Manipulation\nDescription: An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Altered Installed BIOS",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Altered Installed BIOS"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP (ISN) Counter Rate Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP (ISN) Counter Rate Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP (ISN) Counter Rate Probe"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Data Interchange Protocol Manipulation",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Data Interchange Protocol Manipulation: Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Data Interchange Protocol Manipulation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Client-Server Protocol Manipulation",
    "context": "",
    "output": "The related attack patterns to Client-Server Protocol Manipulation are: Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Protocol Manipulation\nDescription: An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Client-Server Protocol Manipulation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Restful Privilege Elevation",
    "context": "",
    "output": "The related attack patterns to Restful Privilege Elevation are: Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n\nName:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Accessing Functionality Not Properly Constrained by ACLs\nDescription: In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.\nNature of relationship: ChildOf\n\n",
        "Name:Exploiting Incorrectly Configured Access Control Security Levels\nDescription: An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Restful Privilege Elevation"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Regular Expression Exponential Blowup",
    "context": "",
    "output": "The related attack patterns to Regular Expression Exponential Blowup are: Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Excessive Allocation\nDescription: An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Regular Expression Exponential Blowup"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Block Access to Libraries",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Block Access to Libraries: Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Blockage\nDescription: An adversary blocks the delivery of an important system resource causing the system to fail or stop working.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Block Access to Libraries"
    }
  },
  {
    "instruction": "Given attack pattern: Calling Micro-Services Directly.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Functionality Bypass\nDescription: An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Calling Micro-Services Directly"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Design Alteration",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Design Alteration: Name:Modification During Manufacture\nDescription: An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Modification During Manufacture\nDescription: An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Design Alteration"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Spoofing of UDDI/ebXML Messages",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Spoofing of UDDI/ebXML Messages: Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Spoofing of UDDI/ebXML Messages"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Cellular Rogue Base Station",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Establish Rogue Location\nDescription: An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cellular Rogue Base Station"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Escaping a Sandbox by Calling Code in Another Language",
    "context": "",
    "output": "The related attack patterns to Escaping a Sandbox by Calling Code in Another Language are: Name:Escaping Virtualization\nDescription: An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Escaping Virtualization\nDescription: An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Escaping a Sandbox by Calling Code in Another Language"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Root/Jailbreak Detection Evasion via Debugging",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Root/Jailbreak Detection Evasion via Debugging: Name:Exploit Non-Production Interfaces\nDescription: An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.\nNature of relationship: ChildOf\n\n\n- Name:Subvert Code-signing Facilities\nDescription: Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.\nNature of relationship: CanPrecede\n\n\n- Name:Root/Jailbreak Detection Evasion via Hooking\nDescription: An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to \"hook\" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploit Non-Production Interfaces\nDescription: An adversary exploits a sample, demonstration, test, or debug interface that is unintentionally enabled on a production system, with the goal of gleaning information or leveraging functionality that would otherwise be unavailable.\nNature of relationship: ChildOf\n\n",
        "Name:Subvert Code-signing Facilities\nDescription: Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.\nNature of relationship: CanPrecede\n\n",
        "Name:Root/Jailbreak Detection Evasion via Hooking\nDescription: An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to \"hook\" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Debugging"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to HTTP Request Smuggling",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n\n* Name:HTTP Response Smuggling\nDescription: An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n\n* Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n\n* Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n\n* Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n\n* Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n\n* Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\n* Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
        "Name:HTTP Response Smuggling\nDescription: An adversary manipulates and injects malicious content in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., server).\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n",
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n",
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "HTTP Request Smuggling"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: PHP Local File Inclusion",
    "context": "",
    "output": "The related attack patterns to PHP Local File Inclusion are: Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Local Code Inclusion\nDescription: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "PHP Local File Inclusion"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Hardware Design Specifications Are Altered",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Hardware Design Specifications Are Altered: Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hardware Design Specifications Are Altered"
    }
  },
  {
    "instruction": "Given attack pattern: Force Use of Corrupted Files.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Force Use of Corrupted Files"
    }
  },
  {
    "instruction": "Given attack pattern: Flash Memory Attacks.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Infected Memory\nDescription: An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infected Memory\nDescription: An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Flash Memory Attacks"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Requirements for ASIC Functionality Maliciously Altered",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Requirements for ASIC Functionality Maliciously Altered: Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Design Alteration\nDescription: An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Requirements for ASIC Functionality Maliciously Altered"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Generic Cross-Browser Cross-Domain Theft",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Injection\nDescription: An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Generic Cross-Browser Cross-Domain Theft"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Process Footprinting",
    "context": "",
    "output": "The related attack patterns to Process Footprinting are: Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Footprinting\nDescription: An adversary engages in probing and exploration activities to identify constituents and properties of the target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Process Footprinting"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Influence Perception of Consensus or Social Proof",
    "context": "",
    "output": "The related attack patterns to Influence Perception of Consensus or Social Proof are: Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Consensus or Social Proof"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Terrestrial Jamming",
    "context": "",
    "output": "The related attack patterns to Terrestrial Jamming are: Name:Principal Spoof\nDescription: A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Principal Spoof\nDescription: A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Terrestrial Jamming"
    }
  },
  {
    "instruction": "Given attack pattern: Electromagnetic Side-Channel Attack.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Black Box Reverse Engineering\nDescription: An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Electromagnetic Side-Channel Attack"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: HTTP Request Splitting",
    "context": "",
    "output": "The related attack patterns to HTTP Request Splitting are: Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n\nName:HTTP Response Splitting\nDescription: An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n\nName:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n\nName:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n\nName:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n\nName:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n\nName:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n\nName:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Client-Server Protocol Manipulation\nDescription: An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.\nNature of relationship: ChildOf\n\n",
        "Name:HTTP Response Splitting\nDescription: An adversary manipulates and injects malicious content, in the form of secret unauthorized HTTP responses, into a single HTTP response from a vulnerable or compromised back-end HTTP agent (e.g., web server) or into an already spoofed HTTP response from an adversary controlled domain/site.\nSee CanPrecede relationships for possible consequences.\n\nNature of relationship: PeerOf\n\n",
        "Name:Authentication Bypass\nDescription: An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.\nNature of relationship: CanPrecede\n\n",
        "Name:Cache Poisoning\nDescription: An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.\nNature of relationship: CanPrecede\n\n",
        "Name:Cross-Site Scripting (XSS)\nDescription: An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.\nNature of relationship: CanPrecede\n\n",
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: CanPrecede\n\n",
        "Name:Content Spoofing\nDescription: An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.\nNature of relationship: CanPrecede\n\n",
        "Name:Resource Location Spoofing\nDescription: An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "HTTP Request Splitting"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Postfix, Null Terminate, and Backslash",
    "context": "",
    "output": "The related attack patterns to Postfix, Null Terminate, and Backslash are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Postfix, Null Terminate, and Backslash"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Influence Perception of Liking",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Influence Perception of Liking: Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Liking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Influence via Incentives",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Influence via Incentives: Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Manipulate Human Behavior\nDescription: An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence via Incentives"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Argument Injection",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Argument Injection: Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Parameter Injection\nDescription: An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Argument Injection"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy: Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Adversary in the Middle (AiTM)\nDescription: An adversary targets the communication between two components (typically client and server), in order to alter or obtain data from transactions. A general approach entails the adversary placing themself within the communication channel between the two components.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Targeting Error Pages.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n- Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\n- Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Targeting Error Pages"
    }
  },
  {
    "instruction": "Given attack pattern: Try Common or Default Usernames and Passwords.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n\n- Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n\n- Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n\n- Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n\n- Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Password Brute Forcing\nDescription: An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.\nNature of relationship: ChildOf\n\n",
        "Name:Credential Stuffing\nDescription: An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services.\nNature of relationship: CanPrecede\n\n",
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanPrecede\n\n",
        "Name:Windows Admin Shares with Stolen Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.\nNature of relationship: CanPrecede\n\n",
        "Name:Use of Known Operating System Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Try Common or Default Usernames and Passwords"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Exploiting Incorrectly Configured SSL/TLS",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Communication Channel Manipulation\nDescription: An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Communication Channel Manipulation\nDescription: An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Exploiting Incorrectly Configured SSL/TLS"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: XSS Through HTTP Headers",
    "context": "",
    "output": "The related attack patterns to XSS Through HTTP Headers are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\n- Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n\n- Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Through HTTP Headers"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: TCP 'RST' Flag Checksum Probe",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to TCP 'RST' Flag Checksum Probe: Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Active OS Fingerprinting\nDescription: An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "TCP 'RST' Flag Checksum Probe"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Influence via Modes of Thinking",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence via Psychological Principles\nDescription: The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence via Modes of Thinking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Using Slashes and URL Encoding Combined to Bypass Validation Logic: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Given attack pattern: Expanding Control over the Operating System from the Database.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:SQL Injection\nDescription: This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Expanding Control over the Operating System from the Database"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Spoof Version Control System Commit Metadata",
    "context": "",
    "output": "The related attack patterns to Spoof Version Control System Commit Metadata are: Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Spoof Open-Source Software Metadata\nDescription: An adversary spoofs open-source software metadata in an attempt to masquerade malicious software as popular, maintained, and trusted.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Spoof Version Control System Commit Metadata"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Relative Path Traversal",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Relative Path Traversal: Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Path Traversal\nDescription: An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Relative Path Traversal"
    }
  },
  {
    "instruction": "Given attack pattern: Signature Spoof.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Identity Spoofing\nDescription: Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Signature Spoof"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Using Unicode Encoding to Bypass Validation Logic",
    "context": "",
    "output": "The related attack patterns to Using Unicode Encoding to Bypass Validation Logic are: Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Leverage Alternate Encoding\nDescription: An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Using Unicode Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to UDP Flood",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "UDP Flood"
    }
  },
  {
    "instruction": "Given attack pattern: Hiding Malicious Data or Code within Files.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:File Manipulation\nDescription: An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Hiding Malicious Data or Code within Files"
    }
  },
  {
    "instruction": "Given attack pattern: Session Hijacking.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Exploitation of Trusted Identifiers\nDescription: An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Session Hijacking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Eavesdropping",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Eavesdropping: Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Interception\nDescription: An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Eavesdropping"
    }
  },
  {
    "instruction": "Given attack pattern: XML Flood.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Flooding\nDescription: An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XML Flood"
    }
  },
  {
    "instruction": "Given attack pattern: Cross Site Tracing.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Session Hijacking\nDescription: This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Fuzzing for garnering other adjacent user/sensitive data",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Query System for Information\nDescription: An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data"
    }
  },
  {
    "instruction": "Given attack pattern: Smudge Attack.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Smudge Attack"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: WiFi MAC Address Tracking",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to WiFi MAC Address Tracking: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "WiFi MAC Address Tracking"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Local Code Inclusion",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Local Code Inclusion: Name:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Code Inclusion\nDescription: An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Local Code Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern: XSS Targeting HTML Attributes.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n\nName:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n\nName:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Reflected XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.\nNature of relationship: ChildOf\n\n",
        "Name:Stored XSS\nDescription: An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.\nNature of relationship: ChildOf\n\n",
        "Name:DOM-Based XSS\nDescription: This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "XSS Targeting HTML Attributes"
    }
  },
  {
    "instruction": "List the CAPEC attack pattern related to: Sniff Application Code",
    "context": "",
    "output": "Sure. Here is a list of attack patterns related to Sniff Application Code: Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n\nName:Retrieve Embedded Sensitive Data\nDescription: An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\nNature of relationship: CanPrecede\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Sniffing Attacks\nDescription: In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.\nNature of relationship: ChildOf\n\n",
        "Name:Retrieve Embedded Sensitive Data\nDescription: An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.\nNature of relationship: CanPrecede\n\n"
      ],
      "@Name": "Sniff Application Code"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Influence Perception of Authority",
    "context": "",
    "output": "The related attack patterns to Influence Perception of Authority are: Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Influence Perception\nDescription: The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Influence Perception of Authority"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Buffer Overflow via Parameter Expansion",
    "context": "",
    "output": "The related attack patterns to Buffer Overflow via Parameter Expansion are: Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Overflow Buffers\nDescription: Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Buffer Overflow via Parameter Expansion"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Carry-Off GPS Attack",
    "context": "",
    "output": "The related attack patterns to Carry-Off GPS Attack are: Name:Counterfeit GPS Signals\nDescription: An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Counterfeit GPS Signals\nDescription: An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Carry-Off GPS Attack"
    }
  },
  {
    "instruction": "Given attack pattern: Create files with the same name as files protected with a higher classification.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Using Malicious Files\nDescription: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Create files with the same name as files protected with a higher classification"
    }
  },
  {
    "instruction": "Given attack pattern: Cloning Magnetic Strip Cards.\nWhat are its related attack patterns",
    "context": "",
    "output": "The related attack patterns are: Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Bypassing Electronic Locks and Access Controls\nDescription: An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Cloning Magnetic Strip Cards"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Timestamp Request",
    "context": "",
    "output": "The related attack patterns to Timestamp Request are: Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Host Discovery\nDescription: An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Timestamp Request"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Malicious Logic Inserted Into Product by Authorized Developer",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Development Alteration\nDescription: An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Malicious Logic Inserted Into Product by Authorized Developer"
    }
  },
  {
    "instruction": "Which attack pattern are related to the attack pattern: Network Boundary Bridging",
    "context": "",
    "output": "The related attack patterns to Network Boundary Bridging are: Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n\n- Name:Try Common or Default Usernames and Passwords\nDescription: An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.\nNature of relationship: CanFollow\n\n\n- Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanFollow\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Infrastructure Manipulation\nDescription: An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.\nNature of relationship: ChildOf\n\n",
        "Name:Try Common or Default Usernames and Passwords\nDescription: An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.\nNature of relationship: CanFollow\n\n",
        "Name:Use of Known Domain Credentials\nDescription: An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service.\nNature of relationship: CanFollow\n\n"
      ],
      "@Name": "Network Boundary Bridging"
    }
  },
  {
    "instruction": "Can you please give me all CAPEC patterns that are realted to Serialized Data Parameter Blowup",
    "context": "",
    "output": "Indeed. here are some of the related attack patterns:\nName:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_relationships",
    "parsed_raw_data": {
      "Related_Attack_Patterns": [
        "Name:Oversized Serialized Data Payloads\nDescription: An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.\nNature of relationship: ChildOf\n\n"
      ],
      "@Name": "Serialized Data Parameter Blowup"
    }
  }
]