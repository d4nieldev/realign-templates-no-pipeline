[
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: SOAP Array Blowup",
    "context": "",
    "output": "Here are the mitigations relevant for SOAP Array Blowup:\nEnforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.",
      "@Name": "SOAP Array Blowup"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: HTTP Request Smuggling",
    "context": "",
    "output": "For attack pattern HTTP Request Smuggling, the list of mitigations is: Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\n* Configuration: front-end HTTP agents notice ambiguous requests.\n* Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n* Configuration: Disable reuse of back-end connections.\n* Configuration: Use HTTP/2 for back-end connections.\n* Configuration: Use the same web server software for front-end and back-end server.\n* Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n* Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n* Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n* Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n* Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\n* Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
        "Configuration: front-end HTTP agents notice ambiguous requests.",
        "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
        "Configuration: Disable reuse of back-end connections.",
        "Configuration: Use HTTP/2 for back-end connections.",
        "Configuration: Use the same web server software for front-end and back-end server.",
        "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
        "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
        "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
        "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
        "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
        "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
      ],
      "@Name": "HTTP Request Smuggling"
    }
  },
  {
    "instruction": "Given the attack pattern: System Build Data Maliciously Altered. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Implement configuration management security practices that protect the integrity of software and associated data.\nMonitor and control access to the configuration management system.\nHarden centralized repositories against attack.\nEstablish acceptance criteria for configuration management check-in to assure integrity.\nPlan for and audit the security of configuration management administration processes.\nMaintain configuration control over operational systems.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement configuration management security practices that protect the integrity of software and associated data.",
        "Monitor and control access to the configuration management system.",
        "Harden centralized repositories against attack.",
        "Establish acceptance criteria for configuration management check-in to assure integrity.",
        "Plan for and audit the security of configuration management administration processes.",
        "Maintain configuration control over operational systems."
      ],
      "@Name": "System Build Data Maliciously Altered"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Relative Path Traversal",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement\n* Implementation: Perform input validation for all remote content, including remote and user-generated content.\n* Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.\n* Implementation: Prefer working without user input when using file system calls\n* Implementation: Use indirect references rather than actual file names.\n* Implementation: Use possible permissions on file access when developing and deploying web applications.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
        "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.",
        "Implementation: Prefer working without user input when using file system calls",
        "Implementation: Use indirect references rather than actual file names.",
        "Implementation: Use possible permissions on file access when developing and deploying web applications."
      ],
      "@Name": "Relative Path Traversal"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Server Motherboard Compromise",
    "context": "",
    "output": "For attack pattern Server Motherboard Compromise, the list of mitigations is: Purchase IT systems, components and parts from government approved vendors whenever possible.\n* Establish diversity among suppliers.\n* Conduct rigorous threat assessments of suppliers.\n* Require that Bills of Material (BoM) for critical parts and components be certified.\n* Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.\n* Establish trusted supplier networks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Purchase IT systems, components and parts from government approved vendors whenever possible.",
        "Establish diversity among suppliers.",
        "Conduct rigorous threat assessments of suppliers.",
        "Require that Bills of Material (BoM) for critical parts and components be certified.",
        "Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.",
        "Establish trusted supplier networks."
      ],
      "@Name": "Server Motherboard Compromise"
    }
  },
  {
    "instruction": "Given the attack pattern: Cellular Rogue Base Station. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Passively monitor cellular network connection for real-time threat detection and logging for manual review.",
      "@Name": "Cellular Rogue Base Station"
    }
  },
  {
    "instruction": "Given the attack pattern: Identify Shared Files/Directories on System. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.",
      "@Name": "Identify Shared Files/Directories on System"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: TCP Fragmentation",
    "context": "",
    "output": "Here are the mitigations relevant for TCP Fragmentation:\nThis attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.",
      "@Name": "TCP Fragmentation"
    }
  },
  {
    "instruction": "Given the attack pattern: Hijacking a Privileged Thread of Execution. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.\nApplication Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.",
        "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope."
      ],
      "@Name": "Hijacking a Privileged Thread of Execution"
    }
  },
  {
    "instruction": "Given the attack pattern: Buffer Overflow via Parameter Expansion. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system",
      "@Name": "Buffer Overflow via Parameter Expansion"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Harvesting Information via API Event Monitoring",
    "context": "",
    "output": "For attack pattern Harvesting Information via API Event Monitoring, the list of mitigations is: Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.",
      "@Name": "Harvesting Information via API Event Monitoring"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Action Spoofing",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Avoid interacting with suspicious sites or clicking suspicious links.\n* An organization should provide regular, robust cybersecurity training to its employees.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Avoid interacting with suspicious sites or clicking suspicious links.",
        "An organization should provide regular, robust cybersecurity training to its employees."
      ],
      "@Name": "Action Spoofing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Task Impersonation",
    "context": "",
    "output": "Here are the mitigations relevant for Task Impersonation:\nThe only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
      "@Name": "Task Impersonation"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Using Unpublished Interfaces or Functionality",
    "context": "",
    "output": "For attack pattern Using Unpublished Interfaces or Functionality, the list of mitigations is: Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.",
      "@Name": "Using Unpublished Interfaces or Functionality"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Collect Data from Registries",
    "context": "",
    "output": "For attack pattern Collect Data from Registries, the list of mitigations is: Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.\n- Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.",
        "Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
      ],
      "@Name": "Collect Data from Registries"
    }
  },
  {
    "instruction": "Given the attack pattern: Buffer Overflow in Local Command-Line Utilities. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nOperational: Use OS-level preventative functionality. Not a complete solution.\nApply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.\nDo not unnecessarily expose services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.",
        "Use a language or compiler that performs automatic bounds checking.",
        "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Operational: Use OS-level preventative functionality. Not a complete solution.",
        "Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.",
        "Do not unnecessarily expose services."
      ],
      "@Name": "Buffer Overflow in Local Command-Line Utilities"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Reflected XSS",
    "context": "",
    "output": "Here are the mitigations relevant for Reflected XSS:\nUse browser technologies that do not allow client-side scripting.\n- Utilize strict type, character, and encoding enforcement.\n- Ensure that all user-supplied input is validated before use.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use browser technologies that do not allow client-side scripting.",
        "Utilize strict type, character, and encoding enforcement.",
        "Ensure that all user-supplied input is validated before use."
      ],
      "@Name": "Reflected XSS"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Flash Parameter Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).",
      "@Name": "Flash Parameter Injection"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XSS Using Alternate Syntax",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use browser technologies that do not allow client side scripting.\n* Design: Utilize strict type, character, and encoding enforcement\n* Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n* Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\n* Implementation: Perform input validation for all remote content, including remote and user-generated content\n* Implementation: Perform output validation for all remote content.\n* Implementation: Disable scripting languages such as JavaScript in browser\n* Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Design: Utilize strict type, character, and encoding enforcement",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser",
        "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
      ],
      "@Name": "XSS Using Alternate Syntax"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Fingerprinting",
    "context": "",
    "output": "Here are the mitigations relevant for Fingerprinting:\nWhile some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.",
      "@Name": "Fingerprinting"
    }
  },
  {
    "instruction": "Given the attack pattern: Collect Data from Clipboard. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.\n- Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.",
        "Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern."
      ],
      "@Name": "Collect Data from Clipboard"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Spoofing of UDDI/ebXML Messages",
    "context": "",
    "output": "For attack pattern Spoofing of UDDI/ebXML Messages, the list of mitigations is: Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.",
      "@Name": "Spoofing of UDDI/ebXML Messages"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Collect Data from Screen Capture",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.\nWhile screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.",
        "While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature."
      ],
      "@Name": "Collect Data from Screen Capture"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Local Code Inclusion",
    "context": "",
    "output": "Here are the mitigations relevant for Local Code Inclusion:\nImplementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.",
      "@Name": "Local Code Inclusion"
    }
  },
  {
    "instruction": "Given the attack pattern: Use of Known Kerberos Credentials. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.\n* Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.\n* Do not reuse Kerberos service account credentials across systems.\n* Deny remote use of Kerberos service account credentials to log into domain systems.\n* Do not allow Kerberos service accounts to be a local administrator on more than one system.\n* Enable at least AES Kerberos encryption for tickets.\n* Monitor system and domain logs for abnormal credential access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.",
        "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.",
        "Do not reuse Kerberos service account credentials across systems.",
        "Deny remote use of Kerberos service account credentials to log into domain systems.",
        "Do not allow Kerberos service accounts to be a local administrator on more than one system.",
        "Enable at least AES Kerberos encryption for tickets.",
        "Monitor system and domain logs for abnormal credential access."
      ],
      "@Name": "Use of Known Kerberos Credentials"
    }
  },
  {
    "instruction": "Given the attack pattern: XML Flood. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n* Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
        "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
      ],
      "@Name": "XML Flood"
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulate Registry Information. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure proper permissions are set for Registry hives to prevent users from modifying keys.\n* Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.\n* Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure proper permissions are set for Registry hives to prevent users from modifying keys.",
        "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.",
        "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern."
      ],
      "@Name": "Manipulate Registry Information"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Upload a Web Shell to a Web Server",
    "context": "",
    "output": "For attack pattern Upload a Web Shell to a Web Server, the list of mitigations is: Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.\n- Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.",
        "Ensure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist."
      ],
      "@Name": "Upload a Web Shell to a Web Server"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Double Encoding",
    "context": "",
    "output": "Here are the mitigations relevant for Double Encoding:\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\n- Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\n- When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\n- Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\n- Refer to the RFCs to safely decode URL.\n- Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\n- There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
        "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
        "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
        "Refer to the RFCs to safely decode URL.",
        "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
        "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
      ],
      "@Name": "Double Encoding"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Transparent Proxy Abuse",
    "context": "",
    "output": "Here are the mitigations relevant for Transparent Proxy Abuse:\nDesign: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.\n* Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.",
        "Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc."
      ],
      "@Name": "Transparent Proxy Abuse"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Windows Admin Shares with Stolen Credentials",
    "context": "",
    "output": "Here are the mitigations relevant for Windows Admin Shares with Stolen Credentials:\nDo not reuse local administrator account credentials across systems.\n* Deny remote use of local admin credentials to log into domain systems.\n* Do not allow accounts to be a local administrator on more than one system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not reuse local administrator account credentials across systems.",
        "Deny remote use of local admin credentials to log into domain systems.",
        "Do not allow accounts to be a local administrator on more than one system."
      ],
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Adversary in the Middle (AiTM)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Ensure Public Keys are signed by a Certificate Authority\n* Encrypt communications using cryptography (e.g., SSL/TLS)\n* Use Strong mutual authentication to always fully authenticate both ends of any communications channel.\n* Exchange public keys using a secure channel",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure Public Keys are signed by a Certificate Authority",
        "Encrypt communications using cryptography (e.g., SSL/TLS)",
        "Use Strong mutual authentication to always fully authenticate both ends of any communications channel.",
        "Exchange public keys using a secure channel"
      ],
      "@Name": "Adversary in the Middle (AiTM)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Manipulating Opaque Client-based Data Tokens",
    "context": "",
    "output": "For attack pattern Manipulating Opaque Client-based Data Tokens, the list of mitigations is: One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.\nMake sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)\nMake sure that all session tokens use a good source of randomness\nPerform validation on the server side to make sure that client side data tokens are consistent with what is expected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.",
        "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)",
        "Make sure that all session tokens use a good source of randomness",
        "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected."
      ],
      "@Name": "Manipulating Opaque Client-based Data Tokens"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Password Recovery Exploitation",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.\n* E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.\n* Ensure that your password recovery functionality is not vulnerable to an injection style attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.",
        "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.",
        "Ensure that your password recovery functionality is not vulnerable to an injection style attack."
      ],
      "@Name": "Password Recovery Exploitation"
    }
  },
  {
    "instruction": "Given the attack pattern: Embedding Scripts within Scripts. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use browser technologies that do not allow client side scripting.\n- Utilize strict type, character, and encoding enforcement.\n- Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n- Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n- Perform input validation for all remote content.\n- Perform output validation for all remote content.\n- Disable scripting languages such as JavaScript in browser\n- Session tokens for specific host\n- Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\n- Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use browser technologies that do not allow client side scripting.",
        "Utilize strict type, character, and encoding enforcement.",
        "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
        "Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Perform input validation for all remote content.",
        "Perform output validation for all remote content.",
        "Disable scripting languages such as JavaScript in browser",
        "Session tokens for specific host",
        "Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
        "Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
      ],
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "context": "",
    "output": "Here are the mitigations relevant for Using Meta-characters in E-mail Headers to Inject Malicious Payloads:\nDesign: Perform validation on email header data\n- Implementation: Implement email filtering solutions on mail server or on MTA, relay server.\n- Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Perform validation on email header data",
        "Implementation: Implement email filtering solutions on mail server or on MTA, relay server.",
        "Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names"
      ],
      "@Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"
    }
  },
  {
    "instruction": "Given the attack pattern: Leverage Executable Code in Non-Executable Files. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Enforce principle of least privilege\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\nImplementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\nImplementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.\nImplementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
        "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
        "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.",
        "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute."
      ],
      "@Name": "Leverage Executable Code in Non-Executable Files"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Cellular Data Injection",
    "context": "",
    "output": "For attack pattern Cellular Data Injection, the list of mitigations is: Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.",
      "@Name": "Cellular Data Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Leveraging/Manipulating Configuration File Search Paths. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Enforce principle of least privilege\nDesign: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program\nImplementation: Host integrity monitoring",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program",
        "Implementation: Host integrity monitoring"
      ],
      "@Name": "Leveraging/Manipulating Configuration File Search Paths"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Search Order Hijacking",
    "context": "",
    "output": "For attack pattern Search Order Hijacking, the list of mitigations is: Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected\n* Design: Sign system DLLs so that unauthorized DLLs can be detected.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected",
        "Design: Sign system DLLs so that unauthorized DLLs can be detected."
      ],
      "@Name": "Search Order Hijacking"
    }
  },
  {
    "instruction": "Given the attack pattern: BlueSmacking. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Disable Bluetooth when not being used.\n* When using Bluetooth, set it to hidden or non-discoverable mode.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Disable Bluetooth when not being used.",
        "When using Bluetooth, set it to hidden or non-discoverable mode."
      ],
      "@Name": "BlueSmacking"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Use of Known Domain Credentials",
    "context": "",
    "output": "Here are the mitigations relevant for Use of Known Domain Credentials:\nLeverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\n* Create a strong password policy and ensure that your system enforces this policy.\n* Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n* Do not reuse local administrator account credentials across systems.\n* Deny remote use of local admin credentials to log into domain systems.\n* Do not allow accounts to be a local administrator on more than one system.\n* Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\n* Monitor system and domain logs for abnormal credential access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
        "Do not reuse local administrator account credentials across systems.",
        "Deny remote use of local admin credentials to log into domain systems.",
        "Do not allow accounts to be a local administrator on more than one system.",
        "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
        "Monitor system and domain logs for abnormal credential access."
      ],
      "@Name": "Use of Known Domain Credentials"
    }
  },
  {
    "instruction": "Given the attack pattern: Sustained Client Engagement. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.",
      "@Name": "Sustained Client Engagement"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Subvert Code-signing Facilities",
    "context": "",
    "output": "For attack pattern Subvert Code-signing Facilities, the list of mitigations is: A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.\n- If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.",
        "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable."
      ],
      "@Name": "Subvert Code-signing Facilities"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Spear Phishing",
    "context": "",
    "output": "For attack pattern Spear Phishing, the list of mitigations is: Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "@Name": "Spear Phishing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: ICMP Fragmentation",
    "context": "",
    "output": "For attack pattern ICMP Fragmentation, the list of mitigations is: This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.",
      "@Name": "ICMP Fragmentation"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Root/Jailbreak Detection Evasion via Debugging",
    "context": "",
    "output": "For attack pattern Root/Jailbreak Detection Evasion via Debugging, the list of mitigations is: Instantiate checks within the application code that ensures debuggers are not attached.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Instantiate checks within the application code that ensures debuggers are not attached.",
      "@Name": "Root/Jailbreak Detection Evasion via Debugging"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Altered Installed BIOS",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Deploy strong code integrity policies to allow only authorized apps to run.\nUse endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nMaintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nRequire SSL for update channels and implement certificate transparency based verification.\nSign update packages and BIOS patches.\nUse hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Deploy strong code integrity policies to allow only authorized apps to run.",
        "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
        "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
        "Require SSL for update channels and implement certificate transparency based verification.",
        "Sign update packages and BIOS patches.",
        "Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography."
      ],
      "@Name": "Altered Installed BIOS"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Influence via Incentives",
    "context": "",
    "output": "For attack pattern Influence via Incentives, the list of mitigations is: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence via Incentives"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Electromagnetic Side-Channel Attack",
    "context": "",
    "output": "For attack pattern Electromagnetic Side-Channel Attack, the list of mitigations is: Utilize side-channel resistant implementations of all crypto algorithms.\nStrong physical security of all devices that contain secret key information. (even when devices are not in use)",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Utilize side-channel resistant implementations of all crypto algorithms.",
        "Strong physical security of all devices that contain secret key information. (even when devices are not in use)"
      ],
      "@Name": "Electromagnetic Side-Channel Attack"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Sniffing Network Traffic",
    "context": "",
    "output": "For attack pattern Sniffing Network Traffic, the list of mitigations is: Obfuscate network traffic through encryption to prevent its readability by network sniffers.\nEmploy appropriate levels of segmentation to your network in accordance with best practices.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Obfuscate network traffic through encryption to prevent its readability by network sniffers.",
        "Employ appropriate levels of segmentation to your network in accordance with best practices."
      ],
      "@Name": "Sniffing Network Traffic"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Signature Spoofing by Key Recreation",
    "context": "",
    "output": "For attack pattern Signature Spoofing by Key Recreation, the list of mitigations is: Ensure cryptographic elements have been sufficiently tested for weaknesses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure cryptographic elements have been sufficiently tested for weaknesses.",
      "@Name": "Signature Spoofing by Key Recreation"
    }
  },
  {
    "instruction": "Given the attack pattern: Embedding NULL Bytes. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.",
      "@Name": "Embedding NULL Bytes"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - DOM-Based XSS",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use browser technologies that do not allow client-side scripting.\n- Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.\n- Ensure that all user-supplied input is validated before use.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use browser technologies that do not allow client-side scripting.",
        "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.",
        "Ensure that all user-supplied input is validated before use."
      ],
      "@Name": "DOM-Based XSS"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Compromising Emanations Attack",
    "context": "",
    "output": "For attack pattern Compromising Emanations Attack, the list of mitigations is: None are known.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "None are known.",
      "@Name": "Compromising Emanations Attack"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: URL Encoding",
    "context": "",
    "output": "Here are the mitigations relevant for URL Encoding:\nRefer to the RFCs to safely decode URL.\n* Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\n* There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).\n* Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\n* Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\n* Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\n* When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Refer to the RFCs to safely decode URL.",
        "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
        "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
        "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
        "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible."
      ],
      "@Name": "URL Encoding"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Exploitation of Thunderbolt Protection Flaws",
    "context": "",
    "output": "Here are the mitigations relevant for Exploitation of Thunderbolt Protection Flaws:\nImplementation: Kernel Direct Memory Access Protection\nConfiguration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface\nConfiguration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface\nConfiguration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode\nConfiguration: Set Security Level to SL3 for Thunderbolt 2 system port\nConfiguration: Disable PCIe tunneling to set Security Level to SL3\nConfiguration: Disable Boot Camp upon MacOS systems",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Kernel Direct Memory Access Protection",
        "Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface",
        "Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface",
        "Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode",
        "Configuration: Set Security Level to SL3 for Thunderbolt 2 system port",
        "Configuration: Disable PCIe tunneling to set Security Level to SL3",
        "Configuration: Disable Boot Camp upon MacOS systems"
      ],
      "@Name": "Exploitation of Thunderbolt Protection Flaws"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - SoundSquatting",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Authenticate all servers and perform redundant checks when using DNS hostnames.\n- Purchase potential SoundSquatted domains and forward to legitimate domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Authenticate all servers and perform redundant checks when using DNS hostnames.",
        "Purchase potential SoundSquatted domains and forward to legitimate domain."
      ],
      "@Name": "SoundSquatting"
    }
  },
  {
    "instruction": "Given the attack pattern: Serialized Data External Linking. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Configure the serialized data processor to only retrieve external entities from trusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Configure the serialized data processor to only retrieve external entities from trusted sources.",
      "@Name": "Serialized Data External Linking"
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Hardware Component Replacement. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.\nPrevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.\nUse tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.",
        "Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.",
        "Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering."
      ],
      "@Name": "Malicious Hardware Component Replacement"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Cryptanalysis",
    "context": "",
    "output": "Here are the mitigations relevant for Cryptanalysis:\nUse proven cryptographic algorithms with recommended key sizes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use proven cryptographic algorithms with recommended key sizes."
      ],
      "@Name": "Cryptanalysis"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: HTTP DoS",
    "context": "",
    "output": "For attack pattern HTTP DoS, the list of mitigations is: Configuration: Configure web server software to limit the waiting period on opened HTTP sessions\n- Design: Use load balancing mechanisms",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Configuration: Configure web server software to limit the waiting period on opened HTTP sessions",
        "Design: Use load balancing mechanisms"
      ],
      "@Name": "HTTP DoS"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: iFrame Overlay",
    "context": "",
    "output": "Here are the mitigations relevant for iFrame Overlay:\nConfiguration: Disable iFrames in the Web browser.\n- Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.\n- Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Configuration: Disable iFrames in the Web browser.",
        "Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.",
        "Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames."
      ],
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "Given the attack pattern: Android Activity Hijack. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).\n- Never use implicit intents for inter-application communication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).",
        "Never use implicit intents for inter-application communication."
      ],
      "@Name": "Android Activity Hijack"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - UDP Flood",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.",
      "@Name": "UDP Flood"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Pharming",
    "context": "",
    "output": "Here are the mitigations relevant for Pharming:\nAll sensitive information must be handled over a secure connection.\n* Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.\n* End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "All sensitive information must be handled over a secure connection.",
        "Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.",
        "End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority."
      ],
      "@Name": "Pharming"
    }
  },
  {
    "instruction": "Given the attack pattern: Rainbow Table Password Cracking. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.",
      "@Name": "Rainbow Table Password Cracking"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Alternative Execution Due to Deceptive Filenames",
    "context": "",
    "output": "Here are the mitigations relevant for Alternative Execution Due to Deceptive Filenames:\nApplications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.",
      "@Name": "Alternative Execution Due to Deceptive Filenames"
    }
  },
  {
    "instruction": "Given the attack pattern: Signature Spoofing by Improper Validation. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.",
      "@Name": "Signature Spoofing by Improper Validation"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Functionality Misuse",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.\n* When implementing security features, consider how they can be misused and compromised.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.",
        "When implementing security features, consider how they can be misused and compromised."
      ],
      "@Name": "Functionality Misuse"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Session Hijacking",
    "context": "",
    "output": "Here are the mitigations relevant for Session Hijacking:\nProperly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.",
      "@Name": "Session Hijacking"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: StarJacking",
    "context": "",
    "output": "Here are the mitigations relevant for StarJacking:\nBefore downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.\n- Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.\n- Reference vulnerability databases to determine if the software contains known vulnerabilities.\n- Only download open-source packages from reputable package managers.\n- After downloading open-source packages, ensure integrity values have not changed.\n- Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
        "Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.",
        "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
        "Only download open-source packages from reputable package managers.",
        "After downloading open-source packages, ensure integrity values have not changed.",
        "Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
      ],
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "Given the attack pattern: Expanding Control over the Operating System from the Database. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection\nConfiguration: Ensure that the DBMS is patched with the latest security patches\nDesign: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS\nDesign: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user\nUsage: Do not use the DBMS machine for anything else other than the database\nUsage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.\nUsage: Use an intrusion detection system to monitor network connections and logs on the database host.\nImplementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection",
        "Configuration: Ensure that the DBMS is patched with the latest security patches",
        "Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS",
        "Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user",
        "Usage: Do not use the DBMS machine for anything else other than the database",
        "Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.",
        "Usage: Use an intrusion detection system to monitor network connections and logs on the database host.",
        "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised"
      ],
      "@Name": "Expanding Control over the Operating System from the Database"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Sniffing Attacks",
    "context": "",
    "output": "For attack pattern Sniffing Attacks, the list of mitigations is: Encrypt sensitive information when transmitted on insecure mediums to prevent interception.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Encrypt sensitive information when transmitted on insecure mediums to prevent interception.",
      "@Name": "Sniffing Attacks"
    }
  },
  {
    "instruction": "Given the attack pattern: Overflow Buffers. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use a language or compiler that performs automatic bounds checking.\n- Use secure functions not vulnerable to buffer overflow.\n- If you have to use dangerous functions, make sure that you do boundary checking.\n- Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n- Use OS-level preventative functionality. Not a complete solution.\n- Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a language or compiler that performs automatic bounds checking.",
        "Use secure functions not vulnerable to buffer overflow.",
        "If you have to use dangerous functions, make sure that you do boundary checking.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Use OS-level preventative functionality. Not a complete solution.",
        "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software."
      ],
      "@Name": "Overflow Buffers"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Malicious Gray Market Hardware",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Purchase only from authorized resellers.\n* Validate serial numbers from multiple sources",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Purchase only from authorized resellers.",
        "Validate serial numbers from multiple sources"
      ],
      "@Name": "Malicious Gray Market Hardware"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "context": "",
    "output": "Here are the mitigations relevant for Using Slashes and URL Encoding Combined to Bypass Validation Logic:\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.\n- Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.\n- When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\n- Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\n- Refer to the RFCs to safely decode URL.\n- Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.\n- There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
        "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.",
        "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
        "Refer to the RFCs to safely decode URL.",
        "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.",
        "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)."
      ],
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Identity Spoofing",
    "context": "",
    "output": "Here are the mitigations relevant for Identity Spoofing:\nEmploy robust authentication processes (e.g., multi-factor authentication).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Employ robust authentication processes (e.g., multi-factor authentication).",
      "@Name": "Identity Spoofing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Infiltration of Software Development Environment",
    "context": "",
    "output": "Here are the mitigations relevant for Infiltration of Software Development Environment:\nAvoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.",
      "@Name": "Infiltration of Software Development Environment"
    }
  },
  {
    "instruction": "Given the attack pattern: Serialized Data with Nested Payloads. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.\nPerform validation on canonical data.\nPick a robust implementation of the data parser.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.",
        "Perform validation on canonical data.",
        "Pick a robust implementation of the data parser."
      ],
      "@Name": "Serialized Data with Nested Payloads"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Provide Counterfeit Component",
    "context": "",
    "output": "Here are the mitigations relevant for Provide Counterfeit Component:\nThere are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "There are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques.",
      "@Name": "Provide Counterfeit Component"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Excessive Allocation",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Limit the amount of resources that are accessible to unprivileged users.\nAssume all input is malicious. Consider all potentially relevant properties when validating input.\nConsider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\nUse resource-limiting settings, if possible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Limit the amount of resources that are accessible to unprivileged users.",
        "Assume all input is malicious. Consider all potentially relevant properties when validating input.",
        "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
        "Use resource-limiting settings, if possible."
      ],
      "@Name": "Excessive Allocation"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Cellular Broadcast Message Request",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Frequent changing of mobile number.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Frequent changing of mobile number.",
      "@Name": "Cellular Broadcast Message Request"
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Spoofing. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Avoid dependence on DNS\nDesign: Include \"hosts file\"/IP address in the application\nImplementation: Utilize a .onion domain with Tor support\nImplementation: DNSSEC\nImplementation: DNS-hold-open",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Avoid dependence on DNS",
        "Design: Include \"hosts file\"/IP address in the application",
        "Implementation: Utilize a .onion domain with Tor support",
        "Implementation: DNSSEC",
        "Implementation: DNS-hold-open"
      ],
      "@Name": "DNS Spoofing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Block Access to Libraries",
    "context": "",
    "output": "For attack pattern Block Access to Libraries, the list of mitigations is: Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.",
      "@Name": "Block Access to Libraries"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Load Value Injection",
    "context": "",
    "output": "Here are the mitigations relevant for Load Value Injection:\nDo not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.\nInsert explicit \u201clfence\u201d speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.",
        "Insert explicit \u201clfence\u201d speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded."
      ],
      "@Name": "Load Value Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: HTTP Flood. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.\nHire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.\nDesign: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.\nImplementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.",
        "Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.",
        "Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.",
        "Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots."
      ],
      "@Name": "HTTP Flood"
    }
  },
  {
    "instruction": "Given the attack pattern: Password Brute Forcing. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\n- Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.\n- Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
        "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
        "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
      ],
      "@Name": "Password Brute Forcing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: SQL Injection",
    "context": "",
    "output": "For attack pattern SQL Injection, the list of mitigations is: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.\n* Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.\n* Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
        "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.",
        "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
      ],
      "@Name": "SQL Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Android Intent Intercept",
    "context": "",
    "output": "Here are the mitigations relevant for Android Intent Intercept:\nTo mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.",
      "@Name": "Android Intent Intercept"
    }
  },
  {
    "instruction": "Given the attack pattern: Passing Local Filenames to Functions That Expect a URL. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n* Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.\n* Design: Use browser technologies that do not allow client side scripting.\n* Implementation: Perform input validation for all remote content.\n* Implementation: Perform output validation for all remote content.\n* Implementation: Disable scripting languages such as JavaScript in browser",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.",
        "Design: Use browser technologies that do not allow client side scripting.",
        "Implementation: Perform input validation for all remote content.",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser"
      ],
      "@Name": "Passing Local Filenames to Functions That Expect a URL"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Code Injection",
    "context": "",
    "output": "For attack pattern Code Injection, the list of mitigations is: Utilize strict type, character, and encoding enforcement\nEnsure all input content that is delivered to client is sanitized against an acceptable content specification.\nPerform input validation for all content.\nEnforce regular patching of software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Utilize strict type, character, and encoding enforcement",
        "Ensure all input content that is delivered to client is sanitized against an acceptable content specification.",
        "Perform input validation for all content.",
        "Enforce regular patching of software."
      ],
      "@Name": "Code Injection"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: HTTP Verb Tampering",
    "context": "",
    "output": "For attack pattern HTTP Verb Tampering, the list of mitigations is: Design: Ensure that only legitimate HTTP verbs are allowed.\nDesign: Do not use HTTP verbs as factors in access decisions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure that only legitimate HTTP verbs are allowed.",
        "Design: Do not use HTTP verbs as factors in access decisions."
      ],
      "@Name": "HTTP Verb Tampering"
    }
  },
  {
    "instruction": "Given the attack pattern: Flooding. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure that protocols have specific limits of scale configured.\n- Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.\n- Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that protocols have specific limits of scale configured.",
        "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.",
        "Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed."
      ],
      "@Name": "Flooding"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Remote Services with Stolen Credentials",
    "context": "",
    "output": "Here are the mitigations relevant for Remote Services with Stolen Credentials:\nDisable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.",
      "@Name": "Remote Services with Stolen Credentials"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: XSS Targeting URI Placeholders",
    "context": "",
    "output": "Here are the mitigations relevant for XSS Targeting URI Placeholders:\nDesign: Use browser technologies that do not allow client side scripting.\n* Design: Utilize strict type, character, and encoding enforcement.\n* Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n* Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.\n* Implementation: Perform input validation for all remote content, including remote and user-generated content\n* Implementation: Perform output validation for all remote content.\n* Implementation: Disable scripting languages such as JavaScript in browser\n* Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Design: Utilize strict type, character, and encoding enforcement.",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser",
        "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
      ],
      "@Name": "XSS Targeting URI Placeholders"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Malicious Logic Insertion into Product via Inclusion of Third-Party Component",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.\n* Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
        "Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment."
      ],
      "@Name": "Malicious Logic Insertion into Product via Inclusion of Third-Party Component"
    }
  },
  {
    "instruction": "Given the attack pattern: Design Alteration. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.\nEnsure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.",
        "Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification."
      ],
      "@Name": "Design Alteration"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Cross-Domain Search Timing",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests\n- Design: The browser's security model could be fixed to not leak timing information for cross domain requests",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests",
        "Design: The browser's security model could be fixed to not leak timing information for cross domain requests"
      ],
      "@Name": "Cross-Domain Search Timing"
    }
  },
  {
    "instruction": "Given the attack pattern: SQL Injection through SOAP Parameter Tampering. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Properly validate and sanitize/reject user input at the service provider.\nEnsure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.\nAt the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Properly validate and sanitize/reject user input at the service provider.",
        "Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.",
        "At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly."
      ],
      "@Name": "SQL Injection through SOAP Parameter Tampering"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Evercookie",
    "context": "",
    "output": "For attack pattern Evercookie, the list of mitigations is: Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.\nDesign: Safari browser's private browsing mode is currently effective against evercookies.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.",
        "Design: Safari browser's private browsing mode is currently effective against evercookies."
      ],
      "@Name": "Evercookie"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Signature Spoofing by Misrepresentation",
    "context": "",
    "output": "For attack pattern Signature Spoofing by Misrepresentation, the list of mitigations is: Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.",
      "@Name": "Signature Spoofing by Misrepresentation"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "context": "",
    "output": "For attack pattern Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions, the list of mitigations is: Use safe libraries to access resources such as files.\n* Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\n* Use synchronization to control the flow of execution.\n* Use static analysis tools to find race conditions.\n* Pay attention to concurrency problems related to the access of resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use safe libraries to access resources such as files.",
        "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
        "Use synchronization to control the flow of execution.",
        "Use static analysis tools to find race conditions.",
        "Pay attention to concurrency problems related to the access of resources."
      ],
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Authority. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Authority"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Quadratic Data Expansion",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nImplementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.",
        "Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
      ],
      "@Name": "Quadratic Data Expansion"
    }
  },
  {
    "instruction": "Given the attack pattern: Install Malicious Extension. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Only install extensions/plugins from official/verifiable sources.\n* Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.\n* Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.\n* Implement an extension/plugin allow list, based on the given security policy.\n* If applicable, confirm extensions/plugins are properly signed by the official developers.\n* For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Only install extensions/plugins from official/verifiable sources.",
        "Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.",
        "Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.",
        "Implement an extension/plugin allow list, based on the given security policy.",
        "If applicable, confirm extensions/plugins are properly signed by the official developers.",
        "For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background."
      ],
      "@Name": "Install Malicious Extension"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Object Relational Mapping Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework\n* Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework",
        "Ensure to keep up to date with security relevant updates to the persistence framework used within your application."
      ],
      "@Name": "Object Relational Mapping Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Reciprocation. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Reciprocation"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - TCP Xmas Scan",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Employ a robust network defensive posture that includes a managed IDS/IPS.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "@Name": "TCP Xmas Scan"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Argument Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.\nDesign: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.\nImplementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.",
        "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.",
        "Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise."
      ],
      "@Name": "Argument Injection"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Cross Frame Scripting (XFS)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Avoid clicking on untrusted links.\n- Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Avoid clicking on untrusted links.",
        "Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame."
      ],
      "@Name": "Cross Frame Scripting (XFS)"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Counterfeit Hardware Component Inserted During Product Assembly",
    "context": "",
    "output": "Here are the mitigations relevant for Counterfeit Hardware Component Inserted During Product Assembly:\nHardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.\n- Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.",
        "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist."
      ],
      "@Name": "Counterfeit Hardware Component Inserted During Product Assembly"
    }
  },
  {
    "instruction": "Given the attack pattern: Kerberoasting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Monitor system and domain logs for abnormal access.\n- Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.\n- Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.\n- Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Monitor system and domain logs for abnormal access.",
        "Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.",
        "Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.",
        "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible."
      ],
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Malicious Software Implanted",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Deploy strong code integrity policies to allow only authorized apps to run.\nUse endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\nMaintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\nRequire SSL for update channels and implement certificate transparency based verification.\nSign everything, including configuration files, XML files and packages.\nDevelop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Deploy strong code integrity policies to allow only authorized apps to run.",
        "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
        "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
        "Require SSL for update channels and implement certificate transparency based verification.",
        "Sign everything, including configuration files, XML files and packages.",
        "Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information."
      ],
      "@Name": "Malicious Software Implanted"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Poison Web Service Registry",
    "context": "",
    "output": "Here are the mitigations relevant for Poison Web Service Registry:\nDesign: Enforce principle of least privilege\n- Design: Harden registry server and file access permissions\n- Implementation: Implement communications to and from the registry using secure protocols",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Harden registry server and file access permissions",
        "Implementation: Implement communications to and from the registry using secure protocols"
      ],
      "@Name": "Poison Web Service Registry"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
    "context": "",
    "output": "Here are the mitigations relevant for Using Leading 'Ghost' Character Sequences to Bypass Input Filters:\nUse an allowlist rather than a denylist input validation.\n- Canonicalize all data prior to validation.\n- Take an iterative approach to input validation (defense in depth).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use an allowlist rather than a denylist input validation.",
        "Canonicalize all data prior to validation.",
        "Take an iterative approach to input validation (defense in depth)."
      ],
      "@Name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"
    }
  },
  {
    "instruction": "Given the attack pattern: Buffer Overflow in an API Call. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use a language or compiler that performs automatic bounds checking.\n* Use secure functions not vulnerable to buffer overflow.\n* If you have to use dangerous functions, make sure that you do boundary checking.\n* Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n* Use OS-level preventative functionality. Not a complete solution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a language or compiler that performs automatic bounds checking.",
        "Use secure functions not vulnerable to buffer overflow.",
        "If you have to use dangerous functions, make sure that you do boundary checking.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Use OS-level preventative functionality. Not a complete solution."
      ],
      "@Name": "Buffer Overflow in an API Call"
    }
  },
  {
    "instruction": "Given the attack pattern: Altered Component Firmware. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Leverage hardware components known to not be susceptible to these types of attacks.\nImplement hardware RAID infrastructure.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Leverage hardware components known to not be susceptible to these types of attacks.",
        "Implement hardware RAID infrastructure."
      ],
      "@Name": "Altered Component Firmware"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Communication Channel Manipulation",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Encrypt all sensitive communications using properly-configured cryptography.\n- Design the communication system such that it associates proper authentication/authorization with each channel/message.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Encrypt all sensitive communications using properly-configured cryptography.",
        "Design the communication system such that it associates proper authentication/authorization with each channel/message."
      ],
      "@Name": "Communication Channel Manipulation"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Forceful Browsing",
    "context": "",
    "output": "For attack pattern Forceful Browsing, the list of mitigations is: Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.\n* Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.",
        "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context."
      ],
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "Given the attack pattern: TCP RPC Scan. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Typically, an IDS/IPS system is very effective against this type of attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Typically, an IDS/IPS system is very effective against this type of attack.",
      "@Name": "TCP RPC Scan"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Eavesdropping",
    "context": "",
    "output": "Here are the mitigations relevant for Eavesdropping:\nBe mindful of your surroundings when discussing sensitive information in public areas.\nImplement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.\nIf possible, physically disable the microphone on your machine if it is not needed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Be mindful of your surroundings when discussing sensitive information in public areas.",
        "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.",
        "If possible, physically disable the microphone on your machine if it is not needed."
      ],
      "@Name": "Eavesdropping"
    }
  },
  {
    "instruction": "Given the attack pattern: Hiding Malicious Data or Code within Files. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.",
      "@Name": "Hiding Malicious Data or Code within Files"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: TCP ACK Ping",
    "context": "",
    "output": "For attack pattern TCP ACK Ping, the list of mitigations is: Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.",
      "@Name": "TCP ACK Ping"
    }
  },
  {
    "instruction": "Given the attack pattern: Spoof Version Control System Commit Metadata. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.\nReference vulnerability databases to determine if the software contains known vulnerabilities.\nOnly download open-source software from reputable hosting sites or package managers.\nOnly download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.\nAfter downloading open-source software, ensure integrity values have not changed.\nBefore executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
        "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
        "Only download open-source software from reputable hosting sites or package managers.",
        "Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.",
        "After downloading open-source software, ensure integrity values have not changed.",
        "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
      ],
      "@Name": "Spoof Version Control System Commit Metadata"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploiting Incorrect Chaining or Granularity of Hardware Debug Components. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels\n- Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels",
        "Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users"
      ],
      "@Name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Generic Cross-Browser Cross-Domain Theft",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.\n* Implementation: Perform proper HTML encoding and URL escaping",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.",
        "Implementation: Perform proper HTML encoding and URL escaping"
      ],
      "@Name": "Generic Cross-Browser Cross-Domain Theft"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Cross Site Identification",
    "context": "",
    "output": "Here are the mitigations relevant for Cross Site Identification:\nUsage: Users should always explicitly log out from the social networking sites when done using them.\n* Usage: Users should not open other tabs in the browser when using a social networking site.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Usage: Users should always explicitly log out from the social networking sites when done using them.",
        "Usage: Users should not open other tabs in the browser when using a social networking site."
      ],
      "@Name": "Cross Site Identification"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Adversary in the Browser (AiTB)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.\n* Leverage anti-malware tools, which can detect Trojan Horse malware.\n* Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.\n* Limit user permissions to prevent browser pivoting.\n* Ensure browser sessions are regularly terminated and when their effective lifetime ends.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.",
        "Leverage anti-malware tools, which can detect Trojan Horse malware.",
        "Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.",
        "Limit user permissions to prevent browser pivoting.",
        "Ensure browser sessions are regularly terminated and when their effective lifetime ends."
      ],
      "@Name": "Adversary in the Browser (AiTB)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Blind SQL Injection",
    "context": "",
    "output": "For attack pattern Blind SQL Injection, the list of mitigations is: Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.\n- Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.",
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear."
      ],
      "@Name": "Blind SQL Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Client-side Injection-induced Buffer Overflow. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: The client software should not install untrusted code from a non-authenticated server.\nThe client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.\nPerform input validation for length of buffer inputs.\nUse a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nEnsure all buffer uses are consistently bounds-checked.\nUse OS-level preventative functionality. Not a complete solution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "The client software should not install untrusted code from a non-authenticated server.",
        "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.",
        "Perform input validation for length of buffer inputs.",
        "Use a language or compiler that performs automatic bounds checking.",
        "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Ensure all buffer uses are consistently bounds-checked.",
        "Use OS-level preventative functionality. Not a complete solution."
      ],
      "@Name": "Client-side Injection-induced Buffer Overflow"
    }
  },
  {
    "instruction": "Given the attack pattern: Group Permission Footprinting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.",
      "@Name": "Group Permission Footprinting"
    }
  },
  {
    "instruction": "Given the attack pattern: Sniff Application Code. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Encrypt all communication between the client and server.\n* Implementation: Use SSL, SSH, SCP.\n* Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Encrypt all communication between the client and server.",
        "Implementation: Use SSL, SSH, SCP.",
        "Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network."
      ],
      "@Name": "Sniff Application Code"
    }
  },
  {
    "instruction": "Given the attack pattern: Removing Important Client Functionality. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.\n* Design: Ship client-side application with integrity checks (code signing) when possible.\n* Design: Use obfuscation and other techniques to prevent reverse engineering the client code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.",
        "Design: Ship client-side application with integrity checks (code signing) when possible.",
        "Design: Use obfuscation and other techniques to prevent reverse engineering the client code."
      ],
      "@Name": "Removing Important Client Functionality"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Buffer Manipulation",
    "context": "",
    "output": "Here are the mitigations relevant for Buffer Manipulation:\nTo help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
      "@Name": "Buffer Manipulation"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Commitment and Consistency. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\n* Individuals should avoid complying with suspicious requests.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
        "Individuals should avoid complying with suspicious requests."
      ],
      "@Name": "Influence Perception of Commitment and Consistency"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Brute Force",
    "context": "",
    "output": "For attack pattern Brute Force, the list of mitigations is: Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.\n- Use a secret space that is well known and with no known patterns that may reduce functional size.\n- Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.",
        "Use a secret space that is well known and with no known patterns that may reduce functional size.",
        "Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext."
      ],
      "@Name": "Brute Force"
    }
  },
  {
    "instruction": "Given the attack pattern: Contradictory Destinations in Traffic Routing Schemes. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.",
      "@Name": "Contradictory Destinations in Traffic Routing Schemes"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Directory Indexing",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: 1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.\n* 2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".\n* 3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.",
        "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\".",
        "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message."
      ],
      "@Name": "Directory Indexing"
    }
  },
  {
    "instruction": "Given the attack pattern: Peripheral Footprinting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "@Name": "Peripheral Footprinting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Password Spraying",
    "context": "",
    "output": "For attack pattern Password Spraying, the list of mitigations is: Create a strong password policy and ensure that your system enforces this policy.\nImplement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nLeverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
        "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network."
      ],
      "@Name": "Password Spraying"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: TCP Flood",
    "context": "",
    "output": "For attack pattern TCP Flood, the list of mitigations is: To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.",
      "@Name": "TCP Flood"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Rooting SIM Cards",
    "context": "",
    "output": "For attack pattern Rooting SIM Cards, the list of mitigations is: Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.",
      "@Name": "Rooting SIM Cards"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Credential Stuffing",
    "context": "",
    "output": "For attack pattern Credential Stuffing, the list of mitigations is: Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\n- Create a strong password policy and ensure that your system enforces this policy.\n- Ensure users are not reusing username/password combinations for multiple systems, applications, or services.\n- Do not reuse local administrator account credentials across systems.\n- Deny remote use of local admin credentials to log into domain systems.\n- Do not allow accounts to be a local administrator on more than one system.\n- Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\n- Monitor system and domain logs for abnormal credential access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
        "Do not reuse local administrator account credentials across systems.",
        "Deny remote use of local admin credentials to log into domain systems.",
        "Do not allow accounts to be a local administrator on more than one system.",
        "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
        "Monitor system and domain logs for abnormal credential access."
      ],
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulating Web Input to File System Calls. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Enforce principle of least privilege.\nDesign: Ensure all input is validated, and does not contain file system commands\nDesign: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\nDesign: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.\nImplementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege.",
        "Design: Ensure all input is validated, and does not contain file system commands",
        "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
        "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.",
        "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
      ],
      "@Name": "Manipulating Web Input to File System Calls"
    }
  },
  {
    "instruction": "Given the attack pattern: HTTP Response Splitting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\n* Configuration: front-end HTTP agents notice ambiguous requests.\n* Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n* Configuration: Disable reuse of back-end connections.\n* Configuration: Use HTTP/2 for back-end connections.\n* Configuration: Use the same web server software for front-end and back-end server.\n* Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n* Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n* Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\n* Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
        "Configuration: front-end HTTP agents notice ambiguous requests.",
        "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
        "Configuration: Disable reuse of back-end connections.",
        "Configuration: Use HTTP/2 for back-end connections.",
        "Configuration: Use the same web server software for front-end and back-end server.",
        "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
        "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
        "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
        "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
      ],
      "@Name": "HTTP Response Splitting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - WSDL Scanning",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: It is important to protect WSDL file or provide limited access to it.\n* Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.\n* Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.\n* Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.\n* Validate the received messages against the WSDL Schema. Incomplete solution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "It is important to protect WSDL file or provide limited access to it.",
        "Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.",
        "Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.",
        "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.",
        "Validate the received messages against the WSDL Schema. Incomplete solution."
      ],
      "@Name": "WSDL Scanning"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: System Location Discovery",
    "context": "",
    "output": "For attack pattern System Location Discovery, the list of mitigations is: To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.",
      "@Name": "System Location Discovery"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Data Serialization External Entities Blowup",
    "context": "",
    "output": "For attack pattern Data Serialization External Entities Blowup, the list of mitigations is: This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.\nThis attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.",
        "This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally."
      ],
      "@Name": "Data Serialization External Entities Blowup"
    }
  },
  {
    "instruction": "Given the attack pattern: Absolute Path Traversal. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Configure the access control correctly.\n* Design: Enforce principle of least privilege.\n* Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.\n* Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\n* Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\n* Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\n* Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n* Implementation: Perform input validation for all remote content, including remote and user-generated content.\n* Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\n* Implementation: Use indirect references rather than actual file names.\n* Implementation: Use possible permissions on file access when developing and deploying web applications.\n* Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Configure the access control correctly.",
        "Design: Enforce principle of least privilege.",
        "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
        "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
        "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
        "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
        "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
        "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
        "Implementation: Use indirect references rather than actual file names.",
        "Implementation: Use possible permissions on file access when developing and deploying web applications.",
        "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach."
      ],
      "@Name": "Absolute Path Traversal"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Phishing",
    "context": "",
    "output": "Here are the mitigations relevant for Phishing:\nDo not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.",
      "@Name": "Phishing"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - UDP Scan",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.\n* UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.",
        "UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages."
      ],
      "@Name": "UDP Scan"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Postfix, Null Terminate, and Backslash",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.\n* Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
      ],
      "@Name": "Postfix, Null Terminate, and Backslash"
    }
  },
  {
    "instruction": "Given the attack pattern: Server Side Include (SSI) Injection. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them\nAll user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive\nServer Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them",
        "All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive",
        "Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead"
      ],
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulate Human Behavior. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.",
      "@Name": "Manipulate Human Behavior"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Forced Integer Overflow",
    "context": "",
    "output": "Here are the mitigations relevant for Forced Integer Overflow:\nUse a language or compiler that performs automatic bounds checking.\n* Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.\n* Use an abstraction library to abstract away risky APIs. Not a complete solution.\n* Always do bound checking before consuming user input data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a language or compiler that performs automatic bounds checking.",
        "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.",
        "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
        "Always do bound checking before consuming user input data."
      ],
      "@Name": "Forced Integer Overflow"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Requirements for ASIC Functionality Maliciously Altered",
    "context": "",
    "output": "For attack pattern Requirements for ASIC Functionality Maliciously Altered, the list of mitigations is: Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n- Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.\n- Require that provenance of COTS microelectronic components be known whenever procured.\n- Conduct detailed vendor assessment before acquiring COTS hardware.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
        "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.",
        "Require that provenance of COTS microelectronic components be known whenever procured.",
        "Conduct detailed vendor assessment before acquiring COTS hardware."
      ],
      "@Name": "Requirements for ASIC Functionality Maliciously Altered"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Web Application Fingerprinting",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Implementation: Obfuscate server fields of HTTP response.\n- Implementation: Hide inner ordering of HTTP response header.\n- Implementation: Customizing HTTP error codes such as 404 or 500.\n- Implementation: Hide URL file extension.\n- Implementation: Hide HTTP response header software information filed.\n- Implementation: Hide cookie's software information filed.\n- Implementation: Appropriately deal with error messages.\n- Implementation: Obfuscate database type in Database API's error message.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Obfuscate server fields of HTTP response.",
        "Implementation: Hide inner ordering of HTTP response header.",
        "Implementation: Customizing HTTP error codes such as 404 or 500.",
        "Implementation: Hide URL file extension.",
        "Implementation: Hide HTTP response header software information filed.",
        "Implementation: Hide cookie's software information filed.",
        "Implementation: Appropriately deal with error messages.",
        "Implementation: Obfuscate database type in Database API's error message."
      ],
      "@Name": "Web Application Fingerprinting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - MIME Conversion",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Stay up to date with third party vendor patches\n- Use the sendmail restricted shell program (smrsh)\n- Use mail.local",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Stay up to date with third party vendor patches",
        "Use the sendmail restricted shell program (smrsh)",
        "Use mail.local"
      ],
      "@Name": "MIME Conversion"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XQuery Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Perform input allowlist validation on all XML input\n* Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Perform input allowlist validation on all XML input",
        "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL."
      ],
      "@Name": "XQuery Injection"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Hardware Component Substitution During Baselining",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.\nAcquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.",
        "Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist."
      ],
      "@Name": "Hardware Component Substitution During Baselining"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Documentation Alteration to Circumvent Dial-down",
    "context": "",
    "output": "Here are the mitigations relevant for Documentation Alteration to Circumvent Dial-down:\nDigitize documents and cryptographically sign them to verify authenticity.\n* Password protect documents and make them read-only for unauthorized users.\n* Avoid emailing important documents and configurations.\n* Ensure deleted files are actually deleted.\n* Maintain backups of the document for recovery and verification.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Digitize documents and cryptographically sign them to verify authenticity.",
        "Password protect documents and make them read-only for unauthorized users.",
        "Avoid emailing important documents and configurations.",
        "Ensure deleted files are actually deleted.",
        "Maintain backups of the document for recovery and verification."
      ],
      "@Name": "Documentation Alteration to Circumvent Dial-down"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Browser in the Middle (BiTM)",
    "context": "",
    "output": "For attack pattern Browser in the Middle (BiTM), the list of mitigations is: Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel",
      "@Name": "Browser in the Middle (BiTM)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Homograph Attack via Homoglyphs",
    "context": "",
    "output": "For attack pattern Homograph Attack via Homoglyphs, the list of mitigations is: Authenticate all servers and perform redundant checks when using DNS hostnames.\n- Utilize browsers that can warn users if URLs contain characters from different character sets.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Authenticate all servers and perform redundant checks when using DNS hostnames.",
        "Utilize browsers that can warn users if URLs contain characters from different character sets."
      ],
      "@Name": "Homograph Attack via Homoglyphs"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XSS Targeting HTML Attributes",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input.",
        "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.",
        "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
      ],
      "@Name": "XSS Targeting HTML Attributes"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Browser Fingerprinting",
    "context": "",
    "output": "For attack pattern Browser Fingerprinting, the list of mitigations is: Configuration: Disable Java Script in the browser",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Configuration: Disable Java Script in the browser",
      "@Name": "Browser Fingerprinting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Fuzzing for application mapping",
    "context": "",
    "output": "For attack pattern Fuzzing for application mapping, the list of mitigations is: Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.\nDesign: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.\nImplementation: Obfuscate server fields of HTTP response.\nImplementation: Hide inner ordering of HTTP response header.\nImplementation: Customizing HTTP error codes such as 404 or 500.\nImplementation: Hide HTTP response header software information filed.\nImplementation: Hide cookie's software information filed.\nImplementation: Obfuscate database type in Database API's error message.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.",
        "Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.",
        "Implementation: Obfuscate server fields of HTTP response.",
        "Implementation: Hide inner ordering of HTTP response header.",
        "Implementation: Customizing HTTP error codes such as 404 or 500.",
        "Implementation: Hide HTTP response header software information filed.",
        "Implementation: Hide cookie's software information filed.",
        "Implementation: Obfuscate database type in Database API's error message."
      ],
      "@Name": "Fuzzing for application mapping"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - DNS Cache Poisoning",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Configuration: Make sure your DNS servers have been updated to the latest versions\nConfiguration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.\nConfiguration: Disable client side DNS caching.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Configuration: Make sure your DNS servers have been updated to the latest versions",
        "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.",
        "Configuration: Disable client side DNS caching."
      ],
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "Given the attack pattern: DNS Rebinding. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.\nImplementation: Reject HTTP request with a malicious Host header.\nImplementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.",
        "Implementation: Reject HTTP request with a malicious Host header.",
        "Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses."
      ],
      "@Name": "DNS Rebinding"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Documentation Alteration to Produce Under-performing Systems",
    "context": "",
    "output": "Here are the mitigations relevant for Documentation Alteration to Produce Under-performing Systems:\nDigitize documents and cryptographically sign them to verify authenticity.\nPassword protect documents and make them read-only for unauthorized users.\nAvoid emailing important documents and configurations.\nEnsure deleted files are actually deleted.\nMaintain backups of the document for recovery and verification.\nSeparate need-to-know information from system configuration information depending on the user.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Digitize documents and cryptographically sign them to verify authenticity.",
        "Password protect documents and make them read-only for unauthorized users.",
        "Avoid emailing important documents and configurations.",
        "Ensure deleted files are actually deleted.",
        "Maintain backups of the document for recovery and verification.",
        "Separate need-to-know information from system configuration information depending on the user."
      ],
      "@Name": "Documentation Alteration to Produce Under-performing Systems"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Manipulating Writeable Terminal Devices",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Ensure that terminals are only writeable by named owner user and/or administrator\n- Design: Enforce principle of least privilege",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure that terminals are only writeable by named owner user and/or administrator",
        "Design: Enforce principle of least privilege"
      ],
      "@Name": "Manipulating Writeable Terminal Devices"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Padding Oracle Crypto Attack",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption\n- Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption",
        "Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption."
      ],
      "@Name": "Padding Oracle Crypto Attack"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Cross Zone Scripting",
    "context": "",
    "output": "For attack pattern Cross Zone Scripting, the list of mitigations is: Disable script execution.\nEnsure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone\nLimit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone\nLimit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum\nEnsure proper HTML output encoding before writing user supplied data to the page",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Disable script execution.",
        "Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone",
        "Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone",
        "Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum",
        "Ensure proper HTML output encoding before writing user supplied data to the page"
      ],
      "@Name": "Cross Zone Scripting"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Clickjacking",
    "context": "",
    "output": "Here are the mitigations relevant for Clickjacking:\nIf using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.\nTurn off JavaScript, Flash and disable CSS.\nWhen maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.",
        "Turn off JavaScript, Flash and disable CSS.",
        "When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks."
      ],
      "@Name": "Clickjacking"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Buffer Overflow via Environment Variables",
    "context": "",
    "output": "For attack pattern Buffer Overflow via Environment Variables, the list of mitigations is: Do not expose environment variable to the user.\nDo not use untrusted data in your environment variables.\nUse a language or compiler that performs automatic bounds checking\nThere are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not expose environment variable to the user.",
        "Do not use untrusted data in your environment variables.",
        "Use a language or compiler that performs automatic bounds checking",
        "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow."
      ],
      "@Name": "Buffer Overflow via Environment Variables"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Path Traversal",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Configure the access control correctly.\n- Design: Enforce principle of least privilege.\n- Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.\n- Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.\n- Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\n- Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\n- Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.\n- Implementation: Perform input validation for all remote content, including remote and user-generated content.\n- Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.\n- Implementation: Use indirect references rather than actual file names.\n- Implementation: Use possible permissions on file access when developing and deploying web applications.\n- Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Configure the access control correctly.",
        "Design: Enforce principle of least privilege.",
        "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
        "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.",
        "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
        "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
        "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content.",
        "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
        "Implementation: Use indirect references rather than actual file names.",
        "Implementation: Use possible permissions on file access when developing and deploying web applications.",
        "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach."
      ],
      "@Name": "Path Traversal"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Incomplete Data Deletion in a Multi-Tenant Environment",
    "context": "",
    "output": "Here are the mitigations relevant for Incomplete Data Deletion in a Multi-Tenant Environment:\nCloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.\n- Deletion of data should be completed promptly when requested.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.",
        "Deletion of data should be completed promptly when requested."
      ],
      "@Name": "Incomplete Data Deletion in a Multi-Tenant Environment"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Resource Leak Exposure",
    "context": "",
    "output": "For attack pattern Resource Leak Exposure, the list of mitigations is: If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).\n- Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)\n- Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).",
        "Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)",
        "Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function."
      ],
      "@Name": "Resource Leak Exposure"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: DNS Blocking",
    "context": "",
    "output": "Here are the mitigations relevant for DNS Blocking:\nHard Coded Alternate DNS server in applications\nAvoid dependence on DNS\nInclude \"hosts file\"/IP address in the application.\nEnsure best practices with respect to communications channel protections.\nUse a .onion domain with Tor support",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Hard Coded Alternate DNS server in applications",
        "Avoid dependence on DNS",
        "Include \"hosts file\"/IP address in the application.",
        "Ensure best practices with respect to communications channel protections.",
        "Use a .onion domain with Tor support"
      ],
      "@Name": "DNS Blocking"
    }
  },
  {
    "instruction": "Given the attack pattern: Object Injection. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: ",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [],
      "@Name": "Object Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Rogue Integration Procedures",
    "context": "",
    "output": "Here are the mitigations relevant for Rogue Integration Procedures:\nDeploy strong code integrity policies to allow only authorized apps to run.\n- Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.\n- Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.\n- Require SSL for update channels and implement certificate transparency based verification.\n- Sign everything, including configuration files, XML files and packages.\n- Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.\n- Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Deploy strong code integrity policies to allow only authorized apps to run.",
        "Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.",
        "Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.",
        "Require SSL for update channels and implement certificate transparency based verification.",
        "Sign everything, including configuration files, XML files and packages.",
        "Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.",
        "Maintain strong physical system access controls and monitor networks and physical facilities for insider threats."
      ],
      "@Name": "Rogue Integration Procedures"
    }
  },
  {
    "instruction": "Given the attack pattern: ICMP Echo Request Ping. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.",
      "@Name": "ICMP Echo Request Ping"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: BitSquatting",
    "context": "",
    "output": "For attack pattern BitSquatting, the list of mitigations is: Authenticate all servers and perform redundant checks when using DNS hostnames.\n* When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Authenticate all servers and perform redundant checks when using DNS hostnames.",
        "When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults."
      ],
      "@Name": "BitSquatting"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Malicious Logic Inserted Into Product by Authorized Developer",
    "context": "",
    "output": "Here are the mitigations relevant for Malicious Logic Inserted Into Product by Authorized Developer:\nAssess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.",
      "@Name": "Malicious Logic Inserted Into Product by Authorized Developer"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Install Rootkit ",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Prevent adversary access to privileged accounts necessary to install rootkits.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Prevent adversary access to privileged accounts necessary to install rootkits.",
      "@Name": "Install Rootkit "
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Dictionary-based Password Attack",
    "context": "",
    "output": "Here are the mitigations relevant for Dictionary-based Password Attack:\nCreate a strong password policy and ensure that your system enforces this policy.\n- Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\n- Leverage multi-factor authentication for all authentication services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
        "Leverage multi-factor authentication for all authentication services."
      ],
      "@Name": "Dictionary-based Password Attack"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Developer Signing Maliciously Altered Software",
    "context": "",
    "output": "Here are the mitigations relevant for Developer Signing Maliciously Altered Software:\nHave a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.\n- Employ intrusion detection and malware detection capabilities on IDE systems where feasible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.",
        "Employ intrusion detection and malware detection capabilities on IDE systems where feasible."
      ],
      "@Name": "Developer Signing Maliciously Altered Software"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - IP Address Blocking",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Have a large pool of backup IPs built into the application and support proxy capability in the application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Have a large pool of backup IPs built into the application and support proxy capability in the application.",
      "@Name": "IP Address Blocking"
    }
  },
  {
    "instruction": "Given the attack pattern: Account Footprinting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.",
      "@Name": "Account Footprinting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Infected Memory",
    "context": "",
    "output": "For attack pattern Infected Memory, the list of mitigations is: Leverage anti-virus products to detect stop operations with known virus.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage anti-virus products to detect stop operations with known virus.",
      "@Name": "Infected Memory"
    }
  },
  {
    "instruction": "Given the attack pattern: Leveraging Race Conditions. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use safe libraries to access resources such as files.\n* Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.\n* Use synchronization to control the flow of execution.\n* Use static analysis tools to find race conditions.\n* Pay attention to concurrency problems related to the access of resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use safe libraries to access resources such as files.",
        "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.",
        "Use synchronization to control the flow of execution.",
        "Use static analysis tools to find race conditions.",
        "Pay attention to concurrency problems related to the access of resources."
      ],
      "@Name": "Leveraging Race Conditions"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Wi-Fi Jamming",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.",
      "@Name": "Wi-Fi Jamming"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: System Footprinting",
    "context": "",
    "output": "For attack pattern System Footprinting, the list of mitigations is: Keep patches up to date by installing weekly or daily if possible.\n- Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Keep patches up to date by installing weekly or daily if possible.",
        "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist."
      ],
      "@Name": "System Footprinting"
    }
  },
  {
    "instruction": "Given the attack pattern: Intent Spoof. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.",
      "@Name": "Intent Spoof"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Interception",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.",
      "@Name": "Interception"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Services Footprinting",
    "context": "",
    "output": "For attack pattern Services Footprinting, the list of mitigations is: Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.",
      "@Name": "Services Footprinting"
    }
  },
  {
    "instruction": "Given the attack pattern: Disabling Network Hardware. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..",
      "@Name": "Disabling Network Hardware"
    }
  },
  {
    "instruction": "Given the attack pattern: Alteration of a Software Update. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.\n* Require elevated privileges for distribution of software and software updates.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.",
        "Require elevated privileges for distribution of software and software updates."
      ],
      "@Name": "Alteration of a Software Update"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Pretexting",
    "context": "",
    "output": "For attack pattern Pretexting, the list of mitigations is: An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.",
      "@Name": "Pretexting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Infected Software",
    "context": "",
    "output": "For attack pattern Infected Software, the list of mitigations is: Leverage anti-virus products to detect and quarantine software with known virus.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "@Name": "Infected Software"
    }
  },
  {
    "instruction": "Given the attack pattern: WebView Exposure. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.",
      "@Name": "WebView Exposure"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Repo Jacking",
    "context": "",
    "output": "For attack pattern Repo Jacking, the list of mitigations is: Leverage dedicated package managers instead of directly linking to VCS repositories.\n* Utilize version pinning and lock files to prevent use of maliciously modified repositories.\n* Implement \"vendoring\" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.\n* Leverage automated tools, such as Checkmarx's \"ChainJacking\" tool, to determine susceptibility to Repo Jacking attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Leverage dedicated package managers instead of directly linking to VCS repositories.",
        "Utilize version pinning and lock files to prevent use of maliciously modified repositories.",
        "Implement \"vendoring\" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.",
        "Leverage automated tools, such as Checkmarx's \"ChainJacking\" tool, to determine susceptibility to Repo Jacking attacks."
      ],
      "@Name": "Repo Jacking"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Mobile Phishing",
    "context": "",
    "output": "For attack pattern Mobile Phishing, the list of mitigations is: Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.",
      "@Name": "Mobile Phishing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: DTD Injection",
    "context": "",
    "output": "Here are the mitigations relevant for DTD Injection:\nDesign: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.\n- Implementation: Disallow the inclusion of DTDs as part of incoming messages.\n- Implementation: Use XML parsing tools that protect against DTD attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.",
        "Implementation: Disallow the inclusion of DTDs as part of incoming messages.",
        "Implementation: Use XML parsing tools that protect against DTD attacks."
      ],
      "@Name": "DTD Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: SOAP Array Overflow. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.",
      "@Name": "SOAP Array Overflow"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XML Routing Detour Attacks",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.\nImplementation: Use SSL for connections between all parties with mutual authentication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.",
        "Implementation: Use SSL for connections between all parties with mutual authentication."
      ],
      "@Name": "XML Routing Detour Attacks"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Resource Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Ensure all input content that is delivered to client is sanitized against an acceptable content specification.\n* Perform input validation for all content.\n* Enforce regular patching of software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure all input content that is delivered to client is sanitized against an acceptable content specification.",
        "Perform input validation for all content.",
        "Enforce regular patching of software."
      ],
      "@Name": "Resource Injection"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Evil Twin Wi-Fi Attack",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.",
      "@Name": "Evil Twin Wi-Fi Attack"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Escaped Slashes in Alternate Encoding",
    "context": "",
    "output": "Here are the mitigations relevant for Using Escaped Slashes in Alternate Encoding:\nVerify that the user-supplied data does not use backslash character to escape malicious characters.\n* Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\n* Be aware of the threat of alternative method of data encoding.\n* Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.\n* In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.\n* Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.\n* Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Verify that the user-supplied data does not use backslash character to escape malicious characters.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
        "Be aware of the threat of alternative method of data encoding.",
        "Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.",
        "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.",
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.",
        "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."
      ],
      "@Name": "Using Escaped Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "Given the attack pattern: Key Negotiation of Bluetooth Attack (KNOB). what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.",
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Session Credential Falsification through Forging",
    "context": "",
    "output": "For attack pattern Session Credential Falsification through Forging, the list of mitigations is: Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.\nImplementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.",
        "Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes."
      ],
      "@Name": "Session Credential Falsification through Forging"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Exploitation of Improperly Configured or Implemented Memory Protections",
    "context": "",
    "output": "For attack pattern Exploitation of Improperly Configured or Implemented Memory Protections, the list of mitigations is: Ensure that protected and unprotected memory ranges are isolated and do not overlap.\nIf memory regions must overlap, leverage memory priority schemes if memory regions can overlap.\nEnsure that original and mirrored memory regions apply the same protections.\nEnsure immutable code or data is programmed into ROM or write-once memory.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that protected and unprotected memory ranges are isolated and do not overlap.",
        "If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.",
        "Ensure that original and mirrored memory regions apply the same protections.",
        "Ensure immutable code or data is programmed into ROM or write-once memory."
      ],
      "@Name": "Exploitation of Improperly Configured or Implemented Memory Protections"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploiting Incorrectly Configured SSL/TLS. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.\n* Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.\n* Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.",
        "Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.",
        "Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security."
      ],
      "@Name": "Exploiting Incorrectly Configured SSL/TLS"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Exponential Data Expansion",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.\nImplementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.",
        "Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources."
      ],
      "@Name": "Exponential Data Expansion"
    }
  },
  {
    "instruction": "Given the attack pattern: Contaminate Resource. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.\n* Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.\n* Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.",
        "Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.",
        "Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated."
      ],
      "@Name": "Contaminate Resource"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Escaping a Sandbox by Calling Code in Another Language",
    "context": "",
    "output": "For attack pattern Escaping a Sandbox by Calling Code in Another Language, the list of mitigations is: Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.\n- Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.\n- Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.\n- Configuration: Get latest updates for the computer.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.",
        "Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.",
        "Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.",
        "Configuration: Get latest updates for the computer."
      ],
      "@Name": "Escaping a Sandbox by Calling Code in Another Language"
    }
  },
  {
    "instruction": "Given the attack pattern: Privilege Abuse. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.",
      "@Name": "Privilege Abuse"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Target Influence via Framing",
    "context": "",
    "output": "Here are the mitigations relevant for Target Influence via Framing:\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.\nAvoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
        "Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication."
      ],
      "@Name": "Target Influence via Framing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Exploiting Incorrectly Configured Access Control Security Levels",
    "context": "",
    "output": "Here are the mitigations relevant for Exploiting Incorrectly Configured Access Control Security Levels:\nDesign: Configure the access control correctly.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Design: Configure the access control correctly.",
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Leverage Alternate Encoding",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)\n- Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
      ],
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Command Injection",
    "context": "",
    "output": "Here are the mitigations relevant for Command Injection:\nAll user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.\n* Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.\n* Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.",
        "Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.",
        "Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself."
      ],
      "@Name": "Command Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: TCP Connect Scan. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Employ a robust network defense posture that includes an IDS/IPS system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Employ a robust network defense posture that includes an IDS/IPS system.",
      "@Name": "TCP Connect Scan"
    }
  },
  {
    "instruction": "Given the attack pattern: Resource Location Spoofing. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Monitor network activity to detect any anomalous or unauthorized communication exchanges.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Monitor network activity to detect any anomalous or unauthorized communication exchanges.",
      "@Name": "Resource Location Spoofing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Session Fixation",
    "context": "",
    "output": "For attack pattern Session Fixation, the list of mitigations is: Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.\n- Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.\n- Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.",
        "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.",
        "Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult."
      ],
      "@Name": "Session Fixation"
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Using Invalid Characters. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use libraries and templates that minimize unfiltered input.\n* Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.\n* Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input.",
        "Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.",
        "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
      ],
      "@Name": "XSS Using Invalid Characters"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Exploitation of Transient Instruction Execution",
    "context": "",
    "output": "For attack pattern Exploitation of Transient Instruction Execution, the list of mitigations is: Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources\nImplementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables\nConfiguration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution\nConfiguration: Disable SharedArrayBuffer for Web Browsers\nConfiguration: Disable Copy-on-Write between Cloud VMs\nConfiguration: Privilege Checks on Cache Flush Instructions\nImplementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources",
        "Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables",
        "Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution",
        "Configuration: Disable SharedArrayBuffer for Web Browsers",
        "Configuration: Disable Copy-on-Write between Cloud VMs",
        "Configuration: Privilege Checks on Cache Flush Instructions",
        "Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks"
      ],
      "@Name": "Exploitation of Transient Instruction Execution"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: SSL Flood",
    "context": "",
    "output": "For attack pattern SSL Flood, the list of mitigations is: To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.",
      "@Name": "SSL Flood"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Malicious Files",
    "context": "",
    "output": "Here are the mitigations relevant for Using Malicious Files:\nDesign: Enforce principle of least privilege\n- Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.\n- Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.",
        "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables."
      ],
      "@Name": "Using Malicious Files"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: XSS Using Doubled Characters",
    "context": "",
    "output": "For attack pattern XSS Using Doubled Characters, the list of mitigations is: Design: Use libraries and templates that minimize unfiltered input.\n- Implementation: Normalize, filter and sanitize all user supplied fields.\n- Implementation: The victim should configure the browser to minimize active content from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input.",
        "Implementation: Normalize, filter and sanitize all user supplied fields.",
        "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
      ],
      "@Name": "XSS Using Doubled Characters"
    }
  },
  {
    "instruction": "Given the attack pattern: XML Schema Poisoning. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Protect the schema against unauthorized modification.\n- Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.\n- Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Protect the schema against unauthorized modification.",
        "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.",
        "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification."
      ],
      "@Name": "XML Schema Poisoning"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: TCP Null Scan",
    "context": "",
    "output": "Here are the mitigations relevant for TCP Null Scan:\nEmploy a robust network defensive posture that includes a managed IDS/IPS.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Employ a robust network defensive posture that includes a managed IDS/IPS.",
      "@Name": "TCP Null Scan"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Exploitation of Improperly Controlled Hardware Security Identifiers",
    "context": "",
    "output": "Here are the mitigations relevant for Exploitation of Improperly Controlled Hardware Security Identifiers:\nReview generation of security identifiers for design inconsistencies and common weaknesses.\n- Review security identifier decoders for design inconsistencies and common weaknesses.\n- Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Review generation of security identifiers for design inconsistencies and common weaknesses.",
        "Review security identifier decoders for design inconsistencies and common weaknesses.",
        "Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments."
      ],
      "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - NoSQL Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.\nIf possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.\nEnsure the most recent version of a NoSQL database and it's corresponding API are used by the application.\nUse of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.\nExercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.\nIf using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".\nIf using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.\nAdditional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.",
        "If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.",
        "Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.",
        "Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
        "Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.",
        "If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as \"mongo-sanitize\".",
        "If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.",
        "Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application."
      ],
      "@Name": "NoSQL Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Through HTTP Query Strings. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use browser technologies that do not allow client side scripting.\n- Design: Utilize strict type, character, and encoding enforcement\n- Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n- Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n- Implementation: Perform input validation for all remote content, including remote and user-generated content\n- Implementation: Perform output validation for all remote content.\n- Implementation: Disable scripting languages such as JavaScript in browser\n- Implementation: Session tokens for specific host\n- Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.\n- Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Design: Utilize strict type, character, and encoding enforcement",
        "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser",
        "Implementation: Session tokens for specific host",
        "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
        "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
      ],
      "@Name": "XSS Through HTTP Query Strings"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: TCP FIN Scan",
    "context": "",
    "output": "Here are the mitigations relevant for TCP FIN Scan:\nFIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.",
      "@Name": "TCP FIN Scan"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - UDP Ping",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Configure your firewall to block egress ICMP messages.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Configure your firewall to block egress ICMP messages.",
      "@Name": "UDP Ping"
    }
  },
  {
    "instruction": "Given the attack pattern: Using UTF-8 Encoding to Bypass Validation Logic. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.\nFor security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).\nLook for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.",
        "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).",
        "Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input."
      ],
      "@Name": "Using UTF-8 Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Disable Security Software",
    "context": "",
    "output": "Here are the mitigations relevant for Disable Security Software:\nEnsure proper permissions are in place to prevent adversaries from altering the execution status of security tools.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.",
      "@Name": "Disable Security Software"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Metadata Spoofing",
    "context": "",
    "output": "For attack pattern Metadata Spoofing, the list of mitigations is: Validate metadata of resources such as authors, timestamps, and statistics.\n- Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.\n- Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Validate metadata of resources such as authors, timestamps, and statistics.",
        "Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.",
        "Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist."
      ],
      "@Name": "Metadata Spoofing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Manipulating State",
    "context": "",
    "output": "Here are the mitigations relevant for Manipulating State:\nDo not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.\n- Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.\n- Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.\n- All possible states must be handled by hardware finite state machines.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.",
        "Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.",
        "Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.",
        "All possible states must be handled by hardware finite state machines."
      ],
      "@Name": "Manipulating State"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - WiFi SSID Tracking",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Do not enable the feature of \"Hidden SSIDs\" (also known as \"Network Cloaking\") \u2013 this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.\n- Frequently change the SSID to new and unrelated values",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Do not enable the feature of \"Hidden SSIDs\" (also known as \"Network Cloaking\") \u2013 this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.",
        "Frequently change the SSID to new and unrelated values"
      ],
      "@Name": "WiFi SSID Tracking"
    }
  },
  {
    "instruction": "Given the attack pattern: Credential Prompt Impersonation. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.",
      "@Name": "Credential Prompt Impersonation"
    }
  },
  {
    "instruction": "Given the attack pattern: Forced Deadlock. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).\n- For competing actions, use well-known libraries which implement synchronization.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).",
        "For competing actions, use well-known libraries which implement synchronization."
      ],
      "@Name": "Forced Deadlock"
    }
  },
  {
    "instruction": "Given the attack pattern: Influence Perception of Consensus or Social Proof. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Consensus or Social Proof"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Embed Virus into DLL",
    "context": "",
    "output": "Here are the mitigations relevant for Embed Virus into DLL:\nLeverage anti-virus products to detect and quarantine software with known virus.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage anti-virus products to detect and quarantine software with known virus.",
      "@Name": "Embed Virus into DLL"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Analysis of Packet Timing and Sizes",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.",
      "@Name": "Analysis of Packet Timing and Sizes"
    }
  },
  {
    "instruction": "Given the attack pattern: Web Server Logs Tampering. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use input validation before writing to web log\n- Design: Validate all log data before it is output",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use input validation before writing to web log",
        "Design: Validate all log data before it is output"
      ],
      "@Name": "Web Server Logs Tampering"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Redirect Access to Libraries",
    "context": "",
    "output": "For attack pattern Redirect Access to Libraries, the list of mitigations is: Implementation: Restrict the permission to modify the entries in the configuration file.\nImplementation: Check the integrity of the dynamically linked libraries before use them.\nImplementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Restrict the permission to modify the entries in the configuration file.",
        "Implementation: Check the integrity of the dynamically linked libraries before use them.",
        "Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries."
      ],
      "@Name": "Redirect Access to Libraries"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: LDAP Injection",
    "context": "",
    "output": "For attack pattern LDAP Injection, the list of mitigations is: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.\n- Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.",
        "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application."
      ],
      "@Name": "LDAP Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Cross Site Request Forgery. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.\nAlthough less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.\nAdditionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.\nIn general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.",
        "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.",
        "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.",
        "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context."
      ],
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "Here are the mitigations relevant for Accessing/Intercepting/Modifying HTTP Cookies:\nDesign: Use input validation for cookies\nDesign: Generate and validate MAC for cookies\nImplementation: Use SSL/TLS to protect cookie in transit\nImplementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use input validation for cookies",
        "Design: Generate and validate MAC for cookies",
        "Implementation: Use SSL/TLS to protect cookie in transit",
        "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software."
      ],
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "Given the attack pattern: File Discovery. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Leverage file protection mechanisms to render these files accessible only to authorized parties.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Leverage file protection mechanisms to render these files accessible only to authorized parties.",
      "@Name": "File Discovery"
    }
  },
  {
    "instruction": "Given the attack pattern: Query System for Information. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.\nApplication designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.",
        "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion."
      ],
      "@Name": "Query System for Information"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Weakening of Cellular Encryption",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\n- Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
        "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption."
      ],
      "@Name": "Weakening of Cellular Encryption"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.\nMake use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.",
        "Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means"
      ],
      "@Name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Restful Privilege Elevation",
    "context": "",
    "output": "Here are the mitigations relevant for Restful Privilege Elevation:\nDesign: Enforce principle of least privilege\nImplementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side\nImplementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side",
        "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose"
      ],
      "@Name": "Restful Privilege Elevation"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Stored XSS",
    "context": "",
    "output": "For attack pattern Stored XSS, the list of mitigations is: Use browser technologies that do not allow client-side scripting.\n* Utilize strict type, character, and encoding enforcement.\n* Ensure that all user-supplied input is validated before being stored.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use browser technologies that do not allow client-side scripting.",
        "Utilize strict type, character, and encoding enforcement.",
        "Ensure that all user-supplied input is validated before being stored."
      ],
      "@Name": "Stored XSS"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Excavation",
    "context": "",
    "output": "For attack pattern Excavation, the list of mitigations is: Minimize error/response output to only what is necessary for functional use or corrective language.\n- Remove potentially sensitive information that is not necessary for the application's functionality.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Minimize error/response output to only what is necessary for functional use or corrective language.",
        "Remove potentially sensitive information that is not necessary for the application's functionality."
      ],
      "@Name": "Excavation"
    }
  },
  {
    "instruction": "Given the attack pattern: Shoulder Surfing. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Be mindful of your surroundings when discussing or viewing sensitive information in public areas.\n* Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Be mindful of your surroundings when discussing or viewing sensitive information in public areas.",
        "Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information."
      ],
      "@Name": "Shoulder Surfing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Bluetooth Impersonation AttackS (BIAS)",
    "context": "",
    "output": "Here are the mitigations relevant for Bluetooth Impersonation AttackS (BIAS):\nDisable Bluetooth in public places.\nVerify incoming Bluetooth connections; do not automatically trust.\nChange default PIN passwords and always use one when connecting.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Disable Bluetooth in public places.",
        "Verify incoming Bluetooth connections; do not automatically trust.",
        "Change default PIN passwords and always use one when connecting."
      ],
      "@Name": "Bluetooth Impersonation AttackS (BIAS)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Influence via Psychological Principles",
    "context": "",
    "output": "For attack pattern Influence via Psychological Principles, the list of mitigations is: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence via Psychological Principles"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Escaping Virtualization",
    "context": "",
    "output": "Here are the mitigations relevant for Escaping Virtualization:\nEnsure virtualization software is current and up-to-date.\n- Abide by the least privilege principle to avoid assigning users more privileges than necessary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure virtualization software is current and up-to-date.",
        "Abide by the least privilege principle to avoid assigning users more privileges than necessary."
      ],
      "@Name": "Escaping Virtualization"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Creating a Rogue Certification Authority Certificate",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.",
      "@Name": "Creating a Rogue Certification Authority Certificate"
    }
  },
  {
    "instruction": "Given the attack pattern: Cellular Traffic Intercept. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.",
      "@Name": "Cellular Traffic Intercept"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Exploitation of Trusted Identifiers",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.\nImplementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.\nImplementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.\nImplementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.\nDesign: Use strong session identifiers that are protected in transit and at rest.\nImplementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.\nImplementation: Verify authenticity of all identifiers at runtime.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.",
        "Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.",
        "Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.",
        "Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.",
        "Design: Use strong session identifiers that are protected in transit and at rest.",
        "Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.",
        "Implementation: Verify authenticity of all identifiers at runtime."
      ],
      "@Name": "Exploitation of Trusted Identifiers"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Mobile Device Fault Injection",
    "context": "",
    "output": "For attack pattern Mobile Device Fault Injection, the list of mitigations is: Strong physical security of all devices that contain secret key information. (even when devices are not in use)\nFrequent changes to secret keys and certificates.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong physical security of all devices that contain secret key information. (even when devices are not in use)",
        "Frequent changes to secret keys and certificates."
      ],
      "@Name": "Mobile Device Fault Injection"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Network Boundary Bridging",
    "context": "",
    "output": "For attack pattern Network Boundary Bridging, the list of mitigations is: Design: Ensure network devices are storing credentials in encrypted stores\nDesign: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.\nConfiguration: When possible, configure network boundary devices to use MFA.\nConfiguration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.\nImplementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.\nImplementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure network devices are storing credentials in encrypted stores",
        "Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.",
        "Configuration: When possible, configure network boundary devices to use MFA.",
        "Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.",
        "Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.",
        "Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering."
      ],
      "@Name": "Network Boundary Bridging"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Blue Boxing",
    "context": "",
    "output": "For attack pattern Blue Boxing, the list of mitigations is: Implementation: Upgrade phone lines. Note this may be prohibitively expensive\n- Use strong access control such as two factor access control for administrative access to the switch",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Upgrade phone lines. Note this may be prohibitively expensive",
        "Use strong access control such as two factor access control for administrative access to the switch"
      ],
      "@Name": "Blue Boxing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: UDP Fragmentation",
    "context": "",
    "output": "For attack pattern UDP Fragmentation, the list of mitigations is: This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.",
      "@Name": "UDP Fragmentation"
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Targeting Error Pages. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use libraries and templates that minimize unfiltered input.\nImplementation: Normalize, filter and use an allowlist for any input that will be used in error messages.\nImplementation: The victim should configure the browser to minimize active content from untrusted sources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use libraries and templates that minimize unfiltered input.",
        "Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages.",
        "Implementation: The victim should configure the browser to minimize active content from untrusted sources."
      ],
      "@Name": "XSS Targeting Error Pages"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: WiFi MAC Address Tracking",
    "context": "",
    "output": "Here are the mitigations relevant for WiFi MAC Address Tracking:\nAutomatic randomization of WiFi MAC addresses\nFrequent changing of handset and retransmission device",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Automatic randomization of WiFi MAC addresses",
        "Frequent changing of handset and retransmission device"
      ],
      "@Name": "WiFi MAC Address Tracking"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XPath Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.\n* Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.\n* Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.",
        "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.",
        "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
      ],
      "@Name": "XPath Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Influence Perception of Liking",
    "context": "",
    "output": "Here are the mitigations relevant for Influence Perception of Liking:\nAn organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Liking"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Cross-Site Flashing",
    "context": "",
    "output": "For attack pattern Cross-Site Flashing, the list of mitigations is: Implementation: Only allow known URL to be included as remote flash movies in a flash application\nConfiguration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Only allow known URL to be included as remote flash movies in a flash application",
        "Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies."
      ],
      "@Name": "Cross-Site Flashing"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Amplification",
    "context": "",
    "output": "Here are the mitigations relevant for Amplification:\nTo mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.",
      "@Name": "Amplification"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Cryptanalysis of Cellular Encryption",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.\n- Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.",
        "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption."
      ],
      "@Name": "Cryptanalysis of Cellular Encryption"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Modification of Registry Run Keys",
    "context": "",
    "output": "Here are the mitigations relevant for Modification of Registry Run Keys:\nIdentify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "@Name": "Modification of Registry Run Keys"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Parameter Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.\nTreat all user input as untrusted data that must be validated before use.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.",
        "Treat all user input as untrusted data that must be validated before use."
      ],
      "@Name": "Parameter Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Windows ::DATA Alternate Data Stream",
    "context": "",
    "output": "Here are the mitigations relevant for Windows ::DATA Alternate Data Stream:\nDesign: Use FAT file systems which do not support Alternate Data Streams.\n* Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.\n* Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use FAT file systems which do not support Alternate Data Streams.",
        "Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.",
        "Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations."
      ],
      "@Name": "Windows ::DATA Alternate Data Stream"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Software Development Tools Maliciously Altered",
    "context": "",
    "output": "For attack pattern Software Development Tools Maliciously Altered, the list of mitigations is: Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.\nAvoid giving elevated privileges to developers.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.",
        "Avoid giving elevated privileges to developers."
      ],
      "@Name": "Software Development Tools Maliciously Altered"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Hardware Fault Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Implement robust physical security countermeasures and monitoring.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Implement robust physical security countermeasures and monitoring.",
      "@Name": "Hardware Fault Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Voice Phishing. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.",
      "@Name": "Voice Phishing"
    }
  },
  {
    "instruction": "Given the attack pattern: HTTP Request Splitting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\n- Configuration: front-end HTTP agents notice ambiguous requests.\n- Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n- Configuration: Disable reuse of back-end connections.\n- Configuration: Use HTTP/2 for back-end connections.\n- Configuration: Use the same web server software for front-end and back-end server.\n- Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n- Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n- Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\n- Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
        "Configuration: front-end HTTP agents notice ambiguous requests.",
        "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
        "Configuration: Disable reuse of back-end connections.",
        "Configuration: Use HTTP/2 for back-end connections.",
        "Configuration: Use the same web server software for front-end and back-end server.",
        "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
        "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
        "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
        "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
      ],
      "@Name": "HTTP Request Splitting"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
    "context": "",
    "output": "Here are the mitigations relevant for Malicious Logic Insertion into Product Software via Configuration Management Manipulation:\nAssess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.\n- Leverage anti-virus products to detect and quarantine software with known virus.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.",
        "Leverage anti-virus products to detect and quarantine software with known virus."
      ],
      "@Name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation"
    }
  },
  {
    "instruction": "Given the attack pattern: Cache Poisoning. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Configuration: Disable client side caching.\n- Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Configuration: Disable client side caching.",
        "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes."
      ],
      "@Name": "Cache Poisoning"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Leveraging Race Conditions via Symbolic Links",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.\n* Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.\n* Follow the principle of least privilege when assigning access rights to files.\n* Ensure good compartmentalization in the system to provide protected areas that can be trusted.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.",
        "Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.",
        "Follow the principle of least privilege when assigning access rights to files.",
        "Ensure good compartmentalization in the system to provide protected areas that can be trusted."
      ],
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Modify Shared File",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.",
      "@Name": "Modify Shared File"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - USB Memory Attacks",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.\n- Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.\n- Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.",
        "Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.",
        "Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist."
      ],
      "@Name": "USB Memory Attacks"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Probe iOS Screenshots",
    "context": "",
    "output": "Here are the mitigations relevant for Probe iOS Screenshots:\nTo mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.",
      "@Name": "Probe iOS Screenshots"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Replace Binaries",
    "context": "",
    "output": "For attack pattern Replace Binaries, the list of mitigations is: Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.",
      "@Name": "Replace Binaries"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Signature Spoofing by Key Theft",
    "context": "",
    "output": "Here are the mitigations relevant for Signature Spoofing by Key Theft:\nRestrict access to private keys from non-supervisory accounts\n- Restrict access to administrative personnel and processes only\n- Ensure all remote methods are secured\n- Ensure all services are patched and up to date",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Restrict access to private keys from non-supervisory accounts",
        "Restrict access to administrative personnel and processes only",
        "Ensure all remote methods are secured",
        "Ensure all services are patched and up to date"
      ],
      "@Name": "Signature Spoofing by Key Theft"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Documentation Alteration to Cause Errors in System Design",
    "context": "",
    "output": "For attack pattern Documentation Alteration to Cause Errors in System Design, the list of mitigations is: Digitize documents and cryptographically sign them to verify authenticity.\nPassword protect documents and make them read-only for unauthorized users.\nAvoid emailing important documents and configurations.\nEnsure deleted files are actually deleted.\nMaintain multiple instances of the document across different privileged users for recovery and verification.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Digitize documents and cryptographically sign them to verify authenticity.",
        "Password protect documents and make them read-only for unauthorized users.",
        "Avoid emailing important documents and configurations.",
        "Ensure deleted files are actually deleted.",
        "Maintain multiple instances of the document across different privileged users for recovery and verification."
      ],
      "@Name": "Documentation Alteration to Cause Errors in System Design"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Server Side Request Forgery",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.\nFurther down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.\nAllowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.\nRequiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.\nEnforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.",
        "Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.",
        "Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.",
        "Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.",
        "Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented."
      ],
      "@Name": "Server Side Request Forgery"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Adding a Space to a File Extension",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: File extensions should be checked to see if non-visible characters are being included.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "File extensions should be checked to see if non-visible characters are being included.",
      "@Name": "Adding a Space to a File Extension"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "context": "",
    "output": "Here are the mitigations relevant for Utilizing REST's Trust in the System Resource to Obtain Sensitive Data:\nImplementation: Implement message level security such as HMAC in the HTTP communication\n* Design: Utilize defense in depth, do not rely on a single security mechanism like SSL\n* Design: Enforce principle of least privilege",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Implement message level security such as HMAC in the HTTP communication",
        "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL",
        "Design: Enforce principle of least privilege"
      ],
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data"
    }
  },
  {
    "instruction": "Given the attack pattern: Manipulating User-Controlled Variables. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.\n- Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.\n- Use encapsulation when declaring your variables. This is to lower the exposure of your variables.\n- Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.",
        "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.",
        "Use encapsulation when declaring your variables. This is to lower the exposure of your variables.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program."
      ],
      "@Name": "Manipulating User-Controlled Variables"
    }
  },
  {
    "instruction": "Given the attack pattern: Web Services API Signature Forgery Leveraging Hash Function Extension Weakness. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1",
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: OS Command Injection",
    "context": "",
    "output": "Here are the mitigations relevant for OS Command Injection:\nUse language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.\n- Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands\n- All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.",
        "Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands",
        "All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them."
      ],
      "@Name": "OS Command Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Modify Existing Service. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.",
      "@Name": "Modify Existing Service"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Malware-Directed Internal Reconnaissance",
    "context": "",
    "output": "For attack pattern Malware-Directed Internal Reconnaissance, the list of mitigations is: Keep patches up to date by installing weekly or daily if possible.\nIdentify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Keep patches up to date by installing weekly or daily if possible.",
        "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist."
      ],
      "@Name": "Malware-Directed Internal Reconnaissance"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Owner Footprinting",
    "context": "",
    "output": "For attack pattern Owner Footprinting, the list of mitigations is: Ensure that proper permissions on files and folders are enacted to limit accessibility.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure that proper permissions on files and folders are enacted to limit accessibility.",
      "@Name": "Owner Footprinting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Reusing Session IDs (aka Session Replay)",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Always invalidate a session ID after the user logout.\nSetup a session time out for the session IDs.\nProtect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).\nDo not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.\nEncrypt the session data associated with the session ID.\nUse multifactor authentication.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Always invalidate a session ID after the user logout.",
        "Setup a session time out for the session IDs.",
        "Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).",
        "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.",
        "Encrypt the session data associated with the session ID.",
        "Use multifactor authentication."
      ],
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Exploiting Multiple Input Interpretation Layers",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.\n* Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.\n* Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.",
        "Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system."
      ],
      "@Name": "Exploiting Multiple Input Interpretation Layers"
    }
  },
  {
    "instruction": "Given the attack pattern: Modification of Windows Service Configuration. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.",
      "@Name": "Modification of Windows Service Configuration"
    }
  },
  {
    "instruction": "Given the attack pattern: WebView Injection. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.",
      "@Name": "WebView Injection"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Manipulating Writeable Configuration Files",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Enforce principle of least privilege\n* Design: Backup copies of all configuration files\n* Implementation: Integrity monitoring for configuration files\n* Implementation: Enforce audit logging on code and configuration promotion procedures.\n* Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Backup copies of all configuration files",
        "Implementation: Integrity monitoring for configuration files",
        "Implementation: Enforce audit logging on code and configuration promotion procedures.",
        "Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD"
      ],
      "@Name": "Manipulating Writeable Configuration Files"
    }
  },
  {
    "instruction": "Given the attack pattern: Regular Expression Exponential Blowup. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.",
      "@Name": "Regular Expression Exponential Blowup"
    }
  },
  {
    "instruction": "Given the attack pattern: Probe Audio and Video Peripherals. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Prevent unknown code from executing on a system through the use of an allowlist policy.\n- Patch installed applications as soon as new updates become available.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Prevent unknown code from executing on a system through the use of an allowlist policy.",
        "Patch installed applications as soon as new updates become available."
      ],
      "@Name": "Probe Audio and Video Peripherals"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Run Software at Logon",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Restrict write access to logon scripts to necessary administrators.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Restrict write access to logon scripts to necessary administrators.",
      "@Name": "Run Software at Logon"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Target Programs with Elevated Privileges",
    "context": "",
    "output": "Here are the mitigations relevant for Target Programs with Elevated Privileges:\nApply the principle of least privilege.\n* Validate all untrusted data.\n* Apply the latest patches.\n* Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.\n* Avoid revealing information about your system (e.g., version of the program) to anonymous users.\n* Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.\n* If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.\n* Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.\n* Monitor traffic and resource usage and pay attention if resource exhaustion occurs.\n* Protect your log file from unauthorized modification and log forging.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Apply the principle of least privilege.",
        "Validate all untrusted data.",
        "Apply the latest patches.",
        "Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.",
        "Avoid revealing information about your system (e.g., version of the program) to anonymous users.",
        "Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.",
        "If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.",
        "Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.",
        "Monitor traffic and resource usage and pay attention if resource exhaustion occurs.",
        "Protect your log file from unauthorized modification and log forging."
      ],
      "@Name": "Target Programs with Elevated Privileges"
    }
  },
  {
    "instruction": "Given the attack pattern: Replace Winlogon Helper DLL. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Changes to registry entries in \"HKLM\\Software\\Microsoft\\Windows NT\\Winlogon\\Notify\" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.",
      "@Name": "Replace Winlogon Helper DLL"
    }
  },
  {
    "instruction": "Given the attack pattern: Root/Jailbreak Detection Evasion via Hooking. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.\nInspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.\nInspect the application's stack trace for suspicious method calls.\nAllow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.\nFor iOS applications, ensure application methods do not originate from outside of Apple's SDK.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.",
        "Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.",
        "Inspect the application's stack trace for suspicious method calls.",
        "Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.",
        "For iOS applications, ensure application methods do not originate from outside of Apple's SDK."
      ],
      "@Name": "Root/Jailbreak Detection Evasion via Hooking"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Use of Known Operating System Credentials",
    "context": "",
    "output": "For attack pattern Use of Known Operating System Credentials, the list of mitigations is: Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.\nCreate a strong password policy and ensure that your system enforces this policy.\nEnsure users are not reusing username/password combinations for multiple systems, applications, or services.\nDo not reuse local administrator account credentials across systems.\nDeny remote use of local admin credentials to log into domain systems.\nDo not allow accounts to be a local administrator on more than one system.\nImplement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.\nMonitor system and domain logs for abnormal credential access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.",
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Ensure users are not reusing username/password combinations for multiple systems, applications, or services.",
        "Do not reuse local administrator account credentials across systems.",
        "Deny remote use of local admin credentials to log into domain systems.",
        "Do not allow accounts to be a local administrator on more than one system.",
        "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.",
        "Monitor system and domain logs for abnormal credential access."
      ],
      "@Name": "Use of Known Operating System Credentials"
    }
  },
  {
    "instruction": "Given the attack pattern: Signature Spoofing by Mixing Signed and Unsigned Content. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.",
      "@Name": "Signature Spoofing by Mixing Signed and Unsigned Content"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: String Format Overflow in syslog()",
    "context": "",
    "output": "For attack pattern String Format Overflow in syslog(), the list of mitigations is: The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():\n- The following code shows a vulnerable usage of Syslog():",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():",
        "The following code shows a vulnerable usage of Syslog():"
      ],
      "@Name": "String Format Overflow in syslog()"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: BGP Route Disabling",
    "context": "",
    "output": "For attack pattern BGP Route Disabling, the list of mitigations is: Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.\nImplement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.",
        "Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography."
      ],
      "@Name": "BGP Route Disabling"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Scheme Squatting",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.",
      "@Name": "Scheme Squatting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Accessing Functionality Not Properly Constrained by ACLs",
    "context": "",
    "output": "For attack pattern Accessing Functionality Not Properly Constrained by ACLs, the list of mitigations is: In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.\n- Having done so, any direct access to those protected Servlets will be prohibited by the web container.\n- In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.",
        "Having done so, any direct access to those protected Servlets will be prohibited by the web container.",
        "In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic."
      ],
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Encryption Brute Forcing",
    "context": "",
    "output": "For attack pattern Encryption Brute Forcing, the list of mitigations is: Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.\n- In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.",
        "In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months."
      ],
      "@Name": "Encryption Brute Forcing"
    }
  },
  {
    "instruction": "Given the attack pattern: Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Tunnel communications through a secure proxy\n- Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Tunnel communications through a secure proxy",
        "Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)"
      ],
      "@Name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy"
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Manual Software Update. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Only accept software updates from an official source.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Only accept software updates from an official source.",
      "@Name": "Malicious Manual Software Update"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Buffer Overflow via Symbolic Links",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.\n* Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.\n* Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.\n* Always check the size of the input data before copying to a buffer.\n* Use a language or compiler that performs automatic bounds checking.\n* Use an abstraction library to abstract away risky APIs. Not a complete solution.\n* Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n* Use OS-level preventative functionality. Not a complete solution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.",
        "Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.",
        "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources.",
        "Always check the size of the input data before copying to a buffer.",
        "Use a language or compiler that performs automatic bounds checking.",
        "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Use OS-level preventative functionality. Not a complete solution."
      ],
      "@Name": "Buffer Overflow via Symbolic Links"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Data Injected During Configuration",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.",
      "@Name": "Data Injected During Configuration"
    }
  },
  {
    "instruction": "Given the attack pattern: Serialized Data Parameter Blowup. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: This attack may be mitigated completely by using a parser that is not using a vulnerable container.\n- Mitigation may limit the number of configuration parameters per dataset.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "This attack may be mitigated completely by using a parser that is not using a vulnerable container.",
        "Mitigation may limit the number of configuration parameters per dataset."
      ],
      "@Name": "Serialized Data Parameter Blowup"
    }
  },
  {
    "instruction": "Given the attack pattern: Cellular Jamming. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.",
      "@Name": "Cellular Jamming"
    }
  },
  {
    "instruction": "Given the attack pattern: Process Footprinting. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "@Name": "Process Footprinting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Probe System Files",
    "context": "",
    "output": "For attack pattern Probe System Files, the list of mitigations is: Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.",
      "@Name": "Probe System Files"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Flash Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Implementation: remove sensitive information such as user name and password in the SWF file.\nImplementation: use validation on both client and server side.\nImplementation: remove debug information.\nImplementation: use SSL when loading external data\nImplementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: remove sensitive information such as user name and password in the SWF file.",
        "Implementation: use validation on both client and server side.",
        "Implementation: remove debug information.",
        "Implementation: use SSL when loading external data",
        "Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain."
      ],
      "@Name": "Flash Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Fuzzing",
    "context": "",
    "output": "Here are the mitigations relevant for Fuzzing:\nTest to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.\n* Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.",
        "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior."
      ],
      "@Name": "Fuzzing"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: ICMP Flood",
    "context": "",
    "output": "For attack pattern ICMP Flood, the list of mitigations is: To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.",
      "@Name": "ICMP Flood"
    }
  },
  {
    "instruction": "Given the attack pattern: XML Ping of the Death. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.\n* Implementation: Provide for network flow control and traffic shaping to control access to the resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.",
        "Implementation: Provide for network flow control and traffic shaping to control access to the resources."
      ],
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Design for FPGA Maliciously Altered",
    "context": "",
    "output": "Here are the mitigations relevant for Design for FPGA Maliciously Altered:\nUtilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n- Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.\n- Require that provenance of COTS microelectronic components be known whenever procured.\n- Conduct detailed vendor assessment before acquiring COTS hardware.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
        "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.",
        "Require that provenance of COTS microelectronic components be known whenever procured.",
        "Conduct detailed vendor assessment before acquiring COTS hardware."
      ],
      "@Name": "Design for FPGA Maliciously Altered"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Use of Captured Tickets (Pass The Ticket)",
    "context": "",
    "output": "Here are the mitigations relevant for Use of Captured Tickets (Pass The Ticket):\nReset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.\n* Monitor system and domain logs for abnormal access.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.",
        "Monitor system and domain logs for abnormal access."
      ],
      "@Name": "Use of Captured Tickets (Pass The Ticket)"
    }
  },
  {
    "instruction": "Given the attack pattern: Inclusion of Code in Existing Process. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Prevent unknown or malicious software from loading through using an allowlist policy.\nProperly restrict the location of the software being used.\nLeverage security kernel modules providing advanced access control and process restrictions like SELinux.\nMonitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.\nMonitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.\nMonitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.\nMonitor processes and command-line arguments for unknown behavior related to code injection.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Prevent unknown or malicious software from loading through using an allowlist policy.",
        "Properly restrict the location of the software being used.",
        "Leverage security kernel modules providing advanced access control and process restrictions like SELinux.",
        "Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.",
        "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.",
        "Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.",
        "Monitor processes and command-line arguments for unknown behavior related to code injection."
      ],
      "@Name": "Inclusion of Code in Existing Process"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Oversized Serialized Data Payloads",
    "context": "",
    "output": "For attack pattern Oversized Serialized Data Payloads, the list of mitigations is: Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.\n* Perform validation on canonical data.\n* Pick a robust implementation of the serialized data parser.\n* Validate data against a valid schema or DTD prior to parsing.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.",
        "Perform validation on canonical data.",
        "Pick a robust implementation of the serialized data parser.",
        "Validate data against a valid schema or DTD prior to parsing."
      ],
      "@Name": "Oversized Serialized Data Payloads"
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Through HTTP Headers. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Use browser technologies that do not allow client side scripting.\nDesign: Utilize strict type, character, and encoding enforcement\nDesign: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\nImplementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\nImplementation: Perform input validation for all remote content.\nImplementation: Perform output validation for all remote content.\nImplementation: Disable scripting languages such as JavaScript in browser\nImplementation: Session tokens for specific host\nImplementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Design: Utilize strict type, character, and encoding enforcement",
        "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Perform input validation for all remote content.",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser",
        "Implementation: Session tokens for specific host",
        "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
      ],
      "@Name": "XSS Through HTTP Headers"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Reflection Attack in Authentication Protocol",
    "context": "",
    "output": "Here are the mitigations relevant for Reflection Attack in Authentication Protocol:\nThe server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further\n* The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.\n* Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further",
        "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.",
        "Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol"
      ],
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Web Services Protocol Manipulation",
    "context": "",
    "output": "Here are the mitigations relevant for Web Services Protocol Manipulation:\nDesign: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.\n- Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.",
        "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them."
      ],
      "@Name": "Web Services Protocol Manipulation"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Security Software Footprinting",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.",
      "@Name": "Security Software Footprinting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - XML Injection",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.\nUse of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.",
        "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application."
      ],
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Retrieve Data from Decommissioned Devices. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Backup device data before erasure to retain intellectual property and inside knowledge.\n- Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.\n- Use a secure erase software.\n- Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.\n- Physically destroy memory and SIM cards for mobile devices not intended to be reused.\n- Ensure that the user account has been terminated or switched to a new device before destroying.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Backup device data before erasure to retain intellectual property and inside knowledge.",
        "Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.",
        "Use a secure erase software.",
        "Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.",
        "Physically destroy memory and SIM cards for mobile devices not intended to be reused.",
        "Ensure that the user account has been terminated or switched to a new device before destroying."
      ],
      "@Name": "Retrieve Data from Decommissioned Devices"
    }
  },
  {
    "instruction": "Given the attack pattern: Command Delimiters. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Perform allowlist validation against a positive specification for command length, type, and parameters.\nDesign: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account\nImplementation: Perform input validation for all remote content.\nImplementation: Use type conversions such as JDBC prepared statements.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Perform allowlist validation against a positive specification for command length, type, and parameters.",
        "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account",
        "Implementation: Perform input validation for all remote content.",
        "Implementation: Use type conversions such as JDBC prepared statements."
      ],
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Session Credential Falsification through Prediction",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Use a strong source of randomness to generate a session ID.\nUse adequate length session IDs\nDo not use information available to the user in order to generate session ID (e.g., time).\nIdeas for creating random numbers are offered by Eastlake [RFC1750]\nEncrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a strong source of randomness to generate a session ID.",
        "Use adequate length session IDs",
        "Do not use information available to the user in order to generate session ID (e.g., time).",
        "Ideas for creating random numbers are offered by Eastlake [RFC1750]",
        "Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format."
      ],
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Overflow Variables and Tags",
    "context": "",
    "output": "For attack pattern Overflow Variables and Tags, the list of mitigations is: Use a language or compiler that performs automatic bounds checking.\n* Use an abstraction library to abstract away risky APIs. Not a complete solution.\n* Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n* Use OS-level preventative functionality. Not a complete solution.\n* Do not trust input data from user. Validate all user input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Use a language or compiler that performs automatic bounds checking.",
        "Use an abstraction library to abstract away risky APIs. Not a complete solution.",
        "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Use OS-level preventative functionality. Not a complete solution.",
        "Do not trust input data from user. Validate all user input."
      ],
      "@Name": "Overflow Variables and Tags"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: TypoSquatting",
    "context": "",
    "output": "For attack pattern TypoSquatting, the list of mitigations is: Authenticate all servers and perform redundant checks when using DNS hostnames.\nPurchase potential TypoSquatted domains and forward to legitimate domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Authenticate all servers and perform redundant checks when using DNS hostnames.",
        "Purchase potential TypoSquatted domains and forward to legitimate domain."
      ],
      "@Name": "TypoSquatting"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: SaaS User Request Forgery",
    "context": "",
    "output": "Here are the mitigations relevant for SaaS User Request Forgery:\nTo limit one's exposure to this type of attack, tunnel communications through a secure proxy service.\nDetection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.",
        "Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)"
      ],
      "@Name": "SaaS User Request Forgery"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Replace File Extension Handlers",
    "context": "",
    "output": "For attack pattern Replace File Extension Handlers, the list of mitigations is: Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.",
      "@Name": "Replace File Extension Handlers"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Unicode Encoding to Bypass Validation Logic",
    "context": "",
    "output": "Here are the mitigations relevant for Using Unicode Encoding to Bypass Validation Logic:\nEnsure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.\nEnsure that filtering or input validation is applied to canonical data.\nAssume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.",
        "Ensure that filtering or input validation is applied to canonical data.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
      ],
      "@Name": "Using Unicode Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Given the attack pattern: Format String Injection. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Limit the usage of formatting string functions.\n- Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Limit the usage of formatting string functions.",
        "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters."
      ],
      "@Name": "Format String Injection"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: JSON Hijacking (aka JavaScript Hijacking)",
    "context": "",
    "output": "For attack pattern JSON Hijacking (aka JavaScript Hijacking), the list of mitigations is: Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.\n- On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).\n- Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.\n- Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.",
        "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).",
        "Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.",
        "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario."
      ],
      "@Name": "JSON Hijacking (aka JavaScript Hijacking)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: AJAX Footprinting",
    "context": "",
    "output": "For attack pattern AJAX Footprinting, the list of mitigations is: Design: Use browser technologies that do not allow client side scripting.\n* Implementation: Perform input validation for all remote content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Implementation: Perform input validation for all remote content."
      ],
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - HTTP Response Smuggling",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.\n- Configuration: front-end HTTP agents notice ambiguous requests.\n- Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.\n- Configuration: Disable reuse of back-end connections.\n- Configuration: Use HTTP/2 for back-end connections.\n- Configuration: Use the same web server software for front-end and back-end server.\n- Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.\n- Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.\n- Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.\n- Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)\n- Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.\n- Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.",
        "Configuration: front-end HTTP agents notice ambiguous requests.",
        "Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.",
        "Configuration: Disable reuse of back-end connections.",
        "Configuration: Use HTTP/2 for back-end connections.",
        "Configuration: Use the same web server software for front-end and back-end server.",
        "Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.",
        "Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.",
        "Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.",
        "Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)",
        "Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.",
        "Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input."
      ],
      "@Name": "HTTP Response Smuggling"
    }
  },
  {
    "instruction": "Given the attack pattern: Malicious Code Implanted During Chip Programming. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.\n* Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.\n* Require that provenance of COTS microelectronic components be known whenever procured.\n* Conduct detailed vendor assessment before acquiring COTS hardware.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Utilize DMEA\u2019s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.",
        "Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.",
        "Require that provenance of COTS microelectronic components be known whenever procured.",
        "Conduct detailed vendor assessment before acquiring COTS hardware."
      ],
      "@Name": "Malicious Code Implanted During Chip Programming"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Try All Common Switches",
    "context": "",
    "output": "Here are the mitigations relevant for Try All Common Switches:\nDesign: Minimize switch and option functionality to only that necessary for correct function of the command.\n- Implementation: Remove all debug and testing options from production code.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Minimize switch and option functionality to only that necessary for correct function of the command.",
        "Implementation: Remove all debug and testing options from production code."
      ],
      "@Name": "Try All Common Switches"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Influence Perception of Scarcity",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.",
      "@Name": "Influence Perception of Scarcity"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Malicious Software Update",
    "context": "",
    "output": "Here are the mitigations relevant for Malicious Software Update:\nValidate software updates before installing.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Validate software updates before installing.",
      "@Name": "Malicious Software Update"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Add Malicious File to Shared Webroot",
    "context": "",
    "output": "For attack pattern Add Malicious File to Shared Webroot, the list of mitigations is: Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.",
      "@Name": "Add Malicious File to Shared Webroot"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Choosing Message Identifier",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them."
      ],
      "@Name": "Choosing Message Identifier"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Log Injection-Tampering-Forging",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Carefully control access to physical log files.\n* Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.\n* Use synchronization to control the flow of execution.\n* Use static analysis tools to identify log forging vulnerabilities.\n* Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Carefully control access to physical log files.",
        "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.",
        "Use synchronization to control the flow of execution.",
        "Use static analysis tools to identify log forging vulnerabilities.",
        "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells."
      ],
      "@Name": "Log Injection-Tampering-Forging"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: HTTP Parameter Pollution (HPP)",
    "context": "",
    "output": "Here are the mitigations relevant for HTTP Parameter Pollution (HPP):\nConfiguration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests\n* Design: Perform URL encoding\n* Implementation: Use strict regular expressions in URL rewriting\n* Implementation: Beware of multiple occurrences of a parameter in a Query String",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests",
        "Design: Perform URL encoding",
        "Implementation: Use strict regular expressions in URL rewriting",
        "Implementation: Beware of multiple occurrences of a parameter in a Query String"
      ],
      "@Name": "HTTP Parameter Pollution (HPP)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Cross-Site Scripting (XSS)",
    "context": "",
    "output": "For attack pattern Cross-Site Scripting (XSS), the list of mitigations is: Design: Use browser technologies that do not allow client side scripting.\n* Design: Utilize strict type, character, and encoding enforcement\n* Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.\n* Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n* Implementation: Perform input validation for all remote content.\n* Implementation: Perform output validation for all remote content.\n* Implementation: Session tokens for specific host\n* Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Design: Utilize strict type, character, and encoding enforcement",
        "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Perform input validation for all remote content.",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Session tokens for specific host",
        "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this."
      ],
      "@Name": "Cross-Site Scripting (XSS)"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Use of Captured Hashes (Pass The Hash)",
    "context": "",
    "output": "For attack pattern Use of Captured Hashes (Pass The Hash), the list of mitigations is: Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.\nLeverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.\nMonitor system and domain logs for abnormal credential access.\nCreate a strong password policy and ensure that your system enforces this policy.\nLeverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.",
        "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.",
        "Monitor system and domain logs for abnormal credential access.",
        "Create a strong password policy and ensure that your system enforces this policy.",
        "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain."
      ],
      "@Name": "Use of Captured Hashes (Pass The Hash)"
    }
  },
  {
    "instruction": "Given the attack pattern: XSS Targeting Non-Script Elements. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.\n* All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.",
        "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed."
      ],
      "@Name": "XSS Targeting Non-Script Elements"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Bypassing ATA Password Security",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Avoid using ATA password security when possible.\n- Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.\n- Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Avoid using ATA password security when possible.",
        "Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.",
        "Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption."
      ],
      "@Name": "Bypassing ATA Password Security"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: File Content Injection",
    "context": "",
    "output": "For attack pattern File Content Injection, the list of mitigations is: Design: Enforce principle of least privilege\nDesign: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)\nDesign: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.\nDesign: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.\nImplementation: Virus scanning on host\nImplementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Enforce principle of least privilege",
        "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)",
        "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.",
        "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.",
        "Implementation: Virus scanning on host",
        "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin."
      ],
      "@Name": "File Content Injection"
    }
  },
  {
    "instruction": "Given the attack pattern: Local Execution of Code. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Employ robust cybersecurity training for all employees.\nImplement system antivirus software that scans all attachments before opening them.\nRegularly patch all software.\nExecute all suspicious files in a sandbox environment.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Employ robust cybersecurity training for all employees.",
        "Implement system antivirus software that scans all attachments before opening them.",
        "Regularly patch all software.",
        "Execute all suspicious files in a sandbox environment."
      ],
      "@Name": "Local Execution of Code"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Eavesdropping on a Monitor",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.\n* Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.\n* Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).\n* Implement: Use wireless technologies to connect to external display devices.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.",
        "Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.",
        "Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).",
        "Implement: Use wireless technologies to connect to external display devices."
      ],
      "@Name": "Eavesdropping on a Monitor"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Physical Theft",
    "context": "",
    "output": "For attack pattern Physical Theft, the list of mitigations is: To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.",
      "@Name": "Physical Theft"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Using Slashes in Alternate Encoding",
    "context": "",
    "output": "Here are the mitigations relevant for Using Slashes in Alternate Encoding:\nAny security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.\nWhen client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.\nThere are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)\nBe aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)\nTest your path decoding process against malicious input.\nIn the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.\nAssume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.",
        "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible.",
        "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)",
        "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)",
        "Test your path decoding process against malicious input.",
        "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system."
      ],
      "@Name": "Using Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Capture Credentials via Keylogger",
    "context": "",
    "output": "For attack pattern Capture Credentials via Keylogger, the list of mitigations is: Strong physical security can help reduce the ability of an adversary to install a keylogger.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Strong physical security can help reduce the ability of an adversary to install a keylogger.",
      "@Name": "Capture Credentials via Keylogger"
    }
  },
  {
    "instruction": "Given the attack pattern: Session Sidejacking. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.\nModify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.",
        "Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks."
      ],
      "@Name": "Session Sidejacking"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: PHP Remote File Inclusion",
    "context": "",
    "output": "For attack pattern PHP Remote File Inclusion, the list of mitigations is: Implementation: Perform input validation for all remote content, including remote and user-generated content\n* Implementation: Only allow known files to be included (allowlist)\n* Implementation: Make use of indirect references passed in URL parameters instead of file names\n* Configuration: Ensure that remote scripts cannot be include in the \"include\" or \"require\" PHP directives",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Implementation: Only allow known files to be included (allowlist)",
        "Implementation: Make use of indirect references passed in URL parameters instead of file names",
        "Configuration: Ensure that remote scripts cannot be include in the \"include\" or \"require\" PHP directives"
      ],
      "@Name": "PHP Remote File Inclusion"
    }
  },
  {
    "instruction": "Given the attack pattern: Exploiting Trust in Client. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.\nDesign: Do not rely on client validation or encoding for security purposes.\nDesign: Utilize digital signatures to increase authentication assurance.\nDesign: Utilize two factor authentication to increase authentication assurance.\nImplementation: Perform input validation for all remote content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.",
        "Design: Do not rely on client validation or encoding for security purposes.",
        "Design: Utilize digital signatures to increase authentication assurance.",
        "Design: Utilize two factor authentication to increase authentication assurance.",
        "Implementation: Perform input validation for all remote content."
      ],
      "@Name": "Exploiting Trust in Client"
    }
  },
  {
    "instruction": "Given the attack pattern: Using Alternative IP Address Encodings. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Design: Default deny access control policies\nDesign: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)\nImplementation: Perform input validation for all remote content.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Default deny access control policies",
        "Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)",
        "Implementation: Perform input validation for all remote content."
      ],
      "@Name": "Using Alternative IP Address Encodings"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Install New Service",
    "context": "",
    "output": "For attack pattern Install New Service, the list of mitigations is: Limit privileges of user accounts so new service creation can only be performed by authorized administrators.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Limit privileges of user accounts so new service creation can only be performed by authorized administrators.",
      "@Name": "Install New Service"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Spoof Open-Source Software Metadata",
    "context": "",
    "output": "For attack pattern Spoof Open-Source Software Metadata, the list of mitigations is: Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.\n- Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.\n- Reference vulnerability databases to determine if the software contains known vulnerabilities.\n- Only download open-source software from reputable hosting sites or package managers.\n- Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.\n- After downloading open-source software, ensure integrity values have not changed.\n- Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.",
        "Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.",
        "Reference vulnerability databases to determine if the software contains known vulnerabilities.",
        "Only download open-source software from reputable hosting sites or package managers.",
        "Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the \"Verified\" status and for developers leveraging \"Vigilant Mode\" (GitHub) or similar modes.",
        "After downloading open-source software, ensure integrity values have not changed.",
        "Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously."
      ],
      "@Name": "Spoof Open-Source Software Metadata"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Remote Code Inclusion",
    "context": "",
    "output": "Here are the mitigations relevant for Remote Code Inclusion:\nMinimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.",
      "@Name": "Remote Code Inclusion"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Schema Poisoning",
    "context": "",
    "output": "For attack pattern Schema Poisoning, the list of mitigations is: Design: Protect the schema against unauthorized modification.\n* Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.\n* Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Protect the schema against unauthorized modification.",
        "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.",
        "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification."
      ],
      "@Name": "Schema Poisoning"
    }
  },
  {
    "instruction": "Given the attack pattern: Signing Malicious Code. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Ensure digital certificates are protected and inaccessible by unauthorized uses.\n* If a digital certificate has been compromised it should be revoked and regenerated.\n* Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Ensure digital certificates are protected and inaccessible by unauthorized uses.",
        "If a digital certificate has been compromised it should be revoked and regenerated.",
        "Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities."
      ],
      "@Name": "Signing Malicious Code"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Development Alteration",
    "context": "",
    "output": "Here are the mitigations relevant for Development Alteration:\nAssess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.",
      "@Name": "Development Alteration"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - User-Controlled Filename",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Design: Use browser technologies that do not allow client side scripting.\n- Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.\n- Implementation: Perform input validation for all remote content.\n- Implementation: Perform output validation for all remote content.\n- Implementation: Disable scripting languages such as JavaScript in browser\n- Implementation: Scan dynamically generated content against validation specification",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Use browser technologies that do not allow client side scripting.",
        "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
        "Implementation: Perform input validation for all remote content.",
        "Implementation: Perform output validation for all remote content.",
        "Implementation: Disable scripting languages such as JavaScript in browser",
        "Implementation: Scan dynamically generated content against validation specification"
      ],
      "@Name": "User-Controlled Filename"
    }
  },
  {
    "instruction": "Given the attack pattern: Hardware Design Specifications Are Altered. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Digitize documents and cryptographically sign them to verify authenticity.\nPassword protect documents and make them read-only for unauthorized users.\nAvoid emailing important documents and configurations.\nEnsure deleted files are actually deleted.\nMaintain backups of the document for recovery and verification.\nSeparate need-to-know information from system configuration information depending on the user.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Digitize documents and cryptographically sign them to verify authenticity.",
        "Password protect documents and make them read-only for unauthorized users.",
        "Avoid emailing important documents and configurations.",
        "Ensure deleted files are actually deleted.",
        "Maintain backups of the document for recovery and verification.",
        "Separate need-to-know information from system configuration information depending on the user."
      ],
      "@Name": "Hardware Design Specifications Are Altered"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Try Common or Default Usernames and Passwords",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Delete all default account credentials that may be put in by the product vendor.\n* Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.\n* Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.\n* Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Delete all default account credentials that may be put in by the product vendor.",
        "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.",
        "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.",
        "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen."
      ],
      "@Name": "Try Common or Default Usernames and Passwords"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Cross Site Tracing",
    "context": "",
    "output": "Here are the mitigations relevant for Cross Site Tracing:\nAdministrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.\n* Patch web browser against known security origin policy bypass exploits.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.",
        "Patch web browser against known security origin policy bypass exploits."
      ],
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "Given the attack pattern: Command Line Execution through SQL Injection. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Disable MSSQL xp_cmdshell directive on the database\n* Properly validate the data (syntactically and semantically) before writing it to the database.\n* Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Disable MSSQL xp_cmdshell directive on the database",
        "Properly validate the data (syntactically and semantically) before writing it to the database.",
        "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument)."
      ],
      "@Name": "Command Line Execution through SQL Injection"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Symlink Attack",
    "context": "",
    "output": "Here are the mitigations relevant for Symlink Attack:\nDesign: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.\n- Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.",
        "Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions."
      ],
      "@Name": "Symlink Attack"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Infiltration of Hardware Development Environment",
    "context": "",
    "output": "Here are the mitigations relevant for Infiltration of Hardware Development Environment:\nVerify software downloads and updates to ensure they have not been modified be adversaries\nLeverage antivirus tools to detect known malware\nDo not download software from untrusted sources\nEducate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Verify software downloads and updates to ensure they have not been modified be adversaries",
        "Leverage antivirus tools to detect known malware",
        "Do not download software from untrusted sources",
        "Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks"
      ],
      "@Name": "Infiltration of Hardware Development Environment"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: DHCP Spoofing",
    "context": "",
    "output": "Here are the mitigations relevant for DHCP Spoofing:\nDesign: MAC-Forced Forwarding\nImplementation: Port Security and DHCP snooping\nImplementation: Network-based Intrusion Detection Systems",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design: MAC-Forced Forwarding",
        "Implementation: Port Security and DHCP snooping",
        "Implementation: Network-based Intrusion Detection Systems"
      ],
      "@Name": "DHCP Spoofing"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Footprinting",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Keep patches up to date by installing weekly or daily if possible.\nShut down unnecessary services/ports.\nChange default passwords by choosing strong passwords.\nCurtail unexpected input.\nEncrypt and password-protect sensitive data.\nAvoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Keep patches up to date by installing weekly or daily if possible.",
        "Shut down unnecessary services/ports.",
        "Change default passwords by choosing strong passwords.",
        "Curtail unexpected input.",
        "Encrypt and password-protect sensitive data.",
        "Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents."
      ],
      "@Name": "Footprinting"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Exploitation of Improperly Controlled Registers",
    "context": "",
    "output": "For attack pattern Exploitation of Improperly Controlled Registers, the list of mitigations is: Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.\nEnsure security lock bit protections are reviewed for design inconsistencies and common weaknesses.\nTest security lock programming flow in both pre-silicon and post-silicon environments.\nLeverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.\nEnsure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.",
        "Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.",
        "Test security lock programming flow in both pre-silicon and post-silicon environments.",
        "Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
        "Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent."
      ],
      "@Name": "Exploitation of Improperly Controlled Registers"
    }
  },
  {
    "instruction": "Given the attack pattern: DLL Side-Loading. what are the possible mitigations",
    "context": "",
    "output": "Possible mitigations: Prevent unknown DLLs from loading through using an allowlist policy.\nPatch installed applications as soon as new updates become available.\nProperly restrict the location of the software being used.\nUse of sxstrace.exe on Windows as well as manual inspection of the manifests.\nRequire code signing and avoid using relative paths for resources.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Prevent unknown DLLs from loading through using an allowlist policy.",
        "Patch installed applications as soon as new updates become available.",
        "Properly restrict the location of the software being used.",
        "Use of sxstrace.exe on Windows as well as manual inspection of the manifests.",
        "Require code signing and avoid using relative paths for resources."
      ],
      "@Name": "DLL Side-Loading"
    }
  },
  {
    "instruction": "How can I mitigate the following CAPEC attack pattern: Cause Web Server Misclassification",
    "context": "",
    "output": "Here are the mitigations relevant for Cause Web Server Misclassification:\nImplementation: Server routines should be determined by content not determined by filename or file extension.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Implementation: Server routines should be determined by content not determined by filename or file extension.",
      "@Name": "Cause Web Server Misclassification"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Overflow Binary Resource File",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Perform appropriate bounds checking on all buffers.\nDesign: Enforce principle of least privilege\nDesign: Static code analysis\nImplementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes\nImplementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Perform appropriate bounds checking on all buffers.",
        "Design: Enforce principle of least privilege",
        "Design: Static code analysis",
        "Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes",
        "Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host."
      ],
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Reverse Engineering",
    "context": "",
    "output": "For attack pattern Reverse Engineering, the list of mitigations is: Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.",
      "@Name": "Reverse Engineering"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Smudge Attack",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Strong physical security of the device.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Strong physical security of the device.",
      "@Name": "Smudge Attack"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Subverting Environment Variable Values",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Protect environment variables against unauthorized read and write access.\n* Protect the configuration files which contain environment variables against illegitimate read and write access.\n* Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.\n* Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Protect environment variables against unauthorized read and write access.",
        "Protect the configuration files which contain environment variables against illegitimate read and write access.",
        "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.",
        "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege."
      ],
      "@Name": "Subverting Environment Variable Values"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Inducing Account Lockout",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\n- When implementing security features, consider how they can be misused and made to turn on themselves.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.",
        "When implementing security features, consider how they can be misused and made to turn on themselves."
      ],
      "@Name": "Inducing Account Lockout"
    }
  },
  {
    "instruction": "Retrieve list of mitigations for the  attack pattern - Filter Failure through Buffer Overflow",
    "context": "",
    "output": "Sure. Here is the requested list of mitigations: Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.\n- Pre-design: Use a language or compiler that performs automatic bounds checking.\n- Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\n- Operational: Use OS-level preventative functionality. Not a complete solution.\n- Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": [
        "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.",
        "Pre-design: Use a language or compiler that performs automatic bounds checking.",
        "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
        "Operational: Use OS-level preventative functionality. Not a complete solution.",
        "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution."
      ],
      "@Name": "Filter Failure through Buffer Overflow"
    }
  },
  {
    "instruction": "Return the mitigations to the following attack pattern: Exploit Non-Production Interfaces",
    "context": "",
    "output": "For attack pattern Exploit Non-Production Interfaces, the list of mitigations is: Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.",
    "category": "CAPECFlan",
    "instruction_type": "capec_mitigations",
    "parsed_raw_data": {
      "Mitigations": "Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.",
      "@Name": "Exploit Non-Production Interfaces"
    }
  }
]