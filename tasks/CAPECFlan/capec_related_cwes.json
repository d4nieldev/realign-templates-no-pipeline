[
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Black Box Reverse Engineering (CAPEC ID: 189)",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Observable Discrepancy\nWeakness description: The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\nWeakness name: Comparison Logic is Vulnerable to Power Side-Channel Attacks\nWeakness description: A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.\n\nWeakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Discrepancy\nWeakness description: The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\nWeakness name: Comparison Logic is Vulnerable to Power Side-Channel Attacks\nWeakness description: A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.\n\nWeakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
      "@Name": "Black Box Reverse Engineering (CAPEC ID: 189)",
      "attack_ptrn": {
        "@ID": "189",
        "@Name": "Black Box Reverse Engineering",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "188"
          }
        },
        "Resources_Required": {
          "Resource": "Black box methods require (at minimum) the ability to interact with the functional boundaries where the software communicates with a larger processing environment, such as inter-process communication on a host operating system, or via networking protocols."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "203"
            },
            {
              "@CWE_ID": "1255"
            },
            {
              "@CWE_ID": "1300"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Activation_Zone, Description Summary, Injection_Vector, Payload, Payload_Activation_Impact, Related_Weaknesses, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Software Reverse Engineering"
          }
        }
      }
    }
  },
  {
    "instruction": "Given attack pattern - DHCP Spoofing (CAPEC ID: 697), what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
      "@Name": "DHCP Spoofing (CAPEC ID: 697)",
      "attack_ptrn": {
        "@ID": "697",
        "@Name": "DHCP Spoofing",
        "@Abstraction": "Standard",
        "@Status": "Stable",
        "Description": {
          "xhtml:p": "An adversary masquerades as a legitimate Dynamic Host Configuration Protocol (DHCP) server by spoofing DHCP traffic, with the goal of redirecting network traffic or denying service to DHCP."
        },
        "Extended_Description": {
          "xhtml:p": [
            "DHCP is broadcast to the entire Local Area Network (LAN) and does not have any form of authentication by default. Therefore, it is susceptible to spoofing.",
            "An adversary with access to the target LAN can receive DHCP messages; obtaining the topology information required to potentially manipulate other hosts' network configurations.",
            "To improve the likelihood of the DHCP request being serviced by the Rogue server, an adversary can first starve the DHCP pool."
          ]
        },
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "194"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "158"
            },
            {
              "@Nature": "CanPrecede",
              "@CAPEC_ID": "94"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.",
              "Technique": "Adversary observes LAN traffic for DHCP solicitations"
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Capture the DHCP DISCOVER message] The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.",
              "Technique": "Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.",
              "Technique": "Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The adversary must have access to a machine within the target LAN which can send DHCP offers to the target."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "Medium",
            "#text": "The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results."
          }
        },
        "Resources_Required": {
          "Resource": "The adversary requires access to a machine within the target LAN on a network which does not secure its DHCP traffic through MAC-Forced Forwarding, port security, etc."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": [
                "Confidentiality",
                "Access Control"
              ],
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Integrity",
                "Access Control"
              ],
              "Impact": [
                "Modify Data",
                "Execute Unauthorized Commands"
              ]
            },
            {
              "Scope": "Availability",
              "Impact": "Resource Consumption"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: MAC-Forced Forwarding",
            "Implementation: Port Security and DHCP snooping",
            "Implementation: Network-based Intrusion Detection Systems"
          ]
        },
        "Example_Instances": {
          "Example": "In early 2019, Microsoft patched a critical vulnerability (CVE-2019-0547) in the Windows DHCP client which allowed remote code execution via crafted DHCP OFFER packets. [REF-739]"
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "923"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1557.003",
            "Entry_Name": "Adversary-in-the-Middle: DHCP Spoofing"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-737"
            },
            {
              "@External_Reference_ID": "REF-738"
            },
            {
              "@External_Reference_ID": "REF-739"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2022-09-29"
          }
        }
      }
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Timestamp Request (CAPEC ID: 295)",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Timestamp Request (CAPEC ID: 295)",
      "attack_ptrn": {
        "@ID": "295",
        "@Name": "Timestamp Request",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "292",
            "Exclude_Related": {
              "@Exclude_ID": "512"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to send a timestamp request to a remote target and receive a response."
        },
        "Resources_Required": {
          "Resource": "Scanners or utilities that provide the ability to send custom ICMP queries."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Confidentiality",
            "Impact": "Other"
          }
        },
        "Example_Instances": {
          "Example": [
            "An adversary sends an ICMP type 13 Timestamp Request to determine the time as recorded by a remote target. Timestamp Replies, ICMP Type 14, usually return a value in Greenwich Mean Time. An adversary can attempt to use an ICMP Timestamp requests to 'ping' a remote system to see if is alive. Additionally, because these types of messages are rare they are easily spotted by intrusion detection systems, many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 13 and egress ICMP type 14 messages.",
            "An adversary may gather the system time or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. The information could be useful for performing other techniques, such as executing a file with a Scheduled Task, or to discover locality information based on time zone to assist in victim targeting"
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": {
            "@Taxonomy_Name": "ATTACK",
            "Entry_ID": "1124",
            "Entry_Name": "System Time Discovery"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pp. 44-51"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-125"
            },
            {
              "@External_Reference_ID": "REF-147",
              "@Section": "Section 3.7.2 ICMP Probe Selection, pg. 70"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Description Summary, Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Prerequisites, Description Summary, Examples-Instances, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-09-30",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2018-07-31",
            "#text": "ICMP Timestamp Request"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Buffer Overflow in an API Call (CAPEC ID: 8)",
    "context": "",
    "output": "The weaknesses related to attack pattern Buffer Overflow in an API Call (CAPEC ID: 8) are the following: Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow in an API Call (CAPEC ID: 8)",
      "attack_ptrn": {
        "@ID": "8",
        "@Name": "Buffer Overflow in an API Call",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "100"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.",
              "Technique": "Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible."
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
              "Technique": [
                "Create malicious shellcode that will execute when the program execution is returned to it.",
                "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": [
            "The target host exposes an API to the user.",
            "One or more API functions exposed by the target host has a buffer overflow vulnerability."
          ]
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            {
              "@Level": "High",
              "#text": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
            }
          ]
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Availability",
              "Impact": "Unreliable Execution"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            },
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": "Integrity",
              "Impact": "Modify Data"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Use a language or compiler that performs automatic bounds checking.",
            "Use secure functions not vulnerable to buffer overflow.",
            "If you have to use dangerous functions, make sure that you do boundary checking.",
            "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.",
            "Use OS-level preventative functionality. Not a complete solution."
          ]
        },
        "Example_Instances": {
          "Example": [
            {
              "xhtml:b": "Attack Example: Libc in FreeBSD",
              "xhtml:p": "A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once."
            },
            {
              "xhtml:b": "Xtlib",
              "xhtml:p": "A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges."
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "120"
            },
            {
              "@CWE_ID": "119"
            },
            {
              "@CWE_ID": "118"
            },
            {
              "@CWE_ID": "74"
            },
            {
              "@CWE_ID": "20"
            },
            {
              "@CWE_ID": "680"
            },
            {
              "@CWE_ID": "733"
            },
            {
              "@CWE_ID": "697"
            }
          ]
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated References"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Description, Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Skills_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Example_Instances"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - TCP Window Scan (CAPEC ID: 306)",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Window Scan (CAPEC ID: 306)",
      "attack_ptrn": {
        "@ID": "306",
        "@Name": "TCP Window Scan",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "300"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Experiment",
              "Description": "An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports."
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
        },
        "Resources_Required": {
          "Resource": "The ability to send TCP segments with a custom window size to a host during network reconnaissance. This can be achieved via the use of a network mapper or scanner, or via raw socket programming in a scripting language. Packet injection tools are also useful for this purpose. Depending upon the method used it may be necessary to sniff the network in order to see the response."
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Other"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "200"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 55-56"
            },
            {
              "@External_Reference_ID": "REF-128"
            },
            {
              "@External_Reference_ID": "REF-34",
              "@Section": "Section 5.8 TCP Window Scan, pg. 115"
            },
            {
              "@External_Reference_ID": "REF-130"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary, References, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Execution_Flow"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Collect Data from Common Resource Locations (CAPEC ID: 150)",
    "context": "",
    "output": "The weaknesses related to attack pattern Collect Data from Common Resource Locations (CAPEC ID: 150) are the following: Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
      "@Name": "Collect Data from Common Resource Locations (CAPEC ID: 150)",
      "attack_ptrn": {
        "@ID": "150",
        "@Name": "Collect Data from Common Resource Locations",
        "@Abstraction": "Standard",
        "@Status": "Draft",
        "Description": "An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",
        "Typical_Severity": "Medium",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "116",
            "Exclude_Related": {
              "@Exclude_ID": "437"
            }
          }
        },
        "Prerequisites": {
          "Prerequisite": "The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type."
        },
        "Resources_Required": {
          "Resource": "None: No specialized resources are required to execute this type of attack. In some cases, the attacker need not even have direct access to the locations on the target computer where the targeted resources reside."
        },
        "Example_Instances": {
          "Example": "An adversary can use a technique called Bluesnarfing to retrieve data from Bluetooth enabled devices in which they know where the data is located. This is done by connecting to the device\u2019s Object Exchange (OBEX) Push Profile and making OBEX GET requests for known filenames (contact lists, photos, recent calls). Bluesnarfing was patched shortly after its discovery in 2003 and will only work on devices created before or during this time."
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "552"
            },
            {
              "@CWE_ID": "1239"
            },
            {
              "@CWE_ID": "1258"
            },
            {
              "@CWE_ID": "1266"
            },
            {
              "@CWE_ID": "1272"
            },
            {
              "@CWE_ID": "1323"
            },
            {
              "@CWE_ID": "1330"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1003",
              "Entry_Name": "OS Credential Dumping"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1119",
              "Entry_Name": "Automated Collection"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1213",
              "Entry_Name": "Data from Information Repositories"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1530",
              "Entry_Name": "Data from Cloud Storage Object"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1555",
              "Entry_Name": "Credentials from Password Stores"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1602",
              "Entry_Name": "Data from Configuration Repository"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Resources_Required"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Related_Weaknesses, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Example_Instances, Related_Attack_Patterns, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-12-07",
            "#text": "Common Resource Location Exploration"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Inclusion of Code in Existing Process (CAPEC ID: 640)",
    "context": "",
    "output": "The weaknesses related to attack pattern Inclusion of Code in Existing Process (CAPEC ID: 640) are the following: Weakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Inclusion of Code in Existing Process (CAPEC ID: 640)",
      "attack_ptrn": {
        "@ID": "640",
        "@Name": "Inclusion of Code in Existing Process",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",
        "Likelihood_Of_Attack": "Low",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "251"
          }
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.",
              "Technique": [
                "On Windows, use the process explorer's security tab to see if a process is running with administror privileges.",
                "On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process."
            },
            {
              "Step": "3",
              "Phase": "Exploit",
              "Description": "[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory."
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code."
        },
        "Skills_Required": {
          "Skill": {
            "@Level": "High",
            "#text": "Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL."
          }
        },
        "Consequences": {
          "Consequence": {
            "Scope": [
              "Integrity",
              "Confidentiality"
            ],
            "Impact": [
              "Execute Unauthorized Commands",
              "Read Data"
            ]
          }
        },
        "Mitigations": {
          "Mitigation": [
            "Prevent unknown or malicious software from loading through using an allowlist policy.",
            "Properly restrict the location of the software being used.",
            "Leverage security kernel modules providing advanced access control and process restrictions like SELinux.",
            "Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.",
            "Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.",
            "Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.",
            "Monitor processes and command-line arguments for unknown behavior related to code injection."
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": [
            {
              "@CWE_ID": "114"
            },
            {
              "@CWE_ID": "829"
            }
          ]
        },
        "Taxonomy_Mappings": {
          "Taxonomy_Mapping": [
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1505.005",
              "Entry_Name": "Server Software Component: Terminal Services DLL"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.006",
              "Entry_Name": "Hijack Execution Flow: Dynamic Linker Hijacking"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1574.013",
              "Entry_Name": "Hijack Execution Flow: KernelCallbackTable"
            },
            {
              "@Taxonomy_Name": "ATTACK",
              "Entry_ID": "1620",
              "Entry_Name": "Reflective Code Loading"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2018-07-31"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2019-04-04",
              "Modification_Comment": "Updated Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Description, Mitigations, Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-06-24",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2021-10-21",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-09-29",
              "Modification_Comment": "Updated Taxonomy_Mappings"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Description, Related_Weaknesses, Taxonomy_Mappings"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - ICMP IP 'ID' Field Error Message Probe (CAPEC ID: 332)",
    "context": "",
    "output": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
      "@Name": "ICMP IP 'ID' Field Error Message Probe (CAPEC ID: 332)",
      "attack_ptrn": {
        "@ID": "332",
        "@Name": "ICMP IP 'ID' Field Error Message Probe",
        "@Abstraction": "Detailed",
        "@Status": "Stable",
        "Description": "An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.",
        "Extended_Description": {
          "xhtml:p": "The internet identification field (ID) is typically utilized for reassembling a fragmented packet. RFC791 and RFC815 discusses about IP datagrams, fragmentation and reassembly. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within the ICMP error message. There are three behaviors related to the IP ID field that can be used to distinguish remote operating systems or firmware: 1) it is echoed back identically to the bit order of the ID field in the original IP header, 2) it is echoed back, but the byte order has been reversed, or it contains an incorrect or unexpected value. Different operating systems will respond by setting the IP ID field differently within error messaging."
        },
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "Low",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": {
            "@Nature": "ChildOf",
            "@CAPEC_ID": "312"
          }
        },
        "Prerequisites": {
          "Prerequisite": "The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card."
        },
        "Resources_Required": {
          "Resource": "A tool capable of sending/receiving UDP datagram packets from a remote system to a closed port and receive an ICMP Error Message Type 3, \"Port Unreachable.\""
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Access Control",
                "Authorization"
              ],
              "Impact": [
                "Bypass Protection Mechanism",
                "Hide Activities"
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "204"
          }
        },
        "References": {
          "Reference": [
            {
              "@External_Reference_ID": "REF-33",
              "@Section": "Chapter 2: Scanning, pg. 56"
            },
            {
              "@External_Reference_ID": "REF-123"
            },
            {
              "@External_Reference_ID": "REF-124"
            },
            {
              "@External_Reference_ID": "REF-262"
            }
          ]
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Attack_Patterns, Resources_Required, Typical_Likelihood_of_Exploit"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Description, Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Description, Extended_Description"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2023-01-24",
              "Modification_Comment": "Updated Related_Weaknesses, Resources_Required"
            }
          ]
        }
      }
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Malicious Logic Insertion (CAPEC ID: 441)",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Malicious Logic Insertion (CAPEC ID: 441)",
      "attack_ptrn": {
        "@ID": "441",
        "@Name": "Malicious Logic Insertion",
        "@Abstraction": "Meta",
        "@Status": "Stable",
        "Description": "An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",
        "Likelihood_Of_Attack": "Medium",
        "Typical_Severity": "High",
        "Prerequisites": {
          "Prerequisite": "Access to the component currently deployed at a victim location."
        },
        "Consequences": {
          "Consequence": {
            "Scope": "Authorization",
            "Impact": "Execute Unauthorized Commands"
          }
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "284"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Description Summary"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Motivation-Consequences, Attack_Prerequisites, Description Summary, Related_Weaknesses, Typical_Likelihood_of_Exploit, Typical_Severity"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2015-11-09",
            "#text": "Malicious Logic Inserted Into to Product"
          }
        }
      }
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: XSS Through HTTP Query Strings (CAPEC ID: 32)",
    "context": "",
    "output": "The weaknesses related to attack pattern XSS Through HTTP Query Strings (CAPEC ID: 32) are the following: Weakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
      "@Name": "XSS Through HTTP Query Strings (CAPEC ID: 32)",
      "attack_ptrn": {
        "@ID": "32",
        "@Name": "XSS Through HTTP Query Strings",
        "@Abstraction": "Detailed",
        "@Status": "Draft",
        "Description": "An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.",
        "Likelihood_Of_Attack": "High",
        "Typical_Severity": "High",
        "Related_Attack_Patterns": {
          "Related_Attack_Pattern": [
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "591"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "588"
            },
            {
              "@Nature": "ChildOf",
              "@CAPEC_ID": "592"
            }
          ]
        },
        "Execution_Flow": {
          "Attack_Step": [
            {
              "Step": "1",
              "Phase": "Explore",
              "Description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.",
              "Technique": [
                "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
                "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
                "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
              ]
            },
            {
              "Step": "2",
              "Phase": "Experiment",
              "Description": "[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.",
              "Technique": [
                "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
                "Use a proxy tool to record results of manual input of XSS probes in known URLs."
              ]
            },
            {
              "Step": "3",
              "Phase": "Experiment",
              "Description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
              "Technique": [
                "Change a URL parameter to include a malicious script tag.",
                "Send information gathered from the malicious script to a remote endpoint."
              ]
            },
            {
              "Step": "4",
              "Phase": "Exploit",
              "Description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
              "Technique": [
                "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
                "Put the malicious URL on a public forum, where many victims might accidentally click the link."
              ]
            }
          ]
        },
        "Prerequisites": {
          "Prerequisite": "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation."
        },
        "Skills_Required": {
          "Skill": [
            {
              "@Level": "Low",
              "#text": "To place malicious payload on server via HTTP"
            },
            {
              "@Level": "High",
              "#text": "Exploiting any information gathered by HTTP Query on script host"
            }
          ]
        },
        "Resources_Required": {
          "Resource": "Ability to send HTTP post to scripting host and collect output"
        },
        "Consequences": {
          "Consequence": [
            {
              "Scope": "Confidentiality",
              "Impact": "Read Data"
            },
            {
              "Scope": [
                "Confidentiality",
                "Integrity",
                "Availability"
              ],
              "Impact": "Execute Unauthorized Commands",
              "Note": "Run Arbitrary Code"
            }
          ]
        },
        "Mitigations": {
          "Mitigation": [
            "Design: Use browser technologies that do not allow client side scripting.",
            "Design: Utilize strict type, character, and encoding enforcement",
            "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.",
            "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.",
            "Implementation: Perform input validation for all remote content, including remote and user-generated content",
            "Implementation: Perform output validation for all remote content.",
            "Implementation: Disable scripting languages such as JavaScript in browser",
            "Implementation: Session tokens for specific host",
            "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
            "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode"
          ]
        },
        "Example_Instances": {
          "Example": [
            "http://user:host@example.com:8080/oradb<script>alert('Hi')</script>",
            {
              "xhtml:p": [
                "Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites.",
                "Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content."
              ]
            }
          ]
        },
        "Related_Weaknesses": {
          "Related_Weakness": {
            "@CWE_ID": "80"
          }
        },
        "References": {
          "Reference": {
            "@External_Reference_ID": "REF-1"
          }
        },
        "Content_History": {
          "Submission": {
            "Submission_Name": "CAPEC Content Team",
            "Submission_Organization": "The MITRE Corporation",
            "Submission_Date": "2014-06-23"
          },
          "Modification": [
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-11-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2015-12-07",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-01-09",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-05-01",
              "Modification_Comment": "Updated Attack_Phases, Description Summary, Related_Attack_Patterns, Related_Weaknesses"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2017-08-04",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2018-07-31",
              "Modification_Comment": "Updated Attack_Phases"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-07-30",
              "Modification_Comment": "Updated Execution_Flow"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2020-12-17",
              "Modification_Comment": "Updated Related_Attack_Patterns"
            },
            {
              "Modification_Name": "CAPEC Content Team",
              "Modification_Organization": "The MITRE Corporation",
              "Modification_Date": "2022-02-22",
              "Modification_Comment": "Updated Example_Instances, Execution_Flow"
            }
          ],
          "Previous_Entry_Name": {
            "@Date": "2017-05-01",
            "#text": "Embedding Scripts in HTTP Query Strings"
          }
        }
      }
    }
  }
]