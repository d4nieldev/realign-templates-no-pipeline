[
  {
    "instruction": "Provide the list of weaknesses for attack pattern: JSON Hijacking (aka JavaScript Hijacking)",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern JSON Hijacking (aka JavaScript Hijacking):\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\n",
      "@Name": "JSON Hijacking (aka JavaScript Hijacking)"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Credential Prompt Impersonation",
    "context": "",
    "output": "The weaknesses related to attack pattern Credential Prompt Impersonation are the following: Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Credential Prompt Impersonation"
    }
  },
  {
    "instruction": "Given attack pattern - Compromising Emanations Attack, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Compromising Emanations Attack"
    }
  },
  {
    "instruction": "Given attack pattern - Run Software at Logon, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Run Software at Logon"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: SOAP Manipulation",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "SOAP Manipulation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: UDP Scan",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern UDP Scan:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "UDP Scan"
    }
  },
  {
    "instruction": "Given attack pattern - Collect Data from Common Resource Locations, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
      "@Name": "Collect Data from Common Resource Locations"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Browser in the Middle (BiTM)",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Browser in the Middle (BiTM):\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
      "@Name": "Browser in the Middle (BiTM)"
    }
  },
  {
    "instruction": "Given attack pattern - TCP Connect Scan, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Connect Scan"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: User-Controlled Filename",
    "context": "",
    "output": "The weaknesses related to attack pattern User-Controlled Filename are the following: Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\nWeakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\nWeakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "User-Controlled Filename"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Use of Known Operating System Credentials",
    "context": "",
    "output": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
      "@Name": "Use of Known Operating System Credentials"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Leverage Alternate Encoding",
    "context": "",
    "output": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
      "@Name": "Leverage Alternate Encoding"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: URL Encoding",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "URL Encoding"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Install New Service",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Install New Service"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Sniffing Network Traffic",
    "context": "",
    "output": "The weaknesses related to attack pattern Sniffing Network Traffic are the following: Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Sniffing Network Traffic"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Embedding Scripts within Scripts",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Embedding Scripts within Scripts"
    }
  },
  {
    "instruction": "Given attack pattern - Harvesting Information via API Event Monitoring, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Unprotected Primary Channel\nWeakness description: The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Unprotected Primary Channel\nWeakness description: The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
      "@Name": "Harvesting Information via API Event Monitoring"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: XSS Using MIME Type Mismatch",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Reliance on File Name or Extension of Externally-Supplied File\nWeakness description: The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Reliance on File Name or Extension of Externally-Supplied File\nWeakness description: The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.\n\n",
      "@Name": "XSS Using MIME Type Mismatch"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP Null Scan",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP Null Scan are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Null Scan"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Redirect Access to Libraries",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Redirect Access to Libraries:\nWeakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
      "@Name": "Redirect Access to Libraries"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Signing Malicious Code",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
      "@Name": "Signing Malicious Code"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - DNS Zone Transfers",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "DNS Zone Transfers"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Root/Jailbreak Detection Evasion via Debugging",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Root/Jailbreak Detection Evasion via Debugging:\nWeakness name: Active Debug Code\nWeakness description: The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Active Debug Code\nWeakness description: The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.\n\n",
      "@Name": "Root/Jailbreak Detection Evasion via Debugging"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Manipulation During Distribution",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Product Released in Non-Release Configuration\nWeakness description: The product released to market is released in pre-production or manufacturing configuration.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Product Released in Non-Release Configuration\nWeakness description: The product released to market is released in pre-production or manufacturing configuration.\n\n",
      "@Name": "Manipulation During Distribution"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Disable Security Software",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Disable Security Software"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Exploiting Multiple Input Interpretation Layers",
    "context": "",
    "output": "The weaknesses related to attack pattern Exploiting Multiple Input Interpretation Layers are the following: Weakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Exploiting Multiple Input Interpretation Layers"
    }
  },
  {
    "instruction": "Given attack pattern - Schema Poisoning, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Schema Poisoning"
    }
  },
  {
    "instruction": "Given attack pattern - Passing Local Filenames to Functions That Expect a URL, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Handling of Unexpected Data Type\nWeakness description: The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).\n\nWeakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Unexpected Data Type\nWeakness description: The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).\n\nWeakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
      "@Name": "Passing Local Filenames to Functions That Expect a URL"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Contradictory Destinations in Traffic Routing Schemes",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
      "@Name": "Contradictory Destinations in Traffic Routing Schemes"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: HTTP Verb Tampering",
    "context": "",
    "output": "The weaknesses related to attack pattern HTTP Verb Tampering are the following: Weakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
      "@Name": "HTTP Verb Tampering"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Cross Frame Scripting (XFS)",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Cross Frame Scripting (XFS)"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Overread Buffers",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Overread Buffers:\nWeakness name: Out-of-bounds Read\nWeakness description: The product reads data past the end, or before the beginning, of the intended buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Out-of-bounds Read\nWeakness description: The product reads data past the end, or before the beginning, of the intended buffer.\n\n",
      "@Name": "Overread Buffers"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: IP ID Sequencing Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern IP ID Sequencing Probe are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "IP ID Sequencing Probe"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Identify Shared Files/Directories on System",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Identify Shared Files/Directories on System"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Using Slashes in Alternate Encoding",
    "context": "",
    "output": "The weaknesses related to attack pattern Using Slashes in Alternate Encoding are the following: Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Using Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Subvert Code-signing Facilities",
    "context": "",
    "output": "The weaknesses related to attack pattern Subvert Code-signing Facilities are the following: Weakness name: Missing Cryptographic Step\nWeakness description: The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.\n\nWeakness name: Use of Weak Hash\nWeakness description: The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\nWeakness name: Missing Immutable Root of Trust in Hardware\nWeakness description: A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Cryptographic Step\nWeakness description: The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.\n\nWeakness name: Use of Weak Hash\nWeakness description: The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\nWeakness name: Missing Immutable Root of Trust in Hardware\nWeakness description: A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.\n\n",
      "@Name": "Subvert Code-signing Facilities"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: ICMP Echo Request Ping",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern ICMP Echo Request Ping:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "ICMP Echo Request Ping"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Integer Attacks",
    "context": "",
    "output": "Weakness name: Incorrect Calculation\nWeakness description: The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Calculation\nWeakness description: The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\n",
      "@Name": "Integer Attacks"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Buffer Overflow via Symbolic Links",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow via Symbolic Links"
    }
  },
  {
    "instruction": "Given attack pattern - Read Sensitive Constants Within an Executable, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Use of Hard-coded Credentials\nWeakness description: The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Hard-coded Credentials\nWeakness description: The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\n",
      "@Name": "Read Sensitive Constants Within an Executable"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Navigation Remapping To Propagate Malicious Content",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Navigation Remapping To Propagate Malicious Content:\nWeakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Navigation Remapping To Propagate Malicious Content"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Leveraging Race Conditions",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Context Switching Race Condition\nWeakness description: A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.\n\nWeakness name: Race Condition Enabling Link Following\nWeakness description: The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.\n\nWeakness name: Race Condition within a Thread\nWeakness description: If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\nWeakness name: Missing Check for Certificate Revocation after Initial Check\nWeakness description: The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.\n\nWeakness name: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nWeakness description: The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Permission Race Condition During Resource Copy\nWeakness description: The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nWeakness name: Improper Initialization\nWeakness description: The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\nWeakness name: Race Condition for Write-Once Attributes\nWeakness description: A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.\n\nWeakness name: Incorrect Comparison Logic Granularity\nWeakness description: The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.\n\nWeakness name: Hardware Logic Contains Race Conditions\nWeakness description: A race condition in the hardware logic results in undermining security guarantees of the system.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Context Switching Race Condition\nWeakness description: A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.\n\nWeakness name: Race Condition Enabling Link Following\nWeakness description: The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.\n\nWeakness name: Race Condition within a Thread\nWeakness description: If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\nWeakness name: Missing Check for Certificate Revocation after Initial Check\nWeakness description: The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.\n\nWeakness name: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nWeakness description: The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Permission Race Condition During Resource Copy\nWeakness description: The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nWeakness name: Improper Initialization\nWeakness description: The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\nWeakness name: Race Condition for Write-Once Attributes\nWeakness description: A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.\n\nWeakness name: Incorrect Comparison Logic Granularity\nWeakness description: The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.\n\nWeakness name: Hardware Logic Contains Race Conditions\nWeakness description: A race condition in the hardware logic results in undermining security guarantees of the system.\n\n",
      "@Name": "Leveraging Race Conditions"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: SQL Injection through SOAP Parameter Tampering",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "SQL Injection through SOAP Parameter Tampering"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Cross Site Request Forgery",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Cross Site Request Forgery:\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Sensitive Cookie with Improper SameSite Attribute\nWeakness description: The SameSite attribute for sensitive cookies is not set, or an insecure value is used.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Sensitive Cookie with Improper SameSite Attribute\nWeakness description: The SameSite attribute for sensitive cookies is not set, or an insecure value is used.\n\n",
      "@Name": "Cross Site Request Forgery"
    }
  },
  {
    "instruction": "Given attack pattern - Leveraging Race Conditions via Symbolic Links, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Time-of-check Time-of-use (TOCTOU) Race Condition\nWeakness description: The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\nWeakness name: UNIX Symbolic Link (Symlink) Following\nWeakness description: The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Permission Race Condition During Resource Copy\nWeakness description: The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Time-of-check Time-of-use (TOCTOU) Race Condition\nWeakness description: The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\nWeakness name: UNIX Symbolic Link (Symlink) Following\nWeakness description: The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Permission Race Condition During Resource Copy\nWeakness description: The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\n",
      "@Name": "Leveraging Race Conditions via Symbolic Links"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: HTTP Response Splitting",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\n",
      "@Name": "HTTP Response Splitting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: DNS Blocking",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "DNS Blocking"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Forced Integer Overflow",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Integer Overflow or Wraparound\nWeakness description: The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.\n\nWeakness name: Wrap-around Error\nWeakness description: Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.\n\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Heap-based Buffer Overflow\nWeakness description: A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\nWeakness name: Unsigned to Signed Conversion Error\nWeakness description: The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Integer Overflow or Wraparound\nWeakness description: The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.\n\nWeakness name: Wrap-around Error\nWeakness description: Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value.\n\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Heap-based Buffer Overflow\nWeakness description: A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().\n\nWeakness name: Unsigned to Signed Conversion Error\nWeakness description: The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Forced Integer Overflow"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: HTTP Request Splitting",
    "context": "",
    "output": "The weaknesses related to attack pattern HTTP Request Splitting are the following: Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\n",
      "@Name": "HTTP Request Splitting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Eavesdropping on a Monitor",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
      "@Name": "Eavesdropping on a Monitor"
    }
  },
  {
    "instruction": "Given attack pattern - Poison Web Service Registry, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Poison Web Service Registry"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Code Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern Code Injection are the following: Weakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\n",
      "@Name": "Code Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Reverse Engineering",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Reverse Engineering:\nWeakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\n",
      "@Name": "Reverse Engineering"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Hijacking a privileged process",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Hijacking a privileged process:\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Incorrect Use of Privileged APIs\nWeakness description: The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Incorrect Use of Privileged APIs\nWeakness description: The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.\n\n",
      "@Name": "Hijacking a privileged process"
    }
  },
  {
    "instruction": "Given attack pattern - Browser Fingerprinting, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Browser Fingerprinting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Incomplete Data Deletion in a Multi-Tenant Environment",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\n",
      "@Name": "Incomplete Data Deletion in a Multi-Tenant Environment"
    }
  },
  {
    "instruction": "Given attack pattern - Amplification, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Amplification"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: SQL Injection",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern SQL Injection:\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Validation of Syntactic Correctness of Input\nWeakness description: The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Validation of Syntactic Correctness of Input\nWeakness description: The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n",
      "@Name": "SQL Injection"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Scanning for Vulnerable Software",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Scanning for Vulnerable Software"
    }
  },
  {
    "instruction": "Given attack pattern - Remote Services with Stolen Credentials, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
      "@Name": "Remote Services with Stolen Credentials"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Evercookie",
    "context": "",
    "output": "Weakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
      "@Name": "Evercookie"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Firmware Not Updateable\nWeakness description: The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.\n\nWeakness name: Missing Ability to Patch ROM Code\nWeakness description: Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Firmware Not Updateable\nWeakness description: The product does not provide its users with the ability to update or patch its firmware to address any vulnerabilities or weaknesses that may be present.\n\nWeakness name: Missing Ability to Patch ROM Code\nWeakness description: Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.\n\n",
      "@Name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Homograph Attack via Homoglyphs",
    "context": "",
    "output": "The weaknesses related to attack pattern Homograph Attack via Homoglyphs are the following: Weakness name: Insufficient Visual Distinction of Homoglyphs Presented to User\nWeakness description: The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Visual Distinction of Homoglyphs Presented to User\nWeakness description: The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.\n\n",
      "@Name": "Homograph Attack via Homoglyphs"
    }
  },
  {
    "instruction": "Given attack pattern - Signature Spoof, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
      "@Name": "Signature Spoof"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Cryptanalysis",
    "context": "",
    "output": "Weakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Generation of Weak Initialization Vector (IV)\nWeakness description: The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\n\nWeakness name: Use of a Cryptographic Primitive with a Risky Implementation\nWeakness description: To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.\n\nWeakness name: Use of Predictable Algorithm in Random Number Generator\nWeakness description: The device uses an algorithm that is predictable and generates a pseudo-random number.\n\nWeakness name: Cryptographic Operations are run Before Supporting Units are Ready\nWeakness description: Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Generation of Weak Initialization Vector (IV)\nWeakness description: The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\n\nWeakness name: Use of a Cryptographic Primitive with a Risky Implementation\nWeakness description: To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.\n\nWeakness name: Use of Predictable Algorithm in Random Number Generator\nWeakness description: The device uses an algorithm that is predictable and generates a pseudo-random number.\n\nWeakness name: Cryptographic Operations are run Before Supporting Units are Ready\nWeakness description: Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.\n\n",
      "@Name": "Cryptanalysis"
    }
  },
  {
    "instruction": "Given attack pattern - ICMP Flood, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "ICMP Flood"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Manipulating Web Input to File System Calls",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Relative Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Relative Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Manipulating Web Input to File System Calls"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Hiding Malicious Data or Code within Files",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
      "@Name": "Hiding Malicious Data or Code within Files"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Choosing Message Identifier",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Choosing Message Identifier:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n",
      "@Name": "Choosing Message Identifier"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "context": "",
    "output": "The weaknesses related to attack pattern Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions are the following: Weakness name: Time-of-check Time-of-use (TOCTOU) Race Condition\nWeakness description: The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\nWeakness name: Context Switching Race Condition\nWeakness description: A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.\n\nWeakness name: Race Condition within a Thread\nWeakness description: If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\nWeakness name: Missing Check for Certificate Revocation after Initial Check\nWeakness description: The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.\n\nWeakness name: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nWeakness description: The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Insufficient Control Flow Management\nWeakness description: The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.\n\nWeakness name: Use of a Non-reentrant Function in a Concurrent Context\nWeakness description: The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.\n\nWeakness name: Improper Initialization\nWeakness description: The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Time-of-check Time-of-use (TOCTOU) Race Condition\nWeakness description: The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.\n\nWeakness name: Context Switching Race Condition\nWeakness description: A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.\n\nWeakness name: Race Condition within a Thread\nWeakness description: If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.\n\nWeakness name: Missing Check for Certificate Revocation after Initial Check\nWeakness description: The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.\n\nWeakness name: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')\nWeakness description: The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Insufficient Control Flow Management\nWeakness description: The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.\n\nWeakness name: Use of a Non-reentrant Function in a Concurrent Context\nWeakness description: The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.\n\nWeakness name: Improper Initialization\nWeakness description: The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n\n",
      "@Name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Serialized Data with Nested Payloads",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Missing XML Validation\nWeakness description: The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Uncontrolled Recursion\nWeakness description: The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing XML Validation\nWeakness description: The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Uncontrolled Recursion\nWeakness description: The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Serialized Data with Nested Payloads"
    }
  },
  {
    "instruction": "Given attack pattern - Create files with the same name as files protected with a higher classification, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
      "@Name": "Create files with the same name as files protected with a higher classification"
    }
  },
  {
    "instruction": "Given attack pattern - Password Brute Forcing, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Storing Passwords in a Recoverable Format\nWeakness description: The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Storing Passwords in a Recoverable Format\nWeakness description: The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
      "@Name": "Password Brute Forcing"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: SSL Flood",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "SSL Flood"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Buffer Overflow in an API Call",
    "context": "",
    "output": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow in an API Call"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Removing Important Client Functionality",
    "context": "",
    "output": "The weaknesses related to attack pattern Removing Important Client Functionality are the following: Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
      "@Name": "Removing Important Client Functionality"
    }
  },
  {
    "instruction": "Given attack pattern - White Box Reverse Engineering, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\n",
      "@Name": "White Box Reverse Engineering"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Adversary in the Middle (AiTM)",
    "context": "",
    "output": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created\nWeakness description: The product modifies the SSL context after connection creation has begun.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created\nWeakness description: The product modifies the SSL context after connection creation has begun.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\n",
      "@Name": "Adversary in the Middle (AiTM)"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Infrastructure Manipulation",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
      "@Name": "Infrastructure Manipulation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Protocol Analysis",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Protocol Analysis:\nWeakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\n",
      "@Name": "Protocol Analysis"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Signature Spoofing by Improper Validation",
    "context": "",
    "output": "Weakness name: Improper Verification of Cryptographic Signature\nWeakness description: The product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Improper Certificate Validation\nWeakness description: The product does not validate, or incorrectly validates, a certificate.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Verification of Cryptographic Signature\nWeakness description: The product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Improper Certificate Validation\nWeakness description: The product does not validate, or incorrectly validates, a certificate.\n\n",
      "@Name": "Signature Spoofing by Improper Validation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: TCP RPC Scan",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern TCP RPC Scan:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP RPC Scan"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: TCP Sequence Number Probe",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Sequence Number Probe"
    }
  },
  {
    "instruction": "Given attack pattern - XPath Injection, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: XML Injection (aka Blind XPath Injection)\nWeakness description: The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: XML Injection (aka Blind XPath Injection)\nWeakness description: The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "XPath Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Active OS Fingerprinting",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Active OS Fingerprinting:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Active OS Fingerprinting"
    }
  },
  {
    "instruction": "Given attack pattern - Spoofing of UDDI/ebXML Messages, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
      "@Name": "Spoofing of UDDI/ebXML Messages"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Generic Cross-Browser Cross-Domain Theft",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\nWeakness name: Improper Neutralization of Quoting Syntax\nWeakness description: Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Inappropriate Encoding for Output Context\nWeakness description: The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\nWeakness name: Improper Neutralization of Quoting Syntax\nWeakness description: Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Inappropriate Encoding for Output Context\nWeakness description: The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.\n\n",
      "@Name": "Generic Cross-Browser Cross-Domain Theft"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Brute Force",
    "context": "",
    "output": "Weakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\nWeakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\nWeakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
      "@Name": "Brute Force"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Exploiting Trust in Client",
    "context": "",
    "output": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Exploiting Trust in Client"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Evil Twin Wi-Fi Attack",
    "context": "",
    "output": "The weaknesses related to attack pattern Evil Twin Wi-Fi Attack are the following: Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "Evil Twin Wi-Fi Attack"
    }
  },
  {
    "instruction": "Given attack pattern - TCP SYN Ping, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP SYN Ping"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Session Credential Falsification through Manipulation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n",
      "@Name": "Session Credential Falsification through Manipulation"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Mobile Phishing",
    "context": "",
    "output": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
      "@Name": "Mobile Phishing"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: TCP Options Probe",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern TCP Options Probe:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Options Probe"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Reverse Engineer an Executable to Expose Assumed Hidden Functionality",
    "context": "",
    "output": "The weaknesses related to attack pattern Reverse Engineer an Executable to Expose Assumed Hidden Functionality are the following: Weakness name: Hidden Functionality\nWeakness description: The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Hidden Functionality\nWeakness description: The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n",
      "@Name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Object Relational Mapping Injection",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: SQL Injection: Hibernate\nWeakness description: Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: SQL Injection: Hibernate\nWeakness description: Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\n\n",
      "@Name": "Object Relational Mapping Injection"
    }
  },
  {
    "instruction": "Given attack pattern - Traffic Injection, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
      "@Name": "Traffic Injection"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - iFrame Overlay",
    "context": "",
    "output": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "iFrame Overlay"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: HTTP Request Smuggling",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\nWeakness description: The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\nWeakness description: The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.\n\n",
      "@Name": "HTTP Request Smuggling"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Drop Encryption Level",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
      "@Name": "Drop Encryption Level"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Detect Unpublicized Web Pages",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Detect Unpublicized Web Pages:\nWeakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n",
      "@Name": "Detect Unpublicized Web Pages"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Application API Button Hijacking",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Application API Button Hijacking"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Exponential Data Expansion",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')\nWeakness description: The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')\nWeakness description: The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.\n\n",
      "@Name": "Exponential Data Expansion"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: XQuery Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern XQuery Injection are the following: Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "XQuery Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Transaction or Event Tampering via Application API Manipulation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Transaction or Event Tampering via Application API Manipulation:\nWeakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Transaction or Event Tampering via Application API Manipulation"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Signature Spoofing by Misrepresentation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
      "@Name": "Signature Spoofing by Misrepresentation"
    }
  },
  {
    "instruction": "Given attack pattern - Cellular Traffic Intercept, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Cellular Traffic Intercept"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Key Negotiation of Bluetooth Attack (KNOB)",
    "context": "",
    "output": "The weaknesses related to attack pattern Key Negotiation of Bluetooth Attack (KNOB) are the following: Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Key Negotiation of Bluetooth Attack (KNOB)"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Rooting SIM Cards",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\n",
      "@Name": "Rooting SIM Cards"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP FIN Scan",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP FIN Scan are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP FIN Scan"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Modify Shared File",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Modify Shared File:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Modify Shared File"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Signature Spoofing by Mixing Signed and Unsigned Content",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n",
      "@Name": "Signature Spoofing by Mixing Signed and Unsigned Content"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP Flood",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP Flood are the following: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "TCP Flood"
    }
  },
  {
    "instruction": "Given attack pattern - Manipulating Hidden Fields, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
      "@Name": "Manipulating Hidden Fields"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Sustained Client Engagement",
    "context": "",
    "output": "Weakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\n",
      "@Name": "Sustained Client Engagement"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Services Footprinting",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Services Footprinting:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Services Footprinting"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: TCP RST Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
      "@Name": "TCP RST Injection"
    }
  },
  {
    "instruction": "Given attack pattern - Session Sidejacking, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Unprotected Transport of Credentials\nWeakness description: Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\nWeakness description: The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Unprotected Transport of Credentials\nWeakness description: Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.\n\nWeakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\nWeakness description: The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.\n\n",
      "@Name": "Session Sidejacking"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Use of Captured Tickets (Pass The Ticket)",
    "context": "",
    "output": "The weaknesses related to attack pattern Use of Captured Tickets (Pass The Ticket) are the following: Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\n",
      "@Name": "Use of Captured Tickets (Pass The Ticket)"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Stored XSS",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n",
      "@Name": "Stored XSS"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Accessing/Intercepting/Modifying HTTP Cookies",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: External Control of Critical State Data\nWeakness description: The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: External Control of Critical State Data\nWeakness description: The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.\n\n",
      "@Name": "Accessing/Intercepting/Modifying HTTP Cookies"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: DLL Side-Loading",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Incorrectly-Resolved Name or Reference\nWeakness description: The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.\n\n",
      "@Name": "DLL Side-Loading"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Overflow Binary Resource File",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Overflow Binary Resource File"
    }
  },
  {
    "instruction": "Given attack pattern - Flooding, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Flooding"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Client-Server Protocol Manipulation",
    "context": "",
    "output": "The weaknesses related to attack pattern Client-Server Protocol Manipulation are the following: Weakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
      "@Name": "Client-Server Protocol Manipulation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Block Access to Libraries",
    "context": "",
    "output": "The weaknesses related to attack pattern Block Access to Libraries are the following: Weakness name: Call to Non-ubiquitous API\nWeakness description: The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Call to Non-ubiquitous API\nWeakness description: The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.\n\n",
      "@Name": "Block Access to Libraries"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Establish Rogue Location",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Establish Rogue Location:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Establish Rogue Location"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Restful Privilege Elevation",
    "context": "",
    "output": "The weaknesses related to attack pattern Restful Privilege Elevation are the following: Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\nWeakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\nWeakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\n",
      "@Name": "Restful Privilege Elevation"
    }
  },
  {
    "instruction": "Given attack pattern - Subverting Environment Variable Values, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Subverting Environment Variable Values"
    }
  },
  {
    "instruction": "Given attack pattern - Using UTF-8 Encoding to Bypass Validation Logic, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
      "@Name": "Using UTF-8 Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Given attack pattern - Screen Temporary Files for Sensitive Information, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insecure Temporary File\nWeakness description: Creating and using insecure temporary files can leave application and system data vulnerable to attack.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insecure Temporary File\nWeakness description: Creating and using insecure temporary files can leave application and system data vulnerable to attack.\n\n",
      "@Name": "Screen Temporary Files for Sensitive Information"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Local Code Inclusion",
    "context": "",
    "output": "The weaknesses related to attack pattern Local Code Inclusion are the following: Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Local Code Inclusion"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Buffer Overflow in Local Command-Line Utilities",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow in Local Command-Line Utilities"
    }
  },
  {
    "instruction": "Given attack pattern - Remote Code Inclusion, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Remote Code Inclusion"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Escaping a Sandbox by Calling Code in Another Language",
    "context": "",
    "output": "The weaknesses related to attack pattern Escaping a Sandbox by Calling Code in Another Language are the following: Weakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Escaping a Sandbox by Calling Code in Another Language"
    }
  },
  {
    "instruction": "Given attack pattern - Use of Known Domain Credentials, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Device Unlock Credential Sharing\nWeakness description: The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Device Unlock Credential Sharing\nWeakness description: The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.\n\n",
      "@Name": "Use of Known Domain Credentials"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: StarJacking",
    "context": "",
    "output": "The weaknesses related to attack pattern StarJacking are the following: Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "StarJacking"
    }
  },
  {
    "instruction": "Given attack pattern - Resource Injection, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\n",
      "@Name": "Resource Injection"
    }
  },
  {
    "instruction": "Given attack pattern - Mobile Device Fault Injection, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Protection Against Voltage and Clock Glitches\nWeakness description: The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\nWeakness name: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\nWeakness description: The security-sensitive hardware module contains semiconductor defects.\n\nWeakness name: Improper Restriction of Software Interfaces to Hardware Features\nWeakness description: The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.\n\nWeakness name: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nWeakness description: The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\nWeakness name: Improper Handling of Faults that Lead to Instruction Skips\nWeakness description: The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\nWeakness name: Unauthorized Error Injection Can Degrade Hardware Redundancy\nWeakness description: An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.\n\nWeakness name: Improper Protections Against Hardware Overheating\nWeakness description: A hardware device is missing or has inadequate protection features to prevent overheating.\n\nWeakness name: Improper Handling of Hardware Behavior in Exceptionally Cold Environments\nWeakness description: A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Protection Against Voltage and Clock Glitches\nWeakness description: The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\nWeakness name: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\nWeakness description: The security-sensitive hardware module contains semiconductor defects.\n\nWeakness name: Improper Restriction of Software Interfaces to Hardware Features\nWeakness description: The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.\n\nWeakness name: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nWeakness description: The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\nWeakness name: Improper Handling of Faults that Lead to Instruction Skips\nWeakness description: The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\nWeakness name: Unauthorized Error Injection Can Degrade Hardware Redundancy\nWeakness description: An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.\n\nWeakness name: Improper Protections Against Hardware Overheating\nWeakness description: A hardware device is missing or has inadequate protection features to prevent overheating.\n\nWeakness name: Improper Handling of Hardware Behavior in Exceptionally Cold Environments\nWeakness description: A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.\n\n",
      "@Name": "Mobile Device Fault Injection"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Passive OS Fingerprinting",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Passive OS Fingerprinting"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Password Recovery Exploitation",
    "context": "",
    "output": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Weak Password Recovery Mechanism for Forgotten Password\nWeakness description: The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Weak Password Recovery Mechanism for Forgotten Password\nWeakness description: The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.\n\n",
      "@Name": "Password Recovery Exploitation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Modification of Registry Run Keys",
    "context": "",
    "output": "The weaknesses related to attack pattern Modification of Registry Run Keys are the following: Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Modification of Registry Run Keys"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Probe System Files",
    "context": "",
    "output": "Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Files or Directories Accessible to External Parties\nWeakness description: The product makes files or directories accessible to unauthorized actors, even though they should not be.\n\n",
      "@Name": "Probe System Files"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: XSS Using Invalid Characters",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern XSS Using Invalid Characters:\nWeakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\n",
      "@Name": "XSS Using Invalid Characters"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Incorrect Chaining or Granularity of Debug Components\nWeakness description: The product's debug components contain incorrect chaining or granularity of debug components.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Chaining or Granularity of Debug Components\nWeakness description: The product's debug components contain incorrect chaining or granularity of debug components.\n\n",
      "@Name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Input Data Manipulation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Input Data Manipulation:\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Input Data Manipulation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: WebView Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposed Dangerous Method or Function\nWeakness description: The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.\n\nWeakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposed Dangerous Method or Function\nWeakness description: The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.\n\nWeakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
      "@Name": "WebView Injection"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: ICMP Address Mask Request",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "ICMP Address Mask Request"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Exploitation of Transient Instruction Execution",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Exploitation of Transient Instruction Execution:\nWeakness name: Processor Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\n\nWeakness name: Non-Transparent Sharing of Microarchitectural Resources\nWeakness description: Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.\n\nWeakness name: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\nWeakness description: The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Processor Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.\n\nWeakness name: Non-Transparent Sharing of Microarchitectural Resources\nWeakness description: Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.\n\nWeakness name: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\nWeakness description: The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.\n\n",
      "@Name": "Exploitation of Transient Instruction Execution"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Embed Virus into DLL",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Embed Virus into DLL:\nWeakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
      "@Name": "Embed Virus into DLL"
    }
  },
  {
    "instruction": "Given attack pattern - Log Injection-Tampering-Forging, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\nWeakness name: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)\nWeakness description: The product does not adequately filter user-controlled input for special elements with control implications.\n\nWeakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\nWeakness name: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)\nWeakness description: The product does not adequately filter user-controlled input for special elements with control implications.\n\nWeakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\n",
      "@Name": "Log Injection-Tampering-Forging"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Application API Navigation Remapping",
    "context": "",
    "output": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Application API Navigation Remapping"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Checksum Spoofing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Checksum Spoofing:\nWeakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\n",
      "@Name": "Checksum Spoofing"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",
    "context": "",
    "output": "The weaknesses related to attack pattern Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy are the following: Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: LDAP Injection",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern LDAP Injection:\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\nWeakness description: The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')\nWeakness description: The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "LDAP Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: NoSQL Injection",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern NoSQL Injection:\nWeakness name: Improper Neutralization of Special Elements in Data Query Logic\nWeakness description: The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.\n\nWeakness name: Improper Validation of Syntactic Correctness of Input\nWeakness description: The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Data Query Logic\nWeakness description: The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.\n\nWeakness name: Improper Validation of Syntactic Correctness of Input\nWeakness description: The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.\n\n",
      "@Name": "NoSQL Injection"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Data Injected During Configuration",
    "context": "",
    "output": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Data Injected During Configuration"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Regular Expression Exponential Blowup",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\nWeakness name: Inefficient Regular Expression Complexity\nWeakness description: The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\nWeakness name: Inefficient Regular Expression Complexity\nWeakness description: The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.\n\n",
      "@Name": "Regular Expression Exponential Blowup"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Software Integrity Attack",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Software Integrity Attack"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Session Credential Falsification through Prediction",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\nWeakness name: Insufficient Entropy\nWeakness description: The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Exposure of Data Element to Wrong Session\nWeakness description: The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: J2EE Misconfiguration: Insufficient Session-ID Length\nWeakness description: The J2EE application is configured to use an insufficient session ID length.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\nWeakness name: Insufficient Entropy\nWeakness description: The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Exposure of Data Element to Wrong Session\nWeakness description: The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: J2EE Misconfiguration: Insufficient Session-ID Length\nWeakness description: The J2EE application is configured to use an insufficient session ID length.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Session Credential Falsification through Prediction"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Cellular Broadcast Message Request",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Cellular Broadcast Message Request"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Install Malicious Extension",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Trojan Horse\nWeakness description: The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Trojan Horse\nWeakness description: The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Install Malicious Extension"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Retrieve Embedded Sensitive Data",
    "context": "",
    "output": "The weaknesses related to attack pattern Retrieve Embedded Sensitive Data are the following: Weakness name: Sensitive Information in Resource Not Removed Before Reuse\nWeakness description: The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or zeroize the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Use of Web Browser Cache Containing Sensitive Information\nWeakness description: The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.\n\nWeakness name: Cleartext Storage of Sensitive Information\nWeakness description: The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\n\nWeakness name: Cleartext Storage in the Registry\nWeakness description: The product stores sensitive information in cleartext in the registry.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Cleartext Storage of Sensitive Information in Executable\nWeakness description: The product stores sensitive information in cleartext in an executable.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\nWeakness name: Insufficient or Incomplete Data Removal within Hardware Component\nWeakness description: The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Sensitive Information in Resource Not Removed Before Reuse\nWeakness description: The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or zeroize the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Use of Web Browser Cache Containing Sensitive Information\nWeakness description: The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.\n\nWeakness name: Cleartext Storage of Sensitive Information\nWeakness description: The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.\n\nWeakness name: Cleartext Storage in the Registry\nWeakness description: The product stores sensitive information in cleartext in the registry.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Cleartext Storage of Sensitive Information in Executable\nWeakness description: The product stores sensitive information in cleartext in an executable.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\nWeakness name: Insufficient or Incomplete Data Removal within Hardware Component\nWeakness description: The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
      "@Name": "Retrieve Embedded Sensitive Data"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Directory Indexing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Directory Indexing:\nWeakness name: Improper Protection of Alternate Path\nWeakness description: The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.\n\nWeakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Authentication Bypass Using an Alternate Path or Channel\nWeakness description: A product requires authentication, but the product has an alternate path or channel that does not require authentication.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Protection of Alternate Path\nWeakness description: The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.\n\nWeakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Authentication Bypass Using an Alternate Path or Channel\nWeakness description: A product requires authentication, but the product has an alternate path or channel that does not require authentication.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Directory Indexing"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Manipulating Opaque Client-based Data Tokens",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\nWeakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Handling of Parameters\nWeakness description: The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\nWeakness name: Reliance on Cookies without Validation and Integrity Checking\nWeakness description: The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Handling of Parameters\nWeakness description: The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.\n\n",
      "@Name": "Manipulating Opaque Client-based Data Tokens"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: System Location Discovery",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nWeakness description: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nWeakness description: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n",
      "@Name": "System Location Discovery"
    }
  },
  {
    "instruction": "Given attack pattern - Using Leading 'Ghost' Character Sequences to Bypass Input Filters, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Resolution of Path Equivalence\nWeakness description: The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Resolution of Path Equivalence\nWeakness description: The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "context": "",
    "output": "The weaknesses related to attack pattern Using Meta-characters in E-mail Headers to Inject Malicious Payloads are the following: Weakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Code Inclusion",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Code Inclusion:\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Code Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern - XML Flood, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "XML Flood"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: XSS Targeting HTML Attributes",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
      "@Name": "XSS Targeting HTML Attributes"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: XML Routing Detour Attacks",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Unintended Proxy or Intermediary ('Confused Deputy')\nWeakness description: The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.\n\nWeakness name: Externally Controlled Reference to a Resource in Another Sphere\nWeakness description: The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Unintended Proxy or Intermediary ('Confused Deputy')\nWeakness description: The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.\n\nWeakness name: Externally Controlled Reference to a Resource in Another Sphere\nWeakness description: The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.\n\n",
      "@Name": "XML Routing Detour Attacks"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Connection Reset",
    "context": "",
    "output": "Weakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Verification of Source of a Communication Channel\nWeakness description: The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.\n\n",
      "@Name": "Connection Reset"
    }
  },
  {
    "instruction": "Given attack pattern - Local Execution of Code, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Local Execution of Code"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Manipulate Registry Information",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Manipulate Registry Information"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Email Injection",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Email Injection:\nWeakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\n",
      "@Name": "Email Injection"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Clickjacking",
    "context": "",
    "output": "The weaknesses related to attack pattern Clickjacking are the following: Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Clickjacking"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Forceful Browsing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Forceful Browsing:\nWeakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Forceful Browsing"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Hijacking a Privileged Thread of Execution",
    "context": "",
    "output": "Weakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\n",
      "@Name": "Hijacking a Privileged Thread of Execution"
    }
  },
  {
    "instruction": "Given attack pattern - Audit Log Manipulation, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\n",
      "@Name": "Audit Log Manipulation"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Session Credential Falsification through Forging",
    "context": "",
    "output": "Weakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\n",
      "@Name": "Session Credential Falsification through Forging"
    }
  },
  {
    "instruction": "Given attack pattern - Functionality Misuse, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Inclusion of Undocumented Features or Chicken Bits\nWeakness description: The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.\n\nWeakness name: Improper Write Handling in Limited-write Non-Volatile Memories\nWeakness description: The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.\n\nWeakness name: Sequence of Processor Instructions Leads to Unexpected Behavior\nWeakness description: Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Undocumented Features or Chicken Bits\nWeakness description: The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.\n\nWeakness name: Improper Write Handling in Limited-write Non-Volatile Memories\nWeakness description: The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.\n\nWeakness name: Sequence of Processor Instructions Leads to Unexpected Behavior\nWeakness description: Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.\n\n",
      "@Name": "Functionality Misuse"
    }
  },
  {
    "instruction": "Given attack pattern - Enumerate Mail Exchange (MX) Records, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Enumerate Mail Exchange (MX) Records"
    }
  },
  {
    "instruction": "Given attack pattern - BlueSmacking, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
      "@Name": "BlueSmacking"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Exploitation of Improperly Controlled Hardware Security Identifiers",
    "context": "",
    "output": "The weaknesses related to attack pattern Exploitation of Improperly Controlled Hardware Security Identifiers are the following: Weakness name: Improper Restriction of Security Token Assignment\nWeakness description: The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.\n\nWeakness name: Policy Uses Obsolete Encoding\nWeakness description: The product uses an obsolete encoding mechanism to implement access controls.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\nWeakness name: Insecure Security Identifier Mechanism\nWeakness description: The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.\n\nWeakness name: Missing Security Identifier\nWeakness description: The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Security Token Assignment\nWeakness description: The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.\n\nWeakness name: Policy Uses Obsolete Encoding\nWeakness description: The product uses an obsolete encoding mechanism to implement access controls.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\nWeakness name: Insecure Security Identifier Mechanism\nWeakness description: The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.\n\nWeakness name: Missing Security Identifier\nWeakness description: The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.\n\n",
      "@Name": "Exploitation of Improperly Controlled Hardware Security Identifiers"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: TCP Window Scan",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern TCP Window Scan:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Window Scan"
    }
  },
  {
    "instruction": "Given attack pattern - SaaS User Request Forgery, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
      "@Name": "SaaS User Request Forgery"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Exploit Script-Based APIs",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
      "@Name": "Exploit Script-Based APIs"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Owner Footprinting",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Owner Footprinting"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Malicious Logic Insertion",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Malicious Logic Insertion:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Malicious Logic Insertion"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Configuration/Environment Manipulation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Configuration/Environment Manipulation:\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\nWeakness description: The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.\n\nWeakness name: Hardware Internal or Debug Modes Allow Override of Locks\nWeakness description: System configuration protection may be bypassed during debug mode.\n\nWeakness name: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\nWeakness description: The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation.\n\nWeakness name: Security Version Number Mutable to Older Versions\nWeakness description: Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\nWeakness description: The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.\n\nWeakness name: Hardware Internal or Debug Modes Allow Override of Locks\nWeakness description: System configuration protection may be bypassed during debug mode.\n\nWeakness name: Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation\nWeakness description: The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation.\n\nWeakness name: Security Version Number Mutable to Older Versions\nWeakness description: Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.\n\n",
      "@Name": "Configuration/Environment Manipulation"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Try All Common Switches",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Hidden Functionality\nWeakness description: The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Hidden Functionality\nWeakness description: The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.\n\n",
      "@Name": "Try All Common Switches"
    }
  },
  {
    "instruction": "Given attack pattern - Excavation, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Sensitive Non-Volatile Information Not Protected During Debug\nWeakness description: Access to security-sensitive information stored in fuses is not limited during debug.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Sensitive Non-Volatile Information Not Protected During Debug\nWeakness description: Access to security-sensitive information stored in fuses is not limited during debug.\n\n",
      "@Name": "Excavation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Reflected XSS",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Reflected XSS:\nWeakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\n",
      "@Name": "Reflected XSS"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Server Side Include (SSI) Injection",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nWeakness description: The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nWeakness description: The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Server Side Include (SSI) Injection"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Path Traversal",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\n",
      "@Name": "Path Traversal"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: DHCP Spoofing",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
      "@Name": "DHCP Spoofing"
    }
  },
  {
    "instruction": "Given attack pattern - Exploiting Incorrectly Configured Access Control Security Levels, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: DMA Device Enabled Too Early in Boot Phase\nWeakness description: The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.\n\nWeakness name: On-Chip Debug and Test Interface With Improper Access Control\nWeakness description: The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\nWeakness name: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\nWeakness description: The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.\n\nWeakness name: Insufficient Granularity of Access Control\nWeakness description: The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\n\nWeakness name: Policy Privileges are not Assigned Consistently Between Control and Data Agents\nWeakness description: The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\nWeakness name: Access Control Check Implemented After Asset is Accessed\nWeakness description: A product's hardware-based access control check occurs after the asset has been accessed.\n\nWeakness name: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\nWeakness description: The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\nWeakness name: Improper Setting of Bus Controlling Capability in Fabric End-point\nWeakness description: The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.\n\nWeakness name: Missing Support for Security Features in On-chip Fabrics or Buses\nWeakness description: On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.\n\nWeakness name: Improper Protection for Outbound Error Messages and Alert Signals\nWeakness description: Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: DMA Device Enabled Too Early in Boot Phase\nWeakness description: The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.\n\nWeakness name: On-Chip Debug and Test Interface With Improper Access Control\nWeakness description: The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\nWeakness name: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\nWeakness description: The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.\n\nWeakness name: Insufficient Granularity of Access Control\nWeakness description: The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\n\nWeakness name: Policy Privileges are not Assigned Consistently Between Control and Data Agents\nWeakness description: The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\nWeakness name: Access Control Check Implemented After Asset is Accessed\nWeakness description: A product's hardware-based access control check occurs after the asset has been accessed.\n\nWeakness name: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\nWeakness description: The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\nWeakness name: Improper Setting of Bus Controlling Capability in Fabric End-point\nWeakness description: The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.\n\nWeakness name: Missing Support for Security Features in On-chip Fabrics or Buses\nWeakness description: On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.\n\nWeakness name: Improper Protection for Outbound Error Messages and Alert Signals\nWeakness description: Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\n",
      "@Name": "Exploiting Incorrectly Configured Access Control Security Levels"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Peripheral Footprinting",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Peripheral Footprinting:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Peripheral Footprinting"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Infected Software",
    "context": "",
    "output": "Weakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Embedded Malicious Code\nWeakness description: The product contains code that appears to be malicious in nature.\n\n",
      "@Name": "Infected Software"
    }
  },
  {
    "instruction": "Given attack pattern - TCP SYN Scan, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP SYN Scan"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - ICMP Information Request",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "ICMP Information Request"
    }
  },
  {
    "instruction": "Given attack pattern - Malicious Manual Software Update, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Malicious Manual Software Update"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements:\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
      "@Name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Padding Oracle Crypto Attack",
    "context": "",
    "output": "The weaknesses related to attack pattern Padding Oracle Crypto Attack are the following: Weakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Covert Channel\nWeakness description: A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.\n\nWeakness name: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking\nWeakness description: The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.\n\nWeakness name: Improper Verification of Cryptographic Signature\nWeakness description: The product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\nWeakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\nWeakness name: Incorrect Behavior Order\nWeakness description: The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Covert Channel\nWeakness description: A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.\n\nWeakness name: Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking\nWeakness description: The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.\n\nWeakness name: Improper Verification of Cryptographic Signature\nWeakness description: The product does not verify, or incorrectly verifies, the cryptographic signature for data.\n\nWeakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\nWeakness name: Incorrect Behavior Order\nWeakness description: The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.\n\n",
      "@Name": "Padding Oracle Crypto Attack"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP Congestion Control Flag (ECN) Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP Congestion Control Flag (ECN) Probe are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Congestion Control Flag (ECN) Probe"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: PHP Remote File Inclusion",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\nWeakness description: The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions.\n\nWeakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')\nWeakness description: The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions.\n\nWeakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
      "@Name": "PHP Remote File Inclusion"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: WebView Exposure",
    "context": "",
    "output": "The weaknesses related to attack pattern WebView Exposure are the following: Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "WebView Exposure"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Encryption Brute Forcing",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Generation of Weak Initialization Vector (IV)\nWeakness description: The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inadequate Encryption Strength\nWeakness description: The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.\n\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Generation of Weak Initialization Vector (IV)\nWeakness description: The product uses a cryptographic primitive that uses an Initialization Vector (IV), but the product does not generate IVs that are sufficiently unpredictable or unique according to the expected cryptographic requirements for that primitive.\n\n",
      "@Name": "Encryption Brute Forcing"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - XSS Using Alternate Syntax",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Alternate XSS Syntax\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Alternate XSS Syntax\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.\n\n",
      "@Name": "XSS Using Alternate Syntax"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: XML Schema Poisoning",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: External Control of Assumed-Immutable Web Parameter\nWeakness description: The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.\n\n",
      "@Name": "XML Schema Poisoning"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Signature Spoofing by Key Theft",
    "context": "",
    "output": "The weaknesses related to attack pattern Signature Spoofing by Key Theft are the following: Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n",
      "@Name": "Signature Spoofing by Key Theft"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: AJAX Footprinting",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern AJAX Footprinting:\nWeakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')\nWeakness description: The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.\n\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Invalid Characters in Identifiers in Web Pages\nWeakness description: The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
      "@Name": "AJAX Footprinting"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Interface Manipulation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Interface Manipulation:\nWeakness name: System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers\nWeakness description: The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers\nWeakness description: The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.\n\n",
      "@Name": "Interface Manipulation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Client-side Injection-induced Buffer Overflow",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Client-side Injection-induced Buffer Overflow"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Cross Site Tracing",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Incorrect Use of Privileged APIs\nWeakness description: The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Incorrect Use of Privileged APIs\nWeakness description: The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.\n\n",
      "@Name": "Cross Site Tracing"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Cache Poisoning",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\n",
      "@Name": "Cache Poisoning"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - HTTP Response Smuggling",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\nWeakness name: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\nWeakness description: The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Interpretation Conflict\nWeakness description: Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.\n\nWeakness name: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')\nWeakness description: The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.\n\n",
      "@Name": "HTTP Response Smuggling"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Bypassing ATA Password Security",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
      "@Name": "Bypassing ATA Password Security"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Exploitation of Trusted Identifiers",
    "context": "",
    "output": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: J2EE Misconfiguration: Insufficient Session-ID Length\nWeakness description: The J2EE application is configured to use an insufficient session ID length.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: External Control of Critical State Data\nWeakness description: The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: J2EE Misconfiguration: Insufficient Session-ID Length\nWeakness description: The J2EE application is configured to use an insufficient session ID length.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: External Control of Critical State Data\nWeakness description: The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.\n\n",
      "@Name": "Exploitation of Trusted Identifiers"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: XSS Through HTTP Headers",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
      "@Name": "XSS Through HTTP Headers"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: DTD Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern DTD Injection are the following: Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "DTD Injection"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Analysis of Packet Timing and Sizes",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Analysis of Packet Timing and Sizes"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Physically Hacking Hardware",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Physical Access Control\nWeakness description: The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Physical Access Control\nWeakness description: The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.\n\n",
      "@Name": "Physically Hacking Hardware"
    }
  },
  {
    "instruction": "Given attack pattern - Android Activity Hijack, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Communication Channel to Intended Endpoints\nWeakness description: The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.\n\n",
      "@Name": "Android Activity Hijack"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: DNS Cache Poisoning",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Less Trusted Source\nWeakness description: The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
      "@Name": "DNS Cache Poisoning"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Authentication Abuse",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Internal Asset Exposed to Unsafe Debug Access Level or State\nWeakness description: The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Internal Asset Exposed to Unsafe Debug Access Level or State\nWeakness description: The product uses physical debug or test interfaces with support for multiple access levels, but it assigns the wrong debug access level to an internal asset, providing unintended access to the asset from untrusted debug agents.\n\n",
      "@Name": "Authentication Abuse"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: IMAP/SMTP Command Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
      "@Name": "IMAP/SMTP Command Injection"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Object Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Deserialization of Untrusted Data\nWeakness description: The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Deserialization of Untrusted Data\nWeakness description: The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.\n\n",
      "@Name": "Object Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Spoof Open-Source Software Metadata",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Spoof Open-Source Software Metadata:\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Spoof Open-Source Software Metadata"
    }
  },
  {
    "instruction": "Given attack pattern - Web Services Protocol Manipulation, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Web Services Protocol Manipulation"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - OS Command Injection",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "OS Command Injection"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Port Scanning",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Port Scanning"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Malicious Software Download",
    "context": "",
    "output": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Malicious Software Download"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Task Impersonation",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Task Impersonation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP (ISN) Sequence Predictability Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP (ISN) Sequence Predictability Probe are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP (ISN) Sequence Predictability Probe"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Exploit Non-Production Interfaces",
    "context": "",
    "output": "The weaknesses related to attack pattern Exploit Non-Production Interfaces are the following: Weakness name: Active Debug Code\nWeakness description: The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.\n\nWeakness name: Failure to Disable Reserved Bits\nWeakness description: The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.\n\nWeakness name: Improper Restriction of Security Token Assignment\nWeakness description: The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.\n\nWeakness name: Policy Uses Obsolete Encoding\nWeakness description: The product uses an obsolete encoding mechanism to implement access controls.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\nWeakness name: Insecure Security Identifier Mechanism\nWeakness description: The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.\n\nWeakness name: Debug Messages Revealing Unnecessary Information\nWeakness description: The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.\n\nWeakness name: Incorrect Chaining or Granularity of Debug Components\nWeakness description: The product's debug components contain incorrect chaining or granularity of debug components.\n\nWeakness name: Missing Security Identifier\nWeakness description: The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.\n\nWeakness name: Hardware Allows Activation of Test or Debug Logic at Runtime\nWeakness description: During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Active Debug Code\nWeakness description: The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.\n\nWeakness name: Failure to Disable Reserved Bits\nWeakness description: The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.\n\nWeakness name: Improper Restriction of Security Token Assignment\nWeakness description: The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.\n\nWeakness name: Policy Uses Obsolete Encoding\nWeakness description: The product uses an obsolete encoding mechanism to implement access controls.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\nWeakness name: Insecure Security Identifier Mechanism\nWeakness description: The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.\n\nWeakness name: Debug Messages Revealing Unnecessary Information\nWeakness description: The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.\n\nWeakness name: Incorrect Chaining or Granularity of Debug Components\nWeakness description: The product's debug components contain incorrect chaining or granularity of debug components.\n\nWeakness name: Missing Security Identifier\nWeakness description: The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.\n\nWeakness name: Hardware Allows Activation of Test or Debug Logic at Runtime\nWeakness description: During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.\n\n",
      "@Name": "Exploit Non-Production Interfaces"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Replace Trusted Executable",
    "context": "",
    "output": "The weaknesses related to attack pattern Replace Trusted Executable are the following: Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Replace Trusted Executable"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Dictionary-based Password Attack",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Dictionary-based Password Attack:\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
      "@Name": "Dictionary-based Password Attack"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Modify Existing Service",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\n",
      "@Name": "Modify Existing Service"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Overflow Buffers",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Overflow Buffers:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Calculation of Buffer Size\nWeakness description: The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\nWeakness name: Improper Validation of Array Index\nWeakness description: The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\nWeakness name: Buffer Access with Incorrect Length Value\nWeakness description: The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Calculation of Buffer Size\nWeakness description: The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\nWeakness name: Improper Validation of Array Index\nWeakness description: The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.\n\nWeakness name: Buffer Access with Incorrect Length Value\nWeakness description: The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\n",
      "@Name": "Overflow Buffers"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Fake the Source of Data",
    "context": "",
    "output": "The weaknesses related to attack pattern Fake the Source of Data are the following: Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
      "@Name": "Fake the Source of Data"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: DOM-Based XSS",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
      "@Name": "DOM-Based XSS"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: ICMP Error Message Echoing Integrity Probe",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "ICMP Error Message Echoing Integrity Probe"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Using Malicious Files",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Ownership Management\nWeakness description: The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\nWeakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Ownership Management\nWeakness description: The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\nWeakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Using Malicious Files"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Interception",
    "context": "",
    "output": "Weakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\n",
      "@Name": "Interception"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Android Intent Intercept",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Verification of Intent by Broadcast Receiver\nWeakness description: The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Verification of Intent by Broadcast Receiver\nWeakness description: The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.\n\n",
      "@Name": "Android Intent Intercept"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Manipulating Writeable Configuration Files",
    "context": "",
    "output": "Weakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Acceptance of Extraneous Untrusted Data With Trusted Data\nWeakness description: The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.\n\nWeakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Improper Validation of Integrity Check Value\nWeakness description: The product does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.\n\n",
      "@Name": "Manipulating Writeable Configuration Files"
    }
  },
  {
    "instruction": "Given attack pattern - Exploitation of Improperly Configured or Implemented Memory Protections, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Insufficient Granularity of Address Regions Protected by Register Locks\nWeakness description: The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.\n\nWeakness name: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations\nWeakness description: The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.\n\nWeakness name: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nWeakness description: Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\nWeakness name: Improper Handling of Overlap Between Protected Memory Ranges\nWeakness description: The product allows address regions to overlap, which can result in the bypassing of intended memory protection.\n\nWeakness name: Improper Access Control for Volatile Memory Containing Boot Code\nWeakness description: The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.\n\nWeakness name: Assumed-Immutable Data is Stored in Writable Memory\nWeakness description: Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field.\n\nWeakness name: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nWeakness description: The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.\n\nWeakness name: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nWeakness description: The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.\n\nWeakness name: Missing Immutable Root of Trust in Hardware\nWeakness description: A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Granularity of Address Regions Protected by Register Locks\nWeakness description: The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.\n\nWeakness name: CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations\nWeakness description: The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.\n\nWeakness name: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nWeakness description: Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\nWeakness name: Improper Handling of Overlap Between Protected Memory Ranges\nWeakness description: The product allows address regions to overlap, which can result in the bypassing of intended memory protection.\n\nWeakness name: Improper Access Control for Volatile Memory Containing Boot Code\nWeakness description: The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.\n\nWeakness name: Assumed-Immutable Data is Stored in Writable Memory\nWeakness description: Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field.\n\nWeakness name: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nWeakness description: The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.\n\nWeakness name: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nWeakness description: The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.\n\nWeakness name: Missing Immutable Root of Trust in Hardware\nWeakness description: A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.\n\n",
      "@Name": "Exploitation of Improperly Configured or Implemented Memory Protections"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Signal Strength Tracking",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Signal Strength Tracking"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Exploitation of Improperly Controlled Registers",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Restriction of Write-Once Bit Fields\nWeakness description: The hardware design control register sticky bits or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.\n\nWeakness name: Improper Prevention of Lock Bit Modification\nWeakness description: The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.\n\nWeakness name: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\nWeakness description: The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.\n\nWeakness name: Improper Access Control for Register Interface\nWeakness description: The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.\n\nWeakness name: Mutable Attestation or Measurement Reporting Data\nWeakness description: The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Write-Once Bit Fields\nWeakness description: The hardware design control register sticky bits or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.\n\nWeakness name: Improper Prevention of Lock Bit Modification\nWeakness description: The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.\n\nWeakness name: Security-Sensitive Hardware Controls with Missing Lock Bit Protection\nWeakness description: The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.\n\nWeakness name: Improper Access Control for Register Interface\nWeakness description: The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.\n\nWeakness name: Mutable Attestation or Measurement Reporting Data\nWeakness description: The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.\n\n",
      "@Name": "Exploitation of Improperly Controlled Registers"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Communication Channel Manipulation",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\n",
      "@Name": "Communication Channel Manipulation"
    }
  },
  {
    "instruction": "Given attack pattern - Forced Deadlock, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Unrestricted Externally Accessible Lock\nWeakness description: The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.\n\nWeakness name: Unsynchronized Access to Shared Data in a Multithreaded Context\nWeakness description: The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nWeakness name: Deadlock\nWeakness description: The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\nWeakness name: Use of Blocking Code in Single-threaded, Non-blocking Context\nWeakness description: The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Unrestricted Externally Accessible Lock\nWeakness description: The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.\n\nWeakness name: Unsynchronized Access to Shared Data in a Multithreaded Context\nWeakness description: The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.\n\nWeakness name: Improper Synchronization\nWeakness description: The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.\n\nWeakness name: Improper Locking\nWeakness description: The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.\n\nWeakness name: Deadlock\nWeakness description: The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.\n\nWeakness name: Use of Blocking Code in Single-threaded, Non-blocking Context\nWeakness description: The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked.\n\n",
      "@Name": "Forced Deadlock"
    }
  },
  {
    "instruction": "Given attack pattern - Expanding Control over the Operating System from the Database, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\n",
      "@Name": "Expanding Control over the Operating System from the Database"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Excessive Allocation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improperly Controlled Sequential Memory Allocation\nWeakness description: The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improperly Controlled Sequential Memory Allocation\nWeakness description: The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.\n\n",
      "@Name": "Excessive Allocation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Probe iOS Screenshots",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Probe iOS Screenshots:\nWeakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
      "@Name": "Probe iOS Screenshots"
    }
  },
  {
    "instruction": "Given attack pattern - Absolute Path Traversal, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Absolute Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Absolute Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory.\n\n",
      "@Name": "Absolute Path Traversal"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Collect Data from Clipboard",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
      "@Name": "Collect Data from Clipboard"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Replace File Extension Handlers",
    "context": "",
    "output": "The weaknesses related to attack pattern Replace File Extension Handlers are the following: Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Replace File Extension Handlers"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Credential Stuffing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Credential Stuffing:\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\n",
      "@Name": "Credential Stuffing"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Inclusion of Code in Existing Process",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Inclusion of Code in Existing Process"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Cross-Site Flashing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Cross-Site Flashing:\nWeakness name: URL Redirection to Untrusted Site ('Open Redirect')\nWeakness description: A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: URL Redirection to Untrusted Site ('Open Redirect')\nWeakness description: A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.\n\n",
      "@Name": "Cross-Site Flashing"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: XSS Through HTTP Query Strings",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
      "@Name": "XSS Through HTTP Query Strings"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Blind SQL Injection",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Blind SQL Injection"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: IP (DF) 'Don't Fragment Bit' Echoing Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern IP (DF) 'Don't Fragment Bit' Echoing Probe are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "IP (DF) 'Don't Fragment Bit' Echoing Probe"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Adversary in the Browser (AiTB)",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Adversary in the Browser (AiTB):\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Adversary in the Browser (AiTB)"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Using Unpublished Interfaces or Functionality",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Using Unpublished Interfaces or Functionality:\nWeakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Use of Low-Level Functionality\nWeakness description: The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.\n\nWeakness name: Inclusion of Undocumented Features or Chicken Bits\nWeakness description: The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Use of Low-Level Functionality\nWeakness description: The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.\n\nWeakness name: Inclusion of Undocumented Features or Chicken Bits\nWeakness description: The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.\n\n",
      "@Name": "Using Unpublished Interfaces or Functionality"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: USB Memory Attacks",
    "context": "",
    "output": "The weaknesses related to attack pattern USB Memory Attacks are the following: Weakness name: Missing Protection Mechanism for Alternate Hardware Interface\nWeakness description: The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Protection Mechanism for Alternate Hardware Interface\nWeakness description: The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.\n\n",
      "@Name": "USB Memory Attacks"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Reusing Session IDs (aka Session Replay)",
    "context": "",
    "output": "Weakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Exposure of Data Element to Wrong Session\nWeakness description: The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Exposure of Data Element to Wrong Session\nWeakness description: The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.\n\nWeakness name: Use of Persistent Cookies Containing Sensitive Information\nWeakness description: The web application uses persistent cookies, but the cookies contain sensitive information.\n\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
      "@Name": "Reusing Session IDs (aka Session Replay)"
    }
  },
  {
    "instruction": "Given attack pattern - File Discovery, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "File Discovery"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Spoof Version Control System Commit Metadata",
    "context": "",
    "output": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Spoof Version Control System Commit Metadata"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Traceroute Route Enumeration",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Traceroute Route Enumeration"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Modification of Windows Service Configuration",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Modification of Windows Service Configuration"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Filter Failure through Buffer Overflow",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Filter Failure through Buffer Overflow:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Filter Failure through Buffer Overflow"
    }
  },
  {
    "instruction": "Given attack pattern - IP 'ID' Echoed Byte-Order Probe, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "IP 'ID' Echoed Byte-Order Probe"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Cross Site Identification",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Cross Site Identification:\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
      "@Name": "Cross Site Identification"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Double Encoding",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of URL Encoding (Hex Encoding)\nWeakness description: The product does not properly handle when all or part of an input has been URL encoded.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
      "@Name": "Double Encoding"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: SOAP Array Blowup",
    "context": "",
    "output": "The weaknesses related to attack pattern SOAP Array Blowup are the following: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "SOAP Array Blowup"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Buffer Overflow via Parameter Expansion",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Handling of Length Parameter Inconsistency\nWeakness description: The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\nWeakness name: Incorrect Calculation of Buffer Size\nWeakness description: The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Handling of Length Parameter Inconsistency\nWeakness description: The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.\n\nWeakness name: Incorrect Calculation of Buffer Size\nWeakness description: The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow via Parameter Expansion"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Replace Binaries",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
      "@Name": "Replace Binaries"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: TCP Initial Window Size Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern TCP Initial Window Size Probe are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Initial Window Size Probe"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - WiFi MAC Address Tracking",
    "context": "",
    "output": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "WiFi MAC Address Tracking"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: TCP Timestamp Probe",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern TCP Timestamp Probe:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Timestamp Probe"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Pointer Manipulation",
    "context": "",
    "output": "The weaknesses related to attack pattern Pointer Manipulation are the following: Weakness name: Incorrect Calculation\nWeakness description: The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\nWeakness name: Untrusted Pointer Dereference\nWeakness description: The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.\n\nWeakness name: Use of Out-of-range Pointer Offset\nWeakness description: The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Calculation\nWeakness description: The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.\n\nWeakness name: Untrusted Pointer Dereference\nWeakness description: The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.\n\nWeakness name: Use of Out-of-range Pointer Offset\nWeakness description: The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.\n\n",
      "@Name": "Pointer Manipulation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: MIME Conversion",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "MIME Conversion"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Session Hijacking",
    "context": "",
    "output": "The weaknesses related to attack pattern Session Hijacking are the following: Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
      "@Name": "Session Hijacking"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Add Malicious File to Shared Webroot",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Add Malicious File to Shared Webroot:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Add Malicious File to Shared Webroot"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: IP Address Blocking",
    "context": "",
    "output": "The weaknesses related to attack pattern IP Address Blocking are the following: Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "IP Address Blocking"
    }
  },
  {
    "instruction": "Given attack pattern - File Content Injection, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "File Content Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Oversized Serialized Data Payloads",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Oversized Serialized Data Payloads:\nWeakness name: Missing XML Validation\nWeakness description: The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Uncontrolled Recursion\nWeakness description: The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing XML Validation\nWeakness description: The product accepts XML from an untrusted source but does not validate the XML against the proper schema.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Uncontrolled Recursion\nWeakness description: The product does not properly control the amount of recursion that takes place, consuming excessive resources, such as allocated memory or the program stack.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Oversized Serialized Data Payloads"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Password Spraying",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
      "@Name": "Password Spraying"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: ICMP Error Message Quoting Probe",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "ICMP Error Message Quoting Probe"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Adding a Space to a File Extension",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Adding a Space to a File Extension:\nWeakness name: Path Equivalence: 'filename ' (Trailing Space)\nWeakness description: The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Path Equivalence: 'filename ' (Trailing Space)\nWeakness description: The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.\n\n",
      "@Name": "Adding a Space to a File Extension"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Shared Resource Manipulation",
    "context": "",
    "output": "The weaknesses related to attack pattern Shared Resource Manipulation are the following: Weakness name: Improper Isolation of Shared Resources on System-on-a-Chip (SoC)\nWeakness description: The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.\n\nWeakness name: Improper Isolation of Shared Resources in Network On Chip (NoC)\nWeakness description: The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Isolation of Shared Resources on System-on-a-Chip (SoC)\nWeakness description: The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.\n\nWeakness name: Improper Isolation of Shared Resources in Network On Chip (NoC)\nWeakness description: The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.\n\n",
      "@Name": "Shared Resource Manipulation"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: HTTP DoS",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Missing Release of Resource after Effective Lifetime\nWeakness description: The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Missing Release of Resource after Effective Lifetime\nWeakness description: The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.\n\n",
      "@Name": "HTTP DoS"
    }
  },
  {
    "instruction": "Given attack pattern - Fingerprinting, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Fingerprinting"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Load Value Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Information Exposure through Microarchitectural State after Transient Execution\nWeakness description: The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Information Exposure through Microarchitectural State after Transient Execution\nWeakness description: The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.\n\n",
      "@Name": "Load Value Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Use of Captured Hashes (Pass The Hash)",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Use of Captured Hashes (Pass The Hash):\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Password Hash Instead of Password for Authentication\nWeakness description: The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Password Hash Instead of Password for Authentication\nWeakness description: The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\n",
      "@Name": "Use of Captured Hashes (Pass The Hash)"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Upload a Web Shell to a Web Server",
    "context": "",
    "output": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Command Shell in Externally Accessible Directory\nWeakness description: A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Command Shell in Externally Accessible Directory\nWeakness description: A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.\n\n",
      "@Name": "Upload a Web Shell to a Web Server"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Search Order Hijacking",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Uncontrolled Search Path Element\nWeakness description: The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Uncontrolled Search Path Element\nWeakness description: The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n",
      "@Name": "Search Order Hijacking"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Symlink Attack",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\n",
      "@Name": "Symlink Attack"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Quadratic Data Expansion",
    "context": "",
    "output": "The weaknesses related to attack pattern Quadratic Data Expansion are the following: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Quadratic Data Expansion"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Install Rootkit ",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Install Rootkit "
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Cryptanalysis of Cellular Encryption",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\n",
      "@Name": "Cryptanalysis of Cellular Encryption"
    }
  },
  {
    "instruction": "Given attack pattern - TCP ACK Scan, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP ACK Scan"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Inducing Account Lockout",
    "context": "",
    "output": "Weakness name: Overly Restrictive Account Lockout Mechanism\nWeakness description: The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Overly Restrictive Account Lockout Mechanism\nWeakness description: The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.\n\n",
      "@Name": "Inducing Account Lockout"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Cause Web Server Misclassification",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Deployment of Wrong Handler\nWeakness description: The wrong handler is assigned to process an object.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Deployment of Wrong Handler\nWeakness description: The wrong handler is assigned to process an object.\n\n",
      "@Name": "Cause Web Server Misclassification"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Footprinting",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Footprinting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Token Impersonation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Generation of Incorrect Security Tokens\nWeakness description: The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.\n\n",
      "@Name": "Token Impersonation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Data Interchange Protocol Manipulation",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Data Interchange Protocol Manipulation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Blue Boxing",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
      "@Name": "Blue Boxing"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Account Footprinting",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Account Footprinting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Signature Spoofing by Key Recreation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Insufficiently Random Values\nWeakness description: The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.\n\n",
      "@Name": "Signature Spoofing by Key Recreation"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Malicious Root Certificate",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Malicious Root Certificate:\nWeakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Malicious Root Certificate"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Flash Injection",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Flash Injection"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Parameter Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern Parameter Injection are the following: Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\n",
      "@Name": "Parameter Injection"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: HTTP Flood",
    "context": "",
    "output": "The weaknesses related to attack pattern HTTP Flood are the following: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "HTTP Flood"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Shoulder Surfing",
    "context": "",
    "output": "The weaknesses related to attack pattern Shoulder Surfing are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\nWeakness name: Exposure of Private Personal Information to an Unauthorized Actor\nWeakness description: The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.\n\n",
      "@Name": "Shoulder Surfing"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Creating a Rogue Certification Authority Certificate",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Improper Certificate Validation\nWeakness description: The product does not validate, or incorrectly validates, a certificate.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of a Broken or Risky Cryptographic Algorithm\nWeakness description: The product uses a broken or risky cryptographic algorithm or protocol.\n\nWeakness name: Improper Certificate Validation\nWeakness description: The product does not validate, or incorrectly validates, a certificate.\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
      "@Name": "Creating a Rogue Certification Authority Certificate"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Process Footprinting",
    "context": "",
    "output": "The weaknesses related to attack pattern Process Footprinting are the following: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Process Footprinting"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Using Unicode Encoding to Bypass Validation Logic",
    "context": "",
    "output": "Weakness name: Improper Handling of Unicode Encoding\nWeakness description: The product does not properly handle when an input contains Unicode encoding.\n\nWeakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Handling of Unicode Encoding\nWeakness description: The product does not properly handle when an input contains Unicode encoding.\n\nWeakness name: Incorrect Behavior Order: Early Validation\nWeakness description: The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.\n\nWeakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Permissive List of Allowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Incomplete Denylist to Cross-Site Scripting\nWeakness description: The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.\n\n",
      "@Name": "Using Unicode Encoding to Bypass Validation Logic"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Data Serialization External Entities Blowup",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Restriction of XML External Entity Reference\nWeakness description: The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of XML External Entity Reference\nWeakness description: The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.\n\n",
      "@Name": "Data Serialization External Entities Blowup"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: TCP Xmas Scan",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP Xmas Scan"
    }
  },
  {
    "instruction": "Given attack pattern - TCP Fragmentation, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
      "@Name": "TCP Fragmentation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Exploiting Incorrectly Configured SSL/TLS",
    "context": "",
    "output": "The weaknesses related to attack pattern Exploiting Incorrectly Configured SSL/TLS are the following: Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Exploiting Incorrectly Configured SSL/TLS"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Inter-component Protocol Manipulation",
    "context": "",
    "output": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Inter-component Protocol Manipulation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Probe Audio and Video Peripherals",
    "context": "",
    "output": "The weaknesses related to attack pattern Probe Audio and Video Peripherals are the following: Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
      "@Name": "Probe Audio and Video Peripherals"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Command Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern Command Injection are the following: Weakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
      "@Name": "Command Injection"
    }
  },
  {
    "instruction": "Given attack pattern - Malicious Automated Software Update via Spoofing, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Malicious Automated Software Update via Spoofing"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Buffer Manipulation",
    "context": "",
    "output": "Weakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\n",
      "@Name": "Buffer Manipulation"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Fuzzing",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Fuzzing"
    }
  },
  {
    "instruction": "Given attack pattern - Try Common or Default Usernames and Passwords, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Use of Hard-coded Credentials\nWeakness description: The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Use of Hard-coded Credentials\nWeakness description: The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
      "@Name": "Try Common or Default Usernames and Passwords"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Content Spoofing Via Application API Manipulation",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\n",
      "@Name": "Content Spoofing Via Application API Manipulation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Flash Memory Attacks",
    "context": "",
    "output": "The weaknesses related to attack pattern Flash Memory Attacks are the following: Weakness name: Assumed-Immutable Data is Stored in Writable Memory\nWeakness description: Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Assumed-Immutable Data is Stored in Writable Memory\nWeakness description: Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field.\n\n",
      "@Name": "Flash Memory Attacks"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Malicious Automated Software Update via Redirection",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Malicious Automated Software Update via Redirection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Alternative Execution Due to Deceptive Filenames",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Alternative Execution Due to Deceptive Filenames:\nWeakness name: Improper Neutralization of Trailing Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Trailing Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.\n\n",
      "@Name": "Alternative Execution Due to Deceptive Filenames"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Serialized Data External Linking",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Serialized Data External Linking"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Transparent Proxy Abuse",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Transparent Proxy Abuse:\nWeakness name: Unintended Proxy or Intermediary ('Confused Deputy')\nWeakness description: The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Unintended Proxy or Intermediary ('Confused Deputy')\nWeakness description: The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.\n\n",
      "@Name": "Transparent Proxy Abuse"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Query System for Information",
    "context": "",
    "output": "The weaknesses related to attack pattern Query System for Information are the following: Weakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\n",
      "@Name": "Query System for Information"
    }
  },
  {
    "instruction": "Given attack pattern - UDP Ping, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "UDP Ping"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - XSS Using Doubled Characters",
    "context": "",
    "output": "Weakness name: Doubled Character XSS Manipulations\nWeakness description: The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Doubled Character XSS Manipulations\nWeakness description: The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.\n\n",
      "@Name": "XSS Using Doubled Characters"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Cross Zone Scripting",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: Not Using Complete Mediation\nWeakness description: The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: Not Using Complete Mediation\nWeakness description: The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Cross Zone Scripting"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: WSDL Scanning",
    "context": "",
    "output": "The weaknesses related to attack pattern WSDL Scanning are the following: Weakness name: Insertion of Sensitive Information into Externally-Accessible File or Directory\nWeakness description: The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information into Externally-Accessible File or Directory\nWeakness description: The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.\n\n",
      "@Name": "WSDL Scanning"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Argument Injection",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Expression/Command Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Expression/Command Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Argument Injection"
    }
  },
  {
    "instruction": "Given attack pattern - TCP (ISN) Counter Rate Probe, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP (ISN) Counter Rate Probe"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Hardware Fault Injection",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Protection Against Voltage and Clock Glitches\nWeakness description: The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\nWeakness name: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\nWeakness description: The security-sensitive hardware module contains semiconductor defects.\n\nWeakness name: Improper Restriction of Software Interfaces to Hardware Features\nWeakness description: The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.\n\nWeakness name: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nWeakness description: The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\nWeakness name: Improper Handling of Faults that Lead to Instruction Skips\nWeakness description: The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\nWeakness name: Unauthorized Error Injection Can Degrade Hardware Redundancy\nWeakness description: An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.\n\nWeakness name: Improper Protections Against Hardware Overheating\nWeakness description: A hardware device is missing or has inadequate protection features to prevent overheating.\n\nWeakness name: Improper Handling of Hardware Behavior in Exceptionally Cold Environments\nWeakness description: A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Protection Against Voltage and Clock Glitches\nWeakness description: The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.\n\nWeakness name: Semiconductor Defects in Hardware Logic with Security-Sensitive Implications\nWeakness description: The security-sensitive hardware module contains semiconductor defects.\n\nWeakness name: Improper Restriction of Software Interfaces to Hardware Features\nWeakness description: The product provides software-controllable device functionality for capabilities such as power and clock management, but it does not properly limit functionality that can lead to modification of hardware memory or register bits, or the ability to observe physical side channels.\n\nWeakness name: Improper Protection against Electromagnetic Fault Injection (EM-FI)\nWeakness description: The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.\n\nWeakness name: Improper Handling of Faults that Lead to Instruction Skips\nWeakness description: The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.\n\nWeakness name: Unauthorized Error Injection Can Degrade Hardware Redundancy\nWeakness description: An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.\n\nWeakness name: Improper Protections Against Hardware Overheating\nWeakness description: A hardware device is missing or has inadequate protection features to prevent overheating.\n\nWeakness name: Improper Handling of Hardware Behavior in Exceptionally Cold Environments\nWeakness description: A hardware device, or the firmware running on it, is missing or has incorrect protection features to maintain goals of security primitives when the device is cooled below standard operating temperatures.\n\n",
      "@Name": "Hardware Fault Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Root/Jailbreak Detection Evasion via Hooking",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Root/Jailbreak Detection Evasion via Hooking:\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Root/Jailbreak Detection Evasion via Hooking"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - TCP (ISN) Greatest Common Divisor Probe",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP (ISN) Greatest Common Divisor Probe"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Privilege Abuse",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Improper Access Control in Fabric Bridge\nWeakness description: The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: Improper Access Control in Fabric Bridge\nWeakness description: The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.\n\n",
      "@Name": "Privilege Abuse"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Embedding NULL Bytes",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Null Byte or NUL Character\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Null Byte or NUL Character\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Embedding NULL Bytes"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
    "context": "",
    "output": "The weaknesses related to attack pattern Web Services API Signature Forgery Leveraging Hash Function Extension Weakness are the following: Weakness name: Use of Weak Hash\nWeakness description: The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Weak Hash\nWeakness description: The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).\n\nWeakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
      "@Name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Flash Parameter Injection",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\n",
      "@Name": "Flash Parameter Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: XSS Targeting Non-Script Elements",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern XSS Targeting Non-Script Elements:\nWeakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.\n\n",
      "@Name": "XSS Targeting Non-Script Elements"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Malicious Software Update",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\n",
      "@Name": "Malicious Software Update"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Spear Phishing",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
      "@Name": "Spear Phishing"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: UDP Fragmentation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern UDP Fragmentation:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
      "@Name": "UDP Fragmentation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Open-Source Library Manipulation",
    "context": "",
    "output": "The weaknesses related to attack pattern Open-Source Library Manipulation are the following: Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Open-Source Library Manipulation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: XSS Targeting URI Placeholders",
    "context": "",
    "output": "The weaknesses related to attack pattern XSS Targeting URI Placeholders are the following: Weakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script in Attributes in a Web Page\nWeakness description: The product does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.\n\n",
      "@Name": "XSS Targeting URI Placeholders"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Content Spoofing",
    "context": "",
    "output": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\n",
      "@Name": "Content Spoofing"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Sniff Application Code",
    "context": "",
    "output": "The weaknesses related to attack pattern Sniff Application Code are the following: Weakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Storage of Sensitive Information in Executable\nWeakness description: The product stores sensitive information in cleartext in an executable.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Cleartext Transmission of Sensitive Information\nWeakness description: The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Cleartext Storage of Sensitive Information in Executable\nWeakness description: The product stores sensitive information in cleartext in an executable.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Sniff Application Code"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Privilege Escalation",
    "context": "",
    "output": "The weaknesses related to attack pattern Privilege Escalation are the following: Weakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\nWeakness name: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\nWeakness description: The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Privilege Management\nWeakness description: The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.\n\nWeakness name: Hardware Logic with Insecure De-Synchronization between Control and Data Channels\nWeakness description: The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\n",
      "@Name": "Privilege Escalation"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Weakening of Cellular Encryption",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')\nWeakness description: A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.\n\n",
      "@Name": "Weakening of Cellular Encryption"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Rainbow Table Password Cracking",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Weak Encoding for Password\nWeakness description: Obscuring a password with a trivial encoding does not protect the password.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Use of Password Hash With Insufficient Computational Effort\nWeakness description: The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Weak Encoding for Password\nWeakness description: Obscuring a password with a trivial encoding does not protect the password.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Use of Password Hash With Insufficient Computational Effort\nWeakness description: The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\n",
      "@Name": "Rainbow Table Password Cracking"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Command Line Execution through SQL Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern Command Line Execution through SQL Injection are the following: Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\nWeakness description: The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Process Control\nWeakness description: Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.\n\n",
      "@Name": "Command Line Execution through SQL Injection"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: PHP Local File Inclusion",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern PHP Local File Inclusion:\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "PHP Local File Inclusion"
    }
  },
  {
    "instruction": "Given attack pattern - Postfix, Null Terminate, and Backslash, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Neutralization of Null Byte or NUL Character\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Null Byte or NUL Character\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Postfix, Null Terminate, and Backslash"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Bluetooth Impersonation AttackS (BIAS)",
    "context": "",
    "output": "The weaknesses related to attack pattern Bluetooth Impersonation AttackS (BIAS) are the following: Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Authentication Bypass by Spoofing\nWeakness description: This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.\n\n",
      "@Name": "Bluetooth Impersonation AttackS (BIAS)"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Group Permission Footprinting",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Group Permission Footprinting"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: WiFi SSID Tracking",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\nWeakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\n",
      "@Name": "WiFi SSID Tracking"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Serialized Data Parameter Blowup",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "Serialized Data Parameter Blowup"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Session Fixation",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Session Fixation:\nWeakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Session Fixation\nWeakness description: Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.\n\nWeakness name: Improper Control of a Resource Through its Lifetime\nWeakness description: The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\n",
      "@Name": "Session Fixation"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: ICMP IP 'ID' Field Error Message Probe",
    "context": "",
    "output": "The weaknesses related to attack pattern ICMP IP 'ID' Field Error Message Probe are the following: Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
      "@Name": "ICMP IP 'ID' Field Error Message Probe"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Phishing",
    "context": "",
    "output": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
      "@Name": "Phishing"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Use of Known Kerberos Credentials",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Use of Known Kerberos Credentials:\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Password Hash Instead of Password for Authentication\nWeakness description: The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Improper Restriction of Excessive Authentication Attempts\nWeakness description: The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Reliance on a Single Factor in a Security Decision\nWeakness description: A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Use of Password Hash Instead of Password for Authentication\nWeakness description: The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.\n\n",
      "@Name": "Use of Known Kerberos Credentials"
    }
  },
  {
    "instruction": "Given attack pattern - TCP 'RST' Flag Checksum Probe, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP 'RST' Flag Checksum Probe"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - ICMP Fragmentation",
    "context": "",
    "output": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\nWeakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
      "@Name": "ICMP Fragmentation"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Web Application Fingerprinting",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nWeakness description: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive System Information to an Unauthorized Control Sphere\nWeakness description: The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.\n\n",
      "@Name": "Web Application Fingerprinting"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Manipulating Writeable Terminal Devices",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Manipulating Writeable Terminal Devices:\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\n",
      "@Name": "Manipulating Writeable Terminal Devices"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: String Format Overflow in syslog()",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern String Format Overflow in syslog():\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Use of Externally-Controlled Format String\nWeakness description: The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Use of Externally-Controlled Format String\nWeakness description: The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "String Format Overflow in syslog()"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Server Side Request Forgery",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Server Side Request Forgery:\nWeakness name: Server-Side Request Forgery (SSRF)\nWeakness description: The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Server-Side Request Forgery (SSRF)\nWeakness description: The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Server Side Request Forgery"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Bypassing of Intermediate Forms in Multiple-Form Sets",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Incomplete Internal State Distinction\nWeakness description: The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incomplete Internal State Distinction\nWeakness description: The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.\n\n",
      "@Name": "Bypassing of Intermediate Forms in Multiple-Form Sets"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Electromagnetic Side-Channel Attack",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Electromagnetic Side-Channel Attack:\nWeakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insertion of Sensitive Information Into Sent Data\nWeakness description: The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.\n\n",
      "@Name": "Electromagnetic Side-Channel Attack"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Tapjacking",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Tapjacking:\nWeakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Tapjacking"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Collect Data from Screen Capture",
    "context": "",
    "output": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Privilege Defined With Unsafe Actions\nWeakness description: A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.\n\n",
      "@Name": "Collect Data from Screen Capture"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Overflow Variables and Tags",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Overflow Variables and Tags"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Relative Path Traversal",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Relative Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Relative Path Traversal\nWeakness description: The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory.\n\n",
      "@Name": "Relative Path Traversal"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Resource Location Spoofing",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
      "@Name": "Resource Location Spoofing"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Manipulating State",
    "context": "",
    "output": "The weaknesses related to attack pattern Manipulating State are the following: Weakness name: Incomplete Internal State Distinction\nWeakness description: The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Improper Finite State Machines (FSMs) in Hardware Logic\nWeakness description: Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.\n\nWeakness name: Incorrect Selection of Fuse Values\nWeakness description: The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.\n\nWeakness name: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nWeakness description: During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.\n\nWeakness name: Uninitialized Value on Reset for Registers Holding Security Settings\nWeakness description: Security-critical logic is not set to a known value on reset.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incomplete Internal State Distinction\nWeakness description: The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.\n\nWeakness name: Cleartext Storage of Sensitive Information in a Cookie\nWeakness description: The product stores sensitive information in cleartext in a cookie.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Improper Finite State Machines (FSMs) in Hardware Logic\nWeakness description: Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.\n\nWeakness name: Incorrect Selection of Fuse Values\nWeakness description: The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.\n\nWeakness name: Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls\nWeakness description: During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.\n\nWeakness name: Uninitialized Value on Reset for Registers Holding Security Settings\nWeakness description: Security-critical logic is not set to a known value on reset.\n\n",
      "@Name": "Manipulating State"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: DNS Rebinding",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
      "@Name": "DNS Rebinding"
    }
  },
  {
    "instruction": "Given attack pattern - Cross-Site Scripting (XSS), what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\nWeakness description: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Cross-Site Scripting (XSS)"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Manipulating User-Controlled Variables",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: PHP External Variable Modification\nWeakness description: A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\nWeakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: PHP External Variable Modification\nWeakness description: A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\n",
      "@Name": "Manipulating User-Controlled Variables"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Create Malicious Client",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Create Malicious Client:\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\n",
      "@Name": "Create Malicious Client"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: UDP Flood",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "UDP Flood"
    }
  },
  {
    "instruction": "Given attack pattern - Detect Unpublicized Web Services, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Direct Request ('Forced Browsing')\nWeakness description: The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.\n\n",
      "@Name": "Detect Unpublicized Web Services"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: System Footprinting",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\nWeakness name: Observable Behavioral Discrepancy\nWeakness description: The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\nWeakness name: Observable Behavioral Discrepancy\nWeakness description: The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
      "@Name": "System Footprinting"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Windows ::DATA Alternate Data Stream",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Removal of Sensitive Information Before Storage or Transfer\nWeakness description: The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\nWeakness name: Improper Handling of Windows ::DATA Alternate Data Stream\nWeakness description: The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Removal of Sensitive Information Before Storage or Transfer\nWeakness description: The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.\n\nWeakness name: Improper Handling of Windows ::DATA Alternate Data Stream\nWeakness description: The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).\n\n",
      "@Name": "Windows ::DATA Alternate Data Stream"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Reflection Injection",
    "context": "",
    "output": "Weakness name: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\nWeakness description: The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')\nWeakness description: The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.\n\n",
      "@Name": "Reflection Injection"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Intent Spoof",
    "context": "",
    "output": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control\nWeakness description: The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.\n\n",
      "@Name": "Intent Spoof"
    }
  },
  {
    "instruction": "Given attack pattern - Accessing Functionality Not Properly Constrained by ACLs, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Unrestricted Upload of File with Dangerous Type\nWeakness description: The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: On-Chip Debug and Test Interface With Improper Access Control\nWeakness description: The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\nWeakness name: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\nWeakness description: The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.\n\nWeakness name: Insufficient Granularity of Access Control\nWeakness description: The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\n\nWeakness name: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\nWeakness description: The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\nWeakness name: Missing Write Protection for Parametric Data Values\nWeakness description: The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.\n\nWeakness name: Improper Setting of Bus Controlling Capability in Fabric End-point\nWeakness description: The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.\n\nWeakness name: Missing Support for Security Features in On-chip Fabrics or Buses\nWeakness description: On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.\n\nWeakness name: Improper Protection for Outbound Error Messages and Alert Signals\nWeakness description: Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\nWeakness name: Binding to an Unrestricted IP Address\nWeakness description: The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\nWeakness name: Unrestricted Upload of File with Dangerous Type\nWeakness description: The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\nWeakness name: Incorrect Permission Assignment for Critical Resource\nWeakness description: The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.\n\nWeakness name: On-Chip Debug and Test Interface With Improper Access Control\nWeakness description: The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.\n\nWeakness name: Power-On of Untrusted Execution Core Before Enabling Fabric Access Control\nWeakness description: The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.\n\nWeakness name: Insufficient Granularity of Access Control\nWeakness description: The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.\n\nWeakness name: Unprotected Confidential Information on Device is Accessible by OSAT Vendors\nWeakness description: The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.\n\nWeakness name: Improper Translation of Security Attributes by Fabric Bridge\nWeakness description: The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.\n\nWeakness name: Missing Write Protection for Parametric Data Values\nWeakness description: The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.\n\nWeakness name: Improper Setting of Bus Controlling Capability in Fabric End-point\nWeakness description: The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.\n\nWeakness name: Missing Support for Security Features in On-chip Fabrics or Buses\nWeakness description: On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control.\n\nWeakness name: Improper Protection for Outbound Error Messages and Alert Signals\nWeakness description: Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\nWeakness name: Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')\nWeakness description: The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.\n\nWeakness name: Binding to an Unrestricted IP Address\nWeakness description: The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.\n\n",
      "@Name": "Accessing Functionality Not Properly Constrained by ACLs"
    }
  },
  {
    "instruction": "Given attack pattern - Reflection Attack in Authentication Protocol, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Reflection Attack in an Authentication Protocol\nWeakness description: Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.\n\nWeakness name: Incorrect Implementation of Authentication Algorithm\nWeakness description: The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Reflection Attack in an Authentication Protocol\nWeakness description: Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.\n\nWeakness name: Incorrect Implementation of Authentication Algorithm\nWeakness description: The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.\n\n",
      "@Name": "Reflection Attack in Authentication Protocol"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Force Use of Corrupted Files",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Force Use of Corrupted Files"
    }
  },
  {
    "instruction": "Given attack pattern - Using Escaped Slashes in Alternate Encoding, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Incorrect Behavior Order: Validate Before Canonicalize\nWeakness description: The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.\n\nWeakness name: Incorrect Behavior Order: Validate Before Filter\nWeakness description: The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\nWeakness name: Encoding Error\nWeakness description: The product does not properly encode or decode the data, resulting in unexpected values.\n\nWeakness name: External Control of File Name or Path\nWeakness description: The product allows user input to control or influence paths or file names that are used in filesystem operations.\n\nWeakness name: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\nWeakness description: The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "Using Escaped Slashes in Alternate Encoding"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Cross-Domain Search Timing",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Cross-Domain Search Timing:\nWeakness name: Covert Timing Channel\nWeakness description: Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.\n\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Covert Timing Channel\nWeakness description: Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.\n\nWeakness name: Cross-Site Request Forgery (CSRF)\nWeakness description: The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
      "@Name": "Cross-Domain Search Timing"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Network Topology Mapping",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Network Topology Mapping"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Host Discovery",
    "context": "",
    "output": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Host Discovery"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Fuzzing for garnering other adjacent user/sensitive data",
    "context": "",
    "output": "The weaknesses related to attack pattern Fuzzing for garnering other adjacent user/sensitive data are the following: Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\n",
      "@Name": "Fuzzing for garnering other adjacent user/sensitive data"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Retrieve Data from Decommissioned Devices",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Retrieve Data from Decommissioned Devices:\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\n",
      "@Name": "Retrieve Data from Decommissioned Devices"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Windows Admin Shares with Stolen Credentials",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Windows Admin Shares with Stolen Credentials:\nWeakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
      "@Name": "Windows Admin Shares with Stolen Credentials"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Lifting Sensitive Data Embedded in Cache",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Use of Cache Containing Sensitive Information\nWeakness description: The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Cache Containing Sensitive Information\nWeakness description: The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\n",
      "@Name": "Lifting Sensitive Data Embedded in Cache"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Repo Jacking",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Repo Jacking:\nWeakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Download of Code Without Integrity Check\nWeakness description: The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.\n\nWeakness name: Inclusion of Functionality from Untrusted Control Sphere\nWeakness description: The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.\n\n",
      "@Name": "Repo Jacking"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Web Server Logs Tampering",
    "context": "",
    "output": "The weaknesses related to attack pattern Web Server Logs Tampering are the following: Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\nWeakness name: Improper Neutralization of CRLF Sequences ('CRLF Injection')\nWeakness description: The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\nWeakness name: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)\nWeakness description: The product does not adequately filter user-controlled input for special elements with control implications.\n\nWeakness name: Information Loss or Omission\nWeakness description: The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\nWeakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Incorrect Execution-Assigned Permissions\nWeakness description: While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Output Neutralization for Logs\nWeakness description: The product does not neutralize or incorrectly neutralizes output that is written to logs.\n\nWeakness name: Improper Neutralization of CRLF Sequences ('CRLF Injection')\nWeakness description: The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\nWeakness name: Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)\nWeakness description: The product does not adequately filter user-controlled input for special elements with control implications.\n\nWeakness name: Information Loss or Omission\nWeakness description: The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Escape, Meta, or Control Sequences\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.\n\nWeakness name: Incorrect Default Permissions\nWeakness description: During installation, installed file permissions are set to allow anyone to modify those files.\n\nWeakness name: Incorrect Execution-Assigned Permissions\nWeakness description: While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.\n\nWeakness name: Improper Encoding or Escaping of Output\nWeakness description: The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.\n\n",
      "@Name": "Web Server Logs Tampering"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Flash File Overlay",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Restriction of Rendered UI Layers or Frames\nWeakness description: The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.\n\n",
      "@Name": "Flash File Overlay"
    }
  },
  {
    "instruction": "Given attack pattern - Buffer Overflow via Environment Variables, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')\nWeakness description: The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.\n\nWeakness name: Authentication Bypass by Assumed-Immutable Data\nWeakness description: The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.\n\nWeakness name: Incorrect Access of Indexable Resource ('Range Error')\nWeakness description: The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.\n\nWeakness name: Improper Restriction of Operations within the Bounds of a Memory Buffer\nWeakness description: The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Control of Resource Identifiers ('Resource Injection')\nWeakness description: The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Integer Overflow to Buffer Overflow\nWeakness description: The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.\n\nWeakness name: Compiler Optimization Removal or Modification of Security-critical Code\nWeakness description: The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Buffer Overflow via Environment Variables"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Collect Data from Registries",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authorization\nWeakness description: The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.\n\n",
      "@Name": "Collect Data from Registries"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Explore for Predictable Temporary File Names",
    "context": "",
    "output": "The weaknesses related to attack pattern Explore for Predictable Temporary File Names are the following: Weakness name: Insecure Temporary File\nWeakness description: Creating and using insecure temporary files can leave application and system data vulnerable to attack.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insecure Temporary File\nWeakness description: Creating and using insecure temporary files can leave application and system data vulnerable to attack.\n\n",
      "@Name": "Explore for Predictable Temporary File Names"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Application Fingerprinting",
    "context": "",
    "output": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\nWeakness name: Observable Behavioral Discrepancy\nWeakness description: The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\nWeakness name: Observable Behavioral Discrepancy\nWeakness description: The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.\n\nWeakness name: Observable Timing Discrepancy\nWeakness description: Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\n",
      "@Name": "Application Fingerprinting"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Eavesdropping",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Eavesdropping:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Eavesdropping"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Target Programs with Elevated Privileges",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Target Programs with Elevated Privileges:\nWeakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Execution with Unnecessary Privileges\nWeakness description: The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.\n\nWeakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Target Programs with Elevated Privileges"
    }
  },
  {
    "instruction": "Given attack pattern - HTTP Parameter Pollution (HPP), what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Improper Neutralization of Input Terminators\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.\n\nWeakness name: Improper Handling of Extra Parameters\nWeakness description: The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')\nWeakness description: The product constructs a string for a command to be executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string.\n\nWeakness name: Improper Neutralization of Input Terminators\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.\n\nWeakness name: Improper Handling of Extra Parameters\nWeakness description: The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.\n\n",
      "@Name": "HTTP Parameter Pollution (HPP)"
    }
  },
  {
    "instruction": "Given attack pattern - Sniffing Attacks, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Sniffing Attacks"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Leverage Executable Code in Non-Executable Files",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Leverage Executable Code in Non-Executable Files:\nWeakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).\n\nWeakness name: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nWeakness description: The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Ownership Management\nWeakness description: The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\nWeakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Control of Generation of Code ('Code Injection')\nWeakness description: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.\n\nWeakness name: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.\n\nWeakness name: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval).\n\nWeakness name: Improper Neutralization of Server-Side Includes (SSI) Within a Web Page\nWeakness description: The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.\n\nWeakness name: Least Privilege Violation\nWeakness description: The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.\n\nWeakness name: Improper Link Resolution Before File Access ('Link Following')\nWeakness description: The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.\n\nWeakness name: Improper Ownership Management\nWeakness description: The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.\n\nWeakness name: Privilege Context Switching Error\nWeakness description: The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.\n\n",
      "@Name": "Leverage Executable Code in Non-Executable Files"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Black Box Reverse Engineering",
    "context": "",
    "output": "The weaknesses related to attack pattern Black Box Reverse Engineering are the following: Weakness name: Observable Discrepancy\nWeakness description: The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\nWeakness name: Comparison Logic is Vulnerable to Power Side-Channel Attacks\nWeakness description: A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.\n\nWeakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Discrepancy\nWeakness description: The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.\n\nWeakness name: Comparison Logic is Vulnerable to Power Side-Channel Attacks\nWeakness description: A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.\n\nWeakness name: Improper Protection of Physical Side Channels\nWeakness description: The device does not contain sufficient protection mechanisms to prevent physical side channels from exposing sensitive information due to patterns in physically observable phenomena such as variations in power consumption, electromagnetic emissions (EME), or acoustic emissions.\n\n",
      "@Name": "Black Box Reverse Engineering"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "context": "",
    "output": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Channel Accessible by Non-Endpoint\nWeakness description: The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.\n\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data"
    }
  },
  {
    "instruction": "Tell me CWEs associated with the attack pattern: Fuzzing for application mapping",
    "context": "",
    "output": "Sure. Here are the CWEs associated with the requested attack pattern:\nWeakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Insertion of Sensitive Information into Log File\nWeakness description: Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Generation of Error Message Containing Sensitive Information\nWeakness description: The product generates an error message that includes sensitive information about its environment, users, or associated data.\n\nWeakness name: Insertion of Sensitive Information into Log File\nWeakness description: Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.\n\n",
      "@Name": "Fuzzing for application mapping"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: TCP ACK Ping",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "TCP ACK Ping"
    }
  },
  {
    "instruction": "Given attack pattern - ICMP IP Total Length Field Probe, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Observable Response Discrepancy\nWeakness description: The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.\n\n",
      "@Name": "ICMP IP Total Length Field Probe"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - SOAP Array Overflow",
    "context": "",
    "output": "Weakness name: Buffer Access with Incorrect Length Value\nWeakness description: The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Buffer Access with Incorrect Length Value\nWeakness description: The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.\n\n",
      "@Name": "SOAP Array Overflow"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Authentication Bypass",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
      "@Name": "Authentication Bypass"
    }
  },
  {
    "instruction": "Given attack pattern - Action Spoofing, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: User Interface (UI) Misrepresentation of Critical Information\nWeakness description: The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.\n\n",
      "@Name": "Action Spoofing"
    }
  },
  {
    "instruction": "Given attack pattern - XML Ping of the Death, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Uncontrolled Resource Consumption\nWeakness description: The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.\n\nWeakness name: Allocation of Resources Without Limits or Throttling\nWeakness description: The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.\n\n",
      "@Name": "XML Ping of the Death"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Kerberoasting",
    "context": "",
    "output": "The weaknesses related to attack pattern Kerberoasting are the following: Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficiently Protected Credentials\nWeakness description: The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.\n\nWeakness name: Use of Single-factor Authentication\nWeakness description: The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.\n\nWeakness name: Use of Password System for Primary Authentication\nWeakness description: The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.\n\nWeakness name: Authentication Bypass by Capture-replay\nWeakness description: A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).\n\nWeakness name: Password Aging with Long Expiration\nWeakness description: The product supports password aging, but the expiration period is too long.\n\nWeakness name: Not Using Password Aging\nWeakness description: The product does not have a mechanism in place for managing password aging.\n\nWeakness name: Weak Password Requirements\nWeakness description: The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.\n\n",
      "@Name": "Kerberoasting"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Timestamp Request",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Exposure of Sensitive Information to an Unauthorized Actor\nWeakness description: The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.\n\n",
      "@Name": "Timestamp Request"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Exploitation of Thunderbolt Protection Flaws",
    "context": "",
    "output": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Authentication Bypass Using an Alternate Path or Channel\nWeakness description: A product requires authentication, but the product has an alternate path or channel that does not require authentication.\n\nWeakness name: Insecure Default Initialization of Resource\nWeakness description: The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.\n\nWeakness name: Missing Authorization\nWeakness description: The product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Missing Support for Integrity Check\nWeakness description: The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.\n\nWeakness name: Authentication Bypass Using an Alternate Path or Channel\nWeakness description: A product requires authentication, but the product has an alternate path or channel that does not require authentication.\n\nWeakness name: Insecure Default Initialization of Resource\nWeakness description: The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.\n\nWeakness name: Missing Authorization\nWeakness description: The product does not perform an authorization check when an actor attempts to access a resource or perform an action.\n\n",
      "@Name": "Exploitation of Thunderbolt Protection Flaws"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Pull Data from System Resources",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Pull Data from System Resources:\nWeakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Sensitive Non-Volatile Information Not Protected During Debug\nWeakness description: Access to security-sensitive information stored in fuses is not limited during debug.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Zeroization of Hardware Register\nWeakness description: The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.\n\nWeakness name: Sensitive Non-Volatile Information Not Protected During Debug\nWeakness description: Access to security-sensitive information stored in fuses is not limited during debug.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Improper Scrubbing of Sensitive Data from Decommissioned Device\nWeakness description: The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect.\n\nWeakness name: Sensitive Information Uncleared Before Debug/Power State Transition\nWeakness description: The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.\n\nWeakness name: Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques\nWeakness description: Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.\n\nWeakness name: Improper Management of Sensitive Trace Data\nWeakness description: Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents.\n\nWeakness name: Exposure of Sensitive System Information Due to Uncleared Debug Information\nWeakness description: The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.\n\nWeakness name: Remanent Data Readable after Memory Erase\nWeakness description: Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.\n\n",
      "@Name": "Pull Data from System Resources"
    }
  },
  {
    "instruction": "Given attack pattern - Resource Leak Exposure, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Resource Shutdown or Release\nWeakness description: The product does not release or incorrectly releases a resource before it is made available for re-use.\n\n",
      "@Name": "Resource Leak Exposure"
    }
  },
  {
    "instruction": "Given attack pattern - Identity Spoofing, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Authentication\nWeakness description: When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.\n\n",
      "@Name": "Identity Spoofing"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Format String Injection",
    "context": "",
    "output": "Weakness name: Use of Externally-Controlled Format String\nWeakness description: The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Use of Externally-Controlled Format String\nWeakness description: The product uses a function that accepts a format string as an argument, but the format string originates from an external source.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\n",
      "@Name": "Format String Injection"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Application API Message Manipulation via Man-in-the-Middle",
    "context": "",
    "output": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Modification of Assumed-Immutable Data (MAID)\nWeakness description: The product does not properly protect an assumed-immutable element from being modified by an attacker.\n\nWeakness name: Insufficient Verification of Data Authenticity\nWeakness description: The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.\n\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Client-Side Enforcement of Server-Side Security\nWeakness description: The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.\n\nWeakness name: Missing Encryption of Sensitive Data\nWeakness description: The product does not encrypt sensitive or critical information before storage or transmission.\n\n",
      "@Name": "Application API Message Manipulation via Man-in-the-Middle"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - XSS Targeting Error Pages",
    "context": "",
    "output": "Weakness name: Improper Neutralization of Script in an Error Message Web Page\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Script in an Error Message Web Page\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.\n\n",
      "@Name": "XSS Targeting Error Pages"
    }
  },
  {
    "instruction": "Provide the list of weaknesses for attack pattern: Pharming",
    "context": "",
    "output": "Here is the list of weaknesses (CWEs) for attack pattern Pharming:\nWeakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Origin Validation Error\nWeakness description: The product does not properly verify that the source of data or communication is valid.\n\nWeakness name: Reliance on Reverse DNS Resolution for a Security-Critical Action\nWeakness description: The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.\n\n",
      "@Name": "Pharming"
    }
  },
  {
    "instruction": "Given attack pattern - Using Alternative IP Address Encodings, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Reliance on IP Address for Authentication\nWeakness description: The product uses an IP address for authentication.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Reliance on IP Address for Authentication\nWeakness description: The product uses an IP address for authentication.\n\nWeakness name: Improper Handling of Alternate Encoding\nWeakness description: The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.\n\n",
      "@Name": "Using Alternative IP Address Encodings"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: Functionality Bypass",
    "context": "",
    "output": "The weaknesses related to attack pattern Functionality Bypass are the following: Weakness name: Improper Protection of Alternate Path\nWeakness description: The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.\n\nWeakness name: Missing Protection Mechanism for Alternate Hardware Interface\nWeakness description: The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Protection of Alternate Path\nWeakness description: The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.\n\nWeakness name: Missing Protection Mechanism for Alternate Hardware Interface\nWeakness description: The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path.\n\n",
      "@Name": "Functionality Bypass"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Infected Memory",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nWeakness description: Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\nWeakness name: Improper Handling of Overlap Between Protected Memory Ranges\nWeakness description: The product allows address regions to overlap, which can result in the bypassing of intended memory protection.\n\nWeakness name: Improper Access Control for Volatile Memory Containing Boot Code\nWeakness description: The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.\n\nWeakness name: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nWeakness description: The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.\n\nWeakness name: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nWeakness description: The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Access Control Applied to Mirrored or Aliased Memory Regions\nWeakness description: Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\nWeakness name: Improper Handling of Overlap Between Protected Memory Ranges\nWeakness description: The product allows address regions to overlap, which can result in the bypassing of intended memory protection.\n\nWeakness name: Improper Access Control for Volatile Memory Containing Boot Code\nWeakness description: The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.\n\nWeakness name: Missing Protection for Mirrored Regions in On-Chip Fabric Firewall\nWeakness description: The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.\n\nWeakness name: Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges\nWeakness description: The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.\n\n",
      "@Name": "Infected Memory"
    }
  },
  {
    "instruction": "Given attack pattern - Command Delimiters, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Improper Neutralization of Expression/Command Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Improper Neutralization of CRLF Sequences ('CRLF Injection')\nWeakness description: The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\nWeakness name: Improper Neutralization of Delimiters\nWeakness description: The product does not neutralize or incorrectly neutralizes delimiters.\n\nWeakness name: Failure to Sanitize Paired Delimiters\nWeakness description: The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Variable Name Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Improper Neutralization of Expression/Command Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Special Elements used in a Command ('Command Injection')\nWeakness description: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.\n\nWeakness name: Incomplete List of Disallowed Inputs\nWeakness description: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.\n\nWeakness name: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\nWeakness description: The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.\n\nWeakness name: Incorrect Regular Expression\nWeakness description: The product specifies a regular expression in a way that causes data to be improperly matched or compared.\n\nWeakness name: Improper Neutralization of CRLF Sequences ('CRLF Injection')\nWeakness description: The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.\n\nWeakness name: Improper Neutralization of Delimiters\nWeakness description: The product does not neutralize or incorrectly neutralizes delimiters.\n\nWeakness name: Failure to Sanitize Paired Delimiters\nWeakness description: The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.\n\nWeakness name: Improper Neutralization of Special Elements\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.\n\nWeakness name: Improper Neutralization of Variable Name Delimiters\nWeakness description: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.\n\nWeakness name: Incorrect Comparison\nWeakness description: The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.\n\n",
      "@Name": "Command Delimiters"
    }
  },
  {
    "instruction": "Given attack pattern - Replace Winlogon Helper DLL, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: External Control of System or Configuration Setting\nWeakness description: One or more system settings or configuration elements can be externally controlled by a user.\n\n",
      "@Name": "Replace Winlogon Helper DLL"
    }
  },
  {
    "instruction": "What are the weaknesses related to the CAPEC: XML Injection",
    "context": "",
    "output": "The weaknesses related to attack pattern XML Injection are the following: Weakness name: XML Injection (aka Blind XPath Injection)\nWeakness description: The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: XML Injection (aka Blind XPath Injection)\nWeakness description: The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.\n\nWeakness name: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')\nWeakness description: The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.\n\nWeakness name: Improper Input Validation\nWeakness description: The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.\n\nWeakness name: Improper Neutralization\nWeakness description: The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.\n\n",
      "@Name": "XML Injection"
    }
  },
  {
    "instruction": "Given attack pattern - Leveraging/Manipulating Configuration File Search Paths, what CWEs are associated with that attack pattern",
    "context": "",
    "output": "The associated CWEs to the attack pattern are: Weakness name: Untrusted Search Path\nWeakness description: The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.\n\nWeakness name: Uncontrolled Search Path Element\nWeakness description: The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Untrusted Search Path\nWeakness description: The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.\n\nWeakness name: Uncontrolled Search Path Element\nWeakness description: The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.\n\n",
      "@Name": "Leveraging/Manipulating Configuration File Search Paths"
    }
  },
  {
    "instruction": "List the Common Weakness Enumeration (CWEs) relevant for attack pattern: Escaping Virtualization",
    "context": "",
    "output": "Relevant Common Weakness Enumeration:\nWeakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Protection Mechanism Failure\nWeakness description: The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.\n\n",
      "@Name": "Escaping Virtualization"
    }
  },
  {
    "instruction": "Weaknesses for attack pattern - Force the System to Reset Values",
    "context": "",
    "output": "Weakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Incorrect Register Defaults or Module Parameters\nWeakness description: Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.\n\nWeakness name: Improper Lock Behavior After Power State Transition\nWeakness description: Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.\n\n",
    "category": "CAPECFlan",
    "instruction_type": "capec_related_cwes",
    "parsed_raw_data": {
      "Related_Weaknesses": "Weakness name: Missing Authentication for Critical Function\nWeakness description: The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.\n\nWeakness name: Incorrect Register Defaults or Module Parameters\nWeakness description: Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.\n\nWeakness name: Improper Lock Behavior After Power State Transition\nWeakness description: Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.\n\n",
      "@Name": "Force the System to Reset Values"
    }
  }
]